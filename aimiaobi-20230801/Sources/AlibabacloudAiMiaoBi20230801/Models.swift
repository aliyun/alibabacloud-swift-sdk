import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class WritingStyleTemplateDefine : Tea.TeaModel {
    public class Example : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var example: [WritingStyleTemplateDefine.Example]?

    public var fields: [WritingStyleTemplateField]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.example != nil {
            var tmp : [Any] = []
            for k in self.example! {
                tmp.append(k.toMap())
            }
            map["Example"] = tmp
        }
        if self.fields != nil {
            var tmp : [Any] = []
            for k in self.fields! {
                tmp.append(k.toMap())
            }
            map["Fields"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Example"] as? [Any?] {
            var tmp : [WritingStyleTemplateDefine.Example] = []
            for v in value {
                if v != nil {
                    var model = WritingStyleTemplateDefine.Example()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.example = tmp
        }
        if let value = dict["Fields"] as? [Any?] {
            var tmp : [WritingStyleTemplateField] = []
            for v in value {
                if v != nil {
                    var model = WritingStyleTemplateField()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.fields = tmp
        }
    }
}

public class WritingStyleTemplateField : Tea.TeaModel {
    public class Enums : Tea.TeaModel {
        public var cascadingFields: [String]?

        public var key: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cascadingFields != nil {
                map["CascadingFields"] = self.cascadingFields!
            }
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CascadingFields"] as? [String] {
                self.cascadingFields = value
            }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public class Style : Tea.TeaModel {
        public var description_: String?

        public var format: String?

        public var placeholder: String?

        public var showTime: Bool?

        public var suffix: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.format != nil {
                map["Format"] = self.format!
            }
            if self.placeholder != nil {
                map["Placeholder"] = self.placeholder!
            }
            if self.showTime != nil {
                map["ShowTime"] = self.showTime!
            }
            if self.suffix != nil {
                map["Suffix"] = self.suffix!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Format"] as? String {
                self.format = value
            }
            if let value = dict["Placeholder"] as? String {
                self.placeholder = value
            }
            if let value = dict["ShowTime"] as? Bool {
                self.showTime = value
            }
            if let value = dict["Suffix"] as? String {
                self.suffix = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var buildIn: Bool?

    public var cascadingFields: [WritingStyleTemplateField]?

    public var enums: [WritingStyleTemplateField.Enums]?

    public var initialValue: String?

    public var key: String?

    public var max: Double?

    public var maxItem: Int32?

    public var maxItemLength: Int32?

    public var maxLength: Int32?

    public var min: Double?

    public var minItemLength: Int32?

    public var minLength: Int32?

    public var name: String?

    public var required_: Bool?

    public var style: WritingStyleTemplateField.Style?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.style?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.buildIn != nil {
            map["BuildIn"] = self.buildIn!
        }
        if self.cascadingFields != nil {
            var tmp : [Any] = []
            for k in self.cascadingFields! {
                tmp.append(k.toMap())
            }
            map["CascadingFields"] = tmp
        }
        if self.enums != nil {
            var tmp : [Any] = []
            for k in self.enums! {
                tmp.append(k.toMap())
            }
            map["Enums"] = tmp
        }
        if self.initialValue != nil {
            map["InitialValue"] = self.initialValue!
        }
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.max != nil {
            map["Max"] = self.max!
        }
        if self.maxItem != nil {
            map["MaxItem"] = self.maxItem!
        }
        if self.maxItemLength != nil {
            map["MaxItemLength"] = self.maxItemLength!
        }
        if self.maxLength != nil {
            map["MaxLength"] = self.maxLength!
        }
        if self.min != nil {
            map["Min"] = self.min!
        }
        if self.minItemLength != nil {
            map["MinItemLength"] = self.minItemLength!
        }
        if self.minLength != nil {
            map["MinLength"] = self.minLength!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.required_ != nil {
            map["Required"] = self.required_!
        }
        if self.style != nil {
            map["Style"] = self.style?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BuildIn"] as? Bool {
            self.buildIn = value
        }
        if let value = dict["CascadingFields"] as? [Any?] {
            var tmp : [WritingStyleTemplateField] = []
            for v in value {
                if v != nil {
                    var model = WritingStyleTemplateField()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.cascadingFields = tmp
        }
        if let value = dict["Enums"] as? [Any?] {
            var tmp : [WritingStyleTemplateField.Enums] = []
            for v in value {
                if v != nil {
                    var model = WritingStyleTemplateField.Enums()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.enums = tmp
        }
        if let value = dict["InitialValue"] as? String {
            self.initialValue = value
        }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Max"] as? Double {
            self.max = value
        }
        if let value = dict["MaxItem"] as? Int32 {
            self.maxItem = value
        }
        if let value = dict["MaxItemLength"] as? Int32 {
            self.maxItemLength = value
        }
        if let value = dict["MaxLength"] as? Int32 {
            self.maxLength = value
        }
        if let value = dict["Min"] as? Double {
            self.min = value
        }
        if let value = dict["MinItemLength"] as? Int32 {
            self.minItemLength = value
        }
        if let value = dict["MinLength"] as? Int32 {
            self.minLength = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Required"] as? Bool {
            self.required_ = value
        }
        if let value = dict["Style"] as? [String: Any?] {
            var model = WritingStyleTemplateField.Style()
            model.fromMap(value)
            self.style = model
        }
    }
}

public class AddDatasetDocumentRequest : Tea.TeaModel {
    public class Document : Tea.TeaModel {
        public class MultimodalMedias : Tea.TeaModel {
            public var fileUrl: String?

            public var mediaId: String?

            public var mediaType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileUrl != nil {
                    map["FileUrl"] = self.fileUrl!
                }
                if self.mediaId != nil {
                    map["MediaId"] = self.mediaId!
                }
                if self.mediaType != nil {
                    map["MediaType"] = self.mediaType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FileUrl"] as? String {
                    self.fileUrl = value
                }
                if let value = dict["MediaId"] as? String {
                    self.mediaId = value
                }
                if let value = dict["MediaType"] as? String {
                    self.mediaType = value
                }
            }
        }
        public var content: String?

        public var disableHandleMultimodalMedia: Bool?

        public var docId: String?

        public var docType: String?

        public var docUuid: String?

        public var extend1: String?

        public var extend2: String?

        public var extend3: String?

        public var multimodalIndexName: String?

        public var multimodalMedias: [AddDatasetDocumentRequest.Document.MultimodalMedias]?

        public var pubTime: String?

        public var sourceFrom: String?

        public var summary: String?

        public var title: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.disableHandleMultimodalMedia != nil {
                map["DisableHandleMultimodalMedia"] = self.disableHandleMultimodalMedia!
            }
            if self.docId != nil {
                map["DocId"] = self.docId!
            }
            if self.docType != nil {
                map["DocType"] = self.docType!
            }
            if self.docUuid != nil {
                map["DocUuid"] = self.docUuid!
            }
            if self.extend1 != nil {
                map["Extend1"] = self.extend1!
            }
            if self.extend2 != nil {
                map["Extend2"] = self.extend2!
            }
            if self.extend3 != nil {
                map["Extend3"] = self.extend3!
            }
            if self.multimodalIndexName != nil {
                map["MultimodalIndexName"] = self.multimodalIndexName!
            }
            if self.multimodalMedias != nil {
                var tmp : [Any] = []
                for k in self.multimodalMedias! {
                    tmp.append(k.toMap())
                }
                map["MultimodalMedias"] = tmp
            }
            if self.pubTime != nil {
                map["PubTime"] = self.pubTime!
            }
            if self.sourceFrom != nil {
                map["SourceFrom"] = self.sourceFrom!
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["DisableHandleMultimodalMedia"] as? Bool {
                self.disableHandleMultimodalMedia = value
            }
            if let value = dict["DocId"] as? String {
                self.docId = value
            }
            if let value = dict["DocType"] as? String {
                self.docType = value
            }
            if let value = dict["DocUuid"] as? String {
                self.docUuid = value
            }
            if let value = dict["Extend1"] as? String {
                self.extend1 = value
            }
            if let value = dict["Extend2"] as? String {
                self.extend2 = value
            }
            if let value = dict["Extend3"] as? String {
                self.extend3 = value
            }
            if let value = dict["MultimodalIndexName"] as? String {
                self.multimodalIndexName = value
            }
            if let value = dict["MultimodalMedias"] as? [Any?] {
                var tmp : [AddDatasetDocumentRequest.Document.MultimodalMedias] = []
                for v in value {
                    if v != nil {
                        var model = AddDatasetDocumentRequest.Document.MultimodalMedias()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.multimodalMedias = tmp
            }
            if let value = dict["PubTime"] as? String {
                self.pubTime = value
            }
            if let value = dict["SourceFrom"] as? String {
                self.sourceFrom = value
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var datasetId: Int64?

    public var datasetName: String?

    public var document: AddDatasetDocumentRequest.Document?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.document?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.document != nil {
            map["Document"] = self.document?.toMap()
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["Document"] as? [String: Any?] {
            var model = AddDatasetDocumentRequest.Document()
            model.fromMap(value)
            self.document = model
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class AddDatasetDocumentShrinkRequest : Tea.TeaModel {
    public var datasetId: Int64?

    public var datasetName: String?

    public var documentShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.documentShrink != nil {
            map["Document"] = self.documentShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["Document"] as? String {
            self.documentShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class AddDatasetDocumentResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var docId: String?

        public var docUuid: String?

        public var errorCode: String?

        public var errorMessage: String?

        public var status: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.docId != nil {
                map["DocId"] = self.docId!
            }
            if self.docUuid != nil {
                map["DocUuid"] = self.docUuid!
            }
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DocId"] as? String {
                self.docId = value
            }
            if let value = dict["DocUuid"] as? String {
                self.docUuid = value
            }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
        }
    }
    public var code: String?

    public var data: AddDatasetDocumentResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = AddDatasetDocumentResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddDatasetDocumentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddDatasetDocumentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddDatasetDocumentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CancelAsyncTaskRequest : Tea.TeaModel {
    public var agentKey: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class CancelAsyncTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CancelAsyncTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CancelAsyncTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CancelAsyncTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CancelAuditTaskRequest : Tea.TeaModel {
    public var articleId: String?

    public var contentAuditTaskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.articleId != nil {
            map["ArticleId"] = self.articleId!
        }
        if self.contentAuditTaskId != nil {
            map["ContentAuditTaskId"] = self.contentAuditTaskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ArticleId"] as? String {
            self.articleId = value
        }
        if let value = dict["ContentAuditTaskId"] as? String {
            self.contentAuditTaskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class CancelAuditTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CancelAuditTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CancelAuditTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CancelAuditTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ClearIntervenesRequest : Tea.TeaModel {
    public var agentKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
    }
}

public class ClearIntervenesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var code: Int32?

        public var failIdList: [String]?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.failIdList != nil {
                map["FailIdList"] = self.failIdList!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["FailIdList"] as? [String] {
                self.failIdList = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: ClearIntervenesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ClearIntervenesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ClearIntervenesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ClearIntervenesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ClearIntervenesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDatasetRequest : Tea.TeaModel {
    public class DatasetConfig : Tea.TeaModel {
        public class SearchSourceConfigs : Tea.TeaModel {
            public class SearchSourceRequestConfig : Tea.TeaModel {
                public class Headers : Tea.TeaModel {
                    public var name: String?

                    public var value: String?

                    public var valueFormat: String?

                    public var valueType: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        if self.valueFormat != nil {
                            map["ValueFormat"] = self.valueFormat!
                        }
                        if self.valueType != nil {
                            map["ValueType"] = self.valueType!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                        if let value = dict["ValueFormat"] as? String {
                            self.valueFormat = value
                        }
                        if let value = dict["ValueType"] as? String {
                            self.valueType = value
                        }
                    }
                }
                public class Params : Tea.TeaModel {
                    public var name: String?

                    public var value: String?

                    public var valueFormat: String?

                    public var valueType: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        if self.valueFormat != nil {
                            map["ValueFormat"] = self.valueFormat!
                        }
                        if self.valueType != nil {
                            map["ValueType"] = self.valueType!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                        if let value = dict["ValueFormat"] as? String {
                            self.valueFormat = value
                        }
                        if let value = dict["ValueType"] as? String {
                            self.valueType = value
                        }
                    }
                }
                public var body: String?

                public var connectTimeout: Int32?

                public var headers: [CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Headers]?

                public var method: String?

                public var params: [CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Params]?

                public var pathParamsEnable: Bool?

                public var socketTimeout: Int32?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.body != nil {
                        map["Body"] = self.body!
                    }
                    if self.connectTimeout != nil {
                        map["ConnectTimeout"] = self.connectTimeout!
                    }
                    if self.headers != nil {
                        var tmp : [Any] = []
                        for k in self.headers! {
                            tmp.append(k.toMap())
                        }
                        map["Headers"] = tmp
                    }
                    if self.method != nil {
                        map["Method"] = self.method!
                    }
                    if self.params != nil {
                        var tmp : [Any] = []
                        for k in self.params! {
                            tmp.append(k.toMap())
                        }
                        map["Params"] = tmp
                    }
                    if self.pathParamsEnable != nil {
                        map["PathParamsEnable"] = self.pathParamsEnable!
                    }
                    if self.socketTimeout != nil {
                        map["SocketTimeout"] = self.socketTimeout!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Body"] as? String {
                        self.body = value
                    }
                    if let value = dict["ConnectTimeout"] as? Int32 {
                        self.connectTimeout = value
                    }
                    if let value = dict["Headers"] as? [Any?] {
                        var tmp : [CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Headers] = []
                        for v in value {
                            if v != nil {
                                var model = CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Headers()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.headers = tmp
                    }
                    if let value = dict["Method"] as? String {
                        self.method = value
                    }
                    if let value = dict["Params"] as? [Any?] {
                        var tmp : [CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Params] = []
                        for v in value {
                            if v != nil {
                                var model = CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Params()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.params = tmp
                    }
                    if let value = dict["PathParamsEnable"] as? Bool {
                        self.pathParamsEnable = value
                    }
                    if let value = dict["SocketTimeout"] as? Int32 {
                        self.socketTimeout = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public class SearchSourceResponseConfig : Tea.TeaModel {
                public class JqNodes : Tea.TeaModel {
                    public class JqNodes : Tea.TeaModel {
                        public class JqNodes : Tea.TeaModel {
                            public var key: String?

                            public var path: String?

                            public var type: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.key != nil {
                                    map["Key"] = self.key!
                                }
                                if self.path != nil {
                                    map["Path"] = self.path!
                                }
                                if self.type != nil {
                                    map["Type"] = self.type!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["Key"] as? String {
                                    self.key = value
                                }
                                if let value = dict["Path"] as? String {
                                    self.path = value
                                }
                                if let value = dict["Type"] as? String {
                                    self.type = value
                                }
                            }
                        }
                        public var jqNodes: [CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes.JqNodes]?

                        public var key: String?

                        public var path: String?

                        public var type: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.jqNodes != nil {
                                var tmp : [Any] = []
                                for k in self.jqNodes! {
                                    tmp.append(k.toMap())
                                }
                                map["JqNodes"] = tmp
                            }
                            if self.key != nil {
                                map["Key"] = self.key!
                            }
                            if self.path != nil {
                                map["Path"] = self.path!
                            }
                            if self.type != nil {
                                map["Type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["JqNodes"] as? [Any?] {
                                var tmp : [CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes.JqNodes] = []
                                for v in value {
                                    if v != nil {
                                        var model = CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes.JqNodes()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.jqNodes = tmp
                            }
                            if let value = dict["Key"] as? String {
                                self.key = value
                            }
                            if let value = dict["Path"] as? String {
                                self.path = value
                            }
                            if let value = dict["Type"] as? String {
                                self.type = value
                            }
                        }
                    }
                    public var jqNodes: [CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes]?

                    public var key: String?

                    public var path: String?

                    public var type: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.jqNodes != nil {
                            var tmp : [Any] = []
                            for k in self.jqNodes! {
                                tmp.append(k.toMap())
                            }
                            map["JqNodes"] = tmp
                        }
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.path != nil {
                            map["Path"] = self.path!
                        }
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["JqNodes"] as? [Any?] {
                            var tmp : [CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes] = []
                            for v in value {
                                if v != nil {
                                    var model = CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.jqNodes = tmp
                        }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Path"] as? String {
                            self.path = value
                        }
                        if let value = dict["Type"] as? String {
                            self.type = value
                        }
                    }
                }
                public var jqNodes: [CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.jqNodes != nil {
                        var tmp : [Any] = []
                        for k in self.jqNodes! {
                            tmp.append(k.toMap())
                        }
                        map["JqNodes"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["JqNodes"] as? [Any?] {
                        var tmp : [CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes] = []
                        for v in value {
                            if v != nil {
                                var model = CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.jqNodes = tmp
                    }
                }
            }
            public var demoQuery: String?

            public var searchSourceRequestConfig: CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig?

            public var searchSourceResponseConfig: CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig?

            public var size: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.searchSourceRequestConfig?.validate()
                try self.searchSourceResponseConfig?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.demoQuery != nil {
                    map["DemoQuery"] = self.demoQuery!
                }
                if self.searchSourceRequestConfig != nil {
                    map["SearchSourceRequestConfig"] = self.searchSourceRequestConfig?.toMap()
                }
                if self.searchSourceResponseConfig != nil {
                    map["SearchSourceResponseConfig"] = self.searchSourceResponseConfig?.toMap()
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DemoQuery"] as? String {
                    self.demoQuery = value
                }
                if let value = dict["SearchSourceRequestConfig"] as? [String: Any?] {
                    var model = CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig()
                    model.fromMap(value)
                    self.searchSourceRequestConfig = model
                }
                if let value = dict["SearchSourceResponseConfig"] as? [String: Any?] {
                    var model = CreateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig()
                    model.fromMap(value)
                    self.searchSourceResponseConfig = model
                }
                if let value = dict["Size"] as? Int32 {
                    self.size = value
                }
            }
        }
        public var searchSourceConfigs: [CreateDatasetRequest.DatasetConfig.SearchSourceConfigs]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.searchSourceConfigs != nil {
                var tmp : [Any] = []
                for k in self.searchSourceConfigs! {
                    tmp.append(k.toMap())
                }
                map["SearchSourceConfigs"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SearchSourceConfigs"] as? [Any?] {
                var tmp : [CreateDatasetRequest.DatasetConfig.SearchSourceConfigs] = []
                for v in value {
                    if v != nil {
                        var model = CreateDatasetRequest.DatasetConfig.SearchSourceConfigs()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.searchSourceConfigs = tmp
            }
        }
    }
    public class DocumentHandleConfig : Tea.TeaModel {
        public var disableHandleMultimodalMedia: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.disableHandleMultimodalMedia != nil {
                map["DisableHandleMultimodalMedia"] = self.disableHandleMultimodalMedia!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisableHandleMultimodalMedia"] as? Bool {
                self.disableHandleMultimodalMedia = value
            }
        }
    }
    public var datasetConfig: CreateDatasetRequest.DatasetConfig?

    public var datasetDescription: String?

    public var datasetName: String?

    public var datasetType: String?

    public var documentHandleConfig: CreateDatasetRequest.DocumentHandleConfig?

    public var invokeType: String?

    public var searchDatasetEnable: Int32?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.datasetConfig?.validate()
        try self.documentHandleConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetConfig != nil {
            map["DatasetConfig"] = self.datasetConfig?.toMap()
        }
        if self.datasetDescription != nil {
            map["DatasetDescription"] = self.datasetDescription!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.datasetType != nil {
            map["DatasetType"] = self.datasetType!
        }
        if self.documentHandleConfig != nil {
            map["DocumentHandleConfig"] = self.documentHandleConfig?.toMap()
        }
        if self.invokeType != nil {
            map["InvokeType"] = self.invokeType!
        }
        if self.searchDatasetEnable != nil {
            map["SearchDatasetEnable"] = self.searchDatasetEnable!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetConfig"] as? [String: Any?] {
            var model = CreateDatasetRequest.DatasetConfig()
            model.fromMap(value)
            self.datasetConfig = model
        }
        if let value = dict["DatasetDescription"] as? String {
            self.datasetDescription = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["DatasetType"] as? String {
            self.datasetType = value
        }
        if let value = dict["DocumentHandleConfig"] as? [String: Any?] {
            var model = CreateDatasetRequest.DocumentHandleConfig()
            model.fromMap(value)
            self.documentHandleConfig = model
        }
        if let value = dict["InvokeType"] as? String {
            self.invokeType = value
        }
        if let value = dict["SearchDatasetEnable"] as? Int32 {
            self.searchDatasetEnable = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class CreateDatasetShrinkRequest : Tea.TeaModel {
    public var datasetConfigShrink: String?

    public var datasetDescription: String?

    public var datasetName: String?

    public var datasetType: String?

    public var documentHandleConfigShrink: String?

    public var invokeType: String?

    public var searchDatasetEnable: Int32?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetConfigShrink != nil {
            map["DatasetConfig"] = self.datasetConfigShrink!
        }
        if self.datasetDescription != nil {
            map["DatasetDescription"] = self.datasetDescription!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.datasetType != nil {
            map["DatasetType"] = self.datasetType!
        }
        if self.documentHandleConfigShrink != nil {
            map["DocumentHandleConfig"] = self.documentHandleConfigShrink!
        }
        if self.invokeType != nil {
            map["InvokeType"] = self.invokeType!
        }
        if self.searchDatasetEnable != nil {
            map["SearchDatasetEnable"] = self.searchDatasetEnable!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetConfig"] as? String {
            self.datasetConfigShrink = value
        }
        if let value = dict["DatasetDescription"] as? String {
            self.datasetDescription = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["DatasetType"] as? String {
            self.datasetType = value
        }
        if let value = dict["DocumentHandleConfig"] as? String {
            self.documentHandleConfigShrink = value
        }
        if let value = dict["InvokeType"] as? String {
            self.invokeType = value
        }
        if let value = dict["SearchDatasetEnable"] as? Int32 {
            self.searchDatasetEnable = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class CreateDatasetResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var createTime: String?

        public var createUser: String?

        public var datasetDescription: String?

        public var datasetId: Int64?

        public var datasetName: String?

        public var datasetType: String?

        public var searchDatasetEnable: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.datasetDescription != nil {
                map["DatasetDescription"] = self.datasetDescription!
            }
            if self.datasetId != nil {
                map["DatasetId"] = self.datasetId!
            }
            if self.datasetName != nil {
                map["DatasetName"] = self.datasetName!
            }
            if self.datasetType != nil {
                map["DatasetType"] = self.datasetType!
            }
            if self.searchDatasetEnable != nil {
                map["SearchDatasetEnable"] = self.searchDatasetEnable!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["DatasetDescription"] as? String {
                self.datasetDescription = value
            }
            if let value = dict["DatasetId"] as? Int64 {
                self.datasetId = value
            }
            if let value = dict["DatasetName"] as? String {
                self.datasetName = value
            }
            if let value = dict["DatasetType"] as? String {
                self.datasetType = value
            }
            if let value = dict["SearchDatasetEnable"] as? Int32 {
                self.searchDatasetEnable = value
            }
        }
    }
    public var code: String?

    public var data: CreateDatasetResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateDatasetResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateDatasetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDatasetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDatasetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateGeneratedContentRequest : Tea.TeaModel {
    public var agentKey: String?

    public var content: String?

    public var contentDomain: String?

    public var contentText: String?

    public var keywords: [String]?

    public var prompt: String?

    public var taskId: String?

    public var title: String?

    public var uuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.contentDomain != nil {
            map["ContentDomain"] = self.contentDomain!
        }
        if self.contentText != nil {
            map["ContentText"] = self.contentText!
        }
        if self.keywords != nil {
            map["Keywords"] = self.keywords!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["ContentDomain"] as? String {
            self.contentDomain = value
        }
        if let value = dict["ContentText"] as? String {
            self.contentText = value
        }
        if let value = dict["Keywords"] as? [String] {
            self.keywords = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
    }
}

public class CreateGeneratedContentShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var content: String?

    public var contentDomain: String?

    public var contentText: String?

    public var keywordsShrink: String?

    public var prompt: String?

    public var taskId: String?

    public var title: String?

    public var uuid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.contentDomain != nil {
            map["ContentDomain"] = self.contentDomain!
        }
        if self.contentText != nil {
            map["ContentText"] = self.contentText!
        }
        if self.keywordsShrink != nil {
            map["Keywords"] = self.keywordsShrink!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["ContentDomain"] as? String {
            self.contentDomain = value
        }
        if let value = dict["ContentText"] as? String {
            self.contentText = value
        }
        if let value = dict["Keywords"] as? String {
            self.keywordsShrink = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
    }
}

public class CreateGeneratedContentResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateGeneratedContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateGeneratedContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateGeneratedContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateTokenRequest : Tea.TeaModel {
    public var agentKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
    }
}

public class CreateTokenResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var expiredTime: Int64?

        public var token: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expiredTime != nil {
                map["ExpiredTime"] = self.expiredTime!
            }
            if self.token != nil {
                map["Token"] = self.token!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ExpiredTime"] as? Int64 {
                self.expiredTime = value
            }
            if let value = dict["Token"] as? String {
                self.token = value
            }
        }
    }
    public var code: String?

    public var data: CreateTokenResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateTokenResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateTokenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateTokenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateTokenResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCustomTextRequest : Tea.TeaModel {
    public var agentKey: String?

    public var commodityCode: String?

    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class DeleteCustomTextResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteCustomTextResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCustomTextResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCustomTextResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCustomTopicByTopicRequest : Tea.TeaModel {
    public var agentKey: String?

    public var topic: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
    }
}

public class DeleteCustomTopicByTopicResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int32?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int32 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteCustomTopicByTopicResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCustomTopicByTopicResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCustomTopicByTopicResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCustomTopicViewPointByIdRequest : Tea.TeaModel {
    public var agentKey: String?

    public var customViewPointId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.customViewPointId != nil {
            map["CustomViewPointId"] = self.customViewPointId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CustomViewPointId"] as? String {
            self.customViewPointId = value
        }
    }
}

public class DeleteCustomTopicViewPointByIdResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int32?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int32 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteCustomTopicViewPointByIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCustomTopicViewPointByIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCustomTopicViewPointByIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDatasetRequest : Tea.TeaModel {
    public var datasetId: Int64?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class DeleteDatasetResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteDatasetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDatasetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDatasetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDatasetDocumentRequest : Tea.TeaModel {
    public var datasetId: Int64?

    public var datasetName: String?

    public var docId: String?

    public var docUuid: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.docId != nil {
            map["DocId"] = self.docId!
        }
        if self.docUuid != nil {
            map["DocUuid"] = self.docUuid!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["DocId"] as? String {
            self.docId = value
        }
        if let value = dict["DocUuid"] as? String {
            self.docUuid = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class DeleteDatasetDocumentResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: [String]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String] {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteDatasetDocumentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDatasetDocumentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDatasetDocumentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDocsRequest : Tea.TeaModel {
    public var docIds: [String]?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.docIds != nil {
            map["DocIds"] = self.docIds!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocIds"] as? [String] {
            self.docIds = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class DeleteDocsShrinkRequest : Tea.TeaModel {
    public var docIdsShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.docIdsShrink != nil {
            map["DocIds"] = self.docIdsShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocIds"] as? String {
            self.docIdsShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class DeleteDocsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteDocsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDocsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDocsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteGeneratedContentRequest : Tea.TeaModel {
    public var agentKey: String?

    public var id: Int64?

    public var regionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
    }
}

public class DeleteGeneratedContentResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteGeneratedContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteGeneratedContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteGeneratedContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteInterveneRuleRequest : Tea.TeaModel {
    public var agentKey: String?

    public var ruleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
    }
}

public class DeleteInterveneRuleResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var code: Int32?

        public var failIdList: [String]?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.failIdList != nil {
                map["FailIdList"] = self.failIdList!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["FailIdList"] as? [String] {
                self.failIdList = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: DeleteInterveneRuleResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DeleteInterveneRuleResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteInterveneRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteInterveneRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteInterveneRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMaterialByIdRequest : Tea.TeaModel {
    public var agentKey: String?

    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class DeleteMaterialByIdResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteMaterialByIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMaterialByIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMaterialByIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteStyleLearningResultRequest : Tea.TeaModel {
    public var agentKey: String?

    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class DeleteStyleLearningResultResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteStyleLearningResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteStyleLearningResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteStyleLearningResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DocumentExtractionRequest : Tea.TeaModel {
    public var agentKey: String?

    public var urls: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.urls != nil {
            map["Urls"] = self.urls!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Urls"] as? [String] {
            self.urls = value
        }
    }
}

public class DocumentExtractionShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var urlsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.urlsShrink != nil {
            map["Urls"] = self.urlsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Urls"] as? String {
            self.urlsShrink = value
        }
    }
}

public class DocumentExtractionResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var author: String?

        public var content: String?

        public var docId: String?

        public var docUuid: String?

        public var pubTime: String?

        public var source: String?

        public var summary: String?

        public var tag: String?

        public var title: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.author != nil {
                map["Author"] = self.author!
            }
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.docId != nil {
                map["DocId"] = self.docId!
            }
            if self.docUuid != nil {
                map["DocUuid"] = self.docUuid!
            }
            if self.pubTime != nil {
                map["PubTime"] = self.pubTime!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.tag != nil {
                map["Tag"] = self.tag!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Author"] as? String {
                self.author = value
            }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["DocId"] as? String {
                self.docId = value
            }
            if let value = dict["DocUuid"] as? String {
                self.docUuid = value
            }
            if let value = dict["PubTime"] as? String {
                self.pubTime = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["Tag"] as? String {
                self.tag = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var code: String?

    public var data: [DocumentExtractionResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DocumentExtractionResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DocumentExtractionResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DocumentExtractionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DocumentExtractionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DocumentExtractionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportAnalysisTagDetailByTaskIdRequest : Tea.TeaModel {
    public var categories: [String]?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categories != nil {
            map["Categories"] = self.categories!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Categories"] as? [String] {
            self.categories = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ExportAnalysisTagDetailByTaskIdShrinkRequest : Tea.TeaModel {
    public var categoriesShrink: String?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categoriesShrink != nil {
            map["Categories"] = self.categoriesShrink!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Categories"] as? String {
            self.categoriesShrink = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ExportAnalysisTagDetailByTaskIdResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ExportAnalysisTagDetailByTaskIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportAnalysisTagDetailByTaskIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportAnalysisTagDetailByTaskIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportAuditContentResultRequest : Tea.TeaModel {
    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ExportAuditContentResultResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ExportAuditContentResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportAuditContentResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportAuditContentResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportCustomSourceAnalysisTaskRequest : Tea.TeaModel {
    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ExportCustomSourceAnalysisTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ExportCustomSourceAnalysisTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportCustomSourceAnalysisTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportCustomSourceAnalysisTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportGeneratedContentRequest : Tea.TeaModel {
    public var agentKey: String?

    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class ExportGeneratedContentResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ExportGeneratedContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportGeneratedContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportGeneratedContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportHotTopicPlanningProposalsRequest : Tea.TeaModel {
    public var agentKey: String?

    public var customViewPointIds: [String]?

    public var exportType: String?

    public var titles: [String]?

    public var topic: String?

    public var topicSource: String?

    public var viewPointType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.customViewPointIds != nil {
            map["CustomViewPointIds"] = self.customViewPointIds!
        }
        if self.exportType != nil {
            map["ExportType"] = self.exportType!
        }
        if self.titles != nil {
            map["Titles"] = self.titles!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        if self.topicSource != nil {
            map["TopicSource"] = self.topicSource!
        }
        if self.viewPointType != nil {
            map["ViewPointType"] = self.viewPointType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CustomViewPointIds"] as? [String] {
            self.customViewPointIds = value
        }
        if let value = dict["ExportType"] as? String {
            self.exportType = value
        }
        if let value = dict["Titles"] as? [String] {
            self.titles = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
        if let value = dict["TopicSource"] as? String {
            self.topicSource = value
        }
        if let value = dict["ViewPointType"] as? String {
            self.viewPointType = value
        }
    }
}

public class ExportHotTopicPlanningProposalsShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var customViewPointIdsShrink: String?

    public var exportType: String?

    public var titlesShrink: String?

    public var topic: String?

    public var topicSource: String?

    public var viewPointType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.customViewPointIdsShrink != nil {
            map["CustomViewPointIds"] = self.customViewPointIdsShrink!
        }
        if self.exportType != nil {
            map["ExportType"] = self.exportType!
        }
        if self.titlesShrink != nil {
            map["Titles"] = self.titlesShrink!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        if self.topicSource != nil {
            map["TopicSource"] = self.topicSource!
        }
        if self.viewPointType != nil {
            map["ViewPointType"] = self.viewPointType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CustomViewPointIds"] as? String {
            self.customViewPointIdsShrink = value
        }
        if let value = dict["ExportType"] as? String {
            self.exportType = value
        }
        if let value = dict["Titles"] as? String {
            self.titlesShrink = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
        if let value = dict["TopicSource"] as? String {
            self.topicSource = value
        }
        if let value = dict["ViewPointType"] as? String {
            self.viewPointType = value
        }
    }
}

public class ExportHotTopicPlanningProposalsResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ExportHotTopicPlanningProposalsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportHotTopicPlanningProposalsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportHotTopicPlanningProposalsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportIntervenesRequest : Tea.TeaModel {
    public var agentKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
    }
}

public class ExportIntervenesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var code: Int32?

        public var fileUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
        }
    }
    public var code: String?

    public var data: ExportIntervenesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ExportIntervenesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ExportIntervenesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportIntervenesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportIntervenesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class FeedbackDialogueRequest : Tea.TeaModel {
    public var agentKey: String?

    public var customerResponse: String?

    public var goodText: String?

    public var modifiedResponse: String?

    public var rating: String?

    public var ratingTags: [String]?

    public var sessionId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.customerResponse != nil {
            map["CustomerResponse"] = self.customerResponse!
        }
        if self.goodText != nil {
            map["GoodText"] = self.goodText!
        }
        if self.modifiedResponse != nil {
            map["ModifiedResponse"] = self.modifiedResponse!
        }
        if self.rating != nil {
            map["Rating"] = self.rating!
        }
        if self.ratingTags != nil {
            map["RatingTags"] = self.ratingTags!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CustomerResponse"] as? String {
            self.customerResponse = value
        }
        if let value = dict["GoodText"] as? String {
            self.goodText = value
        }
        if let value = dict["ModifiedResponse"] as? String {
            self.modifiedResponse = value
        }
        if let value = dict["Rating"] as? String {
            self.rating = value
        }
        if let value = dict["RatingTags"] as? [String] {
            self.ratingTags = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class FeedbackDialogueShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var customerResponse: String?

    public var goodText: String?

    public var modifiedResponse: String?

    public var rating: String?

    public var ratingTagsShrink: String?

    public var sessionId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.customerResponse != nil {
            map["CustomerResponse"] = self.customerResponse!
        }
        if self.goodText != nil {
            map["GoodText"] = self.goodText!
        }
        if self.modifiedResponse != nil {
            map["ModifiedResponse"] = self.modifiedResponse!
        }
        if self.rating != nil {
            map["Rating"] = self.rating!
        }
        if self.ratingTagsShrink != nil {
            map["RatingTags"] = self.ratingTagsShrink!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CustomerResponse"] as? String {
            self.customerResponse = value
        }
        if let value = dict["GoodText"] as? String {
            self.goodText = value
        }
        if let value = dict["ModifiedResponse"] as? String {
            self.modifiedResponse = value
        }
        if let value = dict["Rating"] as? String {
            self.rating = value
        }
        if let value = dict["RatingTags"] as? String {
            self.ratingTagsShrink = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class FeedbackDialogueResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class FeedbackDialogueResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FeedbackDialogueResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = FeedbackDialogueResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class FetchExportWordTaskRequest : Tea.TeaModel {
    public var agentKey: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class FetchExportWordTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var fileUrl: String?

        public var taskStats: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            if self.taskStats != nil {
                map["TaskStats"] = self.taskStats!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
            if let value = dict["TaskStats"] as? String {
                self.taskStats = value
            }
        }
    }
    public var code: String?

    public var data: FetchExportWordTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = FetchExportWordTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class FetchExportWordTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FetchExportWordTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = FetchExportWordTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class FetchImageTaskRequest : Tea.TeaModel {
    public var agentKey: String?

    public var articleTaskId: String?

    public var taskIdList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.articleTaskId != nil {
            map["ArticleTaskId"] = self.articleTaskId!
        }
        if self.taskIdList != nil {
            map["TaskIdList"] = self.taskIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["ArticleTaskId"] as? String {
            self.articleTaskId = value
        }
        if let value = dict["TaskIdList"] as? [String] {
            self.taskIdList = value
        }
    }
}

public class FetchImageTaskShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var articleTaskId: String?

    public var taskIdListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.articleTaskId != nil {
            map["ArticleTaskId"] = self.articleTaskId!
        }
        if self.taskIdListShrink != nil {
            map["TaskIdList"] = self.taskIdListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["ArticleTaskId"] as? String {
            self.articleTaskId = value
        }
        if let value = dict["TaskIdList"] as? String {
            self.taskIdListShrink = value
        }
    }
}

public class FetchImageTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class TaskInfoList : Tea.TeaModel {
            public class ImageList : Tea.TeaModel {
                public var code: String?

                public var message: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.code != nil {
                        map["Code"] = self.code!
                    }
                    if self.message != nil {
                        map["Message"] = self.message!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Code"] as? String {
                        self.code = value
                    }
                    if let value = dict["Message"] as? String {
                        self.message = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var id: Int64?

            public var imageList: [FetchImageTaskResponseBody.Data.TaskInfoList.ImageList]?

            public var taskId: String?

            public var taskStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.imageList != nil {
                    var tmp : [Any] = []
                    for k in self.imageList! {
                        tmp.append(k.toMap())
                    }
                    map["ImageList"] = tmp
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.taskStatus != nil {
                    map["TaskStatus"] = self.taskStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["ImageList"] as? [Any?] {
                    var tmp : [FetchImageTaskResponseBody.Data.TaskInfoList.ImageList] = []
                    for v in value {
                        if v != nil {
                            var model = FetchImageTaskResponseBody.Data.TaskInfoList.ImageList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.imageList = tmp
                }
                if let value = dict["TaskId"] as? String {
                    self.taskId = value
                }
                if let value = dict["TaskStatus"] as? String {
                    self.taskStatus = value
                }
            }
        }
        public var taskInfoList: [FetchImageTaskResponseBody.Data.TaskInfoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskInfoList != nil {
                var tmp : [Any] = []
                for k in self.taskInfoList! {
                    tmp.append(k.toMap())
                }
                map["TaskInfoList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskInfoList"] as? [Any?] {
                var tmp : [FetchImageTaskResponseBody.Data.TaskInfoList] = []
                for v in value {
                    if v != nil {
                        var model = FetchImageTaskResponseBody.Data.TaskInfoList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.taskInfoList = tmp
            }
        }
    }
    public var code: String?

    public var data: FetchImageTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = FetchImageTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class FetchImageTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FetchImageTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = FetchImageTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GenerateExportWordTaskRequest : Tea.TeaModel {
    public var agentKey: String?

    public var generatedContentId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.generatedContentId != nil {
            map["GeneratedContentId"] = self.generatedContentId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["GeneratedContentId"] as? Int64 {
            self.generatedContentId = value
        }
    }
}

public class GenerateExportWordTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: GenerateExportWordTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GenerateExportWordTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GenerateExportWordTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GenerateExportWordTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GenerateExportWordTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GenerateFileUrlByKeyRequest : Tea.TeaModel {
    public var agentKey: String?

    public var fileKey: String?

    public var fileName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.fileKey != nil {
            map["FileKey"] = self.fileKey!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["FileKey"] as? String {
            self.fileKey = value
        }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
    }
}

public class GenerateFileUrlByKeyResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GenerateFileUrlByKeyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GenerateFileUrlByKeyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GenerateFileUrlByKeyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GenerateImageTaskRequest : Tea.TeaModel {
    public class ParagraphList : Tea.TeaModel {
        public var content: String?

        public var id: Int64?

        public var taskId: String?

        public var taskStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskStatus != nil {
                map["TaskStatus"] = self.taskStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskStatus"] as? String {
                self.taskStatus = value
            }
        }
    }
    public var agentKey: String?

    public var articleTaskId: String?

    public var paragraphList: [GenerateImageTaskRequest.ParagraphList]?

    public var size: String?

    public var style: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.articleTaskId != nil {
            map["ArticleTaskId"] = self.articleTaskId!
        }
        if self.paragraphList != nil {
            var tmp : [Any] = []
            for k in self.paragraphList! {
                tmp.append(k.toMap())
            }
            map["ParagraphList"] = tmp
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.style != nil {
            map["Style"] = self.style!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["ArticleTaskId"] as? String {
            self.articleTaskId = value
        }
        if let value = dict["ParagraphList"] as? [Any?] {
            var tmp : [GenerateImageTaskRequest.ParagraphList] = []
            for v in value {
                if v != nil {
                    var model = GenerateImageTaskRequest.ParagraphList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.paragraphList = tmp
        }
        if let value = dict["Size"] as? String {
            self.size = value
        }
        if let value = dict["Style"] as? String {
            self.style = value
        }
    }
}

public class GenerateImageTaskShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var articleTaskId: String?

    public var paragraphListShrink: String?

    public var size: String?

    public var style: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.articleTaskId != nil {
            map["ArticleTaskId"] = self.articleTaskId!
        }
        if self.paragraphListShrink != nil {
            map["ParagraphList"] = self.paragraphListShrink!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.style != nil {
            map["Style"] = self.style!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["ArticleTaskId"] as? String {
            self.articleTaskId = value
        }
        if let value = dict["ParagraphList"] as? String {
            self.paragraphListShrink = value
        }
        if let value = dict["Size"] as? String {
            self.size = value
        }
        if let value = dict["Style"] as? String {
            self.style = value
        }
    }
}

public class GenerateImageTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class TaskList : Tea.TeaModel {
            public var content: String?

            public var id: Int64?

            public var taskId: String?

            public var taskStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.taskStatus != nil {
                    map["TaskStatus"] = self.taskStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["TaskId"] as? String {
                    self.taskId = value
                }
                if let value = dict["TaskStatus"] as? String {
                    self.taskStatus = value
                }
            }
        }
        public var taskList: [GenerateImageTaskResponseBody.Data.TaskList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskList != nil {
                var tmp : [Any] = []
                for k in self.taskList! {
                    tmp.append(k.toMap())
                }
                map["TaskList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskList"] as? [Any?] {
                var tmp : [GenerateImageTaskResponseBody.Data.TaskList] = []
                for v in value {
                    if v != nil {
                        var model = GenerateImageTaskResponseBody.Data.TaskList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.taskList = tmp
            }
        }
    }
    public var code: String?

    public var data: GenerateImageTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GenerateImageTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GenerateImageTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GenerateImageTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GenerateImageTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GenerateUploadConfigRequest : Tea.TeaModel {
    public var agentKey: String?

    public var fileName: String?

    public var parentDir: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.parentDir != nil {
            map["ParentDir"] = self.parentDir!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["ParentDir"] as? String {
            self.parentDir = value
        }
    }
}

public class GenerateUploadConfigResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var fileKey: String?

        public var formDatas: [String: Any]?

        public var postUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileKey != nil {
                map["FileKey"] = self.fileKey!
            }
            if self.formDatas != nil {
                map["FormDatas"] = self.formDatas!
            }
            if self.postUrl != nil {
                map["PostUrl"] = self.postUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileKey"] as? String {
                self.fileKey = value
            }
            if let value = dict["FormDatas"] as? [String: Any] {
                self.formDatas = value
            }
            if let value = dict["PostUrl"] as? String {
                self.postUrl = value
            }
        }
    }
    public var code: String?

    public var data: GenerateUploadConfigResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GenerateUploadConfigResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GenerateUploadConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GenerateUploadConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GenerateUploadConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GenerateViewPointRequest : Tea.TeaModel {
    public class ReferenceData : Tea.TeaModel {
        public var miniDoc: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.miniDoc != nil {
                map["MiniDoc"] = self.miniDoc!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MiniDoc"] as? [String] {
                self.miniDoc = value
            }
        }
    }
    public var agentKey: String?

    public var referenceData: GenerateViewPointRequest.ReferenceData?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.referenceData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.referenceData != nil {
            map["ReferenceData"] = self.referenceData?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["ReferenceData"] as? [String: Any?] {
            var model = GenerateViewPointRequest.ReferenceData()
            model.fromMap(value)
            self.referenceData = model
        }
    }
}

public class GenerateViewPointShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var referenceDataShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.referenceDataShrink != nil {
            map["ReferenceData"] = self.referenceDataShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["ReferenceData"] as? String {
            self.referenceDataShrink = value
        }
    }
}

public class GenerateViewPointResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var point: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.point != nil {
                map["Point"] = self.point!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Point"] as? String {
                self.point = value
            }
        }
    }
    public var code: String?

    public var data: [GenerateViewPointResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GenerateViewPointResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GenerateViewPointResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GenerateViewPointResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GenerateViewPointResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GenerateViewPointResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCategoriesByTaskIdRequest : Tea.TeaModel {
    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetCategoriesByTaskIdResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Children : Tea.TeaModel {
            public var category: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.category != nil {
                    map["Category"] = self.category!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Category"] as? String {
                    self.category = value
                }
            }
        }
        public var category: String?

        public var children: [GetCategoriesByTaskIdResponseBody.Data.Children]?

        public var count: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.children != nil {
                var tmp : [Any] = []
                for k in self.children! {
                    tmp.append(k.toMap())
                }
                map["Children"] = tmp
            }
            if self.count != nil {
                map["Count"] = self.count!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["Children"] as? [Any?] {
                var tmp : [GetCategoriesByTaskIdResponseBody.Data.Children] = []
                for v in value {
                    if v != nil {
                        var model = GetCategoriesByTaskIdResponseBody.Data.Children()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.children = tmp
            }
            if let value = dict["Count"] as? Int32 {
                self.count = value
            }
        }
    }
    public var code: String?

    public var data: [GetCategoriesByTaskIdResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GetCategoriesByTaskIdResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetCategoriesByTaskIdResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetCategoriesByTaskIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCategoriesByTaskIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCategoriesByTaskIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCustomHotTopicBroadcastJobRequest : Tea.TeaModel {
    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetCustomHotTopicBroadcastJobResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var errorMessage: String?

        public var hotTopicVersion: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.hotTopicVersion != nil {
                map["HotTopicVersion"] = self.hotTopicVersion!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["HotTopicVersion"] as? String {
                self.hotTopicVersion = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: String?

    public var data: GetCustomHotTopicBroadcastJobResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetCustomHotTopicBroadcastJobResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetCustomHotTopicBroadcastJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCustomHotTopicBroadcastJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCustomHotTopicBroadcastJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCustomSourceTopicAnalysisTaskRequest : Tea.TeaModel {
    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetCustomSourceTopicAnalysisTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ClusterResults : Tea.TeaModel {
            public class ClusterNews : Tea.TeaModel {
                public var title: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var clusterNews: [GetCustomSourceTopicAnalysisTaskResponseBody.Data.ClusterResults.ClusterNews]?

            public var topic: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.clusterNews != nil {
                    var tmp : [Any] = []
                    for k in self.clusterNews! {
                        tmp.append(k.toMap())
                    }
                    map["ClusterNews"] = tmp
                }
                if self.topic != nil {
                    map["Topic"] = self.topic!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ClusterNews"] as? [Any?] {
                    var tmp : [GetCustomSourceTopicAnalysisTaskResponseBody.Data.ClusterResults.ClusterNews] = []
                    for v in value {
                        if v != nil {
                            var model = GetCustomSourceTopicAnalysisTaskResponseBody.Data.ClusterResults.ClusterNews()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.clusterNews = tmp
                }
                if let value = dict["Topic"] as? String {
                    self.topic = value
                }
            }
        }
        public var clusterCount: Int32?

        public var clusterResults: [GetCustomSourceTopicAnalysisTaskResponseBody.Data.ClusterResults]?

        public var errorMessage: String?

        public var maxClusteredTopicNewsSize: Int32?

        public var parsedNewsSize: Int32?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clusterCount != nil {
                map["ClusterCount"] = self.clusterCount!
            }
            if self.clusterResults != nil {
                var tmp : [Any] = []
                for k in self.clusterResults! {
                    tmp.append(k.toMap())
                }
                map["ClusterResults"] = tmp
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.maxClusteredTopicNewsSize != nil {
                map["MaxClusteredTopicNewsSize"] = self.maxClusteredTopicNewsSize!
            }
            if self.parsedNewsSize != nil {
                map["ParsedNewsSize"] = self.parsedNewsSize!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClusterCount"] as? Int32 {
                self.clusterCount = value
            }
            if let value = dict["ClusterResults"] as? [Any?] {
                var tmp : [GetCustomSourceTopicAnalysisTaskResponseBody.Data.ClusterResults] = []
                for v in value {
                    if v != nil {
                        var model = GetCustomSourceTopicAnalysisTaskResponseBody.Data.ClusterResults()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.clusterResults = tmp
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["MaxClusteredTopicNewsSize"] as? Int32 {
                self.maxClusteredTopicNewsSize = value
            }
            if let value = dict["ParsedNewsSize"] as? Int32 {
                self.parsedNewsSize = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: String?

    public var data: GetCustomSourceTopicAnalysisTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetCustomSourceTopicAnalysisTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetCustomSourceTopicAnalysisTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCustomSourceTopicAnalysisTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCustomSourceTopicAnalysisTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCustomTextRequest : Tea.TeaModel {
    public var agentKey: String?

    public var commodityCode: String?

    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class GetCustomTextResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var content: String?

        public var createTime: String?

        public var createUser: String?

        public var id: Int64?

        public var title: String?

        public var updateTime: String?

        public var updateUser: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.updateUser != nil {
                map["UpdateUser"] = self.updateUser!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UpdateUser"] as? String {
                self.updateUser = value
            }
        }
    }
    public var code: String?

    public var data: GetCustomTextResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetCustomTextResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetCustomTextResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCustomTextResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCustomTextResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCustomTopicSelectionPerspectiveAnalysisTaskRequest : Tea.TeaModel {
    public var agentKey: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CustomViewPointsResult : Tea.TeaModel {
            public class Attitudes : Tea.TeaModel {
                public class ViewPoints : Tea.TeaModel {
                    public class Outlines : Tea.TeaModel {
                        public var outline: String?

                        public var summary: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.outline != nil {
                                map["Outline"] = self.outline!
                            }
                            if self.summary != nil {
                                map["Summary"] = self.summary!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Outline"] as? String {
                                self.outline = value
                            }
                            if let value = dict["Summary"] as? String {
                                self.summary = value
                            }
                        }
                    }
                    public var outlines: [GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.CustomViewPointsResult.Attitudes.ViewPoints.Outlines]?

                    public var point: String?

                    public var summary: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.outlines != nil {
                            var tmp : [Any] = []
                            for k in self.outlines! {
                                tmp.append(k.toMap())
                            }
                            map["Outlines"] = tmp
                        }
                        if self.point != nil {
                            map["Point"] = self.point!
                        }
                        if self.summary != nil {
                            map["Summary"] = self.summary!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Outlines"] as? [Any?] {
                            var tmp : [GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.CustomViewPointsResult.Attitudes.ViewPoints.Outlines] = []
                            for v in value {
                                if v != nil {
                                    var model = GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.CustomViewPointsResult.Attitudes.ViewPoints.Outlines()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.outlines = tmp
                        }
                        if let value = dict["Point"] as? String {
                            self.point = value
                        }
                        if let value = dict["Summary"] as? String {
                            self.summary = value
                        }
                    }
                }
                public var attitude: String?

                public var attitudeType: String?

                public var ratio: String?

                public var viewPoints: [GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.CustomViewPointsResult.Attitudes.ViewPoints]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.attitude != nil {
                        map["Attitude"] = self.attitude!
                    }
                    if self.attitudeType != nil {
                        map["AttitudeType"] = self.attitudeType!
                    }
                    if self.ratio != nil {
                        map["Ratio"] = self.ratio!
                    }
                    if self.viewPoints != nil {
                        var tmp : [Any] = []
                        for k in self.viewPoints! {
                            tmp.append(k.toMap())
                        }
                        map["ViewPoints"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Attitude"] as? String {
                        self.attitude = value
                    }
                    if let value = dict["AttitudeType"] as? String {
                        self.attitudeType = value
                    }
                    if let value = dict["Ratio"] as? String {
                        self.ratio = value
                    }
                    if let value = dict["ViewPoints"] as? [Any?] {
                        var tmp : [GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.CustomViewPointsResult.Attitudes.ViewPoints] = []
                        for v in value {
                            if v != nil {
                                var model = GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.CustomViewPointsResult.Attitudes.ViewPoints()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.viewPoints = tmp
                    }
                }
            }
            public var attitudes: [GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.CustomViewPointsResult.Attitudes]?

            public var topic: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.attitudes != nil {
                    var tmp : [Any] = []
                    for k in self.attitudes! {
                        tmp.append(k.toMap())
                    }
                    map["Attitudes"] = tmp
                }
                if self.topic != nil {
                    map["Topic"] = self.topic!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Attitudes"] as? [Any?] {
                    var tmp : [GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.CustomViewPointsResult.Attitudes] = []
                    for v in value {
                        if v != nil {
                            var model = GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.CustomViewPointsResult.Attitudes()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.attitudes = tmp
                }
                if let value = dict["Topic"] as? String {
                    self.topic = value
                }
            }
        }
        public var customViewPointsResult: GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.CustomViewPointsResult?

        public var errorMessage: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.customViewPointsResult?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customViewPointsResult != nil {
                map["CustomViewPointsResult"] = self.customViewPointsResult?.toMap()
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomViewPointsResult"] as? [String: Any?] {
                var model = GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.CustomViewPointsResult()
                model.fromMap(value)
                self.customViewPointsResult = model
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: String?

    public var data: GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetCustomTopicSelectionPerspectiveAnalysisTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataSourceOrderConfigRequest : Tea.TeaModel {
    public var agentKey: String?

    public var generateTechnology: String?

    public var productCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.generateTechnology != nil {
            map["GenerateTechnology"] = self.generateTechnology!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["GenerateTechnology"] as? String {
            self.generateTechnology = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
    }
}

public class GetDataSourceOrderConfigResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class UserConfigDataSourceList : Tea.TeaModel {
            public var code: String?

            public var enable: Bool?

            public var name: String?

            public var number: Int32?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.enable != nil {
                    map["Enable"] = self.enable!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Code"] as? String {
                    self.code = value
                }
                if let value = dict["Enable"] as? Bool {
                    self.enable = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Number"] as? Int32 {
                    self.number = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var totalDocSize: Int32?

        public var userConfigDataSourceList: [GetDataSourceOrderConfigResponseBody.Data.UserConfigDataSourceList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.totalDocSize != nil {
                map["TotalDocSize"] = self.totalDocSize!
            }
            if self.userConfigDataSourceList != nil {
                var tmp : [Any] = []
                for k in self.userConfigDataSourceList! {
                    tmp.append(k.toMap())
                }
                map["UserConfigDataSourceList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TotalDocSize"] as? Int32 {
                self.totalDocSize = value
            }
            if let value = dict["UserConfigDataSourceList"] as? [Any?] {
                var tmp : [GetDataSourceOrderConfigResponseBody.Data.UserConfigDataSourceList] = []
                for v in value {
                    if v != nil {
                        var model = GetDataSourceOrderConfigResponseBody.Data.UserConfigDataSourceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userConfigDataSourceList = tmp
            }
        }
    }
    public var code: String?

    public var data: GetDataSourceOrderConfigResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetDataSourceOrderConfigResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDataSourceOrderConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataSourceOrderConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataSourceOrderConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDatasetRequest : Tea.TeaModel {
    public var datasetId: Int64?

    public var datasetName: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetDatasetResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class DatasetConfig : Tea.TeaModel {
            public class SearchSourceConfigs : Tea.TeaModel {
                public class SearchSourceRequestConfig : Tea.TeaModel {
                    public class Headers : Tea.TeaModel {
                        public var name: String?

                        public var value: String?

                        public var valueFormat: String?

                        public var valueType: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.name != nil {
                                map["Name"] = self.name!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            if self.valueFormat != nil {
                                map["ValueFormat"] = self.valueFormat!
                            }
                            if self.valueType != nil {
                                map["ValueType"] = self.valueType!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Name"] as? String {
                                self.name = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                            if let value = dict["ValueFormat"] as? String {
                                self.valueFormat = value
                            }
                            if let value = dict["ValueType"] as? String {
                                self.valueType = value
                            }
                        }
                    }
                    public class Params : Tea.TeaModel {
                        public var name: String?

                        public var value: String?

                        public var valueFormat: String?

                        public var valueType: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.name != nil {
                                map["Name"] = self.name!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            if self.valueFormat != nil {
                                map["ValueFormat"] = self.valueFormat!
                            }
                            if self.valueType != nil {
                                map["ValueType"] = self.valueType!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Name"] as? String {
                                self.name = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                            if let value = dict["ValueFormat"] as? String {
                                self.valueFormat = value
                            }
                            if let value = dict["ValueType"] as? String {
                                self.valueType = value
                            }
                        }
                    }
                    public var body: String?

                    public var connectTimeout: Int32?

                    public var headers: [GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Headers]?

                    public var method: String?

                    public var params: [GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Params]?

                    public var pathParamsEnable: Bool?

                    public var socketTimeout: Int32?

                    public var url: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.body != nil {
                            map["Body"] = self.body!
                        }
                        if self.connectTimeout != nil {
                            map["ConnectTimeout"] = self.connectTimeout!
                        }
                        if self.headers != nil {
                            var tmp : [Any] = []
                            for k in self.headers! {
                                tmp.append(k.toMap())
                            }
                            map["Headers"] = tmp
                        }
                        if self.method != nil {
                            map["Method"] = self.method!
                        }
                        if self.params != nil {
                            var tmp : [Any] = []
                            for k in self.params! {
                                tmp.append(k.toMap())
                            }
                            map["Params"] = tmp
                        }
                        if self.pathParamsEnable != nil {
                            map["PathParamsEnable"] = self.pathParamsEnable!
                        }
                        if self.socketTimeout != nil {
                            map["SocketTimeout"] = self.socketTimeout!
                        }
                        if self.url != nil {
                            map["Url"] = self.url!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Body"] as? String {
                            self.body = value
                        }
                        if let value = dict["ConnectTimeout"] as? Int32 {
                            self.connectTimeout = value
                        }
                        if let value = dict["Headers"] as? [Any?] {
                            var tmp : [GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Headers] = []
                            for v in value {
                                if v != nil {
                                    var model = GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Headers()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.headers = tmp
                        }
                        if let value = dict["Method"] as? String {
                            self.method = value
                        }
                        if let value = dict["Params"] as? [Any?] {
                            var tmp : [GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Params] = []
                            for v in value {
                                if v != nil {
                                    var model = GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Params()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.params = tmp
                        }
                        if let value = dict["PathParamsEnable"] as? Bool {
                            self.pathParamsEnable = value
                        }
                        if let value = dict["SocketTimeout"] as? Int32 {
                            self.socketTimeout = value
                        }
                        if let value = dict["Url"] as? String {
                            self.url = value
                        }
                    }
                }
                public class SearchSourceResponseConfig : Tea.TeaModel {
                    public class JqNodes : Tea.TeaModel {
                        public class JqNodes : Tea.TeaModel {
                            public class JqNodes : Tea.TeaModel {
                                public var key: String?

                                public var path: String?

                                public var type: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.key != nil {
                                        map["Key"] = self.key!
                                    }
                                    if self.path != nil {
                                        map["Path"] = self.path!
                                    }
                                    if self.type != nil {
                                        map["Type"] = self.type!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Key"] as? String {
                                        self.key = value
                                    }
                                    if let value = dict["Path"] as? String {
                                        self.path = value
                                    }
                                    if let value = dict["Type"] as? String {
                                        self.type = value
                                    }
                                }
                            }
                            public var jqNodes: [GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes.JqNodes]?

                            public var key: String?

                            public var path: String?

                            public var type: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.jqNodes != nil {
                                    var tmp : [Any] = []
                                    for k in self.jqNodes! {
                                        tmp.append(k.toMap())
                                    }
                                    map["JqNodes"] = tmp
                                }
                                if self.key != nil {
                                    map["Key"] = self.key!
                                }
                                if self.path != nil {
                                    map["Path"] = self.path!
                                }
                                if self.type != nil {
                                    map["Type"] = self.type!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["JqNodes"] as? [Any?] {
                                    var tmp : [GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes.JqNodes] = []
                                    for v in value {
                                        if v != nil {
                                            var model = GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes.JqNodes()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.jqNodes = tmp
                                }
                                if let value = dict["Key"] as? String {
                                    self.key = value
                                }
                                if let value = dict["Path"] as? String {
                                    self.path = value
                                }
                                if let value = dict["Type"] as? String {
                                    self.type = value
                                }
                            }
                        }
                        public var jqNodes: [GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes]?

                        public var key: String?

                        public var path: String?

                        public var type: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.jqNodes != nil {
                                var tmp : [Any] = []
                                for k in self.jqNodes! {
                                    tmp.append(k.toMap())
                                }
                                map["JqNodes"] = tmp
                            }
                            if self.key != nil {
                                map["Key"] = self.key!
                            }
                            if self.path != nil {
                                map["Path"] = self.path!
                            }
                            if self.type != nil {
                                map["Type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["JqNodes"] as? [Any?] {
                                var tmp : [GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes] = []
                                for v in value {
                                    if v != nil {
                                        var model = GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.jqNodes = tmp
                            }
                            if let value = dict["Key"] as? String {
                                self.key = value
                            }
                            if let value = dict["Path"] as? String {
                                self.path = value
                            }
                            if let value = dict["Type"] as? String {
                                self.type = value
                            }
                        }
                    }
                    public var jqNodes: [GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.jqNodes != nil {
                            var tmp : [Any] = []
                            for k in self.jqNodes! {
                                tmp.append(k.toMap())
                            }
                            map["JqNodes"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["JqNodes"] as? [Any?] {
                            var tmp : [GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes] = []
                            for v in value {
                                if v != nil {
                                    var model = GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.jqNodes = tmp
                        }
                    }
                }
                public var demoQuery: String?

                public var searchSourceRequestConfig: GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig?

                public var searchSourceResponseConfig: GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig?

                public var size: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.searchSourceRequestConfig?.validate()
                    try self.searchSourceResponseConfig?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.demoQuery != nil {
                        map["DemoQuery"] = self.demoQuery!
                    }
                    if self.searchSourceRequestConfig != nil {
                        map["SearchSourceRequestConfig"] = self.searchSourceRequestConfig?.toMap()
                    }
                    if self.searchSourceResponseConfig != nil {
                        map["SearchSourceResponseConfig"] = self.searchSourceResponseConfig?.toMap()
                    }
                    if self.size != nil {
                        map["Size"] = self.size!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DemoQuery"] as? String {
                        self.demoQuery = value
                    }
                    if let value = dict["SearchSourceRequestConfig"] as? [String: Any?] {
                        var model = GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig()
                        model.fromMap(value)
                        self.searchSourceRequestConfig = model
                    }
                    if let value = dict["SearchSourceResponseConfig"] as? [String: Any?] {
                        var model = GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig()
                        model.fromMap(value)
                        self.searchSourceResponseConfig = model
                    }
                    if let value = dict["Size"] as? Int32 {
                        self.size = value
                    }
                }
            }
            public var searchSourceConfigs: [GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.searchSourceConfigs != nil {
                    var tmp : [Any] = []
                    for k in self.searchSourceConfigs! {
                        tmp.append(k.toMap())
                    }
                    map["SearchSourceConfigs"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SearchSourceConfigs"] as? [Any?] {
                    var tmp : [GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs] = []
                    for v in value {
                        if v != nil {
                            var model = GetDatasetResponseBody.Data.DatasetConfig.SearchSourceConfigs()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.searchSourceConfigs = tmp
                }
            }
        }
        public class DocumentHandleConfig : Tea.TeaModel {
            public var disableHandleMultimodalMedia: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.disableHandleMultimodalMedia != nil {
                    map["DisableHandleMultimodalMedia"] = self.disableHandleMultimodalMedia!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisableHandleMultimodalMedia"] as? Bool {
                    self.disableHandleMultimodalMedia = value
                }
            }
        }
        public var createTime: String?

        public var createUser: String?

        public var datasetConfig: GetDatasetResponseBody.Data.DatasetConfig?

        public var datasetDescription: String?

        public var datasetId: Int64?

        public var datasetName: String?

        public var datasetType: String?

        public var documentHandleConfig: GetDatasetResponseBody.Data.DocumentHandleConfig?

        public var searchDatasetEnable: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.datasetConfig?.validate()
            try self.documentHandleConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.datasetConfig != nil {
                map["DatasetConfig"] = self.datasetConfig?.toMap()
            }
            if self.datasetDescription != nil {
                map["DatasetDescription"] = self.datasetDescription!
            }
            if self.datasetId != nil {
                map["DatasetId"] = self.datasetId!
            }
            if self.datasetName != nil {
                map["DatasetName"] = self.datasetName!
            }
            if self.datasetType != nil {
                map["DatasetType"] = self.datasetType!
            }
            if self.documentHandleConfig != nil {
                map["DocumentHandleConfig"] = self.documentHandleConfig?.toMap()
            }
            if self.searchDatasetEnable != nil {
                map["SearchDatasetEnable"] = self.searchDatasetEnable!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["DatasetConfig"] as? [String: Any?] {
                var model = GetDatasetResponseBody.Data.DatasetConfig()
                model.fromMap(value)
                self.datasetConfig = model
            }
            if let value = dict["DatasetDescription"] as? String {
                self.datasetDescription = value
            }
            if let value = dict["DatasetId"] as? Int64 {
                self.datasetId = value
            }
            if let value = dict["DatasetName"] as? String {
                self.datasetName = value
            }
            if let value = dict["DatasetType"] as? String {
                self.datasetType = value
            }
            if let value = dict["DocumentHandleConfig"] as? [String: Any?] {
                var model = GetDatasetResponseBody.Data.DocumentHandleConfig()
                model.fromMap(value)
                self.documentHandleConfig = model
            }
            if let value = dict["SearchDatasetEnable"] as? Int32 {
                self.searchDatasetEnable = value
            }
        }
    }
    public var code: String?

    public var data: GetDatasetResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetDatasetResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDatasetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDatasetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDatasetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDatasetDocumentRequest : Tea.TeaModel {
    public var datasetId: Int64?

    public var datasetName: String?

    public var docId: String?

    public var docUuid: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.docId != nil {
            map["DocId"] = self.docId!
        }
        if self.docUuid != nil {
            map["DocUuid"] = self.docUuid!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["DocId"] as? String {
            self.docId = value
        }
        if let value = dict["DocUuid"] as? String {
            self.docUuid = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetDatasetDocumentResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var content: String?

        public var disableHandleMultimodalMedia: Bool?

        public var docId: String?

        public var docUuid: String?

        public var pubTime: String?

        public var sourceFrom: String?

        public var summary: String?

        public var title: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.disableHandleMultimodalMedia != nil {
                map["DisableHandleMultimodalMedia"] = self.disableHandleMultimodalMedia!
            }
            if self.docId != nil {
                map["DocId"] = self.docId!
            }
            if self.docUuid != nil {
                map["DocUuid"] = self.docUuid!
            }
            if self.pubTime != nil {
                map["PubTime"] = self.pubTime!
            }
            if self.sourceFrom != nil {
                map["SourceFrom"] = self.sourceFrom!
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["DisableHandleMultimodalMedia"] as? Bool {
                self.disableHandleMultimodalMedia = value
            }
            if let value = dict["DocId"] as? String {
                self.docId = value
            }
            if let value = dict["DocUuid"] as? String {
                self.docUuid = value
            }
            if let value = dict["PubTime"] as? String {
                self.pubTime = value
            }
            if let value = dict["SourceFrom"] as? String {
                self.sourceFrom = value
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var code: String?

    public var data: GetDatasetDocumentResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetDatasetDocumentResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDatasetDocumentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDatasetDocumentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDatasetDocumentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDocClusterTaskRequest : Tea.TeaModel {
    public var agentKey: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class GetDocClusterTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Topics : Tea.TeaModel {
            public var docIds: [String]?

            public var summary: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.docIds != nil {
                    map["DocIds"] = self.docIds!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DocIds"] as? [String] {
                    self.docIds = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public var errorMessage: String?

        public var status: String?

        public var topics: [GetDocClusterTaskResponseBody.Data.Topics]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.topics != nil {
                var tmp : [Any] = []
                for k in self.topics! {
                    tmp.append(k.toMap())
                }
                map["Topics"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Topics"] as? [Any?] {
                var tmp : [GetDocClusterTaskResponseBody.Data.Topics] = []
                for v in value {
                    if v != nil {
                        var model = GetDocClusterTaskResponseBody.Data.Topics()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.topics = tmp
            }
        }
    }
    public var code: String?

    public var data: GetDocClusterTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetDocClusterTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDocClusterTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDocClusterTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDocClusterTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDocInfoRequest : Tea.TeaModel {
    public var categoryId: String?

    public var docId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categoryId != nil {
            map["CategoryId"] = self.categoryId!
        }
        if self.docId != nil {
            map["DocId"] = self.docId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CategoryId"] as? String {
            self.categoryId = value
        }
        if let value = dict["DocId"] as? String {
            self.docId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetDocInfoResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var categoryId: String?

        public var docName: String?

        public var docType: String?

        public var fileUrl: String?

        public var status: Int32?

        public var statusMessage: String?

        public var videoContents: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.categoryId != nil {
                map["CategoryId"] = self.categoryId!
            }
            if self.docName != nil {
                map["DocName"] = self.docName!
            }
            if self.docType != nil {
                map["DocType"] = self.docType!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.statusMessage != nil {
                map["StatusMessage"] = self.statusMessage!
            }
            if self.videoContents != nil {
                map["VideoContents"] = self.videoContents!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CategoryId"] as? String {
                self.categoryId = value
            }
            if let value = dict["DocName"] as? String {
                self.docName = value
            }
            if let value = dict["DocType"] as? String {
                self.docType = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["StatusMessage"] as? String {
                self.statusMessage = value
            }
            if let value = dict["VideoContents"] as? [String] {
                self.videoContents = value
            }
        }
    }
    public var code: String?

    public var data: GetDocInfoResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetDocInfoResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDocInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDocInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDocInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEnterpriseVocAnalysisTaskRequest : Tea.TeaModel {
    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetEnterpriseVocAnalysisTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class StatisticsOverview : Tea.TeaModel {
            public class FilterDimensionStatistics : Tea.TeaModel {
                public class TagValueCountStatistic : Tea.TeaModel {
                    public var tagName: String?

                    public var tagTaskType: String?

                    public var valueCount: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.tagName != nil {
                            map["TagName"] = self.tagName!
                        }
                        if self.tagTaskType != nil {
                            map["TagTaskType"] = self.tagTaskType!
                        }
                        if self.valueCount != nil {
                            map["ValueCount"] = self.valueCount!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["TagName"] as? String {
                            self.tagName = value
                        }
                        if let value = dict["TagTaskType"] as? String {
                            self.tagTaskType = value
                        }
                        if let value = dict["ValueCount"] as? Int32 {
                            self.valueCount = value
                        }
                    }
                }
                public var tagValueCountStatistic: [GetEnterpriseVocAnalysisTaskResponseBody.Data.StatisticsOverview.FilterDimensionStatistics.TagValueCountStatistic]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tagValueCountStatistic != nil {
                        var tmp : [Any] = []
                        for k in self.tagValueCountStatistic! {
                            tmp.append(k.toMap())
                        }
                        map["TagValueCountStatistic"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TagValueCountStatistic"] as? [Any?] {
                        var tmp : [GetEnterpriseVocAnalysisTaskResponseBody.Data.StatisticsOverview.FilterDimensionStatistics.TagValueCountStatistic] = []
                        for v in value {
                            if v != nil {
                                var model = GetEnterpriseVocAnalysisTaskResponseBody.Data.StatisticsOverview.FilterDimensionStatistics.TagValueCountStatistic()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tagValueCountStatistic = tmp
                    }
                }
            }
            public class TagDimensionStatistics : Tea.TeaModel {
                public class TagValueCountStatistic : Tea.TeaModel {
                    public var tagName: String?

                    public var tagTaskType: String?

                    public var valueCount: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.tagName != nil {
                            map["TagName"] = self.tagName!
                        }
                        if self.tagTaskType != nil {
                            map["TagTaskType"] = self.tagTaskType!
                        }
                        if self.valueCount != nil {
                            map["ValueCount"] = self.valueCount!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["TagName"] as? String {
                            self.tagName = value
                        }
                        if let value = dict["TagTaskType"] as? String {
                            self.tagTaskType = value
                        }
                        if let value = dict["ValueCount"] as? Int32 {
                            self.valueCount = value
                        }
                    }
                }
                public var tagValueCountStatistic: [GetEnterpriseVocAnalysisTaskResponseBody.Data.StatisticsOverview.TagDimensionStatistics.TagValueCountStatistic]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tagValueCountStatistic != nil {
                        var tmp : [Any] = []
                        for k in self.tagValueCountStatistic! {
                            tmp.append(k.toMap())
                        }
                        map["TagValueCountStatistic"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TagValueCountStatistic"] as? [Any?] {
                        var tmp : [GetEnterpriseVocAnalysisTaskResponseBody.Data.StatisticsOverview.TagDimensionStatistics.TagValueCountStatistic] = []
                        for v in value {
                            if v != nil {
                                var model = GetEnterpriseVocAnalysisTaskResponseBody.Data.StatisticsOverview.TagDimensionStatistics.TagValueCountStatistic()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tagValueCountStatistic = tmp
                    }
                }
            }
            public var count: Int32?

            public var filterDimensionStatistics: GetEnterpriseVocAnalysisTaskResponseBody.Data.StatisticsOverview.FilterDimensionStatistics?

            public var tagDimensionStatistics: GetEnterpriseVocAnalysisTaskResponseBody.Data.StatisticsOverview.TagDimensionStatistics?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.filterDimensionStatistics?.validate()
                try self.tagDimensionStatistics?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.count != nil {
                    map["Count"] = self.count!
                }
                if self.filterDimensionStatistics != nil {
                    map["FilterDimensionStatistics"] = self.filterDimensionStatistics?.toMap()
                }
                if self.tagDimensionStatistics != nil {
                    map["TagDimensionStatistics"] = self.tagDimensionStatistics?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Count"] as? Int32 {
                    self.count = value
                }
                if let value = dict["FilterDimensionStatistics"] as? [String: Any?] {
                    var model = GetEnterpriseVocAnalysisTaskResponseBody.Data.StatisticsOverview.FilterDimensionStatistics()
                    model.fromMap(value)
                    self.filterDimensionStatistics = model
                }
                if let value = dict["TagDimensionStatistics"] as? [String: Any?] {
                    var model = GetEnterpriseVocAnalysisTaskResponseBody.Data.StatisticsOverview.TagDimensionStatistics()
                    model.fromMap(value)
                    self.tagDimensionStatistics = model
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
            }
        }
        public var errorMessage: String?

        public var statisticsOverview: GetEnterpriseVocAnalysisTaskResponseBody.Data.StatisticsOverview?

        public var status: String?

        public var usage: GetEnterpriseVocAnalysisTaskResponseBody.Data.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.statisticsOverview?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.statisticsOverview != nil {
                map["StatisticsOverview"] = self.statisticsOverview?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["StatisticsOverview"] as? [String: Any?] {
                var model = GetEnterpriseVocAnalysisTaskResponseBody.Data.StatisticsOverview()
                model.fromMap(value)
                self.statisticsOverview = model
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = GetEnterpriseVocAnalysisTaskResponseBody.Data.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var code: String?

    public var data: GetEnterpriseVocAnalysisTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetEnterpriseVocAnalysisTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetEnterpriseVocAnalysisTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEnterpriseVocAnalysisTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEnterpriseVocAnalysisTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetFileContentLengthRequest : Tea.TeaModel {
    public var docName: String?

    public var fileUrl: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.docName != nil {
            map["DocName"] = self.docName!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocName"] as? String {
            self.docName = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetFileContentLengthResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var wordNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.wordNum != nil {
                map["WordNum"] = self.wordNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["WordNum"] as? Int64 {
                self.wordNum = value
            }
        }
    }
    public var code: String?

    public var data: GetFileContentLengthResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetFileContentLengthResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetFileContentLengthResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetFileContentLengthResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetFileContentLengthResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetGeneratedContentRequest : Tea.TeaModel {
    public var agentKey: String?

    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class GetGeneratedContentResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var content: String?

        public var contentDomain: String?

        public var contentText: String?

        public var createTime: String?

        public var createUser: String?

        public var deviceId: String?

        public var id: Int64?

        public var ignoreContentAuditWords: String?

        public var keywordList: [String]?

        public var keywords: String?

        public var prompt: String?

        public var taskId: String?

        public var title: String?

        public var updateTime: String?

        public var updateUser: String?

        public var uuid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.contentDomain != nil {
                map["ContentDomain"] = self.contentDomain!
            }
            if self.contentText != nil {
                map["ContentText"] = self.contentText!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.ignoreContentAuditWords != nil {
                map["IgnoreContentAuditWords"] = self.ignoreContentAuditWords!
            }
            if self.keywordList != nil {
                map["KeywordList"] = self.keywordList!
            }
            if self.keywords != nil {
                map["Keywords"] = self.keywords!
            }
            if self.prompt != nil {
                map["Prompt"] = self.prompt!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.updateUser != nil {
                map["UpdateUser"] = self.updateUser!
            }
            if self.uuid != nil {
                map["Uuid"] = self.uuid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["ContentDomain"] as? String {
                self.contentDomain = value
            }
            if let value = dict["ContentText"] as? String {
                self.contentText = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["IgnoreContentAuditWords"] as? String {
                self.ignoreContentAuditWords = value
            }
            if let value = dict["KeywordList"] as? [String] {
                self.keywordList = value
            }
            if let value = dict["Keywords"] as? String {
                self.keywords = value
            }
            if let value = dict["Prompt"] as? String {
                self.prompt = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UpdateUser"] as? String {
                self.updateUser = value
            }
            if let value = dict["Uuid"] as? String {
                self.uuid = value
            }
        }
    }
    public var code: String?

    public var data: GetGeneratedContentResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetGeneratedContentResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetGeneratedContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetGeneratedContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetGeneratedContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetHotTopicBroadcastRequest : Tea.TeaModel {
    public class StepForCustomSummaryStyleConfig : Tea.TeaModel {
        public var summaryImageCount: Int32?

        public var summaryModel: String?

        public var summaryPrompt: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.summaryImageCount != nil {
                map["SummaryImageCount"] = self.summaryImageCount!
            }
            if self.summaryModel != nil {
                map["SummaryModel"] = self.summaryModel!
            }
            if self.summaryPrompt != nil {
                map["SummaryPrompt"] = self.summaryPrompt!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SummaryImageCount"] as? Int32 {
                self.summaryImageCount = value
            }
            if let value = dict["SummaryModel"] as? String {
                self.summaryModel = value
            }
            if let value = dict["SummaryPrompt"] as? String {
                self.summaryPrompt = value
            }
        }
    }
    public class StepForNewsBroadcastContentConfig : Tea.TeaModel {
        public class CustomHotValueWeights : Tea.TeaModel {
            public var dimension: String?

            public var weight: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dimension != nil {
                    map["Dimension"] = self.dimension!
                }
                if self.weight != nil {
                    map["Weight"] = self.weight!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Dimension"] as? String {
                    self.dimension = value
                }
                if let value = dict["Weight"] as? Int32 {
                    self.weight = value
                }
            }
        }
        public var categories: [String]?

        public var customHotValueWeights: [GetHotTopicBroadcastRequest.StepForNewsBroadcastContentConfig.CustomHotValueWeights]?

        public var topicCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.categories != nil {
                map["Categories"] = self.categories!
            }
            if self.customHotValueWeights != nil {
                var tmp : [Any] = []
                for k in self.customHotValueWeights! {
                    tmp.append(k.toMap())
                }
                map["CustomHotValueWeights"] = tmp
            }
            if self.topicCount != nil {
                map["TopicCount"] = self.topicCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Categories"] as? [String] {
                self.categories = value
            }
            if let value = dict["CustomHotValueWeights"] as? [Any?] {
                var tmp : [GetHotTopicBroadcastRequest.StepForNewsBroadcastContentConfig.CustomHotValueWeights] = []
                for v in value {
                    if v != nil {
                        var model = GetHotTopicBroadcastRequest.StepForNewsBroadcastContentConfig.CustomHotValueWeights()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.customHotValueWeights = tmp
            }
            if let value = dict["TopicCount"] as? Int32 {
                self.topicCount = value
            }
        }
    }
    public var calcTotalToken: Bool?

    public var category: String?

    public var current: Int32?

    public var hotTopicVersion: String?

    public var locationQuery: String?

    public var locations: [String]?

    public var query: String?

    public var size: Int32?

    public var stepForCustomSummaryStyleConfig: GetHotTopicBroadcastRequest.StepForCustomSummaryStyleConfig?

    public var stepForNewsBroadcastContentConfig: GetHotTopicBroadcastRequest.StepForNewsBroadcastContentConfig?

    public var topics: [String]?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.stepForCustomSummaryStyleConfig?.validate()
        try self.stepForNewsBroadcastContentConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calcTotalToken != nil {
            map["CalcTotalToken"] = self.calcTotalToken!
        }
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.hotTopicVersion != nil {
            map["HotTopicVersion"] = self.hotTopicVersion!
        }
        if self.locationQuery != nil {
            map["LocationQuery"] = self.locationQuery!
        }
        if self.locations != nil {
            map["Locations"] = self.locations!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.stepForCustomSummaryStyleConfig != nil {
            map["StepForCustomSummaryStyleConfig"] = self.stepForCustomSummaryStyleConfig?.toMap()
        }
        if self.stepForNewsBroadcastContentConfig != nil {
            map["StepForNewsBroadcastContentConfig"] = self.stepForNewsBroadcastContentConfig?.toMap()
        }
        if self.topics != nil {
            map["Topics"] = self.topics!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalcTotalToken"] as? Bool {
            self.calcTotalToken = value
        }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["HotTopicVersion"] as? String {
            self.hotTopicVersion = value
        }
        if let value = dict["LocationQuery"] as? String {
            self.locationQuery = value
        }
        if let value = dict["Locations"] as? [String] {
            self.locations = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["StepForCustomSummaryStyleConfig"] as? [String: Any?] {
            var model = GetHotTopicBroadcastRequest.StepForCustomSummaryStyleConfig()
            model.fromMap(value)
            self.stepForCustomSummaryStyleConfig = model
        }
        if let value = dict["StepForNewsBroadcastContentConfig"] as? [String: Any?] {
            var model = GetHotTopicBroadcastRequest.StepForNewsBroadcastContentConfig()
            model.fromMap(value)
            self.stepForNewsBroadcastContentConfig = model
        }
        if let value = dict["Topics"] as? [String] {
            self.topics = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetHotTopicBroadcastShrinkRequest : Tea.TeaModel {
    public var calcTotalToken: Bool?

    public var category: String?

    public var current: Int32?

    public var hotTopicVersion: String?

    public var locationQuery: String?

    public var locationsShrink: String?

    public var query: String?

    public var size: Int32?

    public var stepForCustomSummaryStyleConfigShrink: String?

    public var stepForNewsBroadcastContentConfigShrink: String?

    public var topicsShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calcTotalToken != nil {
            map["CalcTotalToken"] = self.calcTotalToken!
        }
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.hotTopicVersion != nil {
            map["HotTopicVersion"] = self.hotTopicVersion!
        }
        if self.locationQuery != nil {
            map["LocationQuery"] = self.locationQuery!
        }
        if self.locationsShrink != nil {
            map["Locations"] = self.locationsShrink!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.stepForCustomSummaryStyleConfigShrink != nil {
            map["StepForCustomSummaryStyleConfig"] = self.stepForCustomSummaryStyleConfigShrink!
        }
        if self.stepForNewsBroadcastContentConfigShrink != nil {
            map["StepForNewsBroadcastContentConfig"] = self.stepForNewsBroadcastContentConfigShrink!
        }
        if self.topicsShrink != nil {
            map["Topics"] = self.topicsShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalcTotalToken"] as? Bool {
            self.calcTotalToken = value
        }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["HotTopicVersion"] as? String {
            self.hotTopicVersion = value
        }
        if let value = dict["LocationQuery"] as? String {
            self.locationQuery = value
        }
        if let value = dict["Locations"] as? String {
            self.locationsShrink = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["StepForCustomSummaryStyleConfig"] as? String {
            self.stepForCustomSummaryStyleConfigShrink = value
        }
        if let value = dict["StepForNewsBroadcastContentConfig"] as? String {
            self.stepForNewsBroadcastContentConfigShrink = value
        }
        if let value = dict["Topics"] as? String {
            self.topicsShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetHotTopicBroadcastResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public class Images : Tea.TeaModel {
                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public class News : Tea.TeaModel {
                public class Comments : Tea.TeaModel {
                    public var text: String?

                    public var username: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.text != nil {
                            map["Text"] = self.text!
                        }
                        if self.username != nil {
                            map["Username"] = self.username!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Text"] as? String {
                            self.text = value
                        }
                        if let value = dict["Username"] as? String {
                            self.username = value
                        }
                    }
                }
                public var analysisCategory: String?

                public var analysisTopic: String?

                public var author: String?

                public var category: [String]?

                public var comments: [GetHotTopicBroadcastResponseBody.Data.Data.News.Comments]?

                public var content: String?

                public var createTime: String?

                public var domain: String?

                public var dt: String?

                public var hotTopic: String?

                public var imgList: [String]?

                public var logo: String?

                public var pubTime: String?

                public var summary: String?

                public var title: String?

                public var url: String?

                public var uuid: String?

                public var website: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.analysisCategory != nil {
                        map["AnalysisCategory"] = self.analysisCategory!
                    }
                    if self.analysisTopic != nil {
                        map["AnalysisTopic"] = self.analysisTopic!
                    }
                    if self.author != nil {
                        map["Author"] = self.author!
                    }
                    if self.category != nil {
                        map["Category"] = self.category!
                    }
                    if self.comments != nil {
                        var tmp : [Any] = []
                        for k in self.comments! {
                            tmp.append(k.toMap())
                        }
                        map["Comments"] = tmp
                    }
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.createTime != nil {
                        map["CreateTime"] = self.createTime!
                    }
                    if self.domain != nil {
                        map["Domain"] = self.domain!
                    }
                    if self.dt != nil {
                        map["Dt"] = self.dt!
                    }
                    if self.hotTopic != nil {
                        map["HotTopic"] = self.hotTopic!
                    }
                    if self.imgList != nil {
                        map["ImgList"] = self.imgList!
                    }
                    if self.logo != nil {
                        map["Logo"] = self.logo!
                    }
                    if self.pubTime != nil {
                        map["PubTime"] = self.pubTime!
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    if self.uuid != nil {
                        map["Uuid"] = self.uuid!
                    }
                    if self.website != nil {
                        map["Website"] = self.website!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AnalysisCategory"] as? String {
                        self.analysisCategory = value
                    }
                    if let value = dict["AnalysisTopic"] as? String {
                        self.analysisTopic = value
                    }
                    if let value = dict["Author"] as? String {
                        self.author = value
                    }
                    if let value = dict["Category"] as? [String] {
                        self.category = value
                    }
                    if let value = dict["Comments"] as? [Any?] {
                        var tmp : [GetHotTopicBroadcastResponseBody.Data.Data.News.Comments] = []
                        for v in value {
                            if v != nil {
                                var model = GetHotTopicBroadcastResponseBody.Data.Data.News.Comments()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.comments = tmp
                    }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["CreateTime"] as? String {
                        self.createTime = value
                    }
                    if let value = dict["Domain"] as? String {
                        self.domain = value
                    }
                    if let value = dict["Dt"] as? String {
                        self.dt = value
                    }
                    if let value = dict["HotTopic"] as? String {
                        self.hotTopic = value
                    }
                    if let value = dict["ImgList"] as? [String] {
                        self.imgList = value
                    }
                    if let value = dict["Logo"] as? String {
                        self.logo = value
                    }
                    if let value = dict["PubTime"] as? String {
                        self.pubTime = value
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                    if let value = dict["Uuid"] as? String {
                        self.uuid = value
                    }
                    if let value = dict["Website"] as? String {
                        self.website = value
                    }
                }
            }
            public class Summary : Tea.TeaModel {
                public class Summaries : Tea.TeaModel {
                    public var summary: String?

                    public var title: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.summary != nil {
                            map["Summary"] = self.summary!
                        }
                        if self.title != nil {
                            map["Title"] = self.title!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Summary"] as? String {
                            self.summary = value
                        }
                        if let value = dict["Title"] as? String {
                            self.title = value
                        }
                    }
                }
                public var inputToken: Int32?

                public var outputToken: Int32?

                public var summaries: [GetHotTopicBroadcastResponseBody.Data.Data.Summary.Summaries]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.inputToken != nil {
                        map["InputToken"] = self.inputToken!
                    }
                    if self.outputToken != nil {
                        map["OutputToken"] = self.outputToken!
                    }
                    if self.summaries != nil {
                        var tmp : [Any] = []
                        for k in self.summaries! {
                            tmp.append(k.toMap())
                        }
                        map["Summaries"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["InputToken"] as? Int32 {
                        self.inputToken = value
                    }
                    if let value = dict["OutputToken"] as? Int32 {
                        self.outputToken = value
                    }
                    if let value = dict["Summaries"] as? [Any?] {
                        var tmp : [GetHotTopicBroadcastResponseBody.Data.Data.Summary.Summaries] = []
                        for v in value {
                            if v != nil {
                                var model = GetHotTopicBroadcastResponseBody.Data.Data.Summary.Summaries()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.summaries = tmp
                    }
                }
            }
            public var category: String?

            public var createTime: String?

            public var customHotValue: Double?

            public var customTextSummary: String?

            public var hotTopic: String?

            public var hotTopicVersion: String?

            public var hotValue: Double?

            public var id: String?

            public var images: [GetHotTopicBroadcastResponseBody.Data.Data.Images]?

            public var inputToken: Int32?

            public var locations: [String]?

            public var news: [GetHotTopicBroadcastResponseBody.Data.Data.News]?

            public var outputToken: Int32?

            public var pubTime: String?

            public var summary: GetHotTopicBroadcastResponseBody.Data.Data.Summary?

            public var textSummary: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.summary?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.category != nil {
                    map["Category"] = self.category!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.customHotValue != nil {
                    map["CustomHotValue"] = self.customHotValue!
                }
                if self.customTextSummary != nil {
                    map["CustomTextSummary"] = self.customTextSummary!
                }
                if self.hotTopic != nil {
                    map["HotTopic"] = self.hotTopic!
                }
                if self.hotTopicVersion != nil {
                    map["HotTopicVersion"] = self.hotTopicVersion!
                }
                if self.hotValue != nil {
                    map["HotValue"] = self.hotValue!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.images != nil {
                    var tmp : [Any] = []
                    for k in self.images! {
                        tmp.append(k.toMap())
                    }
                    map["Images"] = tmp
                }
                if self.inputToken != nil {
                    map["InputToken"] = self.inputToken!
                }
                if self.locations != nil {
                    map["Locations"] = self.locations!
                }
                if self.news != nil {
                    var tmp : [Any] = []
                    for k in self.news! {
                        tmp.append(k.toMap())
                    }
                    map["News"] = tmp
                }
                if self.outputToken != nil {
                    map["OutputToken"] = self.outputToken!
                }
                if self.pubTime != nil {
                    map["PubTime"] = self.pubTime!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary?.toMap()
                }
                if self.textSummary != nil {
                    map["TextSummary"] = self.textSummary!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Category"] as? String {
                    self.category = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["CustomHotValue"] as? Double {
                    self.customHotValue = value
                }
                if let value = dict["CustomTextSummary"] as? String {
                    self.customTextSummary = value
                }
                if let value = dict["HotTopic"] as? String {
                    self.hotTopic = value
                }
                if let value = dict["HotTopicVersion"] as? String {
                    self.hotTopicVersion = value
                }
                if let value = dict["HotValue"] as? Double {
                    self.hotValue = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Images"] as? [Any?] {
                    var tmp : [GetHotTopicBroadcastResponseBody.Data.Data.Images] = []
                    for v in value {
                        if v != nil {
                            var model = GetHotTopicBroadcastResponseBody.Data.Data.Images()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.images = tmp
                }
                if let value = dict["InputToken"] as? Int32 {
                    self.inputToken = value
                }
                if let value = dict["Locations"] as? [String] {
                    self.locations = value
                }
                if let value = dict["News"] as? [Any?] {
                    var tmp : [GetHotTopicBroadcastResponseBody.Data.Data.News] = []
                    for v in value {
                        if v != nil {
                            var model = GetHotTopicBroadcastResponseBody.Data.Data.News()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.news = tmp
                }
                if let value = dict["OutputToken"] as? Int32 {
                    self.outputToken = value
                }
                if let value = dict["PubTime"] as? String {
                    self.pubTime = value
                }
                if let value = dict["Summary"] as? [String: Any?] {
                    var model = GetHotTopicBroadcastResponseBody.Data.Data.Summary()
                    model.fromMap(value)
                    self.summary = model
                }
                if let value = dict["TextSummary"] as? String {
                    self.textSummary = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public class TotalTokenInfo : Tea.TeaModel {
            public var hotTopicCount: Int32?

            public var inputTokens: Int32?

            public var outputTokens: Int32?

            public var wordCount: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.hotTopicCount != nil {
                    map["HotTopicCount"] = self.hotTopicCount!
                }
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.wordCount != nil {
                    map["WordCount"] = self.wordCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["HotTopicCount"] as? Int32 {
                    self.hotTopicCount = value
                }
                if let value = dict["InputTokens"] as? Int32 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int32 {
                    self.outputTokens = value
                }
                if let value = dict["WordCount"] as? Int32 {
                    self.wordCount = value
                }
            }
        }
        public var data: [GetHotTopicBroadcastResponseBody.Data.Data]?

        public var totalCount: Int32?

        public var totalTokenInfo: GetHotTopicBroadcastResponseBody.Data.TotalTokenInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.totalTokenInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            if self.totalTokenInfo != nil {
                map["TotalTokenInfo"] = self.totalTokenInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [GetHotTopicBroadcastResponseBody.Data.Data] = []
                for v in value {
                    if v != nil {
                        var model = GetHotTopicBroadcastResponseBody.Data.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
            if let value = dict["TotalTokenInfo"] as? [String: Any?] {
                var model = GetHotTopicBroadcastResponseBody.Data.TotalTokenInfo()
                model.fromMap(value)
                self.totalTokenInfo = model
            }
        }
    }
    public var code: String?

    public var data: GetHotTopicBroadcastResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetHotTopicBroadcastResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetHotTopicBroadcastResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetHotTopicBroadcastResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetHotTopicBroadcastResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetInterveneGlobalReplyRequest : Tea.TeaModel {
    public var agentKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
    }
}

public class GetInterveneGlobalReplyResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ReplyMessagList : Tea.TeaModel {
            public var message: String?

            public var replyType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.message != nil {
                    map["Message"] = self.message!
                }
                if self.replyType != nil {
                    map["ReplyType"] = self.replyType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
                if let value = dict["ReplyType"] as? String {
                    self.replyType = value
                }
            }
        }
        public var code: Int32?

        public var replyMessagList: [GetInterveneGlobalReplyResponseBody.Data.ReplyMessagList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.replyMessagList != nil {
                var tmp : [Any] = []
                for k in self.replyMessagList! {
                    tmp.append(k.toMap())
                }
                map["ReplyMessagList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["ReplyMessagList"] as? [Any?] {
                var tmp : [GetInterveneGlobalReplyResponseBody.Data.ReplyMessagList] = []
                for v in value {
                    if v != nil {
                        var model = GetInterveneGlobalReplyResponseBody.Data.ReplyMessagList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.replyMessagList = tmp
            }
        }
    }
    public var code: String?

    public var data: GetInterveneGlobalReplyResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetInterveneGlobalReplyResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetInterveneGlobalReplyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInterveneGlobalReplyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetInterveneGlobalReplyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetInterveneImportTaskInfoRequest : Tea.TeaModel {
    public var agentKey: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class GetInterveneImportTaskInfoResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Status : Tea.TeaModel {
            public var msg: String?

            public var percentage: Int32?

            public var status: Int32?

            public var taskId: String?

            public var taskName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.msg != nil {
                    map["Msg"] = self.msg!
                }
                if self.percentage != nil {
                    map["Percentage"] = self.percentage!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.taskName != nil {
                    map["TaskName"] = self.taskName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Msg"] as? String {
                    self.msg = value
                }
                if let value = dict["Percentage"] as? Int32 {
                    self.percentage = value
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["TaskId"] as? String {
                    self.taskId = value
                }
                if let value = dict["TaskName"] as? String {
                    self.taskName = value
                }
            }
        }
        public var code: Int32?

        public var status: GetInterveneImportTaskInfoResponseBody.Data.Status?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.status?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.status != nil {
                map["Status"] = self.status?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["Status"] as? [String: Any?] {
                var model = GetInterveneImportTaskInfoResponseBody.Data.Status()
                model.fromMap(value)
                self.status = model
            }
        }
    }
    public var code: String?

    public var data: GetInterveneImportTaskInfoResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetInterveneImportTaskInfoResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetInterveneImportTaskInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInterveneImportTaskInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetInterveneImportTaskInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetInterveneRuleDetailRequest : Tea.TeaModel {
    public var agentKey: String?

    public var ruleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
    }
}

public class GetInterveneRuleDetailResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class InterveneRuleDetail : Tea.TeaModel {
            public class AnswerConfig : Tea.TeaModel {
                public var answerType: Int32?

                public var message: String?

                public var namespace: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.answerType != nil {
                        map["AnswerType"] = self.answerType!
                    }
                    if self.message != nil {
                        map["Message"] = self.message!
                    }
                    if self.namespace != nil {
                        map["Namespace"] = self.namespace!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AnswerType"] as? Int32 {
                        self.answerType = value
                    }
                    if let value = dict["Message"] as? String {
                        self.message = value
                    }
                    if let value = dict["Namespace"] as? String {
                        self.namespace = value
                    }
                }
            }
            public class EffectConfig : Tea.TeaModel {
                public var effectType: Int32?

                public var endTime: String?

                public var startTime: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.effectType != nil {
                        map["EffectType"] = self.effectType!
                    }
                    if self.endTime != nil {
                        map["EndTime"] = self.endTime!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EffectType"] as? Int32 {
                        self.effectType = value
                    }
                    if let value = dict["EndTime"] as? String {
                        self.endTime = value
                    }
                    if let value = dict["StartTime"] as? String {
                        self.startTime = value
                    }
                }
            }
            public var answerConfig: [GetInterveneRuleDetailResponseBody.Data.InterveneRuleDetail.AnswerConfig]?

            public var effectConfig: GetInterveneRuleDetailResponseBody.Data.InterveneRuleDetail.EffectConfig?

            public var interveneType: Int32?

            public var namespaceList: [String]?

            public var ruleId: Int64?

            public var ruleName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.effectConfig?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.answerConfig != nil {
                    var tmp : [Any] = []
                    for k in self.answerConfig! {
                        tmp.append(k.toMap())
                    }
                    map["AnswerConfig"] = tmp
                }
                if self.effectConfig != nil {
                    map["EffectConfig"] = self.effectConfig?.toMap()
                }
                if self.interveneType != nil {
                    map["InterveneType"] = self.interveneType!
                }
                if self.namespaceList != nil {
                    map["NamespaceList"] = self.namespaceList!
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AnswerConfig"] as? [Any?] {
                    var tmp : [GetInterveneRuleDetailResponseBody.Data.InterveneRuleDetail.AnswerConfig] = []
                    for v in value {
                        if v != nil {
                            var model = GetInterveneRuleDetailResponseBody.Data.InterveneRuleDetail.AnswerConfig()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.answerConfig = tmp
                }
                if let value = dict["EffectConfig"] as? [String: Any?] {
                    var model = GetInterveneRuleDetailResponseBody.Data.InterveneRuleDetail.EffectConfig()
                    model.fromMap(value)
                    self.effectConfig = model
                }
                if let value = dict["InterveneType"] as? Int32 {
                    self.interveneType = value
                }
                if let value = dict["NamespaceList"] as? [String] {
                    self.namespaceList = value
                }
                if let value = dict["RuleId"] as? Int64 {
                    self.ruleId = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
            }
        }
        public var code: Int32?

        public var interveneRuleDetail: GetInterveneRuleDetailResponseBody.Data.InterveneRuleDetail?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.interveneRuleDetail?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.interveneRuleDetail != nil {
                map["InterveneRuleDetail"] = self.interveneRuleDetail?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["InterveneRuleDetail"] as? [String: Any?] {
                var model = GetInterveneRuleDetailResponseBody.Data.InterveneRuleDetail()
                model.fromMap(value)
                self.interveneRuleDetail = model
            }
        }
    }
    public var code: String?

    public var data: GetInterveneRuleDetailResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetInterveneRuleDetailResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetInterveneRuleDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInterveneRuleDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetInterveneRuleDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetInterveneTemplateFileUrlRequest : Tea.TeaModel {
    public var agentKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
    }
}

public class GetInterveneTemplateFileUrlResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var code: Int32?

        public var fileUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
        }
    }
    public var code: String?

    public var data: GetInterveneTemplateFileUrlResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetInterveneTemplateFileUrlResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetInterveneTemplateFileUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInterveneTemplateFileUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetInterveneTemplateFileUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMaterialByIdRequest : Tea.TeaModel {
    public var agentKey: String?

    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class GetMaterialByIdResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var author: String?

        public var createTime: String?

        public var createUser: String?

        public var docKeywords: [String]?

        public var docType: String?

        public var externalUrl: String?

        public var htmlContent: String?

        public var id: Int64?

        public var pubTime: String?

        public var publicUrl: String?

        public var shareAttr: Int32?

        public var srcFrom: String?

        public var summary: String?

        public var textContent: String?

        public var thumbnailInBase64: String?

        public var title: String?

        public var updateTime: String?

        public var updateUser: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.author != nil {
                map["Author"] = self.author!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.docKeywords != nil {
                map["DocKeywords"] = self.docKeywords!
            }
            if self.docType != nil {
                map["DocType"] = self.docType!
            }
            if self.externalUrl != nil {
                map["ExternalUrl"] = self.externalUrl!
            }
            if self.htmlContent != nil {
                map["HtmlContent"] = self.htmlContent!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.pubTime != nil {
                map["PubTime"] = self.pubTime!
            }
            if self.publicUrl != nil {
                map["PublicUrl"] = self.publicUrl!
            }
            if self.shareAttr != nil {
                map["ShareAttr"] = self.shareAttr!
            }
            if self.srcFrom != nil {
                map["SrcFrom"] = self.srcFrom!
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.textContent != nil {
                map["TextContent"] = self.textContent!
            }
            if self.thumbnailInBase64 != nil {
                map["ThumbnailInBase64"] = self.thumbnailInBase64!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.updateUser != nil {
                map["UpdateUser"] = self.updateUser!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Author"] as? String {
                self.author = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["DocKeywords"] as? [String] {
                self.docKeywords = value
            }
            if let value = dict["DocType"] as? String {
                self.docType = value
            }
            if let value = dict["ExternalUrl"] as? String {
                self.externalUrl = value
            }
            if let value = dict["HtmlContent"] as? String {
                self.htmlContent = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["PubTime"] as? String {
                self.pubTime = value
            }
            if let value = dict["PublicUrl"] as? String {
                self.publicUrl = value
            }
            if let value = dict["ShareAttr"] as? Int32 {
                self.shareAttr = value
            }
            if let value = dict["SrcFrom"] as? String {
                self.srcFrom = value
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["TextContent"] as? String {
                self.textContent = value
            }
            if let value = dict["ThumbnailInBase64"] as? String {
                self.thumbnailInBase64 = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UpdateUser"] as? String {
                self.updateUser = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var code: String?

    public var data: GetMaterialByIdResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetMaterialByIdResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetMaterialByIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMaterialByIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMaterialByIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPropertiesRequest : Tea.TeaModel {
    public var agentKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
    }
}

public class GetPropertiesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ConsoleConfig : Tea.TeaModel {
            public var tipContent: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.tipContent != nil {
                    map["TipContent"] = self.tipContent!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["TipContent"] as? String {
                    self.tipContent = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public class IntelligentSearchConfig : Tea.TeaModel {
            public class CopilotPreciseSearchSources : Tea.TeaModel {
                public var code: String?

                public var datasetName: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.code != nil {
                        map["Code"] = self.code!
                    }
                    if self.datasetName != nil {
                        map["DatasetName"] = self.datasetName!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Code"] as? String {
                        self.code = value
                    }
                    if let value = dict["DatasetName"] as? String {
                        self.datasetName = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public class SearchSamples : Tea.TeaModel {
                public class Articles : Tea.TeaModel {
                    public var select: Bool?

                    public var stared: Bool?

                    public var title: String?

                    public var url: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.select != nil {
                            map["Select"] = self.select!
                        }
                        if self.stared != nil {
                            map["Stared"] = self.stared!
                        }
                        if self.title != nil {
                            map["Title"] = self.title!
                        }
                        if self.url != nil {
                            map["Url"] = self.url!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Select"] as? Bool {
                            self.select = value
                        }
                        if let value = dict["Stared"] as? Bool {
                            self.stared = value
                        }
                        if let value = dict["Title"] as? String {
                            self.title = value
                        }
                        if let value = dict["Url"] as? String {
                            self.url = value
                        }
                    }
                }
                public var articles: [GetPropertiesResponseBody.Data.IntelligentSearchConfig.SearchSamples.Articles]?

                public var prompt: String?

                public var text: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.articles != nil {
                        var tmp : [Any] = []
                        for k in self.articles! {
                            tmp.append(k.toMap())
                        }
                        map["Articles"] = tmp
                    }
                    if self.prompt != nil {
                        map["Prompt"] = self.prompt!
                    }
                    if self.text != nil {
                        map["Text"] = self.text!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Articles"] as? [Any?] {
                        var tmp : [GetPropertiesResponseBody.Data.IntelligentSearchConfig.SearchSamples.Articles] = []
                        for v in value {
                            if v != nil {
                                var model = GetPropertiesResponseBody.Data.IntelligentSearchConfig.SearchSamples.Articles()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.articles = tmp
                    }
                    if let value = dict["Prompt"] as? String {
                        self.prompt = value
                    }
                    if let value = dict["Text"] as? String {
                        self.text = value
                    }
                }
            }
            public class SearchSources : Tea.TeaModel {
                public var code: String?

                public var datasetName: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.code != nil {
                        map["Code"] = self.code!
                    }
                    if self.datasetName != nil {
                        map["DatasetName"] = self.datasetName!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Code"] as? String {
                        self.code = value
                    }
                    if let value = dict["DatasetName"] as? String {
                        self.datasetName = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var copilotPreciseSearchSources: [GetPropertiesResponseBody.Data.IntelligentSearchConfig.CopilotPreciseSearchSources]?

            public var productDescription: String?

            public var searchSamples: [GetPropertiesResponseBody.Data.IntelligentSearchConfig.SearchSamples]?

            public var searchSources: [GetPropertiesResponseBody.Data.IntelligentSearchConfig.SearchSources]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.copilotPreciseSearchSources != nil {
                    var tmp : [Any] = []
                    for k in self.copilotPreciseSearchSources! {
                        tmp.append(k.toMap())
                    }
                    map["CopilotPreciseSearchSources"] = tmp
                }
                if self.productDescription != nil {
                    map["ProductDescription"] = self.productDescription!
                }
                if self.searchSamples != nil {
                    var tmp : [Any] = []
                    for k in self.searchSamples! {
                        tmp.append(k.toMap())
                    }
                    map["SearchSamples"] = tmp
                }
                if self.searchSources != nil {
                    var tmp : [Any] = []
                    for k in self.searchSources! {
                        tmp.append(k.toMap())
                    }
                    map["SearchSources"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CopilotPreciseSearchSources"] as? [Any?] {
                    var tmp : [GetPropertiesResponseBody.Data.IntelligentSearchConfig.CopilotPreciseSearchSources] = []
                    for v in value {
                        if v != nil {
                            var model = GetPropertiesResponseBody.Data.IntelligentSearchConfig.CopilotPreciseSearchSources()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.copilotPreciseSearchSources = tmp
                }
                if let value = dict["ProductDescription"] as? String {
                    self.productDescription = value
                }
                if let value = dict["SearchSamples"] as? [Any?] {
                    var tmp : [GetPropertiesResponseBody.Data.IntelligentSearchConfig.SearchSamples] = []
                    for v in value {
                        if v != nil {
                            var model = GetPropertiesResponseBody.Data.IntelligentSearchConfig.SearchSamples()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.searchSamples = tmp
                }
                if let value = dict["SearchSources"] as? [Any?] {
                    var tmp : [GetPropertiesResponseBody.Data.IntelligentSearchConfig.SearchSources] = []
                    for v in value {
                        if v != nil {
                            var model = GetPropertiesResponseBody.Data.IntelligentSearchConfig.SearchSources()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.searchSources = tmp
                }
            }
        }
        public class MiaosouConfig : Tea.TeaModel {
            public class ModelInfos : Tea.TeaModel {
                public var modelId: String?

                public var modelName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.modelId != nil {
                        map["ModelId"] = self.modelId!
                    }
                    if self.modelName != nil {
                        map["ModelName"] = self.modelName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ModelId"] as? String {
                        self.modelId = value
                    }
                    if let value = dict["ModelName"] as? String {
                        self.modelName = value
                    }
                }
            }
            public var maxDocSize: Int64?

            public var modelInfos: [GetPropertiesResponseBody.Data.MiaosouConfig.ModelInfos]?

            public var useDocSize: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.maxDocSize != nil {
                    map["MaxDocSize"] = self.maxDocSize!
                }
                if self.modelInfos != nil {
                    var tmp : [Any] = []
                    for k in self.modelInfos! {
                        tmp.append(k.toMap())
                    }
                    map["ModelInfos"] = tmp
                }
                if self.useDocSize != nil {
                    map["UseDocSize"] = self.useDocSize!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MaxDocSize"] as? Int64 {
                    self.maxDocSize = value
                }
                if let value = dict["ModelInfos"] as? [Any?] {
                    var tmp : [GetPropertiesResponseBody.Data.MiaosouConfig.ModelInfos] = []
                    for v in value {
                        if v != nil {
                            var model = GetPropertiesResponseBody.Data.MiaosouConfig.ModelInfos()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.modelInfos = tmp
                }
                if let value = dict["UseDocSize"] as? Int64 {
                    self.useDocSize = value
                }
            }
        }
        public class SearchSourceList : Tea.TeaModel {
            public var code: String?

            public var datasetName: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.datasetName != nil {
                    map["DatasetName"] = self.datasetName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Code"] as? String {
                    self.code = value
                }
                if let value = dict["DatasetName"] as? String {
                    self.datasetName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public class SearchSources : Tea.TeaModel {
            public var label: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class UserInfo : Tea.TeaModel {
            public var agentId: String?

            public var tenantId: String?

            public var userId: String?

            public var username: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentId != nil {
                    map["AgentId"] = self.agentId!
                }
                if self.tenantId != nil {
                    map["TenantId"] = self.tenantId!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentId"] as? String {
                    self.agentId = value
                }
                if let value = dict["TenantId"] as? String {
                    self.tenantId = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
            }
        }
        public class WanxiangImageSizeConfig : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class WanxiangImageStyleConfig : Tea.TeaModel {
            public var name: String?

            public var pic: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.pic != nil {
                    map["Pic"] = self.pic!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Pic"] as? String {
                    self.pic = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var chatConfig: [String: Any]?

        public var consoleConfig: GetPropertiesResponseBody.Data.ConsoleConfig?

        public var generalConfigMap: [String: Any]?

        public var intelligentSearchConfig: GetPropertiesResponseBody.Data.IntelligentSearchConfig?

        public var miaosouConfig: GetPropertiesResponseBody.Data.MiaosouConfig?

        public var searchSourceList: [GetPropertiesResponseBody.Data.SearchSourceList]?

        public var searchSources: [GetPropertiesResponseBody.Data.SearchSources]?

        public var slrAuthorized: Bool?

        public var userInfo: GetPropertiesResponseBody.Data.UserInfo?

        public var wanxiangImageSizeConfig: [GetPropertiesResponseBody.Data.WanxiangImageSizeConfig]?

        public var wanxiangImageStyleConfig: [GetPropertiesResponseBody.Data.WanxiangImageStyleConfig]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.consoleConfig?.validate()
            try self.intelligentSearchConfig?.validate()
            try self.miaosouConfig?.validate()
            try self.userInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.chatConfig != nil {
                map["ChatConfig"] = self.chatConfig!
            }
            if self.consoleConfig != nil {
                map["ConsoleConfig"] = self.consoleConfig?.toMap()
            }
            if self.generalConfigMap != nil {
                map["GeneralConfigMap"] = self.generalConfigMap!
            }
            if self.intelligentSearchConfig != nil {
                map["IntelligentSearchConfig"] = self.intelligentSearchConfig?.toMap()
            }
            if self.miaosouConfig != nil {
                map["MiaosouConfig"] = self.miaosouConfig?.toMap()
            }
            if self.searchSourceList != nil {
                var tmp : [Any] = []
                for k in self.searchSourceList! {
                    tmp.append(k.toMap())
                }
                map["SearchSourceList"] = tmp
            }
            if self.searchSources != nil {
                var tmp : [Any] = []
                for k in self.searchSources! {
                    tmp.append(k.toMap())
                }
                map["SearchSources"] = tmp
            }
            if self.slrAuthorized != nil {
                map["SlrAuthorized"] = self.slrAuthorized!
            }
            if self.userInfo != nil {
                map["UserInfo"] = self.userInfo?.toMap()
            }
            if self.wanxiangImageSizeConfig != nil {
                var tmp : [Any] = []
                for k in self.wanxiangImageSizeConfig! {
                    tmp.append(k.toMap())
                }
                map["WanxiangImageSizeConfig"] = tmp
            }
            if self.wanxiangImageStyleConfig != nil {
                var tmp : [Any] = []
                for k in self.wanxiangImageStyleConfig! {
                    tmp.append(k.toMap())
                }
                map["WanxiangImageStyleConfig"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ChatConfig"] as? [String: Any] {
                self.chatConfig = value
            }
            if let value = dict["ConsoleConfig"] as? [String: Any?] {
                var model = GetPropertiesResponseBody.Data.ConsoleConfig()
                model.fromMap(value)
                self.consoleConfig = model
            }
            if let value = dict["GeneralConfigMap"] as? [String: Any] {
                self.generalConfigMap = value
            }
            if let value = dict["IntelligentSearchConfig"] as? [String: Any?] {
                var model = GetPropertiesResponseBody.Data.IntelligentSearchConfig()
                model.fromMap(value)
                self.intelligentSearchConfig = model
            }
            if let value = dict["MiaosouConfig"] as? [String: Any?] {
                var model = GetPropertiesResponseBody.Data.MiaosouConfig()
                model.fromMap(value)
                self.miaosouConfig = model
            }
            if let value = dict["SearchSourceList"] as? [Any?] {
                var tmp : [GetPropertiesResponseBody.Data.SearchSourceList] = []
                for v in value {
                    if v != nil {
                        var model = GetPropertiesResponseBody.Data.SearchSourceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.searchSourceList = tmp
            }
            if let value = dict["SearchSources"] as? [Any?] {
                var tmp : [GetPropertiesResponseBody.Data.SearchSources] = []
                for v in value {
                    if v != nil {
                        var model = GetPropertiesResponseBody.Data.SearchSources()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.searchSources = tmp
            }
            if let value = dict["SlrAuthorized"] as? Bool {
                self.slrAuthorized = value
            }
            if let value = dict["UserInfo"] as? [String: Any?] {
                var model = GetPropertiesResponseBody.Data.UserInfo()
                model.fromMap(value)
                self.userInfo = model
            }
            if let value = dict["WanxiangImageSizeConfig"] as? [Any?] {
                var tmp : [GetPropertiesResponseBody.Data.WanxiangImageSizeConfig] = []
                for v in value {
                    if v != nil {
                        var model = GetPropertiesResponseBody.Data.WanxiangImageSizeConfig()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.wanxiangImageSizeConfig = tmp
            }
            if let value = dict["WanxiangImageStyleConfig"] as? [Any?] {
                var tmp : [GetPropertiesResponseBody.Data.WanxiangImageStyleConfig] = []
                for v in value {
                    if v != nil {
                        var model = GetPropertiesResponseBody.Data.WanxiangImageStyleConfig()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.wanxiangImageStyleConfig = tmp
            }
        }
    }
    public var code: String?

    public var data: GetPropertiesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetPropertiesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetPropertiesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPropertiesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPropertiesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSmartAuditResultRequest : Tea.TeaModel {
    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetSmartAuditResultResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ErrorItemDetails : Tea.TeaModel {
            public var checkId: String?

            public var context: String?

            public var contextOffset: Int32?

            public var errorLevel: Int32?

            public var errorWord: String?

            public var majorCode: String?

            public var majorCodeDesc: String?

            public var offset: Int32?

            public var reason: String?

            public var rightWord: String?

            public var subClassCode: String?

            public var subClassDesc: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.checkId != nil {
                    map["CheckId"] = self.checkId!
                }
                if self.context != nil {
                    map["Context"] = self.context!
                }
                if self.contextOffset != nil {
                    map["ContextOffset"] = self.contextOffset!
                }
                if self.errorLevel != nil {
                    map["ErrorLevel"] = self.errorLevel!
                }
                if self.errorWord != nil {
                    map["ErrorWord"] = self.errorWord!
                }
                if self.majorCode != nil {
                    map["MajorCode"] = self.majorCode!
                }
                if self.majorCodeDesc != nil {
                    map["MajorCodeDesc"] = self.majorCodeDesc!
                }
                if self.offset != nil {
                    map["Offset"] = self.offset!
                }
                if self.reason != nil {
                    map["Reason"] = self.reason!
                }
                if self.rightWord != nil {
                    map["RightWord"] = self.rightWord!
                }
                if self.subClassCode != nil {
                    map["SubClassCode"] = self.subClassCode!
                }
                if self.subClassDesc != nil {
                    map["SubClassDesc"] = self.subClassDesc!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CheckId"] as? String {
                    self.checkId = value
                }
                if let value = dict["Context"] as? String {
                    self.context = value
                }
                if let value = dict["ContextOffset"] as? Int32 {
                    self.contextOffset = value
                }
                if let value = dict["ErrorLevel"] as? Int32 {
                    self.errorLevel = value
                }
                if let value = dict["ErrorWord"] as? String {
                    self.errorWord = value
                }
                if let value = dict["MajorCode"] as? String {
                    self.majorCode = value
                }
                if let value = dict["MajorCodeDesc"] as? String {
                    self.majorCodeDesc = value
                }
                if let value = dict["Offset"] as? Int32 {
                    self.offset = value
                }
                if let value = dict["Reason"] as? String {
                    self.reason = value
                }
                if let value = dict["RightWord"] as? String {
                    self.rightWord = value
                }
                if let value = dict["SubClassCode"] as? String {
                    self.subClassCode = value
                }
                if let value = dict["SubClassDesc"] as? String {
                    self.subClassDesc = value
                }
            }
        }
        public var errorItemDetails: [GetSmartAuditResultResponseBody.Data.ErrorItemDetails]?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorItemDetails != nil {
                var tmp : [Any] = []
                for k in self.errorItemDetails! {
                    tmp.append(k.toMap())
                }
                map["ErrorItemDetails"] = tmp
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorItemDetails"] as? [Any?] {
                var tmp : [GetSmartAuditResultResponseBody.Data.ErrorItemDetails] = []
                for v in value {
                    if v != nil {
                        var model = GetSmartAuditResultResponseBody.Data.ErrorItemDetails()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.errorItemDetails = tmp
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: String?

    public var data: GetSmartAuditResultResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetSmartAuditResultResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetSmartAuditResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSmartAuditResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSmartAuditResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSmartClipTaskRequest : Tea.TeaModel {
    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetSmartClipTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class SubJobs : Tea.TeaModel {
            public class FileAttr : Tea.TeaModel {
                public var duration: Double?

                public var fileLength: String?

                public var fileName: String?

                public var height: Int32?

                public var tmpUrl: String?

                public var width: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    if self.fileLength != nil {
                        map["FileLength"] = self.fileLength!
                    }
                    if self.fileName != nil {
                        map["FileName"] = self.fileName!
                    }
                    if self.height != nil {
                        map["Height"] = self.height!
                    }
                    if self.tmpUrl != nil {
                        map["TmpUrl"] = self.tmpUrl!
                    }
                    if self.width != nil {
                        map["Width"] = self.width!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Duration"] as? Double {
                        self.duration = value
                    }
                    if let value = dict["FileLength"] as? String {
                        self.fileLength = value
                    }
                    if let value = dict["FileName"] as? String {
                        self.fileName = value
                    }
                    if let value = dict["Height"] as? Int32 {
                        self.height = value
                    }
                    if let value = dict["TmpUrl"] as? String {
                        self.tmpUrl = value
                    }
                    if let value = dict["Width"] as? Int32 {
                        self.width = value
                    }
                }
            }
            public var errorMessage: String?

            public var fileAttr: GetSmartClipTaskResponseBody.Data.SubJobs.FileAttr?

            public var fileKey: String?

            public var status: String?

            public var subJobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.fileAttr?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.errorMessage != nil {
                    map["ErrorMessage"] = self.errorMessage!
                }
                if self.fileAttr != nil {
                    map["FileAttr"] = self.fileAttr?.toMap()
                }
                if self.fileKey != nil {
                    map["FileKey"] = self.fileKey!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.subJobId != nil {
                    map["SubJobId"] = self.subJobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ErrorMessage"] as? String {
                    self.errorMessage = value
                }
                if let value = dict["FileAttr"] as? [String: Any?] {
                    var model = GetSmartClipTaskResponseBody.Data.SubJobs.FileAttr()
                    model.fromMap(value)
                    self.fileAttr = model
                }
                if let value = dict["FileKey"] as? String {
                    self.fileKey = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["SubJobId"] as? String {
                    self.subJobId = value
                }
            }
        }
        public var errorMessage: String?

        public var status: String?

        public var subJobs: [GetSmartClipTaskResponseBody.Data.SubJobs]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.subJobs != nil {
                var tmp : [Any] = []
                for k in self.subJobs! {
                    tmp.append(k.toMap())
                }
                map["SubJobs"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["SubJobs"] as? [Any?] {
                var tmp : [GetSmartClipTaskResponseBody.Data.SubJobs] = []
                for v in value {
                    if v != nil {
                        var model = GetSmartClipTaskResponseBody.Data.SubJobs()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.subJobs = tmp
            }
        }
    }
    public var code: String?

    public var data: GetSmartClipTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetSmartClipTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetSmartClipTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSmartClipTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSmartClipTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetStyleLearningResultRequest : Tea.TeaModel {
    public var agentKey: String?

    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class GetStyleLearningResultResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ContentList : Tea.TeaModel {
            public var content: String?

            public var createTime: String?

            public var createUser: String?

            public var id: Int64?

            public var title: String?

            public var updateTime: String?

            public var updateUser: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.createUser != nil {
                    map["CreateUser"] = self.createUser!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.updateUser != nil {
                    map["UpdateUser"] = self.updateUser!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["CreateUser"] as? String {
                    self.createUser = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
                if let value = dict["UpdateUser"] as? String {
                    self.updateUser = value
                }
            }
        }
        public class MaterialInfoList : Tea.TeaModel {
            public var author: String?

            public var createTime: String?

            public var createUser: String?

            public var createUserName: String?

            public var docKeywords: [String]?

            public var docType: String?

            public var externalUrl: String?

            public var fileLength: Int32?

            public var htmlContent: String?

            public var id: Int64?

            public var pubTime: String?

            public var publicUrl: String?

            public var shareAttr: Int32?

            public var srcFrom: String?

            public var summary: String?

            public var textContent: String?

            public var thumbnailInBase64: String?

            public var title: String?

            public var updateTime: String?

            public var updateUser: String?

            public var updateUserName: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.author != nil {
                    map["Author"] = self.author!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.createUser != nil {
                    map["CreateUser"] = self.createUser!
                }
                if self.createUserName != nil {
                    map["CreateUserName"] = self.createUserName!
                }
                if self.docKeywords != nil {
                    map["DocKeywords"] = self.docKeywords!
                }
                if self.docType != nil {
                    map["DocType"] = self.docType!
                }
                if self.externalUrl != nil {
                    map["ExternalUrl"] = self.externalUrl!
                }
                if self.fileLength != nil {
                    map["FileLength"] = self.fileLength!
                }
                if self.htmlContent != nil {
                    map["HtmlContent"] = self.htmlContent!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.pubTime != nil {
                    map["PubTime"] = self.pubTime!
                }
                if self.publicUrl != nil {
                    map["PublicUrl"] = self.publicUrl!
                }
                if self.shareAttr != nil {
                    map["ShareAttr"] = self.shareAttr!
                }
                if self.srcFrom != nil {
                    map["SrcFrom"] = self.srcFrom!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                if self.textContent != nil {
                    map["TextContent"] = self.textContent!
                }
                if self.thumbnailInBase64 != nil {
                    map["ThumbnailInBase64"] = self.thumbnailInBase64!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.updateUser != nil {
                    map["UpdateUser"] = self.updateUser!
                }
                if self.updateUserName != nil {
                    map["UpdateUserName"] = self.updateUserName!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Author"] as? String {
                    self.author = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["CreateUser"] as? String {
                    self.createUser = value
                }
                if let value = dict["CreateUserName"] as? String {
                    self.createUserName = value
                }
                if let value = dict["DocKeywords"] as? [String] {
                    self.docKeywords = value
                }
                if let value = dict["DocType"] as? String {
                    self.docType = value
                }
                if let value = dict["ExternalUrl"] as? String {
                    self.externalUrl = value
                }
                if let value = dict["FileLength"] as? Int32 {
                    self.fileLength = value
                }
                if let value = dict["HtmlContent"] as? String {
                    self.htmlContent = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["PubTime"] as? String {
                    self.pubTime = value
                }
                if let value = dict["PublicUrl"] as? String {
                    self.publicUrl = value
                }
                if let value = dict["ShareAttr"] as? Int32 {
                    self.shareAttr = value
                }
                if let value = dict["SrcFrom"] as? String {
                    self.srcFrom = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
                if let value = dict["TextContent"] as? String {
                    self.textContent = value
                }
                if let value = dict["ThumbnailInBase64"] as? String {
                    self.thumbnailInBase64 = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
                if let value = dict["UpdateUser"] as? String {
                    self.updateUser = value
                }
                if let value = dict["UpdateUserName"] as? String {
                    self.updateUserName = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var aigcResult: String?

        public var contentList: [GetStyleLearningResultResponseBody.Data.ContentList]?

        public var customTextIdList: [Int64]?

        public var id: Int64?

        public var materialIdList: [Int64]?

        public var materialInfoList: [GetStyleLearningResultResponseBody.Data.MaterialInfoList]?

        public var rewriteResult: String?

        public var styleName: String?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aigcResult != nil {
                map["AigcResult"] = self.aigcResult!
            }
            if self.contentList != nil {
                var tmp : [Any] = []
                for k in self.contentList! {
                    tmp.append(k.toMap())
                }
                map["ContentList"] = tmp
            }
            if self.customTextIdList != nil {
                map["CustomTextIdList"] = self.customTextIdList!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.materialIdList != nil {
                map["MaterialIdList"] = self.materialIdList!
            }
            if self.materialInfoList != nil {
                var tmp : [Any] = []
                for k in self.materialInfoList! {
                    tmp.append(k.toMap())
                }
                map["MaterialInfoList"] = tmp
            }
            if self.rewriteResult != nil {
                map["RewriteResult"] = self.rewriteResult!
            }
            if self.styleName != nil {
                map["StyleName"] = self.styleName!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AigcResult"] as? String {
                self.aigcResult = value
            }
            if let value = dict["ContentList"] as? [Any?] {
                var tmp : [GetStyleLearningResultResponseBody.Data.ContentList] = []
                for v in value {
                    if v != nil {
                        var model = GetStyleLearningResultResponseBody.Data.ContentList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.contentList = tmp
            }
            if let value = dict["CustomTextIdList"] as? [Int64] {
                self.customTextIdList = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["MaterialIdList"] as? [Int64] {
                self.materialIdList = value
            }
            if let value = dict["MaterialInfoList"] as? [Any?] {
                var tmp : [GetStyleLearningResultResponseBody.Data.MaterialInfoList] = []
                for v in value {
                    if v != nil {
                        var model = GetStyleLearningResultResponseBody.Data.MaterialInfoList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.materialInfoList = tmp
            }
            if let value = dict["RewriteResult"] as? String {
                self.rewriteResult = value
            }
            if let value = dict["StyleName"] as? String {
                self.styleName = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: GetStyleLearningResultResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetStyleLearningResultResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetStyleLearningResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetStyleLearningResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetStyleLearningResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTopicByIdRequest : Tea.TeaModel {
    public var agentKey: String?

    public var id: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
    }
}

public class GetTopicByIdResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class StructureSummary : Tea.TeaModel {
            public class DocList : Tea.TeaModel {
                public var source: String?

                public var title: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.source != nil {
                        map["Source"] = self.source!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Source"] as? String {
                        self.source = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var docList: [GetTopicByIdResponseBody.Data.StructureSummary.DocList]?

            public var summary: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.docList != nil {
                    var tmp : [Any] = []
                    for k in self.docList! {
                        tmp.append(k.toMap())
                    }
                    map["DocList"] = tmp
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DocList"] as? [Any?] {
                    var tmp : [GetTopicByIdResponseBody.Data.StructureSummary.DocList] = []
                    for v in value {
                        if v != nil {
                            var model = GetTopicByIdResponseBody.Data.StructureSummary.DocList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.docList = tmp
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public var asyncTaskId: String?

        public var createUser: String?

        public var hotValue: Int64?

        public var id: String?

        public var status: String?

        public var structureSummary: [GetTopicByIdResponseBody.Data.StructureSummary]?

        public var summary: String?

        public var taskErrorMessage: String?

        public var taskStatus: Int32?

        public var topic: String?

        public var topicSource: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.asyncTaskId != nil {
                map["AsyncTaskId"] = self.asyncTaskId!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.hotValue != nil {
                map["HotValue"] = self.hotValue!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.structureSummary != nil {
                var tmp : [Any] = []
                for k in self.structureSummary! {
                    tmp.append(k.toMap())
                }
                map["StructureSummary"] = tmp
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.taskErrorMessage != nil {
                map["TaskErrorMessage"] = self.taskErrorMessage!
            }
            if self.taskStatus != nil {
                map["TaskStatus"] = self.taskStatus!
            }
            if self.topic != nil {
                map["Topic"] = self.topic!
            }
            if self.topicSource != nil {
                map["TopicSource"] = self.topicSource!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AsyncTaskId"] as? String {
                self.asyncTaskId = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["HotValue"] as? Int64 {
                self.hotValue = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StructureSummary"] as? [Any?] {
                var tmp : [GetTopicByIdResponseBody.Data.StructureSummary] = []
                for v in value {
                    if v != nil {
                        var model = GetTopicByIdResponseBody.Data.StructureSummary()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.structureSummary = tmp
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["TaskErrorMessage"] as? String {
                self.taskErrorMessage = value
            }
            if let value = dict["TaskStatus"] as? Int32 {
                self.taskStatus = value
            }
            if let value = dict["Topic"] as? String {
                self.topic = value
            }
            if let value = dict["TopicSource"] as? String {
                self.topicSource = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public var code: String?

    public var data: GetTopicByIdResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetTopicByIdResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetTopicByIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTopicByIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTopicByIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTopicSelectionPerspectiveAnalysisTaskRequest : Tea.TeaModel {
    public var agentKey: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class GetTopicSelectionPerspectiveAnalysisTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class FreshViewPointsResult : Tea.TeaModel {
            public class Attitudes : Tea.TeaModel {
                public class ViewPoints : Tea.TeaModel {
                    public class Outlines : Tea.TeaModel {
                        public var outline: String?

                        public var summary: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.outline != nil {
                                map["Outline"] = self.outline!
                            }
                            if self.summary != nil {
                                map["Summary"] = self.summary!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Outline"] as? String {
                                self.outline = value
                            }
                            if let value = dict["Summary"] as? String {
                                self.summary = value
                            }
                        }
                    }
                    public var outlines: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.FreshViewPointsResult.Attitudes.ViewPoints.Outlines]?

                    public var point: String?

                    public var summary: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.outlines != nil {
                            var tmp : [Any] = []
                            for k in self.outlines! {
                                tmp.append(k.toMap())
                            }
                            map["Outlines"] = tmp
                        }
                        if self.point != nil {
                            map["Point"] = self.point!
                        }
                        if self.summary != nil {
                            map["Summary"] = self.summary!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Outlines"] as? [Any?] {
                            var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.FreshViewPointsResult.Attitudes.ViewPoints.Outlines] = []
                            for v in value {
                                if v != nil {
                                    var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.FreshViewPointsResult.Attitudes.ViewPoints.Outlines()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.outlines = tmp
                        }
                        if let value = dict["Point"] as? String {
                            self.point = value
                        }
                        if let value = dict["Summary"] as? String {
                            self.summary = value
                        }
                    }
                }
                public var attitude: String?

                public var attitudeType: String?

                public var ratio: String?

                public var viewPoints: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.FreshViewPointsResult.Attitudes.ViewPoints]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.attitude != nil {
                        map["Attitude"] = self.attitude!
                    }
                    if self.attitudeType != nil {
                        map["AttitudeType"] = self.attitudeType!
                    }
                    if self.ratio != nil {
                        map["Ratio"] = self.ratio!
                    }
                    if self.viewPoints != nil {
                        var tmp : [Any] = []
                        for k in self.viewPoints! {
                            tmp.append(k.toMap())
                        }
                        map["ViewPoints"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Attitude"] as? String {
                        self.attitude = value
                    }
                    if let value = dict["AttitudeType"] as? String {
                        self.attitudeType = value
                    }
                    if let value = dict["Ratio"] as? String {
                        self.ratio = value
                    }
                    if let value = dict["ViewPoints"] as? [Any?] {
                        var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.FreshViewPointsResult.Attitudes.ViewPoints] = []
                        for v in value {
                            if v != nil {
                                var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.FreshViewPointsResult.Attitudes.ViewPoints()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.viewPoints = tmp
                    }
                }
            }
            public var attitudes: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.FreshViewPointsResult.Attitudes]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.attitudes != nil {
                    var tmp : [Any] = []
                    for k in self.attitudes! {
                        tmp.append(k.toMap())
                    }
                    map["Attitudes"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Attitudes"] as? [Any?] {
                    var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.FreshViewPointsResult.Attitudes] = []
                    for v in value {
                        if v != nil {
                            var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.FreshViewPointsResult.Attitudes()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.attitudes = tmp
                }
            }
        }
        public class HotViewPointsResult : Tea.TeaModel {
            public class Attitudes : Tea.TeaModel {
                public class News : Tea.TeaModel {
                    public var content: String?

                    public var createTime: String?

                    public var docId: String?

                    public var docUuid: String?

                    public var imageUrls: [String]?

                    public var pubTime: String?

                    public var source: String?

                    public var summary: String?

                    public var tags: [String]?

                    public var title: String?

                    public var topic: String?

                    public var url: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.content != nil {
                            map["Content"] = self.content!
                        }
                        if self.createTime != nil {
                            map["CreateTime"] = self.createTime!
                        }
                        if self.docId != nil {
                            map["DocId"] = self.docId!
                        }
                        if self.docUuid != nil {
                            map["DocUuid"] = self.docUuid!
                        }
                        if self.imageUrls != nil {
                            map["ImageUrls"] = self.imageUrls!
                        }
                        if self.pubTime != nil {
                            map["PubTime"] = self.pubTime!
                        }
                        if self.source != nil {
                            map["Source"] = self.source!
                        }
                        if self.summary != nil {
                            map["Summary"] = self.summary!
                        }
                        if self.tags != nil {
                            map["Tags"] = self.tags!
                        }
                        if self.title != nil {
                            map["Title"] = self.title!
                        }
                        if self.topic != nil {
                            map["Topic"] = self.topic!
                        }
                        if self.url != nil {
                            map["Url"] = self.url!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Content"] as? String {
                            self.content = value
                        }
                        if let value = dict["CreateTime"] as? String {
                            self.createTime = value
                        }
                        if let value = dict["DocId"] as? String {
                            self.docId = value
                        }
                        if let value = dict["DocUuid"] as? String {
                            self.docUuid = value
                        }
                        if let value = dict["ImageUrls"] as? [String] {
                            self.imageUrls = value
                        }
                        if let value = dict["PubTime"] as? String {
                            self.pubTime = value
                        }
                        if let value = dict["Source"] as? String {
                            self.source = value
                        }
                        if let value = dict["Summary"] as? String {
                            self.summary = value
                        }
                        if let value = dict["Tags"] as? [String] {
                            self.tags = value
                        }
                        if let value = dict["Title"] as? String {
                            self.title = value
                        }
                        if let value = dict["Topic"] as? String {
                            self.topic = value
                        }
                        if let value = dict["Url"] as? String {
                            self.url = value
                        }
                    }
                }
                public class ViewPoints : Tea.TeaModel {
                    public class Outlines : Tea.TeaModel {
                        public var outline: String?

                        public var summary: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.outline != nil {
                                map["Outline"] = self.outline!
                            }
                            if self.summary != nil {
                                map["Summary"] = self.summary!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Outline"] as? String {
                                self.outline = value
                            }
                            if let value = dict["Summary"] as? String {
                                self.summary = value
                            }
                        }
                    }
                    public var outlines: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult.Attitudes.ViewPoints.Outlines]?

                    public var point: String?

                    public var summary: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.outlines != nil {
                            var tmp : [Any] = []
                            for k in self.outlines! {
                                tmp.append(k.toMap())
                            }
                            map["Outlines"] = tmp
                        }
                        if self.point != nil {
                            map["Point"] = self.point!
                        }
                        if self.summary != nil {
                            map["Summary"] = self.summary!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Outlines"] as? [Any?] {
                            var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult.Attitudes.ViewPoints.Outlines] = []
                            for v in value {
                                if v != nil {
                                    var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult.Attitudes.ViewPoints.Outlines()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.outlines = tmp
                        }
                        if let value = dict["Point"] as? String {
                            self.point = value
                        }
                        if let value = dict["Summary"] as? String {
                            self.summary = value
                        }
                    }
                }
                public var attitude: String?

                public var attitudeType: String?

                public var news: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult.Attitudes.News]?

                public var ratio: String?

                public var viewPoints: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult.Attitudes.ViewPoints]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.attitude != nil {
                        map["Attitude"] = self.attitude!
                    }
                    if self.attitudeType != nil {
                        map["AttitudeType"] = self.attitudeType!
                    }
                    if self.news != nil {
                        var tmp : [Any] = []
                        for k in self.news! {
                            tmp.append(k.toMap())
                        }
                        map["News"] = tmp
                    }
                    if self.ratio != nil {
                        map["Ratio"] = self.ratio!
                    }
                    if self.viewPoints != nil {
                        var tmp : [Any] = []
                        for k in self.viewPoints! {
                            tmp.append(k.toMap())
                        }
                        map["ViewPoints"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Attitude"] as? String {
                        self.attitude = value
                    }
                    if let value = dict["AttitudeType"] as? String {
                        self.attitudeType = value
                    }
                    if let value = dict["News"] as? [Any?] {
                        var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult.Attitudes.News] = []
                        for v in value {
                            if v != nil {
                                var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult.Attitudes.News()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.news = tmp
                    }
                    if let value = dict["Ratio"] as? String {
                        self.ratio = value
                    }
                    if let value = dict["ViewPoints"] as? [Any?] {
                        var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult.Attitudes.ViewPoints] = []
                        for v in value {
                            if v != nil {
                                var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult.Attitudes.ViewPoints()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.viewPoints = tmp
                    }
                }
            }
            public var attitudes: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult.Attitudes]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.attitudes != nil {
                    var tmp : [Any] = []
                    for k in self.attitudes! {
                        tmp.append(k.toMap())
                    }
                    map["Attitudes"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Attitudes"] as? [Any?] {
                    var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult.Attitudes] = []
                    for v in value {
                        if v != nil {
                            var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult.Attitudes()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.attitudes = tmp
                }
            }
        }
        public class TimedViewPointsResult : Tea.TeaModel {
            public class Attitudes : Tea.TeaModel {
                public class ViewPoints : Tea.TeaModel {
                    public class Outlines : Tea.TeaModel {
                        public var outline: String?

                        public var summary: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.outline != nil {
                                map["Outline"] = self.outline!
                            }
                            if self.summary != nil {
                                map["Summary"] = self.summary!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Outline"] as? String {
                                self.outline = value
                            }
                            if let value = dict["Summary"] as? String {
                                self.summary = value
                            }
                        }
                    }
                    public var outlines: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TimedViewPointsResult.Attitudes.ViewPoints.Outlines]?

                    public var point: String?

                    public var summary: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.outlines != nil {
                            var tmp : [Any] = []
                            for k in self.outlines! {
                                tmp.append(k.toMap())
                            }
                            map["Outlines"] = tmp
                        }
                        if self.point != nil {
                            map["Point"] = self.point!
                        }
                        if self.summary != nil {
                            map["Summary"] = self.summary!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Outlines"] as? [Any?] {
                            var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TimedViewPointsResult.Attitudes.ViewPoints.Outlines] = []
                            for v in value {
                                if v != nil {
                                    var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TimedViewPointsResult.Attitudes.ViewPoints.Outlines()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.outlines = tmp
                        }
                        if let value = dict["Point"] as? String {
                            self.point = value
                        }
                        if let value = dict["Summary"] as? String {
                            self.summary = value
                        }
                    }
                }
                public var attitude: String?

                public var attitudeType: String?

                public var pubTime: String?

                public var ratio: String?

                public var source: String?

                public var title: String?

                public var url: String?

                public var viewPoints: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TimedViewPointsResult.Attitudes.ViewPoints]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.attitude != nil {
                        map["Attitude"] = self.attitude!
                    }
                    if self.attitudeType != nil {
                        map["AttitudeType"] = self.attitudeType!
                    }
                    if self.pubTime != nil {
                        map["PubTime"] = self.pubTime!
                    }
                    if self.ratio != nil {
                        map["Ratio"] = self.ratio!
                    }
                    if self.source != nil {
                        map["Source"] = self.source!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    if self.viewPoints != nil {
                        var tmp : [Any] = []
                        for k in self.viewPoints! {
                            tmp.append(k.toMap())
                        }
                        map["ViewPoints"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Attitude"] as? String {
                        self.attitude = value
                    }
                    if let value = dict["AttitudeType"] as? String {
                        self.attitudeType = value
                    }
                    if let value = dict["PubTime"] as? String {
                        self.pubTime = value
                    }
                    if let value = dict["Ratio"] as? String {
                        self.ratio = value
                    }
                    if let value = dict["Source"] as? String {
                        self.source = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                    if let value = dict["ViewPoints"] as? [Any?] {
                        var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TimedViewPointsResult.Attitudes.ViewPoints] = []
                        for v in value {
                            if v != nil {
                                var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TimedViewPointsResult.Attitudes.ViewPoints()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.viewPoints = tmp
                    }
                }
            }
            public var attitudes: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TimedViewPointsResult.Attitudes]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.attitudes != nil {
                    var tmp : [Any] = []
                    for k in self.attitudes! {
                        tmp.append(k.toMap())
                    }
                    map["Attitudes"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Attitudes"] as? [Any?] {
                    var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TimedViewPointsResult.Attitudes] = []
                    for v in value {
                        if v != nil {
                            var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TimedViewPointsResult.Attitudes()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.attitudes = tmp
                }
            }
        }
        public class TopicSummaryResult : Tea.TeaModel {
            public class Summaries : Tea.TeaModel {
                public class DocList : Tea.TeaModel {
                    public var source: String?

                    public var title: String?

                    public var url: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.source != nil {
                            map["Source"] = self.source!
                        }
                        if self.title != nil {
                            map["Title"] = self.title!
                        }
                        if self.url != nil {
                            map["Url"] = self.url!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Source"] as? String {
                            self.source = value
                        }
                        if let value = dict["Title"] as? String {
                            self.title = value
                        }
                        if let value = dict["Url"] as? String {
                            self.url = value
                        }
                    }
                }
                public var docList: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TopicSummaryResult.Summaries.DocList]?

                public var summary: String?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.docList != nil {
                        var tmp : [Any] = []
                        for k in self.docList! {
                            tmp.append(k.toMap())
                        }
                        map["DocList"] = tmp
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DocList"] as? [Any?] {
                        var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TopicSummaryResult.Summaries.DocList] = []
                        for v in value {
                            if v != nil {
                                var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TopicSummaryResult.Summaries.DocList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.docList = tmp
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                }
            }
            public var summaries: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TopicSummaryResult.Summaries]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.summaries != nil {
                    var tmp : [Any] = []
                    for k in self.summaries! {
                        tmp.append(k.toMap())
                    }
                    map["Summaries"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Summaries"] as? [Any?] {
                    var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TopicSummaryResult.Summaries] = []
                    for v in value {
                        if v != nil {
                            var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TopicSummaryResult.Summaries()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.summaries = tmp
                }
            }
        }
        public class WebReviewPointsResult : Tea.TeaModel {
            public class Attitudes : Tea.TeaModel {
                public class Comments : Tea.TeaModel {
                    public var source: String?

                    public var text: String?

                    public var title: String?

                    public var url: String?

                    public var username: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.source != nil {
                            map["Source"] = self.source!
                        }
                        if self.text != nil {
                            map["Text"] = self.text!
                        }
                        if self.title != nil {
                            map["Title"] = self.title!
                        }
                        if self.url != nil {
                            map["Url"] = self.url!
                        }
                        if self.username != nil {
                            map["Username"] = self.username!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Source"] as? String {
                            self.source = value
                        }
                        if let value = dict["Text"] as? String {
                            self.text = value
                        }
                        if let value = dict["Title"] as? String {
                            self.title = value
                        }
                        if let value = dict["Url"] as? String {
                            self.url = value
                        }
                        if let value = dict["Username"] as? String {
                            self.username = value
                        }
                    }
                }
                public class ViewPoints : Tea.TeaModel {
                    public class Outlines : Tea.TeaModel {
                        public var outline: String?

                        public var summary: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.outline != nil {
                                map["Outline"] = self.outline!
                            }
                            if self.summary != nil {
                                map["Summary"] = self.summary!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Outline"] as? String {
                                self.outline = value
                            }
                            if let value = dict["Summary"] as? String {
                                self.summary = value
                            }
                        }
                    }
                    public var outlines: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult.Attitudes.ViewPoints.Outlines]?

                    public var point: String?

                    public var summary: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.outlines != nil {
                            var tmp : [Any] = []
                            for k in self.outlines! {
                                tmp.append(k.toMap())
                            }
                            map["Outlines"] = tmp
                        }
                        if self.point != nil {
                            map["Point"] = self.point!
                        }
                        if self.summary != nil {
                            map["Summary"] = self.summary!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Outlines"] as? [Any?] {
                            var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult.Attitudes.ViewPoints.Outlines] = []
                            for v in value {
                                if v != nil {
                                    var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult.Attitudes.ViewPoints.Outlines()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.outlines = tmp
                        }
                        if let value = dict["Point"] as? String {
                            self.point = value
                        }
                        if let value = dict["Summary"] as? String {
                            self.summary = value
                        }
                    }
                }
                public var attitude: String?

                public var attitudeType: String?

                public var comments: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult.Attitudes.Comments]?

                public var ratio: String?

                public var viewPoints: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult.Attitudes.ViewPoints]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.attitude != nil {
                        map["Attitude"] = self.attitude!
                    }
                    if self.attitudeType != nil {
                        map["AttitudeType"] = self.attitudeType!
                    }
                    if self.comments != nil {
                        var tmp : [Any] = []
                        for k in self.comments! {
                            tmp.append(k.toMap())
                        }
                        map["Comments"] = tmp
                    }
                    if self.ratio != nil {
                        map["Ratio"] = self.ratio!
                    }
                    if self.viewPoints != nil {
                        var tmp : [Any] = []
                        for k in self.viewPoints! {
                            tmp.append(k.toMap())
                        }
                        map["ViewPoints"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Attitude"] as? String {
                        self.attitude = value
                    }
                    if let value = dict["AttitudeType"] as? String {
                        self.attitudeType = value
                    }
                    if let value = dict["Comments"] as? [Any?] {
                        var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult.Attitudes.Comments] = []
                        for v in value {
                            if v != nil {
                                var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult.Attitudes.Comments()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.comments = tmp
                    }
                    if let value = dict["Ratio"] as? String {
                        self.ratio = value
                    }
                    if let value = dict["ViewPoints"] as? [Any?] {
                        var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult.Attitudes.ViewPoints] = []
                        for v in value {
                            if v != nil {
                                var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult.Attitudes.ViewPoints()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.viewPoints = tmp
                    }
                }
            }
            public var attitudes: [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult.Attitudes]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.attitudes != nil {
                    var tmp : [Any] = []
                    for k in self.attitudes! {
                        tmp.append(k.toMap())
                    }
                    map["Attitudes"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Attitudes"] as? [Any?] {
                    var tmp : [GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult.Attitudes] = []
                    for v in value {
                        if v != nil {
                            var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult.Attitudes()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.attitudes = tmp
                }
            }
        }
        public var errorMessage: String?

        public var freshViewPointsResult: GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.FreshViewPointsResult?

        public var hotViewPointsResult: GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult?

        public var status: String?

        public var timedViewPointsResult: GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TimedViewPointsResult?

        public var topic: String?

        public var topicSummaryResult: GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TopicSummaryResult?

        public var webReviewPointsResult: GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.freshViewPointsResult?.validate()
            try self.hotViewPointsResult?.validate()
            try self.timedViewPointsResult?.validate()
            try self.topicSummaryResult?.validate()
            try self.webReviewPointsResult?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.freshViewPointsResult != nil {
                map["FreshViewPointsResult"] = self.freshViewPointsResult?.toMap()
            }
            if self.hotViewPointsResult != nil {
                map["HotViewPointsResult"] = self.hotViewPointsResult?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.timedViewPointsResult != nil {
                map["TimedViewPointsResult"] = self.timedViewPointsResult?.toMap()
            }
            if self.topic != nil {
                map["Topic"] = self.topic!
            }
            if self.topicSummaryResult != nil {
                map["TopicSummaryResult"] = self.topicSummaryResult?.toMap()
            }
            if self.webReviewPointsResult != nil {
                map["WebReviewPointsResult"] = self.webReviewPointsResult?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["FreshViewPointsResult"] as? [String: Any?] {
                var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.FreshViewPointsResult()
                model.fromMap(value)
                self.freshViewPointsResult = model
            }
            if let value = dict["HotViewPointsResult"] as? [String: Any?] {
                var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.HotViewPointsResult()
                model.fromMap(value)
                self.hotViewPointsResult = model
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TimedViewPointsResult"] as? [String: Any?] {
                var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TimedViewPointsResult()
                model.fromMap(value)
                self.timedViewPointsResult = model
            }
            if let value = dict["Topic"] as? String {
                self.topic = value
            }
            if let value = dict["TopicSummaryResult"] as? [String: Any?] {
                var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.TopicSummaryResult()
                model.fromMap(value)
                self.topicSummaryResult = model
            }
            if let value = dict["WebReviewPointsResult"] as? [String: Any?] {
                var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data.WebReviewPointsResult()
                model.fromMap(value)
                self.webReviewPointsResult = model
            }
        }
    }
    public var code: String?

    public var data: GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetTopicSelectionPerspectiveAnalysisTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTopicSelectionPerspectiveAnalysisTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTopicSelectionPerspectiveAnalysisTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportInterveneFileRequest : Tea.TeaModel {
    public var agentKey: String?

    public var docName: String?

    public var fileKey: String?

    public var fileUrl: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.docName != nil {
            map["DocName"] = self.docName!
        }
        if self.fileKey != nil {
            map["FileKey"] = self.fileKey!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["DocName"] as? String {
            self.docName = value
        }
        if let value = dict["FileKey"] as? String {
            self.fileKey = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
    }
}

public class ImportInterveneFileResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var code: Int32?

        public var failIdList: [String]?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.failIdList != nil {
                map["FailIdList"] = self.failIdList!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["FailIdList"] as? [String] {
                self.failIdList = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: ImportInterveneFileResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ImportInterveneFileResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ImportInterveneFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportInterveneFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportInterveneFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportInterveneFileAsyncRequest : Tea.TeaModel {
    public var agentKey: String?

    public var docName: String?

    public var fileKey: String?

    public var fileUrl: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.docName != nil {
            map["DocName"] = self.docName!
        }
        if self.fileKey != nil {
            map["FileKey"] = self.fileKey!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["DocName"] as? String {
            self.docName = value
        }
        if let value = dict["FileKey"] as? String {
            self.fileKey = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
    }
}

public class ImportInterveneFileAsyncResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var code: Int32?

        public var failIdList: [String]?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.failIdList != nil {
                map["FailIdList"] = self.failIdList!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["FailIdList"] as? [String] {
                self.failIdList = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: ImportInterveneFileAsyncResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ImportInterveneFileAsyncResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ImportInterveneFileAsyncResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportInterveneFileAsyncResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportInterveneFileAsyncResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InsertInterveneGlobalReplyRequest : Tea.TeaModel {
    public class ReplyMessagList : Tea.TeaModel {
        public var message: String?

        public var replyType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.message != nil {
                map["Message"] = self.message!
            }
            if self.replyType != nil {
                map["ReplyType"] = self.replyType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Message"] as? String {
                self.message = value
            }
            if let value = dict["ReplyType"] as? String {
                self.replyType = value
            }
        }
    }
    public var agentKey: String?

    public var replyMessagList: [InsertInterveneGlobalReplyRequest.ReplyMessagList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.replyMessagList != nil {
            var tmp : [Any] = []
            for k in self.replyMessagList! {
                tmp.append(k.toMap())
            }
            map["ReplyMessagList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["ReplyMessagList"] as? [Any?] {
            var tmp : [InsertInterveneGlobalReplyRequest.ReplyMessagList] = []
            for v in value {
                if v != nil {
                    var model = InsertInterveneGlobalReplyRequest.ReplyMessagList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.replyMessagList = tmp
        }
    }
}

public class InsertInterveneGlobalReplyShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var replyMessagListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.replyMessagListShrink != nil {
            map["ReplyMessagList"] = self.replyMessagListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["ReplyMessagList"] as? String {
            self.replyMessagListShrink = value
        }
    }
}

public class InsertInterveneGlobalReplyResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var code: Int32?

        public var failIdList: [String]?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.failIdList != nil {
                map["FailIdList"] = self.failIdList!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["FailIdList"] as? [String] {
                self.failIdList = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: InsertInterveneGlobalReplyResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = InsertInterveneGlobalReplyResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class InsertInterveneGlobalReplyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsertInterveneGlobalReplyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InsertInterveneGlobalReplyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InsertInterveneRuleRequest : Tea.TeaModel {
    public class InterveneRuleConfig : Tea.TeaModel {
        public class AnswerConfig : Tea.TeaModel {
            public var answerType: Int32?

            public var message: String?

            public var namespace: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.answerType != nil {
                    map["AnswerType"] = self.answerType!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                if self.namespace != nil {
                    map["Namespace"] = self.namespace!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AnswerType"] as? Int32 {
                    self.answerType = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
                if let value = dict["Namespace"] as? String {
                    self.namespace = value
                }
            }
        }
        public class EffectConfig : Tea.TeaModel {
            public var effectType: Int32?

            public var endTime: String?

            public var startTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.effectType != nil {
                    map["EffectType"] = self.effectType!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EffectType"] as? Int32 {
                    self.effectType = value
                }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
            }
        }
        public class InterveneConfigList : Tea.TeaModel {
            public var id: String?

            public var operationType: Int32?

            public var query: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.operationType != nil {
                    map["OperationType"] = self.operationType!
                }
                if self.query != nil {
                    map["Query"] = self.query!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["OperationType"] as? Int32 {
                    self.operationType = value
                }
                if let value = dict["Query"] as? String {
                    self.query = value
                }
            }
        }
        public var answerConfig: [InsertInterveneRuleRequest.InterveneRuleConfig.AnswerConfig]?

        public var effectConfig: InsertInterveneRuleRequest.InterveneRuleConfig.EffectConfig?

        public var interveneConfigList: [InsertInterveneRuleRequest.InterveneRuleConfig.InterveneConfigList]?

        public var interveneType: Int32?

        public var namespaceList: [String]?

        public var ruleId: Int64?

        public var ruleName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.effectConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.answerConfig != nil {
                var tmp : [Any] = []
                for k in self.answerConfig! {
                    tmp.append(k.toMap())
                }
                map["AnswerConfig"] = tmp
            }
            if self.effectConfig != nil {
                map["EffectConfig"] = self.effectConfig?.toMap()
            }
            if self.interveneConfigList != nil {
                var tmp : [Any] = []
                for k in self.interveneConfigList! {
                    tmp.append(k.toMap())
                }
                map["InterveneConfigList"] = tmp
            }
            if self.interveneType != nil {
                map["InterveneType"] = self.interveneType!
            }
            if self.namespaceList != nil {
                map["NamespaceList"] = self.namespaceList!
            }
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AnswerConfig"] as? [Any?] {
                var tmp : [InsertInterveneRuleRequest.InterveneRuleConfig.AnswerConfig] = []
                for v in value {
                    if v != nil {
                        var model = InsertInterveneRuleRequest.InterveneRuleConfig.AnswerConfig()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.answerConfig = tmp
            }
            if let value = dict["EffectConfig"] as? [String: Any?] {
                var model = InsertInterveneRuleRequest.InterveneRuleConfig.EffectConfig()
                model.fromMap(value)
                self.effectConfig = model
            }
            if let value = dict["InterveneConfigList"] as? [Any?] {
                var tmp : [InsertInterveneRuleRequest.InterveneRuleConfig.InterveneConfigList] = []
                for v in value {
                    if v != nil {
                        var model = InsertInterveneRuleRequest.InterveneRuleConfig.InterveneConfigList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.interveneConfigList = tmp
            }
            if let value = dict["InterveneType"] as? Int32 {
                self.interveneType = value
            }
            if let value = dict["NamespaceList"] as? [String] {
                self.namespaceList = value
            }
            if let value = dict["RuleId"] as? Int64 {
                self.ruleId = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
        }
    }
    public var agentKey: String?

    public var interveneRuleConfig: InsertInterveneRuleRequest.InterveneRuleConfig?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.interveneRuleConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.interveneRuleConfig != nil {
            map["InterveneRuleConfig"] = self.interveneRuleConfig?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["InterveneRuleConfig"] as? [String: Any?] {
            var model = InsertInterveneRuleRequest.InterveneRuleConfig()
            model.fromMap(value)
            self.interveneRuleConfig = model
        }
    }
}

public class InsertInterveneRuleShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var interveneRuleConfigShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.interveneRuleConfigShrink != nil {
            map["InterveneRuleConfig"] = self.interveneRuleConfigShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["InterveneRuleConfig"] as? String {
            self.interveneRuleConfigShrink = value
        }
    }
}

public class InsertInterveneRuleResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var code: Int32?

        public var ruleId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.ruleId != nil {
                map["RuleId"] = self.ruleId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["RuleId"] as? Int64 {
                self.ruleId = value
            }
        }
    }
    public var code: String?

    public var data: InsertInterveneRuleResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = InsertInterveneRuleResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class InsertInterveneRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsertInterveneRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InsertInterveneRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAnalysisTagDetailByTaskIdRequest : Tea.TeaModel {
    public var categories: [String]?

    public var current: Int32?

    public var maxResults: Int32?

    public var nextToken: String?

    public var size: Int32?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categories != nil {
            map["Categories"] = self.categories!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Categories"] as? [String] {
            self.categories = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListAnalysisTagDetailByTaskIdShrinkRequest : Tea.TeaModel {
    public var categoriesShrink: String?

    public var current: Int32?

    public var maxResults: Int32?

    public var nextToken: String?

    public var size: Int32?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categoriesShrink != nil {
            map["Categories"] = self.categoriesShrink!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Categories"] as? String {
            self.categoriesShrink = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListAnalysisTagDetailByTaskIdResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ContentTags : Tea.TeaModel {
            public var summaryOverview: String?

            public var tagName: String?

            public var tags: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.summaryOverview != nil {
                    map["SummaryOverview"] = self.summaryOverview!
                }
                if self.tagName != nil {
                    map["TagName"] = self.tagName!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SummaryOverview"] as? String {
                    self.summaryOverview = value
                }
                if let value = dict["TagName"] as? String {
                    self.tagName = value
                }
                if let value = dict["Tags"] as? [String] {
                    self.tags = value
                }
            }
        }
        public var content: String?

        public var contentTags: [ListAnalysisTagDetailByTaskIdResponseBody.Data.ContentTags]?

        public var id: Int64?

        public var tagTaskType: String?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.contentTags != nil {
                var tmp : [Any] = []
                for k in self.contentTags! {
                    tmp.append(k.toMap())
                }
                map["ContentTags"] = tmp
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.tagTaskType != nil {
                map["TagTaskType"] = self.tagTaskType!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["ContentTags"] as? [Any?] {
                var tmp : [ListAnalysisTagDetailByTaskIdResponseBody.Data.ContentTags] = []
                for v in value {
                    if v != nil {
                        var model = ListAnalysisTagDetailByTaskIdResponseBody.Data.ContentTags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.contentTags = tmp
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["TagTaskType"] as? String {
                self.tagTaskType = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: [ListAnalysisTagDetailByTaskIdResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListAnalysisTagDetailByTaskIdResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListAnalysisTagDetailByTaskIdResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListAnalysisTagDetailByTaskIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAnalysisTagDetailByTaskIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAnalysisTagDetailByTaskIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAsyncTasksRequest : Tea.TeaModel {
    public var agentKey: String?

    public var createTimeEnd: String?

    public var createTimeStart: String?

    public var current: Int32?

    public var size: Int32?

    public var taskCode: String?

    public var taskName: String?

    public var taskStatus: Int32?

    public var taskStatusList: [Int32]?

    public var taskType: String?

    public var taskTypeList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.createTimeEnd != nil {
            map["CreateTimeEnd"] = self.createTimeEnd!
        }
        if self.createTimeStart != nil {
            map["CreateTimeStart"] = self.createTimeStart!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.taskCode != nil {
            map["TaskCode"] = self.taskCode!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.taskStatus != nil {
            map["TaskStatus"] = self.taskStatus!
        }
        if self.taskStatusList != nil {
            map["TaskStatusList"] = self.taskStatusList!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.taskTypeList != nil {
            map["TaskTypeList"] = self.taskTypeList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CreateTimeEnd"] as? String {
            self.createTimeEnd = value
        }
        if let value = dict["CreateTimeStart"] as? String {
            self.createTimeStart = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["TaskCode"] as? String {
            self.taskCode = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["TaskStatus"] as? Int32 {
            self.taskStatus = value
        }
        if let value = dict["TaskStatusList"] as? [Int32] {
            self.taskStatusList = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
        if let value = dict["TaskTypeList"] as? [String] {
            self.taskTypeList = value
        }
    }
}

public class ListAsyncTasksShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var createTimeEnd: String?

    public var createTimeStart: String?

    public var current: Int32?

    public var size: Int32?

    public var taskCode: String?

    public var taskName: String?

    public var taskStatus: Int32?

    public var taskStatusListShrink: String?

    public var taskType: String?

    public var taskTypeListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.createTimeEnd != nil {
            map["CreateTimeEnd"] = self.createTimeEnd!
        }
        if self.createTimeStart != nil {
            map["CreateTimeStart"] = self.createTimeStart!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.taskCode != nil {
            map["TaskCode"] = self.taskCode!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.taskStatus != nil {
            map["TaskStatus"] = self.taskStatus!
        }
        if self.taskStatusListShrink != nil {
            map["TaskStatusList"] = self.taskStatusListShrink!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.taskTypeListShrink != nil {
            map["TaskTypeList"] = self.taskTypeListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CreateTimeEnd"] as? String {
            self.createTimeEnd = value
        }
        if let value = dict["CreateTimeStart"] as? String {
            self.createTimeStart = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["TaskCode"] as? String {
            self.taskCode = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["TaskStatus"] as? Int32 {
            self.taskStatus = value
        }
        if let value = dict["TaskStatusList"] as? String {
            self.taskStatusListShrink = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
        if let value = dict["TaskTypeList"] as? String {
            self.taskTypeListShrink = value
        }
    }
}

public class ListAsyncTasksResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var createTime: String?

        public var createUser: String?

        public var id: Int64?

        public var taskCode: String?

        public var taskDefinition: String?

        public var taskEndTime: String?

        public var taskErrorMessage: String?

        public var taskExecuteTime: String?

        public var taskId: String?

        public var taskInnerErrorMessage: String?

        public var taskIntermediateResult: String?

        public var taskName: String?

        public var taskParam: String?

        public var taskProgressMessage: String?

        public var taskResult: String?

        public var taskRetryCount: String?

        public var taskStartTime: String?

        public var taskStatus: Int32?

        public var taskType: String?

        public var updateTime: String?

        public var updateUser: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.taskCode != nil {
                map["TaskCode"] = self.taskCode!
            }
            if self.taskDefinition != nil {
                map["TaskDefinition"] = self.taskDefinition!
            }
            if self.taskEndTime != nil {
                map["TaskEndTime"] = self.taskEndTime!
            }
            if self.taskErrorMessage != nil {
                map["TaskErrorMessage"] = self.taskErrorMessage!
            }
            if self.taskExecuteTime != nil {
                map["TaskExecuteTime"] = self.taskExecuteTime!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskInnerErrorMessage != nil {
                map["TaskInnerErrorMessage"] = self.taskInnerErrorMessage!
            }
            if self.taskIntermediateResult != nil {
                map["TaskIntermediateResult"] = self.taskIntermediateResult!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            if self.taskParam != nil {
                map["TaskParam"] = self.taskParam!
            }
            if self.taskProgressMessage != nil {
                map["TaskProgressMessage"] = self.taskProgressMessage!
            }
            if self.taskResult != nil {
                map["TaskResult"] = self.taskResult!
            }
            if self.taskRetryCount != nil {
                map["TaskRetryCount"] = self.taskRetryCount!
            }
            if self.taskStartTime != nil {
                map["TaskStartTime"] = self.taskStartTime!
            }
            if self.taskStatus != nil {
                map["TaskStatus"] = self.taskStatus!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.updateUser != nil {
                map["UpdateUser"] = self.updateUser!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["TaskCode"] as? String {
                self.taskCode = value
            }
            if let value = dict["TaskDefinition"] as? String {
                self.taskDefinition = value
            }
            if let value = dict["TaskEndTime"] as? String {
                self.taskEndTime = value
            }
            if let value = dict["TaskErrorMessage"] as? String {
                self.taskErrorMessage = value
            }
            if let value = dict["TaskExecuteTime"] as? String {
                self.taskExecuteTime = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskInnerErrorMessage"] as? String {
                self.taskInnerErrorMessage = value
            }
            if let value = dict["TaskIntermediateResult"] as? String {
                self.taskIntermediateResult = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
            if let value = dict["TaskParam"] as? String {
                self.taskParam = value
            }
            if let value = dict["TaskProgressMessage"] as? String {
                self.taskProgressMessage = value
            }
            if let value = dict["TaskResult"] as? String {
                self.taskResult = value
            }
            if let value = dict["TaskRetryCount"] as? String {
                self.taskRetryCount = value
            }
            if let value = dict["TaskStartTime"] as? String {
                self.taskStartTime = value
            }
            if let value = dict["TaskStatus"] as? Int32 {
                self.taskStatus = value
            }
            if let value = dict["TaskType"] as? String {
                self.taskType = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UpdateUser"] as? String {
                self.updateUser = value
            }
        }
    }
    public var code: String?

    public var current: Int32?

    public var data: [ListAsyncTasksResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var size: Int32?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListAsyncTasksResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListAsyncTasksResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class ListAsyncTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAsyncTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAsyncTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAuditContentErrorTypesRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListAuditContentErrorTypesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class SubClasses : Tea.TeaModel {
            public var classCode: String?

            public var className: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.classCode != nil {
                    map["ClassCode"] = self.classCode!
                }
                if self.className != nil {
                    map["ClassName"] = self.className!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ClassCode"] as? String {
                    self.classCode = value
                }
                if let value = dict["ClassName"] as? String {
                    self.className = value
                }
            }
        }
        public var majorClassCode: String?

        public var majorClassName: String?

        public var subClasses: [ListAuditContentErrorTypesResponseBody.Data.SubClasses]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.majorClassCode != nil {
                map["MajorClassCode"] = self.majorClassCode!
            }
            if self.majorClassName != nil {
                map["MajorClassName"] = self.majorClassName!
            }
            if self.subClasses != nil {
                var tmp : [Any] = []
                for k in self.subClasses! {
                    tmp.append(k.toMap())
                }
                map["SubClasses"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MajorClassCode"] as? String {
                self.majorClassCode = value
            }
            if let value = dict["MajorClassName"] as? String {
                self.majorClassName = value
            }
            if let value = dict["SubClasses"] as? [Any?] {
                var tmp : [ListAuditContentErrorTypesResponseBody.Data.SubClasses] = []
                for v in value {
                    if v != nil {
                        var model = ListAuditContentErrorTypesResponseBody.Data.SubClasses()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.subClasses = tmp
            }
        }
    }
    public var code: String?

    public var data: [ListAuditContentErrorTypesResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListAuditContentErrorTypesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListAuditContentErrorTypesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListAuditContentErrorTypesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAuditContentErrorTypesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAuditContentErrorTypesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListBuildConfigsRequest : Tea.TeaModel {
    public var agentKey: String?

    public var regionId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class ListBuildConfigsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Keywords : Tea.TeaModel {
            public var description_: String?

            public var key: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
            }
        }
        public var buildIn: Bool?

        public var createTime: String?

        public var createUser: String?

        public var id: Int64?

        public var keywords: [ListBuildConfigsResponseBody.Data.Keywords]?

        public var tag: String?

        public var tagDescription: String?

        public var type: String?

        public var updateTime: String?

        public var updateUser: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.buildIn != nil {
                map["BuildIn"] = self.buildIn!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.keywords != nil {
                var tmp : [Any] = []
                for k in self.keywords! {
                    tmp.append(k.toMap())
                }
                map["Keywords"] = tmp
            }
            if self.tag != nil {
                map["Tag"] = self.tag!
            }
            if self.tagDescription != nil {
                map["TagDescription"] = self.tagDescription!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.updateUser != nil {
                map["UpdateUser"] = self.updateUser!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BuildIn"] as? Bool {
                self.buildIn = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Keywords"] as? [Any?] {
                var tmp : [ListBuildConfigsResponseBody.Data.Keywords] = []
                for v in value {
                    if v != nil {
                        var model = ListBuildConfigsResponseBody.Data.Keywords()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.keywords = tmp
            }
            if let value = dict["Tag"] as? String {
                self.tag = value
            }
            if let value = dict["TagDescription"] as? String {
                self.tagDescription = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UpdateUser"] as? String {
                self.updateUser = value
            }
        }
    }
    public var code: String?

    public var data: [ListBuildConfigsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListBuildConfigsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListBuildConfigsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListBuildConfigsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListBuildConfigsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListBuildConfigsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCustomTextRequest : Tea.TeaModel {
    public var agentKey: String?

    public var commodityCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
    }
}

public class ListCustomTextResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var content: String?

        public var createTime: String?

        public var createUser: String?

        public var id: Int64?

        public var title: String?

        public var updateTime: String?

        public var updateUser: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.updateUser != nil {
                map["UpdateUser"] = self.updateUser!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UpdateUser"] as? String {
                self.updateUser = value
            }
        }
    }
    public var code: String?

    public var data: [ListCustomTextResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListCustomTextResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListCustomTextResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListCustomTextResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCustomTextResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCustomTextResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCustomViewPointsRequest : Tea.TeaModel {
    public var agentKey: String?

    public var attitude: String?

    public var attitudes: [String]?

    public var customViewPointId: String?

    public var customViewPointIds: [String]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var topic: String?

    public var topicId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.attitude != nil {
            map["Attitude"] = self.attitude!
        }
        if self.attitudes != nil {
            map["Attitudes"] = self.attitudes!
        }
        if self.customViewPointId != nil {
            map["CustomViewPointId"] = self.customViewPointId!
        }
        if self.customViewPointIds != nil {
            map["CustomViewPointIds"] = self.customViewPointIds!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        if self.topicId != nil {
            map["TopicId"] = self.topicId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Attitude"] as? String {
            self.attitude = value
        }
        if let value = dict["Attitudes"] as? [String] {
            self.attitudes = value
        }
        if let value = dict["CustomViewPointId"] as? String {
            self.customViewPointId = value
        }
        if let value = dict["CustomViewPointIds"] as? [String] {
            self.customViewPointIds = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
        if let value = dict["TopicId"] as? String {
            self.topicId = value
        }
    }
}

public class ListCustomViewPointsShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var attitude: String?

    public var attitudesShrink: String?

    public var customViewPointId: String?

    public var customViewPointIdsShrink: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var topic: String?

    public var topicId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.attitude != nil {
            map["Attitude"] = self.attitude!
        }
        if self.attitudesShrink != nil {
            map["Attitudes"] = self.attitudesShrink!
        }
        if self.customViewPointId != nil {
            map["CustomViewPointId"] = self.customViewPointId!
        }
        if self.customViewPointIdsShrink != nil {
            map["CustomViewPointIds"] = self.customViewPointIdsShrink!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        if self.topicId != nil {
            map["TopicId"] = self.topicId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Attitude"] as? String {
            self.attitude = value
        }
        if let value = dict["Attitudes"] as? String {
            self.attitudesShrink = value
        }
        if let value = dict["CustomViewPointId"] as? String {
            self.customViewPointId = value
        }
        if let value = dict["CustomViewPointIds"] as? String {
            self.customViewPointIdsShrink = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
        if let value = dict["TopicId"] as? String {
            self.topicId = value
        }
    }
}

public class ListCustomViewPointsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ViewPoints : Tea.TeaModel {
            public class Outlines : Tea.TeaModel {
                public var outline: String?

                public var summary: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.outline != nil {
                        map["Outline"] = self.outline!
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Outline"] as? String {
                        self.outline = value
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                }
            }
            public var outlines: [ListCustomViewPointsResponseBody.Data.ViewPoints.Outlines]?

            public var point: String?

            public var summary: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.outlines != nil {
                    var tmp : [Any] = []
                    for k in self.outlines! {
                        tmp.append(k.toMap())
                    }
                    map["Outlines"] = tmp
                }
                if self.point != nil {
                    map["Point"] = self.point!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Outlines"] as? [Any?] {
                    var tmp : [ListCustomViewPointsResponseBody.Data.ViewPoints.Outlines] = []
                    for v in value {
                        if v != nil {
                            var model = ListCustomViewPointsResponseBody.Data.ViewPoints.Outlines()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.outlines = tmp
                }
                if let value = dict["Point"] as? String {
                    self.point = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
            }
        }
        public var asyncTaskId: String?

        public var attitude: String?

        public var createTime: String?

        public var createUser: String?

        public var id: String?

        public var status: String?

        public var taskErrorMessage: String?

        public var taskStatus: Int32?

        public var viewPoints: [ListCustomViewPointsResponseBody.Data.ViewPoints]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.asyncTaskId != nil {
                map["AsyncTaskId"] = self.asyncTaskId!
            }
            if self.attitude != nil {
                map["Attitude"] = self.attitude!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskErrorMessage != nil {
                map["TaskErrorMessage"] = self.taskErrorMessage!
            }
            if self.taskStatus != nil {
                map["TaskStatus"] = self.taskStatus!
            }
            if self.viewPoints != nil {
                var tmp : [Any] = []
                for k in self.viewPoints! {
                    tmp.append(k.toMap())
                }
                map["ViewPoints"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AsyncTaskId"] as? String {
                self.asyncTaskId = value
            }
            if let value = dict["Attitude"] as? String {
                self.attitude = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskErrorMessage"] as? String {
                self.taskErrorMessage = value
            }
            if let value = dict["TaskStatus"] as? Int32 {
                self.taskStatus = value
            }
            if let value = dict["ViewPoints"] as? [Any?] {
                var tmp : [ListCustomViewPointsResponseBody.Data.ViewPoints] = []
                for v in value {
                    if v != nil {
                        var model = ListCustomViewPointsResponseBody.Data.ViewPoints()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.viewPoints = tmp
            }
        }
    }
    public var code: String?

    public var data: [ListCustomViewPointsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListCustomViewPointsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListCustomViewPointsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListCustomViewPointsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCustomViewPointsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCustomViewPointsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDatasetDocumentsRequest : Tea.TeaModel {
    public var datasetDescription: String?

    public var datasetId: Int64?

    public var datasetName: String?

    public var docType: String?

    public var excludeFields: [String]?

    public var includeFields: [String]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var query: String?

    public var status: Int32?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetDescription != nil {
            map["DatasetDescription"] = self.datasetDescription!
        }
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.excludeFields != nil {
            map["ExcludeFields"] = self.excludeFields!
        }
        if self.includeFields != nil {
            map["IncludeFields"] = self.includeFields!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetDescription"] as? String {
            self.datasetDescription = value
        }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["ExcludeFields"] as? [String] {
            self.excludeFields = value
        }
        if let value = dict["IncludeFields"] as? [String] {
            self.includeFields = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListDatasetDocumentsShrinkRequest : Tea.TeaModel {
    public var datasetDescription: String?

    public var datasetId: Int64?

    public var datasetName: String?

    public var docType: String?

    public var excludeFieldsShrink: String?

    public var includeFieldsShrink: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var query: String?

    public var status: Int32?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetDescription != nil {
            map["DatasetDescription"] = self.datasetDescription!
        }
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.excludeFieldsShrink != nil {
            map["ExcludeFields"] = self.excludeFieldsShrink!
        }
        if self.includeFieldsShrink != nil {
            map["IncludeFields"] = self.includeFieldsShrink!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetDescription"] as? String {
            self.datasetDescription = value
        }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["ExcludeFields"] as? String {
            self.excludeFieldsShrink = value
        }
        if let value = dict["IncludeFields"] as? String {
            self.includeFieldsShrink = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListDatasetDocumentsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class MultimodalMedias : Tea.TeaModel {
            public var fileUrl: String?

            public var mediaId: String?

            public var mediaType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileUrl != nil {
                    map["FileUrl"] = self.fileUrl!
                }
                if self.mediaId != nil {
                    map["MediaId"] = self.mediaId!
                }
                if self.mediaType != nil {
                    map["MediaType"] = self.mediaType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FileUrl"] as? String {
                    self.fileUrl = value
                }
                if let value = dict["MediaId"] as? String {
                    self.mediaId = value
                }
                if let value = dict["MediaType"] as? String {
                    self.mediaType = value
                }
            }
        }
        public var categoryUuid: String?

        public var content: String?

        public var createTime: String?

        public var disableHandleMultimodalMedia: Bool?

        public var docId: String?

        public var docType: String?

        public var docUuid: String?

        public var extend1: String?

        public var extend2: String?

        public var extend3: String?

        public var multimodalMedias: [ListDatasetDocumentsResponseBody.Data.MultimodalMedias]?

        public var pubTime: String?

        public var sourceFrom: String?

        public var status: Int32?

        public var summary: String?

        public var title: String?

        public var updateTime: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.categoryUuid != nil {
                map["CategoryUuid"] = self.categoryUuid!
            }
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.disableHandleMultimodalMedia != nil {
                map["DisableHandleMultimodalMedia"] = self.disableHandleMultimodalMedia!
            }
            if self.docId != nil {
                map["DocId"] = self.docId!
            }
            if self.docType != nil {
                map["DocType"] = self.docType!
            }
            if self.docUuid != nil {
                map["DocUuid"] = self.docUuid!
            }
            if self.extend1 != nil {
                map["Extend1"] = self.extend1!
            }
            if self.extend2 != nil {
                map["Extend2"] = self.extend2!
            }
            if self.extend3 != nil {
                map["Extend3"] = self.extend3!
            }
            if self.multimodalMedias != nil {
                var tmp : [Any] = []
                for k in self.multimodalMedias! {
                    tmp.append(k.toMap())
                }
                map["MultimodalMedias"] = tmp
            }
            if self.pubTime != nil {
                map["PubTime"] = self.pubTime!
            }
            if self.sourceFrom != nil {
                map["SourceFrom"] = self.sourceFrom!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CategoryUuid"] as? String {
                self.categoryUuid = value
            }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["DisableHandleMultimodalMedia"] as? Bool {
                self.disableHandleMultimodalMedia = value
            }
            if let value = dict["DocId"] as? String {
                self.docId = value
            }
            if let value = dict["DocType"] as? String {
                self.docType = value
            }
            if let value = dict["DocUuid"] as? String {
                self.docUuid = value
            }
            if let value = dict["Extend1"] as? String {
                self.extend1 = value
            }
            if let value = dict["Extend2"] as? String {
                self.extend2 = value
            }
            if let value = dict["Extend3"] as? String {
                self.extend3 = value
            }
            if let value = dict["MultimodalMedias"] as? [Any?] {
                var tmp : [ListDatasetDocumentsResponseBody.Data.MultimodalMedias] = []
                for v in value {
                    if v != nil {
                        var model = ListDatasetDocumentsResponseBody.Data.MultimodalMedias()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.multimodalMedias = tmp
            }
            if let value = dict["PubTime"] as? String {
                self.pubTime = value
            }
            if let value = dict["SourceFrom"] as? String {
                self.sourceFrom = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var code: String?

    public var data: [ListDatasetDocumentsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListDatasetDocumentsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListDatasetDocumentsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListDatasetDocumentsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDatasetDocumentsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDatasetDocumentsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDatasetsRequest : Tea.TeaModel {
    public var datasetId: Int64?

    public var datasetName: String?

    public var datasetType: String?

    public var endTime: String?

    public var includeConfig: Bool?

    public var pageNumber: Int32?

    public var pageSize: String?

    public var searchDatasetEnable: Int32?

    public var startTime: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.datasetType != nil {
            map["DatasetType"] = self.datasetType!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.includeConfig != nil {
            map["IncludeConfig"] = self.includeConfig!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchDatasetEnable != nil {
            map["SearchDatasetEnable"] = self.searchDatasetEnable!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["DatasetType"] as? String {
            self.datasetType = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["IncludeConfig"] as? Bool {
            self.includeConfig = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["SearchDatasetEnable"] as? Int32 {
            self.searchDatasetEnable = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListDatasetsResponseBody : Tea.TeaModel {
    public class CustomSemanticSearchConfig : Tea.TeaModel {
        public var datasetQuota: Int32?

        public var datasetUsedQuota: Int32?

        public var docQuota: Int64?

        public var docUsedQuota: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.datasetQuota != nil {
                map["DatasetQuota"] = self.datasetQuota!
            }
            if self.datasetUsedQuota != nil {
                map["DatasetUsedQuota"] = self.datasetUsedQuota!
            }
            if self.docQuota != nil {
                map["DocQuota"] = self.docQuota!
            }
            if self.docUsedQuota != nil {
                map["DocUsedQuota"] = self.docUsedQuota!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DatasetQuota"] as? Int32 {
                self.datasetQuota = value
            }
            if let value = dict["DatasetUsedQuota"] as? Int32 {
                self.datasetUsedQuota = value
            }
            if let value = dict["DocQuota"] as? Int64 {
                self.docQuota = value
            }
            if let value = dict["DocUsedQuota"] as? Int64 {
                self.docUsedQuota = value
            }
        }
    }
    public class Data : Tea.TeaModel {
        public var createTime: String?

        public var createUser: String?

        public var datasetDescription: String?

        public var datasetId: Int64?

        public var datasetName: String?

        public var datasetType: String?

        public var docUsedQuota: Int64?

        public var searchDatasetEnable: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.datasetDescription != nil {
                map["DatasetDescription"] = self.datasetDescription!
            }
            if self.datasetId != nil {
                map["DatasetId"] = self.datasetId!
            }
            if self.datasetName != nil {
                map["DatasetName"] = self.datasetName!
            }
            if self.datasetType != nil {
                map["DatasetType"] = self.datasetType!
            }
            if self.docUsedQuota != nil {
                map["DocUsedQuota"] = self.docUsedQuota!
            }
            if self.searchDatasetEnable != nil {
                map["SearchDatasetEnable"] = self.searchDatasetEnable!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["DatasetDescription"] as? String {
                self.datasetDescription = value
            }
            if let value = dict["DatasetId"] as? Int64 {
                self.datasetId = value
            }
            if let value = dict["DatasetName"] as? String {
                self.datasetName = value
            }
            if let value = dict["DatasetType"] as? String {
                self.datasetType = value
            }
            if let value = dict["DocUsedQuota"] as? Int64 {
                self.docUsedQuota = value
            }
            if let value = dict["SearchDatasetEnable"] as? Int32 {
                self.searchDatasetEnable = value
            }
        }
    }
    public class ThirdSearchConfig : Tea.TeaModel {
        public var datasetQuota: Int32?

        public var datasetUsedQuota: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.datasetQuota != nil {
                map["DatasetQuota"] = self.datasetQuota!
            }
            if self.datasetUsedQuota != nil {
                map["DatasetUsedQuota"] = self.datasetUsedQuota!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DatasetQuota"] as? Int32 {
                self.datasetQuota = value
            }
            if let value = dict["DatasetUsedQuota"] as? Int32 {
                self.datasetUsedQuota = value
            }
        }
    }
    public var code: String?

    public var customSemanticSearchConfig: ListDatasetsResponseBody.CustomSemanticSearchConfig?

    public var data: [ListDatasetsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public var thirdSearchConfig: ListDatasetsResponseBody.ThirdSearchConfig?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.customSemanticSearchConfig?.validate()
        try self.thirdSearchConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.customSemanticSearchConfig != nil {
            map["CustomSemanticSearchConfig"] = self.customSemanticSearchConfig?.toMap()
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.thirdSearchConfig != nil {
            map["ThirdSearchConfig"] = self.thirdSearchConfig?.toMap()
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["CustomSemanticSearchConfig"] as? [String: Any?] {
            var model = ListDatasetsResponseBody.CustomSemanticSearchConfig()
            model.fromMap(value)
            self.customSemanticSearchConfig = model
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListDatasetsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListDatasetsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["ThirdSearchConfig"] as? [String: Any?] {
            var model = ListDatasetsResponseBody.ThirdSearchConfig()
            model.fromMap(value)
            self.thirdSearchConfig = model
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListDatasetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDatasetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDatasetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDialoguesRequest : Tea.TeaModel {
    public var agentKey: String?

    public var current: Int32?

    public var dialogueType: Int32?

    public var endTime: String?

    public var size: Int32?

    public var startTime: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.dialogueType != nil {
            map["DialogueType"] = self.dialogueType!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["DialogueType"] as? Int32 {
            self.dialogueType = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class ListDialoguesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var bot: String?

        public var createTime: String?

        public var createUser: String?

        public var dialogueType: Int32?

        public var taskId: String?

        public var user: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bot != nil {
                map["Bot"] = self.bot!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.dialogueType != nil {
                map["DialogueType"] = self.dialogueType!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.user != nil {
                map["User"] = self.user!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Bot"] as? String {
                self.bot = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["DialogueType"] as? Int32 {
                self.dialogueType = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["User"] as? String {
                self.user = value
            }
        }
    }
    public var code: String?

    public var current: Int32?

    public var data: [ListDialoguesResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var size: Int32?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListDialoguesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListDialoguesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class ListDialoguesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDialoguesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDialoguesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDocsRequest : Tea.TeaModel {
    public var categoryId: String?

    public var docName: String?

    public var docType: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var skip: Int32?

    public var statuses: [Int32]?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categoryId != nil {
            map["CategoryId"] = self.categoryId!
        }
        if self.docName != nil {
            map["DocName"] = self.docName!
        }
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.skip != nil {
            map["Skip"] = self.skip!
        }
        if self.statuses != nil {
            map["Statuses"] = self.statuses!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CategoryId"] as? String {
            self.categoryId = value
        }
        if let value = dict["DocName"] as? String {
            self.docName = value
        }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Skip"] as? Int32 {
            self.skip = value
        }
        if let value = dict["Statuses"] as? [Int32] {
            self.statuses = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListDocsShrinkRequest : Tea.TeaModel {
    public var categoryId: String?

    public var docName: String?

    public var docType: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var skip: Int32?

    public var statusesShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categoryId != nil {
            map["CategoryId"] = self.categoryId!
        }
        if self.docName != nil {
            map["DocName"] = self.docName!
        }
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.skip != nil {
            map["Skip"] = self.skip!
        }
        if self.statusesShrink != nil {
            map["Statuses"] = self.statusesShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CategoryId"] as? String {
            self.categoryId = value
        }
        if let value = dict["DocName"] as? String {
            self.docName = value
        }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Skip"] as? Int32 {
            self.skip = value
        }
        if let value = dict["Statuses"] as? String {
            self.statusesShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListDocsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var categoryId: String?

        public var createTime: Int64?

        public var docId: String?

        public var docName: String?

        public var docType: String?

        public var status: Int32?

        public var statusMessage: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.categoryId != nil {
                map["CategoryId"] = self.categoryId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.docId != nil {
                map["DocId"] = self.docId!
            }
            if self.docName != nil {
                map["DocName"] = self.docName!
            }
            if self.docType != nil {
                map["DocType"] = self.docType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.statusMessage != nil {
                map["StatusMessage"] = self.statusMessage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CategoryId"] as? String {
                self.categoryId = value
            }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["DocId"] as? String {
                self.docId = value
            }
            if let value = dict["DocName"] as? String {
                self.docName = value
            }
            if let value = dict["DocType"] as? String {
                self.docType = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["StatusMessage"] as? String {
                self.statusMessage = value
            }
        }
    }
    public var code: String?

    public var data: [ListDocsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListDocsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListDocsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListDocsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDocsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDocsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListFreshViewPointsRequest : Tea.TeaModel {
    public var agentKey: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var topic: String?

    public var topicSource: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        if self.topicSource != nil {
            map["TopicSource"] = self.topicSource!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
        if let value = dict["TopicSource"] as? String {
            self.topicSource = value
        }
    }
}

public class ListFreshViewPointsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Outlines : Tea.TeaModel {
            public var outline: String?

            public var summary: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.outline != nil {
                    map["Outline"] = self.outline!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Outline"] as? String {
                    self.outline = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
            }
        }
        public var outlines: [ListFreshViewPointsResponseBody.Data.Outlines]?

        public var point: String?

        public var summary: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.outlines != nil {
                var tmp : [Any] = []
                for k in self.outlines! {
                    tmp.append(k.toMap())
                }
                map["Outlines"] = tmp
            }
            if self.point != nil {
                map["Point"] = self.point!
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Outlines"] as? [Any?] {
                var tmp : [ListFreshViewPointsResponseBody.Data.Outlines] = []
                for v in value {
                    if v != nil {
                        var model = ListFreshViewPointsResponseBody.Data.Outlines()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.outlines = tmp
            }
            if let value = dict["Point"] as? String {
                self.point = value
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
        }
    }
    public var code: String?

    public var data: [ListFreshViewPointsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListFreshViewPointsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListFreshViewPointsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListFreshViewPointsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListFreshViewPointsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListFreshViewPointsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListGeneratedContentsRequest : Tea.TeaModel {
    public var agentKey: String?

    public var contentDomain: String?

    public var current: Int32?

    public var dataType: String?

    public var endTime: String?

    public var query: String?

    public var size: Int32?

    public var startTime: String?

    public var taskId: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.contentDomain != nil {
            map["ContentDomain"] = self.contentDomain!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.dataType != nil {
            map["DataType"] = self.dataType!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["ContentDomain"] as? String {
            self.contentDomain = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["DataType"] as? String {
            self.dataType = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class ListGeneratedContentsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class FileAttr : Tea.TeaModel {
            public var fileName: String?

            public var height: Int32?

            public var tmpUrl: String?

            public var width: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileName != nil {
                    map["FileName"] = self.fileName!
                }
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.tmpUrl != nil {
                    map["TmpUrl"] = self.tmpUrl!
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FileName"] as? String {
                    self.fileName = value
                }
                if let value = dict["Height"] as? Int32 {
                    self.height = value
                }
                if let value = dict["TmpUrl"] as? String {
                    self.tmpUrl = value
                }
                if let value = dict["Width"] as? Int32 {
                    self.width = value
                }
            }
        }
        public var content: String?

        public var contentDomain: String?

        public var contentText: String?

        public var createTime: String?

        public var createUser: String?

        public var deviceId: String?

        public var fileAttr: ListGeneratedContentsResponseBody.Data.FileAttr?

        public var fileKey: String?

        public var id: Int64?

        public var keywordList: [String]?

        public var keywords: String?

        public var prompt: String?

        public var taskId: String?

        public var title: String?

        public var updateTime: String?

        public var updateUser: String?

        public var uuid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.fileAttr?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.contentDomain != nil {
                map["ContentDomain"] = self.contentDomain!
            }
            if self.contentText != nil {
                map["ContentText"] = self.contentText!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.deviceId != nil {
                map["DeviceId"] = self.deviceId!
            }
            if self.fileAttr != nil {
                map["FileAttr"] = self.fileAttr?.toMap()
            }
            if self.fileKey != nil {
                map["FileKey"] = self.fileKey!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.keywordList != nil {
                map["KeywordList"] = self.keywordList!
            }
            if self.keywords != nil {
                map["Keywords"] = self.keywords!
            }
            if self.prompt != nil {
                map["Prompt"] = self.prompt!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.updateUser != nil {
                map["UpdateUser"] = self.updateUser!
            }
            if self.uuid != nil {
                map["Uuid"] = self.uuid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["ContentDomain"] as? String {
                self.contentDomain = value
            }
            if let value = dict["ContentText"] as? String {
                self.contentText = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["DeviceId"] as? String {
                self.deviceId = value
            }
            if let value = dict["FileAttr"] as? [String: Any?] {
                var model = ListGeneratedContentsResponseBody.Data.FileAttr()
                model.fromMap(value)
                self.fileAttr = model
            }
            if let value = dict["FileKey"] as? String {
                self.fileKey = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["KeywordList"] as? [String] {
                self.keywordList = value
            }
            if let value = dict["Keywords"] as? String {
                self.keywords = value
            }
            if let value = dict["Prompt"] as? String {
                self.prompt = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UpdateUser"] as? String {
                self.updateUser = value
            }
            if let value = dict["Uuid"] as? String {
                self.uuid = value
            }
        }
    }
    public var code: String?

    public var current: Int32?

    public var data: [ListGeneratedContentsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var size: Int32?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListGeneratedContentsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListGeneratedContentsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class ListGeneratedContentsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListGeneratedContentsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListGeneratedContentsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListHotNewsWithTypeRequest : Tea.TeaModel {
    public var agentKey: String?

    public var current: Int32?

    public var newsType: String?

    public var newsTypes: [String]?

    public var size: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.newsType != nil {
            map["NewsType"] = self.newsType!
        }
        if self.newsTypes != nil {
            map["NewsTypes"] = self.newsTypes!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["NewsType"] as? String {
            self.newsType = value
        }
        if let value = dict["NewsTypes"] as? [String] {
            self.newsTypes = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
    }
}

public class ListHotNewsWithTypeShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var current: Int32?

    public var newsType: String?

    public var newsTypesShrink: String?

    public var size: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.newsType != nil {
            map["NewsType"] = self.newsType!
        }
        if self.newsTypesShrink != nil {
            map["NewsTypes"] = self.newsTypesShrink!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["NewsType"] as? String {
            self.newsType = value
        }
        if let value = dict["NewsTypes"] as? String {
            self.newsTypesShrink = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
    }
}

public class ListHotNewsWithTypeResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class News : Tea.TeaModel {
            public var author: String?

            public var content: String?

            public var docUuid: String?

            public var imageUrls: [String]?

            public var pubTime: String?

            public var searchSource: String?

            public var searchSourceName: String?

            public var source: String?

            public var summary: String?

            public var tag: String?

            public var title: String?

            public var updateTime: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.author != nil {
                    map["Author"] = self.author!
                }
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.docUuid != nil {
                    map["DocUuid"] = self.docUuid!
                }
                if self.imageUrls != nil {
                    map["ImageUrls"] = self.imageUrls!
                }
                if self.pubTime != nil {
                    map["PubTime"] = self.pubTime!
                }
                if self.searchSource != nil {
                    map["SearchSource"] = self.searchSource!
                }
                if self.searchSourceName != nil {
                    map["SearchSourceName"] = self.searchSourceName!
                }
                if self.source != nil {
                    map["Source"] = self.source!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Author"] as? String {
                    self.author = value
                }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["DocUuid"] as? String {
                    self.docUuid = value
                }
                if let value = dict["ImageUrls"] as? [String] {
                    self.imageUrls = value
                }
                if let value = dict["PubTime"] as? String {
                    self.pubTime = value
                }
                if let value = dict["SearchSource"] as? String {
                    self.searchSource = value
                }
                if let value = dict["SearchSourceName"] as? String {
                    self.searchSourceName = value
                }
                if let value = dict["Source"] as? String {
                    self.source = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var news: [ListHotNewsWithTypeResponseBody.Data.News]?

        public var newsType: String?

        public var newsTypeName: String?

        public var totalPages: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.news != nil {
                var tmp : [Any] = []
                for k in self.news! {
                    tmp.append(k.toMap())
                }
                map["News"] = tmp
            }
            if self.newsType != nil {
                map["NewsType"] = self.newsType!
            }
            if self.newsTypeName != nil {
                map["NewsTypeName"] = self.newsTypeName!
            }
            if self.totalPages != nil {
                map["TotalPages"] = self.totalPages!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["News"] as? [Any?] {
                var tmp : [ListHotNewsWithTypeResponseBody.Data.News] = []
                for v in value {
                    if v != nil {
                        var model = ListHotNewsWithTypeResponseBody.Data.News()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.news = tmp
            }
            if let value = dict["NewsType"] as? String {
                self.newsType = value
            }
            if let value = dict["NewsTypeName"] as? String {
                self.newsTypeName = value
            }
            if let value = dict["TotalPages"] as? Int32 {
                self.totalPages = value
            }
        }
    }
    public var code: String?

    public var data: [ListHotNewsWithTypeResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListHotNewsWithTypeResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListHotNewsWithTypeResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListHotNewsWithTypeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListHotNewsWithTypeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListHotNewsWithTypeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListHotSourcesRequest : Tea.TeaModel {
    public var agentKey: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class ListHotSourcesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var description_: String?

        public var show: Bool?

        public var sort: Int32?

        public var source: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.show != nil {
                map["Show"] = self.show!
            }
            if self.sort != nil {
                map["Sort"] = self.sort!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Show"] as? Bool {
                self.show = value
            }
            if let value = dict["Sort"] as? Int32 {
                self.sort = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
        }
    }
    public var code: String?

    public var data: [ListHotSourcesResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListHotSourcesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListHotSourcesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListHotSourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListHotSourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListHotSourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListHotTopicsRequest : Tea.TeaModel {
    public var agentKey: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var topicIds: [String]?

    public var topicQuery: String?

    public var topicSource: String?

    public var topicVersion: String?

    public var topics: [String]?

    public var withNews: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.topicIds != nil {
            map["TopicIds"] = self.topicIds!
        }
        if self.topicQuery != nil {
            map["TopicQuery"] = self.topicQuery!
        }
        if self.topicSource != nil {
            map["TopicSource"] = self.topicSource!
        }
        if self.topicVersion != nil {
            map["TopicVersion"] = self.topicVersion!
        }
        if self.topics != nil {
            map["Topics"] = self.topics!
        }
        if self.withNews != nil {
            map["WithNews"] = self.withNews!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["TopicIds"] as? [String] {
            self.topicIds = value
        }
        if let value = dict["TopicQuery"] as? String {
            self.topicQuery = value
        }
        if let value = dict["TopicSource"] as? String {
            self.topicSource = value
        }
        if let value = dict["TopicVersion"] as? String {
            self.topicVersion = value
        }
        if let value = dict["Topics"] as? [String] {
            self.topics = value
        }
        if let value = dict["WithNews"] as? Bool {
            self.withNews = value
        }
    }
}

public class ListHotTopicsShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var topicIdsShrink: String?

    public var topicQuery: String?

    public var topicSource: String?

    public var topicVersion: String?

    public var topicsShrink: String?

    public var withNews: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.topicIdsShrink != nil {
            map["TopicIds"] = self.topicIdsShrink!
        }
        if self.topicQuery != nil {
            map["TopicQuery"] = self.topicQuery!
        }
        if self.topicSource != nil {
            map["TopicSource"] = self.topicSource!
        }
        if self.topicVersion != nil {
            map["TopicVersion"] = self.topicVersion!
        }
        if self.topicsShrink != nil {
            map["Topics"] = self.topicsShrink!
        }
        if self.withNews != nil {
            map["WithNews"] = self.withNews!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["TopicIds"] as? String {
            self.topicIdsShrink = value
        }
        if let value = dict["TopicQuery"] as? String {
            self.topicQuery = value
        }
        if let value = dict["TopicSource"] as? String {
            self.topicSource = value
        }
        if let value = dict["TopicVersion"] as? String {
            self.topicVersion = value
        }
        if let value = dict["Topics"] as? String {
            self.topicsShrink = value
        }
        if let value = dict["WithNews"] as? Bool {
            self.withNews = value
        }
    }
}

public class ListHotTopicsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class StructureSummary : Tea.TeaModel {
            public class DocList : Tea.TeaModel {
                public var source: String?

                public var title: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.source != nil {
                        map["Source"] = self.source!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Source"] as? String {
                        self.source = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var docList: [ListHotTopicsResponseBody.Data.StructureSummary.DocList]?

            public var summary: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.docList != nil {
                    var tmp : [Any] = []
                    for k in self.docList! {
                        tmp.append(k.toMap())
                    }
                    map["DocList"] = tmp
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DocList"] as? [Any?] {
                    var tmp : [ListHotTopicsResponseBody.Data.StructureSummary.DocList] = []
                    for v in value {
                        if v != nil {
                            var model = ListHotTopicsResponseBody.Data.StructureSummary.DocList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.docList = tmp
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public var asyncTaskId: String?

        public var createUser: String?

        public var hotValue: Int64?

        public var id: String?

        public var status: String?

        public var structureSummary: [ListHotTopicsResponseBody.Data.StructureSummary]?

        public var summary: String?

        public var taskErrorMessage: String?

        public var taskStatus: Int32?

        public var topic: String?

        public var topicSource: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.asyncTaskId != nil {
                map["AsyncTaskId"] = self.asyncTaskId!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.hotValue != nil {
                map["HotValue"] = self.hotValue!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.structureSummary != nil {
                var tmp : [Any] = []
                for k in self.structureSummary! {
                    tmp.append(k.toMap())
                }
                map["StructureSummary"] = tmp
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.taskErrorMessage != nil {
                map["TaskErrorMessage"] = self.taskErrorMessage!
            }
            if self.taskStatus != nil {
                map["TaskStatus"] = self.taskStatus!
            }
            if self.topic != nil {
                map["Topic"] = self.topic!
            }
            if self.topicSource != nil {
                map["TopicSource"] = self.topicSource!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AsyncTaskId"] as? String {
                self.asyncTaskId = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["HotValue"] as? Int64 {
                self.hotValue = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StructureSummary"] as? [Any?] {
                var tmp : [ListHotTopicsResponseBody.Data.StructureSummary] = []
                for v in value {
                    if v != nil {
                        var model = ListHotTopicsResponseBody.Data.StructureSummary()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.structureSummary = tmp
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["TaskErrorMessage"] as? String {
                self.taskErrorMessage = value
            }
            if let value = dict["TaskStatus"] as? Int32 {
                self.taskStatus = value
            }
            if let value = dict["Topic"] as? String {
                self.topic = value
            }
            if let value = dict["TopicSource"] as? String {
                self.topicSource = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public var code: String?

    public var data: [ListHotTopicsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListHotTopicsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListHotTopicsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListHotTopicsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListHotTopicsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListHotTopicsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListHotViewPointsRequest : Tea.TeaModel {
    public var agentKey: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var topic: String?

    public var topicSource: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        if self.topicSource != nil {
            map["TopicSource"] = self.topicSource!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
        if let value = dict["TopicSource"] as? String {
            self.topicSource = value
        }
    }
}

public class ListHotViewPointsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class News : Tea.TeaModel {
            public var author: String?

            public var content: String?

            public var docId: String?

            public var docUuid: String?

            public var imageUrls: [String]?

            public var pubTime: String?

            public var source: String?

            public var summary: String?

            public var tags: [String]?

            public var title: String?

            public var topic: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.author != nil {
                    map["Author"] = self.author!
                }
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.docId != nil {
                    map["DocId"] = self.docId!
                }
                if self.docUuid != nil {
                    map["DocUuid"] = self.docUuid!
                }
                if self.imageUrls != nil {
                    map["ImageUrls"] = self.imageUrls!
                }
                if self.pubTime != nil {
                    map["PubTime"] = self.pubTime!
                }
                if self.source != nil {
                    map["Source"] = self.source!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Author"] as? String {
                    self.author = value
                }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["DocId"] as? String {
                    self.docId = value
                }
                if let value = dict["DocUuid"] as? String {
                    self.docUuid = value
                }
                if let value = dict["ImageUrls"] as? [String] {
                    self.imageUrls = value
                }
                if let value = dict["PubTime"] as? String {
                    self.pubTime = value
                }
                if let value = dict["Source"] as? String {
                    self.source = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
                if let value = dict["Tags"] as? [String] {
                    self.tags = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["Topic"] as? String {
                    self.topic = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public class ViewPoints : Tea.TeaModel {
            public class Outlines : Tea.TeaModel {
                public var outline: String?

                public var summary: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.outline != nil {
                        map["Outline"] = self.outline!
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Outline"] as? String {
                        self.outline = value
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                }
            }
            public var outlines: [ListHotViewPointsResponseBody.Data.ViewPoints.Outlines]?

            public var point: String?

            public var summary: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.outlines != nil {
                    var tmp : [Any] = []
                    for k in self.outlines! {
                        tmp.append(k.toMap())
                    }
                    map["Outlines"] = tmp
                }
                if self.point != nil {
                    map["Point"] = self.point!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Outlines"] as? [Any?] {
                    var tmp : [ListHotViewPointsResponseBody.Data.ViewPoints.Outlines] = []
                    for v in value {
                        if v != nil {
                            var model = ListHotViewPointsResponseBody.Data.ViewPoints.Outlines()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.outlines = tmp
                }
                if let value = dict["Point"] as? String {
                    self.point = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
            }
        }
        public var attitude: String?

        public var attitudeType: String?

        public var news: [ListHotViewPointsResponseBody.Data.News]?

        public var ratio: String?

        public var viewPoints: [ListHotViewPointsResponseBody.Data.ViewPoints]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attitude != nil {
                map["Attitude"] = self.attitude!
            }
            if self.attitudeType != nil {
                map["AttitudeType"] = self.attitudeType!
            }
            if self.news != nil {
                var tmp : [Any] = []
                for k in self.news! {
                    tmp.append(k.toMap())
                }
                map["News"] = tmp
            }
            if self.ratio != nil {
                map["Ratio"] = self.ratio!
            }
            if self.viewPoints != nil {
                var tmp : [Any] = []
                for k in self.viewPoints! {
                    tmp.append(k.toMap())
                }
                map["ViewPoints"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attitude"] as? String {
                self.attitude = value
            }
            if let value = dict["AttitudeType"] as? String {
                self.attitudeType = value
            }
            if let value = dict["News"] as? [Any?] {
                var tmp : [ListHotViewPointsResponseBody.Data.News] = []
                for v in value {
                    if v != nil {
                        var model = ListHotViewPointsResponseBody.Data.News()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.news = tmp
            }
            if let value = dict["Ratio"] as? String {
                self.ratio = value
            }
            if let value = dict["ViewPoints"] as? [Any?] {
                var tmp : [ListHotViewPointsResponseBody.Data.ViewPoints] = []
                for v in value {
                    if v != nil {
                        var model = ListHotViewPointsResponseBody.Data.ViewPoints()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.viewPoints = tmp
            }
        }
    }
    public var code: String?

    public var data: [ListHotViewPointsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListHotViewPointsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListHotViewPointsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListHotViewPointsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListHotViewPointsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListHotViewPointsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListInterveneCntRequest : Tea.TeaModel {
    public var agentKey: String?

    public var pageIndex: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.pageIndex != nil {
            map["PageIndex"] = self.pageIndex!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["PageIndex"] as? Int32 {
            self.pageIndex = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
    }
}

public class ListInterveneCntResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var cntList: [Any]?

        public var code: Int32?

        public var pageCnt: Int32?

        public var pageIndex: Int32?

        public var pageSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cntList != nil {
                map["CntList"] = self.cntList!
            }
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.pageCnt != nil {
                map["PageCnt"] = self.pageCnt!
            }
            if self.pageIndex != nil {
                map["PageIndex"] = self.pageIndex!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CntList"] as? [Any] {
                self.cntList = value
            }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["PageCnt"] as? Int32 {
                self.pageCnt = value
            }
            if let value = dict["PageIndex"] as? Int32 {
                self.pageIndex = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
        }
    }
    public var code: String?

    public var data: ListInterveneCntResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListInterveneCntResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListInterveneCntResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListInterveneCntResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListInterveneCntResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListInterveneImportTasksRequest : Tea.TeaModel {
    public var agentKey: String?

    public var pageIndex: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.pageIndex != nil {
            map["PageIndex"] = self.pageIndex!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["PageIndex"] as? Int32 {
            self.pageIndex = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
    }
}

public class ListInterveneImportTasksResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class StatusList : Tea.TeaModel {
            public var msg: String?

            public var percentage: Int32?

            public var status: Int32?

            public var taskId: String?

            public var taskName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.msg != nil {
                    map["Msg"] = self.msg!
                }
                if self.percentage != nil {
                    map["Percentage"] = self.percentage!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.taskName != nil {
                    map["TaskName"] = self.taskName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Msg"] as? String {
                    self.msg = value
                }
                if let value = dict["Percentage"] as? Int32 {
                    self.percentage = value
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["TaskId"] as? String {
                    self.taskId = value
                }
                if let value = dict["TaskName"] as? String {
                    self.taskName = value
                }
            }
        }
        public var code: Int32?

        public var pageIndex: Int32?

        public var pageSize: Int32?

        public var statusList: [ListInterveneImportTasksResponseBody.Data.StatusList]?

        public var totalSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.pageIndex != nil {
                map["PageIndex"] = self.pageIndex!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.statusList != nil {
                var tmp : [Any] = []
                for k in self.statusList! {
                    tmp.append(k.toMap())
                }
                map["StatusList"] = tmp
            }
            if self.totalSize != nil {
                map["TotalSize"] = self.totalSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["PageIndex"] as? Int32 {
                self.pageIndex = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["StatusList"] as? [Any?] {
                var tmp : [ListInterveneImportTasksResponseBody.Data.StatusList] = []
                for v in value {
                    if v != nil {
                        var model = ListInterveneImportTasksResponseBody.Data.StatusList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.statusList = tmp
            }
            if let value = dict["TotalSize"] as? Int32 {
                self.totalSize = value
            }
        }
    }
    public var code: String?

    public var data: ListInterveneImportTasksResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListInterveneImportTasksResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListInterveneImportTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListInterveneImportTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListInterveneImportTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListInterveneRulesRequest : Tea.TeaModel {
    public var agentKey: String?

    public var pageIndex: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.pageIndex != nil {
            map["PageIndex"] = self.pageIndex!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["PageIndex"] as? Int32 {
            self.pageIndex = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
    }
}

public class ListInterveneRulesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class InterveneRuleList : Tea.TeaModel {
            public class AnswerConfig : Tea.TeaModel {
                public var answerType: Int32?

                public var message: String?

                public var namespace: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.answerType != nil {
                        map["AnswerType"] = self.answerType!
                    }
                    if self.message != nil {
                        map["Message"] = self.message!
                    }
                    if self.namespace != nil {
                        map["Namespace"] = self.namespace!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AnswerType"] as? Int32 {
                        self.answerType = value
                    }
                    if let value = dict["Message"] as? String {
                        self.message = value
                    }
                    if let value = dict["Namespace"] as? String {
                        self.namespace = value
                    }
                }
            }
            public var answerConfig: [ListInterveneRulesResponseBody.Data.InterveneRuleList.AnswerConfig]?

            public var createTime: String?

            public var effectTime: String?

            public var interveneType: Int32?

            public var namespaceList: [String]?

            public var ruleId: Int64?

            public var ruleName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.answerConfig != nil {
                    var tmp : [Any] = []
                    for k in self.answerConfig! {
                        tmp.append(k.toMap())
                    }
                    map["AnswerConfig"] = tmp
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.effectTime != nil {
                    map["EffectTime"] = self.effectTime!
                }
                if self.interveneType != nil {
                    map["InterveneType"] = self.interveneType!
                }
                if self.namespaceList != nil {
                    map["NamespaceList"] = self.namespaceList!
                }
                if self.ruleId != nil {
                    map["RuleId"] = self.ruleId!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AnswerConfig"] as? [Any?] {
                    var tmp : [ListInterveneRulesResponseBody.Data.InterveneRuleList.AnswerConfig] = []
                    for v in value {
                        if v != nil {
                            var model = ListInterveneRulesResponseBody.Data.InterveneRuleList.AnswerConfig()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.answerConfig = tmp
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["EffectTime"] as? String {
                    self.effectTime = value
                }
                if let value = dict["InterveneType"] as? Int32 {
                    self.interveneType = value
                }
                if let value = dict["NamespaceList"] as? [String] {
                    self.namespaceList = value
                }
                if let value = dict["RuleId"] as? Int64 {
                    self.ruleId = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
            }
        }
        public var code: Int32?

        public var count: Int64?

        public var interveneRuleList: [ListInterveneRulesResponseBody.Data.InterveneRuleList]?

        public var pageIndex: Int32?

        public var pageSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.interveneRuleList != nil {
                var tmp : [Any] = []
                for k in self.interveneRuleList! {
                    tmp.append(k.toMap())
                }
                map["InterveneRuleList"] = tmp
            }
            if self.pageIndex != nil {
                map["PageIndex"] = self.pageIndex!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["InterveneRuleList"] as? [Any?] {
                var tmp : [ListInterveneRulesResponseBody.Data.InterveneRuleList] = []
                for v in value {
                    if v != nil {
                        var model = ListInterveneRulesResponseBody.Data.InterveneRuleList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.interveneRuleList = tmp
            }
            if let value = dict["PageIndex"] as? Int32 {
                self.pageIndex = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
        }
    }
    public var code: String?

    public var data: ListInterveneRulesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListInterveneRulesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListInterveneRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListInterveneRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListInterveneRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListIntervenesRequest : Tea.TeaModel {
    public var agentKey: String?

    public var interveneType: Int32?

    public var pageIndex: Int32?

    public var pageSize: Int32?

    public var query: String?

    public var ruleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.interveneType != nil {
            map["InterveneType"] = self.interveneType!
        }
        if self.pageIndex != nil {
            map["PageIndex"] = self.pageIndex!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.ruleId != nil {
            map["RuleId"] = self.ruleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["InterveneType"] as? Int32 {
            self.interveneType = value
        }
        if let value = dict["PageIndex"] as? Int32 {
            self.pageIndex = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["RuleId"] as? Int64 {
            self.ruleId = value
        }
    }
}

public class ListIntervenesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class InterveneList : Tea.TeaModel {
            public var id: String?

            public var query: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.query != nil {
                    map["Query"] = self.query!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Query"] as? String {
                    self.query = value
                }
            }
        }
        public var code: Int32?

        public var interveneList: [ListIntervenesResponseBody.Data.InterveneList]?

        public var pageIndex: Int32?

        public var pageSize: Int32?

        public var totalSize: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.interveneList != nil {
                var tmp : [Any] = []
                for k in self.interveneList! {
                    tmp.append(k.toMap())
                }
                map["InterveneList"] = tmp
            }
            if self.pageIndex != nil {
                map["PageIndex"] = self.pageIndex!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalSize != nil {
                map["TotalSize"] = self.totalSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? Int32 {
                self.code = value
            }
            if let value = dict["InterveneList"] as? [Any?] {
                var tmp : [ListIntervenesResponseBody.Data.InterveneList] = []
                for v in value {
                    if v != nil {
                        var model = ListIntervenesResponseBody.Data.InterveneList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.interveneList = tmp
            }
            if let value = dict["PageIndex"] as? Int32 {
                self.pageIndex = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TotalSize"] as? Int64 {
                self.totalSize = value
            }
        }
    }
    public var code: String?

    public var data: ListIntervenesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListIntervenesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListIntervenesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListIntervenesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListIntervenesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListMaterialDocumentsRequest : Tea.TeaModel {
    public var agentKey: String?

    public var content: String?

    public var createTimeEnd: String?

    public var createTimeStart: String?

    public var current: Int32?

    public var docType: String?

    public var docTypeList: [String]?

    public var generatePublicUrl: Bool?

    public var id: Int64?

    public var keywords: [String]?

    public var query: String?

    public var shareAttr: Int32?

    public var size: Int32?

    public var title: String?

    public var updateTimeEnd: String?

    public var updateTimeStart: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.createTimeEnd != nil {
            map["CreateTimeEnd"] = self.createTimeEnd!
        }
        if self.createTimeStart != nil {
            map["CreateTimeStart"] = self.createTimeStart!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.docTypeList != nil {
            map["DocTypeList"] = self.docTypeList!
        }
        if self.generatePublicUrl != nil {
            map["GeneratePublicUrl"] = self.generatePublicUrl!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.keywords != nil {
            map["Keywords"] = self.keywords!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.shareAttr != nil {
            map["ShareAttr"] = self.shareAttr!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.updateTimeEnd != nil {
            map["UpdateTimeEnd"] = self.updateTimeEnd!
        }
        if self.updateTimeStart != nil {
            map["UpdateTimeStart"] = self.updateTimeStart!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["CreateTimeEnd"] as? String {
            self.createTimeEnd = value
        }
        if let value = dict["CreateTimeStart"] as? String {
            self.createTimeStart = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["DocTypeList"] as? [String] {
            self.docTypeList = value
        }
        if let value = dict["GeneratePublicUrl"] as? Bool {
            self.generatePublicUrl = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Keywords"] as? [String] {
            self.keywords = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["ShareAttr"] as? Int32 {
            self.shareAttr = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["UpdateTimeEnd"] as? String {
            self.updateTimeEnd = value
        }
        if let value = dict["UpdateTimeStart"] as? String {
            self.updateTimeStart = value
        }
    }
}

public class ListMaterialDocumentsShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var content: String?

    public var createTimeEnd: String?

    public var createTimeStart: String?

    public var current: Int32?

    public var docType: String?

    public var docTypeListShrink: String?

    public var generatePublicUrl: Bool?

    public var id: Int64?

    public var keywordsShrink: String?

    public var query: String?

    public var shareAttr: Int32?

    public var size: Int32?

    public var title: String?

    public var updateTimeEnd: String?

    public var updateTimeStart: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.createTimeEnd != nil {
            map["CreateTimeEnd"] = self.createTimeEnd!
        }
        if self.createTimeStart != nil {
            map["CreateTimeStart"] = self.createTimeStart!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.docTypeListShrink != nil {
            map["DocTypeList"] = self.docTypeListShrink!
        }
        if self.generatePublicUrl != nil {
            map["GeneratePublicUrl"] = self.generatePublicUrl!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.keywordsShrink != nil {
            map["Keywords"] = self.keywordsShrink!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.shareAttr != nil {
            map["ShareAttr"] = self.shareAttr!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.updateTimeEnd != nil {
            map["UpdateTimeEnd"] = self.updateTimeEnd!
        }
        if self.updateTimeStart != nil {
            map["UpdateTimeStart"] = self.updateTimeStart!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["CreateTimeEnd"] as? String {
            self.createTimeEnd = value
        }
        if let value = dict["CreateTimeStart"] as? String {
            self.createTimeStart = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["DocTypeList"] as? String {
            self.docTypeListShrink = value
        }
        if let value = dict["GeneratePublicUrl"] as? Bool {
            self.generatePublicUrl = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Keywords"] as? String {
            self.keywordsShrink = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["ShareAttr"] as? Int32 {
            self.shareAttr = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["UpdateTimeEnd"] as? String {
            self.updateTimeEnd = value
        }
        if let value = dict["UpdateTimeStart"] as? String {
            self.updateTimeStart = value
        }
    }
}

public class ListMaterialDocumentsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class FileAttr : Tea.TeaModel {
            public var duration: Double?

            public var fileLength: Int64?

            public var fileName: String?

            public var height: Int32?

            public var mimeType: String?

            public var width: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.fileLength != nil {
                    map["FileLength"] = self.fileLength!
                }
                if self.fileName != nil {
                    map["FileName"] = self.fileName!
                }
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.mimeType != nil {
                    map["MimeType"] = self.mimeType!
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Duration"] as? Double {
                    self.duration = value
                }
                if let value = dict["FileLength"] as? Int64 {
                    self.fileLength = value
                }
                if let value = dict["FileName"] as? String {
                    self.fileName = value
                }
                if let value = dict["Height"] as? Int32 {
                    self.height = value
                }
                if let value = dict["MimeType"] as? String {
                    self.mimeType = value
                }
                if let value = dict["Width"] as? Int32 {
                    self.width = value
                }
            }
        }
        public var author: String?

        public var createTime: String?

        public var createUser: String?

        public var createUserName: String?

        public var docKeywords: [String]?

        public var docType: String?

        public var externalUrl: String?

        public var fileAttr: ListMaterialDocumentsResponseBody.Data.FileAttr?

        public var fileKey: String?

        public var htmlContent: String?

        public var id: Int64?

        public var pubTime: String?

        public var publicUrl: String?

        public var shareAttr: Int32?

        public var srcFrom: String?

        public var summary: String?

        public var textContent: String?

        public var thumbnailInBase64: String?

        public var title: String?

        public var updateTime: String?

        public var updateUser: String?

        public var updateUserName: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.fileAttr?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.author != nil {
                map["Author"] = self.author!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.createUserName != nil {
                map["CreateUserName"] = self.createUserName!
            }
            if self.docKeywords != nil {
                map["DocKeywords"] = self.docKeywords!
            }
            if self.docType != nil {
                map["DocType"] = self.docType!
            }
            if self.externalUrl != nil {
                map["ExternalUrl"] = self.externalUrl!
            }
            if self.fileAttr != nil {
                map["FileAttr"] = self.fileAttr?.toMap()
            }
            if self.fileKey != nil {
                map["FileKey"] = self.fileKey!
            }
            if self.htmlContent != nil {
                map["HtmlContent"] = self.htmlContent!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.pubTime != nil {
                map["PubTime"] = self.pubTime!
            }
            if self.publicUrl != nil {
                map["PublicUrl"] = self.publicUrl!
            }
            if self.shareAttr != nil {
                map["ShareAttr"] = self.shareAttr!
            }
            if self.srcFrom != nil {
                map["SrcFrom"] = self.srcFrom!
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.textContent != nil {
                map["TextContent"] = self.textContent!
            }
            if self.thumbnailInBase64 != nil {
                map["ThumbnailInBase64"] = self.thumbnailInBase64!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.updateUser != nil {
                map["UpdateUser"] = self.updateUser!
            }
            if self.updateUserName != nil {
                map["UpdateUserName"] = self.updateUserName!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Author"] as? String {
                self.author = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["CreateUserName"] as? String {
                self.createUserName = value
            }
            if let value = dict["DocKeywords"] as? [String] {
                self.docKeywords = value
            }
            if let value = dict["DocType"] as? String {
                self.docType = value
            }
            if let value = dict["ExternalUrl"] as? String {
                self.externalUrl = value
            }
            if let value = dict["FileAttr"] as? [String: Any?] {
                var model = ListMaterialDocumentsResponseBody.Data.FileAttr()
                model.fromMap(value)
                self.fileAttr = model
            }
            if let value = dict["FileKey"] as? String {
                self.fileKey = value
            }
            if let value = dict["HtmlContent"] as? String {
                self.htmlContent = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["PubTime"] as? String {
                self.pubTime = value
            }
            if let value = dict["PublicUrl"] as? String {
                self.publicUrl = value
            }
            if let value = dict["ShareAttr"] as? Int32 {
                self.shareAttr = value
            }
            if let value = dict["SrcFrom"] as? String {
                self.srcFrom = value
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["TextContent"] as? String {
                self.textContent = value
            }
            if let value = dict["ThumbnailInBase64"] as? String {
                self.thumbnailInBase64 = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UpdateUser"] as? String {
                self.updateUser = value
            }
            if let value = dict["UpdateUserName"] as? String {
                self.updateUserName = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var code: String?

    public var current: Int32?

    public var data: [ListMaterialDocumentsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var size: Int32?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListMaterialDocumentsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListMaterialDocumentsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class ListMaterialDocumentsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListMaterialDocumentsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListMaterialDocumentsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPlanningProposalRequest : Tea.TeaModel {
    public var agentKey: String?

    public var customViewPointId: String?

    public var customViewPointIds: [String]?

    public var maxResults: Int32?

    public var nextToken: String?

    public var titles: [String]?

    public var topic: String?

    public var topicSource: String?

    public var topicVersion: String?

    public var viewPointType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.customViewPointId != nil {
            map["CustomViewPointId"] = self.customViewPointId!
        }
        if self.customViewPointIds != nil {
            map["CustomViewPointIds"] = self.customViewPointIds!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.titles != nil {
            map["Titles"] = self.titles!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        if self.topicSource != nil {
            map["TopicSource"] = self.topicSource!
        }
        if self.topicVersion != nil {
            map["TopicVersion"] = self.topicVersion!
        }
        if self.viewPointType != nil {
            map["ViewPointType"] = self.viewPointType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CustomViewPointId"] as? String {
            self.customViewPointId = value
        }
        if let value = dict["CustomViewPointIds"] as? [String] {
            self.customViewPointIds = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Titles"] as? [String] {
            self.titles = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
        if let value = dict["TopicSource"] as? String {
            self.topicSource = value
        }
        if let value = dict["TopicVersion"] as? String {
            self.topicVersion = value
        }
        if let value = dict["ViewPointType"] as? String {
            self.viewPointType = value
        }
    }
}

public class ListPlanningProposalShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var customViewPointId: String?

    public var customViewPointIdsShrink: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var titlesShrink: String?

    public var topic: String?

    public var topicSource: String?

    public var topicVersion: String?

    public var viewPointType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.customViewPointId != nil {
            map["CustomViewPointId"] = self.customViewPointId!
        }
        if self.customViewPointIdsShrink != nil {
            map["CustomViewPointIds"] = self.customViewPointIdsShrink!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.titlesShrink != nil {
            map["Titles"] = self.titlesShrink!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        if self.topicSource != nil {
            map["TopicSource"] = self.topicSource!
        }
        if self.topicVersion != nil {
            map["TopicVersion"] = self.topicVersion!
        }
        if self.viewPointType != nil {
            map["ViewPointType"] = self.viewPointType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CustomViewPointId"] as? String {
            self.customViewPointId = value
        }
        if let value = dict["CustomViewPointIds"] as? String {
            self.customViewPointIdsShrink = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Titles"] as? String {
            self.titlesShrink = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
        if let value = dict["TopicSource"] as? String {
            self.topicSource = value
        }
        if let value = dict["TopicVersion"] as? String {
            self.topicVersion = value
        }
        if let value = dict["ViewPointType"] as? String {
            self.viewPointType = value
        }
    }
}

public class ListPlanningProposalResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Outlines : Tea.TeaModel {
            public var outline: String?

            public var summary: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.outline != nil {
                    map["Outline"] = self.outline!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Outline"] as? String {
                    self.outline = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
            }
        }
        public var outlines: [ListPlanningProposalResponseBody.Data.Outlines]?

        public var summary: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.outlines != nil {
                var tmp : [Any] = []
                for k in self.outlines! {
                    tmp.append(k.toMap())
                }
                map["Outlines"] = tmp
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Outlines"] as? [Any?] {
                var tmp : [ListPlanningProposalResponseBody.Data.Outlines] = []
                for v in value {
                    if v != nil {
                        var model = ListPlanningProposalResponseBody.Data.Outlines()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.outlines = tmp
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var code: String?

    public var data: [ListPlanningProposalResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListPlanningProposalResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListPlanningProposalResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListPlanningProposalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPlanningProposalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPlanningProposalResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSearchTaskDialogueDatasRequest : Tea.TeaModel {
    public var includeContent: Bool?

    public var multimodalSearchType: String?

    public var originalSessionId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var query: String?

    public var searchModel: String?

    public var searchModelDataValue: String?

    public var sessionId: String?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.includeContent != nil {
            map["IncludeContent"] = self.includeContent!
        }
        if self.multimodalSearchType != nil {
            map["MultimodalSearchType"] = self.multimodalSearchType!
        }
        if self.originalSessionId != nil {
            map["OriginalSessionId"] = self.originalSessionId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.searchModel != nil {
            map["SearchModel"] = self.searchModel!
        }
        if self.searchModelDataValue != nil {
            map["SearchModelDataValue"] = self.searchModelDataValue!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IncludeContent"] as? Bool {
            self.includeContent = value
        }
        if let value = dict["MultimodalSearchType"] as? String {
            self.multimodalSearchType = value
        }
        if let value = dict["OriginalSessionId"] as? String {
            self.originalSessionId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["SearchModel"] as? String {
            self.searchModel = value
        }
        if let value = dict["SearchModelDataValue"] as? String {
            self.searchModelDataValue = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListSearchTaskDialogueDatasResponseBody : Tea.TeaModel {
    public class Articles : Tea.TeaModel {
        public class MultimodalMedias : Tea.TeaModel {
            public var fileUrl: String?

            public var mediaId: String?

            public var mediaType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileUrl != nil {
                    map["FileUrl"] = self.fileUrl!
                }
                if self.mediaId != nil {
                    map["MediaId"] = self.mediaId!
                }
                if self.mediaType != nil {
                    map["MediaType"] = self.mediaType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FileUrl"] as? String {
                    self.fileUrl = value
                }
                if let value = dict["MediaId"] as? String {
                    self.mediaId = value
                }
                if let value = dict["MediaType"] as? String {
                    self.mediaType = value
                }
            }
        }
        public var author: String?

        public var categoryUuid: String?

        public var content: String?

        public var docId: String?

        public var docType: String?

        public var docUuid: String?

        public var extend1: String?

        public var extend2: String?

        public var extend3: String?

        public var multimodalMedias: [ListSearchTaskDialogueDatasResponseBody.Articles.MultimodalMedias]?

        public var pubTime: String?

        public var source: String?

        public var summary: String?

        public var title: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.author != nil {
                map["Author"] = self.author!
            }
            if self.categoryUuid != nil {
                map["CategoryUuid"] = self.categoryUuid!
            }
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.docId != nil {
                map["DocId"] = self.docId!
            }
            if self.docType != nil {
                map["DocType"] = self.docType!
            }
            if self.docUuid != nil {
                map["DocUuid"] = self.docUuid!
            }
            if self.extend1 != nil {
                map["Extend1"] = self.extend1!
            }
            if self.extend2 != nil {
                map["Extend2"] = self.extend2!
            }
            if self.extend3 != nil {
                map["Extend3"] = self.extend3!
            }
            if self.multimodalMedias != nil {
                var tmp : [Any] = []
                for k in self.multimodalMedias! {
                    tmp.append(k.toMap())
                }
                map["MultimodalMedias"] = tmp
            }
            if self.pubTime != nil {
                map["PubTime"] = self.pubTime!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Author"] as? String {
                self.author = value
            }
            if let value = dict["CategoryUuid"] as? String {
                self.categoryUuid = value
            }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["DocId"] as? String {
                self.docId = value
            }
            if let value = dict["DocType"] as? String {
                self.docType = value
            }
            if let value = dict["DocUuid"] as? String {
                self.docUuid = value
            }
            if let value = dict["Extend1"] as? String {
                self.extend1 = value
            }
            if let value = dict["Extend2"] as? String {
                self.extend2 = value
            }
            if let value = dict["Extend3"] as? String {
                self.extend3 = value
            }
            if let value = dict["MultimodalMedias"] as? [Any?] {
                var tmp : [ListSearchTaskDialogueDatasResponseBody.Articles.MultimodalMedias] = []
                for v in value {
                    if v != nil {
                        var model = ListSearchTaskDialogueDatasResponseBody.Articles.MultimodalMedias()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.multimodalMedias = tmp
            }
            if let value = dict["PubTime"] as? String {
                self.pubTime = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public class Images : Tea.TeaModel {
        public var fileUrl: String?

        public var mediaId: String?

        public var mediaType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.mediaType != nil {
                map["MediaType"] = self.mediaType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["MediaType"] as? String {
                self.mediaType = value
            }
        }
    }
    public class Videos : Tea.TeaModel {
        public var fileUrl: String?

        public var mediaId: String?

        public var mediaType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.mediaType != nil {
                map["MediaType"] = self.mediaType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["MediaType"] as? String {
                self.mediaType = value
            }
        }
    }
    public var articles: [ListSearchTaskDialogueDatasResponseBody.Articles]?

    public var code: String?

    public var httpStatusCode: Int32?

    public var images: [ListSearchTaskDialogueDatasResponseBody.Images]?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var realtimeSearch: Bool?

    public var requestId: String?

    public var searchType: String?

    public var success: Bool?

    public var totalCount: Int32?

    public var videos: [ListSearchTaskDialogueDatasResponseBody.Videos]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.articles != nil {
            var tmp : [Any] = []
            for k in self.articles! {
                tmp.append(k.toMap())
            }
            map["Articles"] = tmp
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.images != nil {
            var tmp : [Any] = []
            for k in self.images! {
                tmp.append(k.toMap())
            }
            map["Images"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.realtimeSearch != nil {
            map["RealtimeSearch"] = self.realtimeSearch!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.searchType != nil {
            map["SearchType"] = self.searchType!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.videos != nil {
            var tmp : [Any] = []
            for k in self.videos! {
                tmp.append(k.toMap())
            }
            map["Videos"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Articles"] as? [Any?] {
            var tmp : [ListSearchTaskDialogueDatasResponseBody.Articles] = []
            for v in value {
                if v != nil {
                    var model = ListSearchTaskDialogueDatasResponseBody.Articles()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.articles = tmp
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Images"] as? [Any?] {
            var tmp : [ListSearchTaskDialogueDatasResponseBody.Images] = []
            for v in value {
                if v != nil {
                    var model = ListSearchTaskDialogueDatasResponseBody.Images()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.images = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RealtimeSearch"] as? Bool {
            self.realtimeSearch = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SearchType"] as? String {
            self.searchType = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["Videos"] as? [Any?] {
            var tmp : [ListSearchTaskDialogueDatasResponseBody.Videos] = []
            for v in value {
                if v != nil {
                    var model = ListSearchTaskDialogueDatasResponseBody.Videos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.videos = tmp
        }
    }
}

public class ListSearchTaskDialogueDatasResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSearchTaskDialogueDatasResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSearchTaskDialogueDatasResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSearchTaskDialoguesRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListSearchTaskDialoguesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ChatConfig : Tea.TeaModel {
            public class SearchParam : Tea.TeaModel {
                public class SearchSources : Tea.TeaModel {
                    public var code: String?

                    public var datasetName: String?

                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.code != nil {
                            map["Code"] = self.code!
                        }
                        if self.datasetName != nil {
                            map["DatasetName"] = self.datasetName!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Code"] as? String {
                            self.code = value
                        }
                        if let value = dict["DatasetName"] as? String {
                            self.datasetName = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public var endTime: String?

                public var multimodalSearchTypes: [String]?

                public var searchSources: [ListSearchTaskDialoguesResponseBody.Data.ChatConfig.SearchParam.SearchSources]?

                public var startTime: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.endTime != nil {
                        map["EndTime"] = self.endTime!
                    }
                    if self.multimodalSearchTypes != nil {
                        map["MultimodalSearchTypes"] = self.multimodalSearchTypes!
                    }
                    if self.searchSources != nil {
                        var tmp : [Any] = []
                        for k in self.searchSources! {
                            tmp.append(k.toMap())
                        }
                        map["SearchSources"] = tmp
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EndTime"] as? String {
                        self.endTime = value
                    }
                    if let value = dict["MultimodalSearchTypes"] as? [String] {
                        self.multimodalSearchTypes = value
                    }
                    if let value = dict["SearchSources"] as? [Any?] {
                        var tmp : [ListSearchTaskDialoguesResponseBody.Data.ChatConfig.SearchParam.SearchSources] = []
                        for v in value {
                            if v != nil {
                                var model = ListSearchTaskDialoguesResponseBody.Data.ChatConfig.SearchParam.SearchSources()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.searchSources = tmp
                    }
                    if let value = dict["StartTime"] as? String {
                        self.startTime = value
                    }
                }
            }
            public var dialogueType: Int32?

            public var endToEnd: Bool?

            public var generateLevel: String?

            public var generateTechnology: String?

            public var searchModels: [String]?

            public var searchParam: ListSearchTaskDialoguesResponseBody.Data.ChatConfig.SearchParam?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.searchParam?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dialogueType != nil {
                    map["DialogueType"] = self.dialogueType!
                }
                if self.endToEnd != nil {
                    map["EndToEnd"] = self.endToEnd!
                }
                if self.generateLevel != nil {
                    map["GenerateLevel"] = self.generateLevel!
                }
                if self.generateTechnology != nil {
                    map["GenerateTechnology"] = self.generateTechnology!
                }
                if self.searchModels != nil {
                    map["SearchModels"] = self.searchModels!
                }
                if self.searchParam != nil {
                    map["SearchParam"] = self.searchParam?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DialogueType"] as? Int32 {
                    self.dialogueType = value
                }
                if let value = dict["EndToEnd"] as? Bool {
                    self.endToEnd = value
                }
                if let value = dict["GenerateLevel"] as? String {
                    self.generateLevel = value
                }
                if let value = dict["GenerateTechnology"] as? String {
                    self.generateTechnology = value
                }
                if let value = dict["SearchModels"] as? [String] {
                    self.searchModels = value
                }
                if let value = dict["SearchParam"] as? [String: Any?] {
                    var model = ListSearchTaskDialoguesResponseBody.Data.ChatConfig.SearchParam()
                    model.fromMap(value)
                    self.searchParam = model
                }
            }
        }
        public var chatConfig: ListSearchTaskDialoguesResponseBody.Data.ChatConfig?

        public var createTime: String?

        public var dialogueType: Int32?

        public var goodText: String?

        public var originSessionId: String?

        public var prompt: String?

        public var rating: String?

        public var responseBodyStr: String?

        public var sessionId: String?

        public var tags: [String]?

        public var taskId: String?

        public var text: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.chatConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.chatConfig != nil {
                map["ChatConfig"] = self.chatConfig?.toMap()
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.dialogueType != nil {
                map["DialogueType"] = self.dialogueType!
            }
            if self.goodText != nil {
                map["GoodText"] = self.goodText!
            }
            if self.originSessionId != nil {
                map["OriginSessionId"] = self.originSessionId!
            }
            if self.prompt != nil {
                map["Prompt"] = self.prompt!
            }
            if self.rating != nil {
                map["Rating"] = self.rating!
            }
            if self.responseBodyStr != nil {
                map["ResponseBodyStr"] = self.responseBodyStr!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.tags != nil {
                map["Tags"] = self.tags!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.text != nil {
                map["Text"] = self.text!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ChatConfig"] as? [String: Any?] {
                var model = ListSearchTaskDialoguesResponseBody.Data.ChatConfig()
                model.fromMap(value)
                self.chatConfig = model
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["DialogueType"] as? Int32 {
                self.dialogueType = value
            }
            if let value = dict["GoodText"] as? String {
                self.goodText = value
            }
            if let value = dict["OriginSessionId"] as? String {
                self.originSessionId = value
            }
            if let value = dict["Prompt"] as? String {
                self.prompt = value
            }
            if let value = dict["Rating"] as? String {
                self.rating = value
            }
            if let value = dict["ResponseBodyStr"] as? String {
                self.responseBodyStr = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["Tags"] as? [String] {
                self.tags = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["Text"] as? String {
                self.text = value
            }
        }
    }
    public var code: String?

    public var data: [ListSearchTaskDialoguesResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListSearchTaskDialoguesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListSearchTaskDialoguesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListSearchTaskDialoguesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSearchTaskDialoguesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSearchTaskDialoguesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSearchTasksRequest : Tea.TeaModel {
    public var dialogueTypes: [Int32]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dialogueTypes != nil {
            map["DialogueTypes"] = self.dialogueTypes!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DialogueTypes"] as? [Int32] {
            self.dialogueTypes = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListSearchTasksShrinkRequest : Tea.TeaModel {
    public var dialogueTypesShrink: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dialogueTypesShrink != nil {
            map["DialogueTypes"] = self.dialogueTypesShrink!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DialogueTypes"] as? String {
            self.dialogueTypesShrink = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListSearchTasksResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var createTime: String?

        public var dialogueType: Int32?

        public var taskId: String?

        public var taskName: String?

        public var updateTime: String?

        public var username: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.dialogueType != nil {
                map["DialogueType"] = self.dialogueType!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.username != nil {
                map["Username"] = self.username!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["DialogueType"] as? Int32 {
                self.dialogueType = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["Username"] as? String {
                self.username = value
            }
        }
    }
    public var code: String?

    public var data: [ListSearchTasksResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListSearchTasksResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListSearchTasksResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListSearchTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSearchTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSearchTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListStyleLearningResultRequest : Tea.TeaModel {
    public var agentKey: String?

    public var current: Int32?

    public var size: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
    }
}

public class ListStyleLearningResultResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var aigcResult: String?

        public var id: Int64?

        public var rewriteResult: String?

        public var styleName: String?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aigcResult != nil {
                map["AigcResult"] = self.aigcResult!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.rewriteResult != nil {
                map["RewriteResult"] = self.rewriteResult!
            }
            if self.styleName != nil {
                map["StyleName"] = self.styleName!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AigcResult"] as? String {
                self.aigcResult = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["RewriteResult"] as? String {
                self.rewriteResult = value
            }
            if let value = dict["StyleName"] as? String {
                self.styleName = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var current: Int32?

    public var data: [ListStyleLearningResultResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var size: Int32?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListStyleLearningResultResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListStyleLearningResultResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class ListStyleLearningResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListStyleLearningResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListStyleLearningResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTimedViewAttitudeRequest : Tea.TeaModel {
    public var agentKey: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var topic: String?

    public var topicSource: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        if self.topicSource != nil {
            map["TopicSource"] = self.topicSource!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
        if let value = dict["TopicSource"] as? String {
            self.topicSource = value
        }
    }
}

public class ListTimedViewAttitudeResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ViewPoints : Tea.TeaModel {
            public class Outlines : Tea.TeaModel {
                public var outline: String?

                public var summary: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.outline != nil {
                        map["Outline"] = self.outline!
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Outline"] as? String {
                        self.outline = value
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                }
            }
            public var outlines: [ListTimedViewAttitudeResponseBody.Data.ViewPoints.Outlines]?

            public var point: String?

            public var summary: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.outlines != nil {
                    var tmp : [Any] = []
                    for k in self.outlines! {
                        tmp.append(k.toMap())
                    }
                    map["Outlines"] = tmp
                }
                if self.point != nil {
                    map["Point"] = self.point!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Outlines"] as? [Any?] {
                    var tmp : [ListTimedViewAttitudeResponseBody.Data.ViewPoints.Outlines] = []
                    for v in value {
                        if v != nil {
                            var model = ListTimedViewAttitudeResponseBody.Data.ViewPoints.Outlines()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.outlines = tmp
                }
                if let value = dict["Point"] as? String {
                    self.point = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
            }
        }
        public var attitude: String?

        public var attitudeType: String?

        public var pubTime: String?

        public var ratio: String?

        public var source: String?

        public var title: String?

        public var url: String?

        public var viewPoints: [ListTimedViewAttitudeResponseBody.Data.ViewPoints]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attitude != nil {
                map["Attitude"] = self.attitude!
            }
            if self.attitudeType != nil {
                map["AttitudeType"] = self.attitudeType!
            }
            if self.pubTime != nil {
                map["PubTime"] = self.pubTime!
            }
            if self.ratio != nil {
                map["Ratio"] = self.ratio!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.viewPoints != nil {
                var tmp : [Any] = []
                for k in self.viewPoints! {
                    tmp.append(k.toMap())
                }
                map["ViewPoints"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attitude"] as? String {
                self.attitude = value
            }
            if let value = dict["AttitudeType"] as? String {
                self.attitudeType = value
            }
            if let value = dict["PubTime"] as? String {
                self.pubTime = value
            }
            if let value = dict["Ratio"] as? String {
                self.ratio = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["ViewPoints"] as? [Any?] {
                var tmp : [ListTimedViewAttitudeResponseBody.Data.ViewPoints] = []
                for v in value {
                    if v != nil {
                        var model = ListTimedViewAttitudeResponseBody.Data.ViewPoints()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.viewPoints = tmp
            }
        }
    }
    public var code: String?

    public var data: [ListTimedViewAttitudeResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListTimedViewAttitudeResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListTimedViewAttitudeResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListTimedViewAttitudeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTimedViewAttitudeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTimedViewAttitudeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTopicRecommendEventListRequest : Tea.TeaModel {
    public var agentKey: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class ListTopicRecommendEventListResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: [String]?

    public var httpStatusCode: Int32?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String] {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListTopicRecommendEventListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTopicRecommendEventListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTopicRecommendEventListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTopicViewPointRecommendEventListRequest : Tea.TeaModel {
    public var agentKey: String?

    public var id: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class ListTopicViewPointRecommendEventListResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: [String]?

    public var httpStatusCode: Int32?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String] {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListTopicViewPointRecommendEventListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTopicViewPointRecommendEventListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTopicViewPointRecommendEventListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListVersionsRequest : Tea.TeaModel {
    public var agentKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
    }
}

public class ListVersionsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var concurrentCount: Int32?

        public var endTime: String?

        public var instanceCount: Int32?

        public var instanceId: String?

        public var orderId: Int64?

        public var productType: String?

        public var quota: Int32?

        public var startTime: String?

        public var useQuota: Int32?

        public var versionDetail: String?

        public var versionName: String?

        public var versionStatus: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.concurrentCount != nil {
                map["ConcurrentCount"] = self.concurrentCount!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.instanceCount != nil {
                map["InstanceCount"] = self.instanceCount!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.orderId != nil {
                map["OrderId"] = self.orderId!
            }
            if self.productType != nil {
                map["ProductType"] = self.productType!
            }
            if self.quota != nil {
                map["Quota"] = self.quota!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.useQuota != nil {
                map["UseQuota"] = self.useQuota!
            }
            if self.versionDetail != nil {
                map["VersionDetail"] = self.versionDetail!
            }
            if self.versionName != nil {
                map["VersionName"] = self.versionName!
            }
            if self.versionStatus != nil {
                map["VersionStatus"] = self.versionStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConcurrentCount"] as? Int32 {
                self.concurrentCount = value
            }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["InstanceCount"] as? Int32 {
                self.instanceCount = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["OrderId"] as? Int64 {
                self.orderId = value
            }
            if let value = dict["ProductType"] as? String {
                self.productType = value
            }
            if let value = dict["Quota"] as? Int32 {
                self.quota = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
            if let value = dict["UseQuota"] as? Int32 {
                self.useQuota = value
            }
            if let value = dict["VersionDetail"] as? String {
                self.versionDetail = value
            }
            if let value = dict["VersionName"] as? String {
                self.versionName = value
            }
            if let value = dict["VersionStatus"] as? Int32 {
                self.versionStatus = value
            }
        }
    }
    public var code: String?

    public var data: [ListVersionsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListVersionsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListVersionsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListVersionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListVersionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListVersionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWebReviewPointsRequest : Tea.TeaModel {
    public var agentKey: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var topic: String?

    public var topicSource: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        if self.topicSource != nil {
            map["TopicSource"] = self.topicSource!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
        if let value = dict["TopicSource"] as? String {
            self.topicSource = value
        }
    }
}

public class ListWebReviewPointsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Comments : Tea.TeaModel {
            public var source: String?

            public var text: String?

            public var title: String?

            public var url: String?

            public var username: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.source != nil {
                    map["Source"] = self.source!
                }
                if self.text != nil {
                    map["Text"] = self.text!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Source"] as? String {
                    self.source = value
                }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
            }
        }
        public class ViewPoints : Tea.TeaModel {
            public class Outlines : Tea.TeaModel {
                public var outline: String?

                public var summary: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.outline != nil {
                        map["Outline"] = self.outline!
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Outline"] as? String {
                        self.outline = value
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                }
            }
            public var outlines: [ListWebReviewPointsResponseBody.Data.ViewPoints.Outlines]?

            public var point: String?

            public var summary: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.outlines != nil {
                    var tmp : [Any] = []
                    for k in self.outlines! {
                        tmp.append(k.toMap())
                    }
                    map["Outlines"] = tmp
                }
                if self.point != nil {
                    map["Point"] = self.point!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Outlines"] as? [Any?] {
                    var tmp : [ListWebReviewPointsResponseBody.Data.ViewPoints.Outlines] = []
                    for v in value {
                        if v != nil {
                            var model = ListWebReviewPointsResponseBody.Data.ViewPoints.Outlines()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.outlines = tmp
                }
                if let value = dict["Point"] as? String {
                    self.point = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
            }
        }
        public var attitude: String?

        public var attitudeType: String?

        public var comments: [ListWebReviewPointsResponseBody.Data.Comments]?

        public var ratio: String?

        public var viewPoints: [ListWebReviewPointsResponseBody.Data.ViewPoints]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attitude != nil {
                map["Attitude"] = self.attitude!
            }
            if self.attitudeType != nil {
                map["AttitudeType"] = self.attitudeType!
            }
            if self.comments != nil {
                var tmp : [Any] = []
                for k in self.comments! {
                    tmp.append(k.toMap())
                }
                map["Comments"] = tmp
            }
            if self.ratio != nil {
                map["Ratio"] = self.ratio!
            }
            if self.viewPoints != nil {
                var tmp : [Any] = []
                for k in self.viewPoints! {
                    tmp.append(k.toMap())
                }
                map["ViewPoints"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attitude"] as? String {
                self.attitude = value
            }
            if let value = dict["AttitudeType"] as? String {
                self.attitudeType = value
            }
            if let value = dict["Comments"] as? [Any?] {
                var tmp : [ListWebReviewPointsResponseBody.Data.Comments] = []
                for v in value {
                    if v != nil {
                        var model = ListWebReviewPointsResponseBody.Data.Comments()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.comments = tmp
            }
            if let value = dict["Ratio"] as? String {
                self.ratio = value
            }
            if let value = dict["ViewPoints"] as? [Any?] {
                var tmp : [ListWebReviewPointsResponseBody.Data.ViewPoints] = []
                for v in value {
                    if v != nil {
                        var model = ListWebReviewPointsResponseBody.Data.ViewPoints()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.viewPoints = tmp
            }
        }
    }
    public var code: String?

    public var data: [ListWebReviewPointsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListWebReviewPointsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListWebReviewPointsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListWebReviewPointsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWebReviewPointsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWebReviewPointsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWritingStylesRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var scene: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.scene != nil {
            map["Scene"] = self.scene!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Scene"] as? String {
            self.scene = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListWritingStylesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var distributeStepTemplateDefine: WritingStyleTemplateDefine?

        public var distributeWriting: Bool?

        public var emoji: String?

        public var styleDescription: String?

        public var styleImage: String?

        public var styleKey: String?

        public var styleName: String?

        public var templateDefine: WritingStyleTemplateDefine?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.distributeStepTemplateDefine?.validate()
            try self.templateDefine?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.distributeStepTemplateDefine != nil {
                map["DistributeStepTemplateDefine"] = self.distributeStepTemplateDefine?.toMap()
            }
            if self.distributeWriting != nil {
                map["DistributeWriting"] = self.distributeWriting!
            }
            if self.emoji != nil {
                map["Emoji"] = self.emoji!
            }
            if self.styleDescription != nil {
                map["StyleDescription"] = self.styleDescription!
            }
            if self.styleImage != nil {
                map["StyleImage"] = self.styleImage!
            }
            if self.styleKey != nil {
                map["StyleKey"] = self.styleKey!
            }
            if self.styleName != nil {
                map["StyleName"] = self.styleName!
            }
            if self.templateDefine != nil {
                map["TemplateDefine"] = self.templateDefine?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DistributeStepTemplateDefine"] as? [String: Any?] {
                var model = WritingStyleTemplateDefine()
                model.fromMap(value)
                self.distributeStepTemplateDefine = model
            }
            if let value = dict["DistributeWriting"] as? Bool {
                self.distributeWriting = value
            }
            if let value = dict["Emoji"] as? String {
                self.emoji = value
            }
            if let value = dict["StyleDescription"] as? String {
                self.styleDescription = value
            }
            if let value = dict["StyleImage"] as? String {
                self.styleImage = value
            }
            if let value = dict["StyleKey"] as? String {
                self.styleKey = value
            }
            if let value = dict["StyleName"] as? String {
                self.styleName = value
            }
            if let value = dict["TemplateDefine"] as? [String: Any?] {
                var model = WritingStyleTemplateDefine()
                model.fromMap(value)
                self.templateDefine = model
            }
        }
    }
    public var code: String?

    public var data: [ListWritingStylesResponseBody.Data]?

    public var maxResults: Int32?

    public var message: String?

    public var nextToken: String?

    public var requestId: String?

    public var success: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [ListWritingStylesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListWritingStylesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListWritingStylesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWritingStylesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWritingStylesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryAsyncTaskRequest : Tea.TeaModel {
    public var agentKey: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class QueryAsyncTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var createTime: String?

        public var createUser: String?

        public var taskCode: String?

        public var taskErrorMessage: String?

        public var taskId: String?

        public var taskIntermediateResult: String?

        public var taskName: String?

        public var taskParam: String?

        public var taskProgressMessage: String?

        public var taskResult: String?

        public var taskRetryCount: String?

        public var taskStatus: Int32?

        public var updateTime: String?

        public var updateUser: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.taskCode != nil {
                map["TaskCode"] = self.taskCode!
            }
            if self.taskErrorMessage != nil {
                map["TaskErrorMessage"] = self.taskErrorMessage!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskIntermediateResult != nil {
                map["TaskIntermediateResult"] = self.taskIntermediateResult!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            if self.taskParam != nil {
                map["TaskParam"] = self.taskParam!
            }
            if self.taskProgressMessage != nil {
                map["TaskProgressMessage"] = self.taskProgressMessage!
            }
            if self.taskResult != nil {
                map["TaskResult"] = self.taskResult!
            }
            if self.taskRetryCount != nil {
                map["TaskRetryCount"] = self.taskRetryCount!
            }
            if self.taskStatus != nil {
                map["TaskStatus"] = self.taskStatus!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.updateUser != nil {
                map["UpdateUser"] = self.updateUser!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["TaskCode"] as? String {
                self.taskCode = value
            }
            if let value = dict["TaskErrorMessage"] as? String {
                self.taskErrorMessage = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskIntermediateResult"] as? String {
                self.taskIntermediateResult = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
            if let value = dict["TaskParam"] as? String {
                self.taskParam = value
            }
            if let value = dict["TaskProgressMessage"] as? String {
                self.taskProgressMessage = value
            }
            if let value = dict["TaskResult"] as? String {
                self.taskResult = value
            }
            if let value = dict["TaskRetryCount"] as? String {
                self.taskRetryCount = value
            }
            if let value = dict["TaskStatus"] as? Int32 {
                self.taskStatus = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["UpdateUser"] as? String {
                self.updateUser = value
            }
        }
    }
    public var code: String?

    public var data: QueryAsyncTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryAsyncTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryAsyncTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryAsyncTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryAsyncTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryAuditTaskRequest : Tea.TeaModel {
    public var articleId: String?

    public var contentAuditTaskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.articleId != nil {
            map["ArticleId"] = self.articleId!
        }
        if self.contentAuditTaskId != nil {
            map["ContentAuditTaskId"] = self.contentAuditTaskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ArticleId"] as? String {
            self.articleId = value
        }
        if let value = dict["ContentAuditTaskId"] as? String {
            self.contentAuditTaskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class QueryAuditTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Response : Tea.TeaModel {
            public class Header : Tea.TeaModel {
                public var errorCode: String?

                public var errorMessage: String?

                public var event: String?

                public var sessionId: String?

                public var taskId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.errorCode != nil {
                        map["ErrorCode"] = self.errorCode!
                    }
                    if self.errorMessage != nil {
                        map["ErrorMessage"] = self.errorMessage!
                    }
                    if self.event != nil {
                        map["Event"] = self.event!
                    }
                    if self.sessionId != nil {
                        map["SessionId"] = self.sessionId!
                    }
                    if self.taskId != nil {
                        map["TaskId"] = self.taskId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ErrorCode"] as? String {
                        self.errorCode = value
                    }
                    if let value = dict["ErrorMessage"] as? String {
                        self.errorMessage = value
                    }
                    if let value = dict["Event"] as? String {
                        self.event = value
                    }
                    if let value = dict["SessionId"] as? String {
                        self.sessionId = value
                    }
                    if let value = dict["TaskId"] as? String {
                        self.taskId = value
                    }
                }
            }
            public class Payload : Tea.TeaModel {
                public class Output : Tea.TeaModel {
                    public var text: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.text != nil {
                            map["Text"] = self.text!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Text"] as? String {
                            self.text = value
                        }
                    }
                }
                public class Usage : Tea.TeaModel {
                    public var inputTokens: Int32?

                    public var outputTokens: Int32?

                    public var totalTokens: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.inputTokens != nil {
                            map["InputTokens"] = self.inputTokens!
                        }
                        if self.outputTokens != nil {
                            map["OutputTokens"] = self.outputTokens!
                        }
                        if self.totalTokens != nil {
                            map["TotalTokens"] = self.totalTokens!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["InputTokens"] as? Int32 {
                            self.inputTokens = value
                        }
                        if let value = dict["OutputTokens"] as? Int32 {
                            self.outputTokens = value
                        }
                        if let value = dict["TotalTokens"] as? Int32 {
                            self.totalTokens = value
                        }
                    }
                }
                public var output: QueryAuditTaskResponseBody.Data.Response.Payload.Output?

                public var usage: QueryAuditTaskResponseBody.Data.Response.Payload.Usage?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.output?.validate()
                    try self.usage?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.output != nil {
                        map["Output"] = self.output?.toMap()
                    }
                    if self.usage != nil {
                        map["Usage"] = self.usage?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Output"] as? [String: Any?] {
                        var model = QueryAuditTaskResponseBody.Data.Response.Payload.Output()
                        model.fromMap(value)
                        self.output = model
                    }
                    if let value = dict["Usage"] as? [String: Any?] {
                        var model = QueryAuditTaskResponseBody.Data.Response.Payload.Usage()
                        model.fromMap(value)
                        self.usage = model
                    }
                }
            }
            public var header: QueryAuditTaskResponseBody.Data.Response.Header?

            public var payload: QueryAuditTaskResponseBody.Data.Response.Payload?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.header?.validate()
                try self.payload?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.header != nil {
                    map["Header"] = self.header?.toMap()
                }
                if self.payload != nil {
                    map["Payload"] = self.payload?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Header"] as? [String: Any?] {
                    var model = QueryAuditTaskResponseBody.Data.Response.Header()
                    model.fromMap(value)
                    self.header = model
                }
                if let value = dict["Payload"] as? [String: Any?] {
                    var model = QueryAuditTaskResponseBody.Data.Response.Payload()
                    model.fromMap(value)
                    self.payload = model
                }
            }
        }
        public var auditTime: String?

        public var content: String?

        public var htmlContent: String?

        public var response: QueryAuditTaskResponseBody.Data.Response?

        public var status: String?

        public var taskStatus: Int32?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.response?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.auditTime != nil {
                map["AuditTime"] = self.auditTime!
            }
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.htmlContent != nil {
                map["HtmlContent"] = self.htmlContent!
            }
            if self.response != nil {
                map["Response"] = self.response?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskStatus != nil {
                map["TaskStatus"] = self.taskStatus!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuditTime"] as? String {
                self.auditTime = value
            }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["HtmlContent"] as? String {
                self.htmlContent = value
            }
            if let value = dict["Response"] as? [String: Any?] {
                var model = QueryAuditTaskResponseBody.Data.Response()
                model.fromMap(value)
                self.response = model
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskStatus"] as? Int32 {
                self.taskStatus = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var code: String?

    public var data: QueryAuditTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryAuditTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryAuditTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryAuditTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryAuditTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunAbbreviationContentRequest : Tea.TeaModel {
    public var content: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunAbbreviationContentResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunAbbreviationContentResponseBody.Payload.Output?

        public var usage: RunAbbreviationContentResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunAbbreviationContentResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunAbbreviationContentResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var end: Bool?

    public var header: RunAbbreviationContentResponseBody.Header?

    public var payload: RunAbbreviationContentResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.end != nil {
            map["End"] = self.end!
        }
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["End"] as? Bool {
            self.end = value
        }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunAbbreviationContentResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunAbbreviationContentResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunAbbreviationContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunAbbreviationContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunAbbreviationContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunBookBrainmapRequest : Tea.TeaModel {
    public var cleanCache: Bool?

    public var docId: String?

    public var nodeNumber: Int32?

    public var prompt: String?

    public var sessionId: String?

    public var wordNumber: Int32?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cleanCache != nil {
            map["CleanCache"] = self.cleanCache!
        }
        if self.docId != nil {
            map["DocId"] = self.docId!
        }
        if self.nodeNumber != nil {
            map["NodeNumber"] = self.nodeNumber!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.wordNumber != nil {
            map["WordNumber"] = self.wordNumber!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CleanCache"] as? Bool {
            self.cleanCache = value
        }
        if let value = dict["DocId"] as? String {
            self.docId = value
        }
        if let value = dict["NodeNumber"] as? Int32 {
            self.nodeNumber = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["WordNumber"] as? Int32 {
            self.wordNumber = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunBookBrainmapResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var content: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunBookBrainmapResponseBody.Payload.Output?

        public var usage: RunBookBrainmapResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunBookBrainmapResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunBookBrainmapResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunBookBrainmapResponseBody.Header?

    public var payload: RunBookBrainmapResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunBookBrainmapResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunBookBrainmapResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunBookBrainmapResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunBookBrainmapResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunBookBrainmapResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunBookIntroductionRequest : Tea.TeaModel {
    public var docId: String?

    public var keyPointPrompt: String?

    public var sessionId: String?

    public var summaryPrompt: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.docId != nil {
            map["DocId"] = self.docId!
        }
        if self.keyPointPrompt != nil {
            map["KeyPointPrompt"] = self.keyPointPrompt!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.summaryPrompt != nil {
            map["SummaryPrompt"] = self.summaryPrompt!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocId"] as? String {
            self.docId = value
        }
        if let value = dict["KeyPointPrompt"] as? String {
            self.keyPointPrompt = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["SummaryPrompt"] as? String {
            self.summaryPrompt = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunBookIntroductionResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var keyPoint: String?

            public var summary: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.keyPoint != nil {
                    map["KeyPoint"] = self.keyPoint!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["KeyPoint"] as? String {
                    self.keyPoint = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunBookIntroductionResponseBody.Payload.Output?

        public var usage: RunBookIntroductionResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunBookIntroductionResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunBookIntroductionResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunBookIntroductionResponseBody.Header?

    public var payload: RunBookIntroductionResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunBookIntroductionResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunBookIntroductionResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunBookIntroductionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunBookIntroductionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunBookIntroductionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunBookSmartCardRequest : Tea.TeaModel {
    public var docId: String?

    public var sessionId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.docId != nil {
            map["DocId"] = self.docId!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocId"] as? String {
            self.docId = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunBookSmartCardResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var content: String?

            public var tags: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["Tags"] as? [String] {
                    self.tags = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunBookSmartCardResponseBody.Payload.Output?

        public var usage: RunBookSmartCardResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunBookSmartCardResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunBookSmartCardResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunBookSmartCardResponseBody.Header?

    public var payload: RunBookSmartCardResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunBookSmartCardResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunBookSmartCardResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunBookSmartCardResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunBookSmartCardResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunBookSmartCardResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunCommentGenerationRequest : Tea.TeaModel {
    public var allowEmoji: Bool?

    public var extraInfo: String?

    public var length: String?

    public var lengthRange: [String: Any]?

    public var numComments: String?

    public var sentiment: [String: Any]?

    public var sessionId: String?

    public var sourceMaterial: String?

    public var style: String?

    public var type: [String: Any]?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowEmoji != nil {
            map["AllowEmoji"] = self.allowEmoji!
        }
        if self.extraInfo != nil {
            map["ExtraInfo"] = self.extraInfo!
        }
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.lengthRange != nil {
            map["LengthRange"] = self.lengthRange!
        }
        if self.numComments != nil {
            map["NumComments"] = self.numComments!
        }
        if self.sentiment != nil {
            map["Sentiment"] = self.sentiment!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.sourceMaterial != nil {
            map["SourceMaterial"] = self.sourceMaterial!
        }
        if self.style != nil {
            map["Style"] = self.style!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowEmoji"] as? Bool {
            self.allowEmoji = value
        }
        if let value = dict["ExtraInfo"] as? String {
            self.extraInfo = value
        }
        if let value = dict["Length"] as? String {
            self.length = value
        }
        if let value = dict["LengthRange"] as? [String: Any] {
            self.lengthRange = value
        }
        if let value = dict["NumComments"] as? String {
            self.numComments = value
        }
        if let value = dict["Sentiment"] as? [String: Any] {
            self.sentiment = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["SourceMaterial"] as? String {
            self.sourceMaterial = value
        }
        if let value = dict["Style"] as? String {
            self.style = value
        }
        if let value = dict["Type"] as? [String: Any] {
            self.type = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunCommentGenerationShrinkRequest : Tea.TeaModel {
    public var allowEmoji: Bool?

    public var extraInfo: String?

    public var length: String?

    public var lengthRangeShrink: String?

    public var numComments: String?

    public var sentimentShrink: String?

    public var sessionId: String?

    public var sourceMaterial: String?

    public var style: String?

    public var typeShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowEmoji != nil {
            map["AllowEmoji"] = self.allowEmoji!
        }
        if self.extraInfo != nil {
            map["ExtraInfo"] = self.extraInfo!
        }
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.lengthRangeShrink != nil {
            map["LengthRange"] = self.lengthRangeShrink!
        }
        if self.numComments != nil {
            map["NumComments"] = self.numComments!
        }
        if self.sentimentShrink != nil {
            map["Sentiment"] = self.sentimentShrink!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.sourceMaterial != nil {
            map["SourceMaterial"] = self.sourceMaterial!
        }
        if self.style != nil {
            map["Style"] = self.style!
        }
        if self.typeShrink != nil {
            map["Type"] = self.typeShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowEmoji"] as? Bool {
            self.allowEmoji = value
        }
        if let value = dict["ExtraInfo"] as? String {
            self.extraInfo = value
        }
        if let value = dict["Length"] as? String {
            self.length = value
        }
        if let value = dict["LengthRange"] as? String {
            self.lengthRangeShrink = value
        }
        if let value = dict["NumComments"] as? String {
            self.numComments = value
        }
        if let value = dict["Sentiment"] as? String {
            self.sentimentShrink = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["SourceMaterial"] as? String {
            self.sourceMaterial = value
        }
        if let value = dict["Style"] as? String {
            self.style = value
        }
        if let value = dict["Type"] as? String {
            self.typeShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunCommentGenerationResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var event: String?

        public var eventInfo: String?

        public var requestId: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.requestId != nil {
                map["RequestId"] = self.requestId!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["RequestId"] as? String {
                self.requestId = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunCommentGenerationResponseBody.Payload.Output?

        public var usage: RunCommentGenerationResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunCommentGenerationResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunCommentGenerationResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var end: Bool?

    public var header: RunCommentGenerationResponseBody.Header?

    public var payload: RunCommentGenerationResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.end != nil {
            map["End"] = self.end!
        }
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["End"] as? Bool {
            self.end = value
        }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunCommentGenerationResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunCommentGenerationResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunCommentGenerationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunCommentGenerationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunCommentGenerationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunContinueContentRequest : Tea.TeaModel {
    public var content: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunContinueContentResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunContinueContentResponseBody.Payload.Output?

        public var usage: RunContinueContentResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunContinueContentResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunContinueContentResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var end: Bool?

    public var header: RunContinueContentResponseBody.Header?

    public var payload: RunContinueContentResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.end != nil {
            map["End"] = self.end!
        }
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["End"] as? Bool {
            self.end = value
        }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunContinueContentResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunContinueContentResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunContinueContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunContinueContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunContinueContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunCustomHotTopicAnalysisRequest : Tea.TeaModel {
    public var askUser: String?

    public var forceAnalysisExistsTopic: Bool?

    public var prompt: String?

    public var sessionId: String?

    public var taskId: String?

    public var userBack: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.askUser != nil {
            map["AskUser"] = self.askUser!
        }
        if self.forceAnalysisExistsTopic != nil {
            map["ForceAnalysisExistsTopic"] = self.forceAnalysisExistsTopic!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.userBack != nil {
            map["UserBack"] = self.userBack!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AskUser"] as? String {
            self.askUser = value
        }
        if let value = dict["ForceAnalysisExistsTopic"] as? Bool {
            self.forceAnalysisExistsTopic = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["UserBack"] as? String {
            self.userBack = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunCustomHotTopicAnalysisResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var originSessionId: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.originSessionId != nil {
                map["OriginSessionId"] = self.originSessionId!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["OriginSessionId"] as? String {
                self.originSessionId = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public class Articles : Tea.TeaModel {
                public var author: String?

                public var content: String?

                public var docId: String?

                public var docUuid: String?

                public var pubTime: String?

                public var source: String?

                public var summary: String?

                public var tag: String?

                public var title: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.author != nil {
                        map["Author"] = self.author!
                    }
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.docId != nil {
                        map["DocId"] = self.docId!
                    }
                    if self.docUuid != nil {
                        map["DocUuid"] = self.docUuid!
                    }
                    if self.pubTime != nil {
                        map["PubTime"] = self.pubTime!
                    }
                    if self.source != nil {
                        map["Source"] = self.source!
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    if self.tag != nil {
                        map["Tag"] = self.tag!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Author"] as? String {
                        self.author = value
                    }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["DocId"] as? String {
                        self.docId = value
                    }
                    if let value = dict["DocUuid"] as? String {
                        self.docUuid = value
                    }
                    if let value = dict["PubTime"] as? String {
                        self.pubTime = value
                    }
                    if let value = dict["Source"] as? String {
                        self.source = value
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                    if let value = dict["Tag"] as? String {
                        self.tag = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var articles: [RunCustomHotTopicAnalysisResponseBody.Payload.Output.Articles]?

            public var askUser: [String]?

            public var asyncTaskId: String?

            public var attitude: String?

            public var searchQuery: String?

            public var text: String?

            public var topicId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.articles != nil {
                    var tmp : [Any] = []
                    for k in self.articles! {
                        tmp.append(k.toMap())
                    }
                    map["Articles"] = tmp
                }
                if self.askUser != nil {
                    map["AskUser"] = self.askUser!
                }
                if self.asyncTaskId != nil {
                    map["AsyncTaskId"] = self.asyncTaskId!
                }
                if self.attitude != nil {
                    map["Attitude"] = self.attitude!
                }
                if self.searchQuery != nil {
                    map["SearchQuery"] = self.searchQuery!
                }
                if self.text != nil {
                    map["Text"] = self.text!
                }
                if self.topicId != nil {
                    map["TopicId"] = self.topicId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Articles"] as? [Any?] {
                    var tmp : [RunCustomHotTopicAnalysisResponseBody.Payload.Output.Articles] = []
                    for v in value {
                        if v != nil {
                            var model = RunCustomHotTopicAnalysisResponseBody.Payload.Output.Articles()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.articles = tmp
                }
                if let value = dict["AskUser"] as? [String] {
                    self.askUser = value
                }
                if let value = dict["AsyncTaskId"] as? String {
                    self.asyncTaskId = value
                }
                if let value = dict["Attitude"] as? String {
                    self.attitude = value
                }
                if let value = dict["SearchQuery"] as? String {
                    self.searchQuery = value
                }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
                if let value = dict["TopicId"] as? String {
                    self.topicId = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunCustomHotTopicAnalysisResponseBody.Payload.Output?

        public var usage: RunCustomHotTopicAnalysisResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunCustomHotTopicAnalysisResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunCustomHotTopicAnalysisResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunCustomHotTopicAnalysisResponseBody.Header?

    public var payload: RunCustomHotTopicAnalysisResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunCustomHotTopicAnalysisResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunCustomHotTopicAnalysisResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunCustomHotTopicAnalysisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunCustomHotTopicAnalysisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunCustomHotTopicAnalysisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunCustomHotTopicViewPointAnalysisRequest : Tea.TeaModel {
    public var askUser: String?

    public var prompt: String?

    public var searchQuery: String?

    public var skipAskUser: Bool?

    public var topic: String?

    public var topicId: String?

    public var topicSource: String?

    public var topicVersion: String?

    public var userBack: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.askUser != nil {
            map["AskUser"] = self.askUser!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.searchQuery != nil {
            map["SearchQuery"] = self.searchQuery!
        }
        if self.skipAskUser != nil {
            map["SkipAskUser"] = self.skipAskUser!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        if self.topicId != nil {
            map["TopicId"] = self.topicId!
        }
        if self.topicSource != nil {
            map["TopicSource"] = self.topicSource!
        }
        if self.topicVersion != nil {
            map["TopicVersion"] = self.topicVersion!
        }
        if self.userBack != nil {
            map["UserBack"] = self.userBack!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AskUser"] as? String {
            self.askUser = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["SearchQuery"] as? String {
            self.searchQuery = value
        }
        if let value = dict["SkipAskUser"] as? Bool {
            self.skipAskUser = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
        if let value = dict["TopicId"] as? String {
            self.topicId = value
        }
        if let value = dict["TopicSource"] as? String {
            self.topicSource = value
        }
        if let value = dict["TopicVersion"] as? String {
            self.topicVersion = value
        }
        if let value = dict["UserBack"] as? String {
            self.userBack = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunCustomHotTopicViewPointAnalysisResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var originSessionId: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.originSessionId != nil {
                map["OriginSessionId"] = self.originSessionId!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["OriginSessionId"] as? String {
                self.originSessionId = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public class Articles : Tea.TeaModel {
                public var author: String?

                public var content: String?

                public var pubTime: String?

                public var source: String?

                public var summary: String?

                public var title: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.author != nil {
                        map["Author"] = self.author!
                    }
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.pubTime != nil {
                        map["PubTime"] = self.pubTime!
                    }
                    if self.source != nil {
                        map["Source"] = self.source!
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Author"] as? String {
                        self.author = value
                    }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["PubTime"] as? String {
                        self.pubTime = value
                    }
                    if let value = dict["Source"] as? String {
                        self.source = value
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var articles: [RunCustomHotTopicViewPointAnalysisResponseBody.Payload.Output.Articles]?

            public var askUser: [String]?

            public var asyncTaskId: String?

            public var attitude: String?

            public var customViewPointId: String?

            public var text: String?

            public var topicId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.articles != nil {
                    var tmp : [Any] = []
                    for k in self.articles! {
                        tmp.append(k.toMap())
                    }
                    map["Articles"] = tmp
                }
                if self.askUser != nil {
                    map["AskUser"] = self.askUser!
                }
                if self.asyncTaskId != nil {
                    map["AsyncTaskId"] = self.asyncTaskId!
                }
                if self.attitude != nil {
                    map["Attitude"] = self.attitude!
                }
                if self.customViewPointId != nil {
                    map["CustomViewPointId"] = self.customViewPointId!
                }
                if self.text != nil {
                    map["Text"] = self.text!
                }
                if self.topicId != nil {
                    map["TopicId"] = self.topicId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Articles"] as? [Any?] {
                    var tmp : [RunCustomHotTopicViewPointAnalysisResponseBody.Payload.Output.Articles] = []
                    for v in value {
                        if v != nil {
                            var model = RunCustomHotTopicViewPointAnalysisResponseBody.Payload.Output.Articles()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.articles = tmp
                }
                if let value = dict["AskUser"] as? [String] {
                    self.askUser = value
                }
                if let value = dict["AsyncTaskId"] as? String {
                    self.asyncTaskId = value
                }
                if let value = dict["Attitude"] as? String {
                    self.attitude = value
                }
                if let value = dict["CustomViewPointId"] as? String {
                    self.customViewPointId = value
                }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
                if let value = dict["TopicId"] as? String {
                    self.topicId = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunCustomHotTopicViewPointAnalysisResponseBody.Payload.Output?

        public var usage: RunCustomHotTopicViewPointAnalysisResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunCustomHotTopicViewPointAnalysisResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunCustomHotTopicViewPointAnalysisResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunCustomHotTopicViewPointAnalysisResponseBody.Header?

    public var payload: RunCustomHotTopicViewPointAnalysisResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunCustomHotTopicViewPointAnalysisResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunCustomHotTopicViewPointAnalysisResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunCustomHotTopicViewPointAnalysisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunCustomHotTopicViewPointAnalysisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunCustomHotTopicViewPointAnalysisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunDocBrainmapRequest : Tea.TeaModel {
    public var cleanCache: Bool?

    public var docId: String?

    public var nodeNumber: Int32?

    public var prompt: String?

    public var sessionId: String?

    public var wordNumber: Int32?

    public var workspaceId: String?

    public var referenceContent: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cleanCache != nil {
            map["CleanCache"] = self.cleanCache!
        }
        if self.docId != nil {
            map["DocId"] = self.docId!
        }
        if self.nodeNumber != nil {
            map["NodeNumber"] = self.nodeNumber!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.wordNumber != nil {
            map["WordNumber"] = self.wordNumber!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        if self.referenceContent != nil {
            map["referenceContent"] = self.referenceContent!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CleanCache"] as? Bool {
            self.cleanCache = value
        }
        if let value = dict["DocId"] as? String {
            self.docId = value
        }
        if let value = dict["NodeNumber"] as? Int32 {
            self.nodeNumber = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["WordNumber"] as? Int32 {
            self.wordNumber = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
        if let value = dict["referenceContent"] as? String {
            self.referenceContent = value
        }
    }
}

public class RunDocBrainmapResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var content: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunDocBrainmapResponseBody.Payload.Output?

        public var usage: RunDocBrainmapResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunDocBrainmapResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunDocBrainmapResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunDocBrainmapResponseBody.Header?

    public var payload: RunDocBrainmapResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunDocBrainmapResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunDocBrainmapResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunDocBrainmapResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunDocBrainmapResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunDocBrainmapResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunDocIntroductionRequest : Tea.TeaModel {
    public var cleanCache: Bool?

    public var docId: String?

    public var introductionPrompt: String?

    public var keyPointPrompt: String?

    public var sessionId: String?

    public var summaryPrompt: String?

    public var workspaceId: String?

    public var referenceContent: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cleanCache != nil {
            map["CleanCache"] = self.cleanCache!
        }
        if self.docId != nil {
            map["DocId"] = self.docId!
        }
        if self.introductionPrompt != nil {
            map["IntroductionPrompt"] = self.introductionPrompt!
        }
        if self.keyPointPrompt != nil {
            map["KeyPointPrompt"] = self.keyPointPrompt!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.summaryPrompt != nil {
            map["SummaryPrompt"] = self.summaryPrompt!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        if self.referenceContent != nil {
            map["referenceContent"] = self.referenceContent!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CleanCache"] as? Bool {
            self.cleanCache = value
        }
        if let value = dict["DocId"] as? String {
            self.docId = value
        }
        if let value = dict["IntroductionPrompt"] as? String {
            self.introductionPrompt = value
        }
        if let value = dict["KeyPointPrompt"] as? String {
            self.keyPointPrompt = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["SummaryPrompt"] as? String {
            self.summaryPrompt = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
        if let value = dict["referenceContent"] as? String {
            self.referenceContent = value
        }
    }
}

public class RunDocIntroductionResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public class Introductions : Tea.TeaModel {
                public class Blocks : Tea.TeaModel {
                    public var beginTime: Int64?

                    public var endTime: Int64?

                    public var height: Int32?

                    public var pageId: Int32?

                    public var width: Int32?

                    public var x: Int32?

                    public var y: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.beginTime != nil {
                            map["BeginTime"] = self.beginTime!
                        }
                        if self.endTime != nil {
                            map["EndTime"] = self.endTime!
                        }
                        if self.height != nil {
                            map["Height"] = self.height!
                        }
                        if self.pageId != nil {
                            map["PageId"] = self.pageId!
                        }
                        if self.width != nil {
                            map["Width"] = self.width!
                        }
                        if self.x != nil {
                            map["X"] = self.x!
                        }
                        if self.y != nil {
                            map["Y"] = self.y!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["BeginTime"] as? Int64 {
                            self.beginTime = value
                        }
                        if let value = dict["EndTime"] as? Int64 {
                            self.endTime = value
                        }
                        if let value = dict["Height"] as? Int32 {
                            self.height = value
                        }
                        if let value = dict["PageId"] as? Int32 {
                            self.pageId = value
                        }
                        if let value = dict["Width"] as? Int32 {
                            self.width = value
                        }
                        if let value = dict["X"] as? Int32 {
                            self.x = value
                        }
                        if let value = dict["Y"] as? Int32 {
                            self.y = value
                        }
                    }
                }
                public var blocks: [RunDocIntroductionResponseBody.Payload.Output.Introductions.Blocks]?

                public var startPageId: Int32?

                public var summary: String?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.blocks != nil {
                        var tmp : [Any] = []
                        for k in self.blocks! {
                            tmp.append(k.toMap())
                        }
                        map["Blocks"] = tmp
                    }
                    if self.startPageId != nil {
                        map["StartPageId"] = self.startPageId!
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Blocks"] as? [Any?] {
                        var tmp : [RunDocIntroductionResponseBody.Payload.Output.Introductions.Blocks] = []
                        for v in value {
                            if v != nil {
                                var model = RunDocIntroductionResponseBody.Payload.Output.Introductions.Blocks()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.blocks = tmp
                    }
                    if let value = dict["StartPageId"] as? Int32 {
                        self.startPageId = value
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                }
            }
            public var introductions: [RunDocIntroductionResponseBody.Payload.Output.Introductions]?

            public var keyPoint: String?

            public var summary: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.introductions != nil {
                    var tmp : [Any] = []
                    for k in self.introductions! {
                        tmp.append(k.toMap())
                    }
                    map["Introductions"] = tmp
                }
                if self.keyPoint != nil {
                    map["KeyPoint"] = self.keyPoint!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Introductions"] as? [Any?] {
                    var tmp : [RunDocIntroductionResponseBody.Payload.Output.Introductions] = []
                    for v in value {
                        if v != nil {
                            var model = RunDocIntroductionResponseBody.Payload.Output.Introductions()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.introductions = tmp
                }
                if let value = dict["KeyPoint"] as? String {
                    self.keyPoint = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunDocIntroductionResponseBody.Payload.Output?

        public var usage: RunDocIntroductionResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunDocIntroductionResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunDocIntroductionResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunDocIntroductionResponseBody.Header?

    public var payload: RunDocIntroductionResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunDocIntroductionResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunDocIntroductionResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunDocIntroductionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunDocIntroductionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunDocIntroductionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunDocQaRequest : Tea.TeaModel {
    public class ConversationContexts : Tea.TeaModel {
        public var content: String?

        public var role: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.role != nil {
                map["Role"] = self.role!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["Role"] as? String {
                self.role = value
            }
        }
    }
    public var categoryIds: [String]?

    public var conversationContexts: [RunDocQaRequest.ConversationContexts]?

    public var docIds: [String]?

    public var query: String?

    public var referenceContent: String?

    public var searchSource: String?

    public var sessionId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categoryIds != nil {
            map["CategoryIds"] = self.categoryIds!
        }
        if self.conversationContexts != nil {
            var tmp : [Any] = []
            for k in self.conversationContexts! {
                tmp.append(k.toMap())
            }
            map["ConversationContexts"] = tmp
        }
        if self.docIds != nil {
            map["DocIds"] = self.docIds!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.referenceContent != nil {
            map["ReferenceContent"] = self.referenceContent!
        }
        if self.searchSource != nil {
            map["SearchSource"] = self.searchSource!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CategoryIds"] as? [String] {
            self.categoryIds = value
        }
        if let value = dict["ConversationContexts"] as? [Any?] {
            var tmp : [RunDocQaRequest.ConversationContexts] = []
            for v in value {
                if v != nil {
                    var model = RunDocQaRequest.ConversationContexts()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.conversationContexts = tmp
        }
        if let value = dict["DocIds"] as? [String] {
            self.docIds = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["ReferenceContent"] as? String {
            self.referenceContent = value
        }
        if let value = dict["SearchSource"] as? String {
            self.searchSource = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunDocQaShrinkRequest : Tea.TeaModel {
    public var categoryIdsShrink: String?

    public var conversationContextsShrink: String?

    public var docIdsShrink: String?

    public var query: String?

    public var referenceContent: String?

    public var searchSource: String?

    public var sessionId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categoryIdsShrink != nil {
            map["CategoryIds"] = self.categoryIdsShrink!
        }
        if self.conversationContextsShrink != nil {
            map["ConversationContexts"] = self.conversationContextsShrink!
        }
        if self.docIdsShrink != nil {
            map["DocIds"] = self.docIdsShrink!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.referenceContent != nil {
            map["ReferenceContent"] = self.referenceContent!
        }
        if self.searchSource != nil {
            map["SearchSource"] = self.searchSource!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CategoryIds"] as? String {
            self.categoryIdsShrink = value
        }
        if let value = dict["ConversationContexts"] as? String {
            self.conversationContextsShrink = value
        }
        if let value = dict["DocIds"] as? String {
            self.docIdsShrink = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["ReferenceContent"] as? String {
            self.referenceContent = value
        }
        if let value = dict["SearchSource"] as? String {
            self.searchSource = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunDocQaResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public class MediaUrlList : Tea.TeaModel {
                public class ClipInfos : Tea.TeaModel {
                    public var from: Double?

                    public var to: Double?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.from != nil {
                            map["From"] = self.from!
                        }
                        if self.to != nil {
                            map["To"] = self.to!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["From"] as? Double {
                            self.from = value
                        }
                        if let value = dict["To"] as? Double {
                            self.to = value
                        }
                    }
                }
                public var clipInfos: [RunDocQaResponseBody.Payload.Output.MediaUrlList.ClipInfos]?

                public var fileUrl: String?

                public var mediaType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.clipInfos != nil {
                        var tmp : [Any] = []
                        for k in self.clipInfos! {
                            tmp.append(k.toMap())
                        }
                        map["ClipInfos"] = tmp
                    }
                    if self.fileUrl != nil {
                        map["FileUrl"] = self.fileUrl!
                    }
                    if self.mediaType != nil {
                        map["MediaType"] = self.mediaType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ClipInfos"] as? [Any?] {
                        var tmp : [RunDocQaResponseBody.Payload.Output.MediaUrlList.ClipInfos] = []
                        for v in value {
                            if v != nil {
                                var model = RunDocQaResponseBody.Payload.Output.MediaUrlList.ClipInfos()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.clipInfos = tmp
                    }
                    if let value = dict["FileUrl"] as? String {
                        self.fileUrl = value
                    }
                    if let value = dict["MediaType"] as? String {
                        self.mediaType = value
                    }
                }
            }
            public class Recommends : Tea.TeaModel {
                public var title: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public class References : Tea.TeaModel {
                public var pubTime: String?

                public var source: String?

                public var sourceDocId: String?

                public var title: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.pubTime != nil {
                        map["PubTime"] = self.pubTime!
                    }
                    if self.source != nil {
                        map["Source"] = self.source!
                    }
                    if self.sourceDocId != nil {
                        map["SourceDocId"] = self.sourceDocId!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["PubTime"] as? String {
                        self.pubTime = value
                    }
                    if let value = dict["Source"] as? String {
                        self.source = value
                    }
                    if let value = dict["SourceDocId"] as? String {
                        self.sourceDocId = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var content: String?

            public var interveneContent: String?

            public var isReject: Bool?

            public var mediaUrlList: [RunDocQaResponseBody.Payload.Output.MediaUrlList]?

            public var recommends: [RunDocQaResponseBody.Payload.Output.Recommends]?

            public var references: [RunDocQaResponseBody.Payload.Output.References]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.interveneContent != nil {
                    map["InterveneContent"] = self.interveneContent!
                }
                if self.isReject != nil {
                    map["IsReject"] = self.isReject!
                }
                if self.mediaUrlList != nil {
                    var tmp : [Any] = []
                    for k in self.mediaUrlList! {
                        tmp.append(k.toMap())
                    }
                    map["MediaUrlList"] = tmp
                }
                if self.recommends != nil {
                    var tmp : [Any] = []
                    for k in self.recommends! {
                        tmp.append(k.toMap())
                    }
                    map["Recommends"] = tmp
                }
                if self.references != nil {
                    var tmp : [Any] = []
                    for k in self.references! {
                        tmp.append(k.toMap())
                    }
                    map["References"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["InterveneContent"] as? String {
                    self.interveneContent = value
                }
                if let value = dict["IsReject"] as? Bool {
                    self.isReject = value
                }
                if let value = dict["MediaUrlList"] as? [Any?] {
                    var tmp : [RunDocQaResponseBody.Payload.Output.MediaUrlList] = []
                    for v in value {
                        if v != nil {
                            var model = RunDocQaResponseBody.Payload.Output.MediaUrlList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.mediaUrlList = tmp
                }
                if let value = dict["Recommends"] as? [Any?] {
                    var tmp : [RunDocQaResponseBody.Payload.Output.Recommends] = []
                    for v in value {
                        if v != nil {
                            var model = RunDocQaResponseBody.Payload.Output.Recommends()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.recommends = tmp
                }
                if let value = dict["References"] as? [Any?] {
                    var tmp : [RunDocQaResponseBody.Payload.Output.References] = []
                    for v in value {
                        if v != nil {
                            var model = RunDocQaResponseBody.Payload.Output.References()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.references = tmp
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunDocQaResponseBody.Payload.Output?

        public var usage: RunDocQaResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunDocQaResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunDocQaResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunDocQaResponseBody.Header?

    public var payload: RunDocQaResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunDocQaResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunDocQaResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunDocQaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunDocQaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunDocQaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunDocSmartCardRequest : Tea.TeaModel {
    public var docId: String?

    public var prompt: String?

    public var sessionId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.docId != nil {
            map["DocId"] = self.docId!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocId"] as? String {
            self.docId = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunDocSmartCardResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var content: String?

            public var tags: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["Tags"] as? [String] {
                    self.tags = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunDocSmartCardResponseBody.Payload.Output?

        public var usage: RunDocSmartCardResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunDocSmartCardResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunDocSmartCardResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunDocSmartCardResponseBody.Header?

    public var payload: RunDocSmartCardResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunDocSmartCardResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunDocSmartCardResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunDocSmartCardResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunDocSmartCardResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunDocSmartCardResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunDocSummaryRequest : Tea.TeaModel {
    public var cleanCache: Bool?

    public var docId: String?

    public var modelName: String?

    public var query: String?

    public var recommendContent: String?

    public var sessionId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cleanCache != nil {
            map["CleanCache"] = self.cleanCache!
        }
        if self.docId != nil {
            map["DocId"] = self.docId!
        }
        if self.modelName != nil {
            map["ModelName"] = self.modelName!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.recommendContent != nil {
            map["RecommendContent"] = self.recommendContent!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CleanCache"] as? Bool {
            self.cleanCache = value
        }
        if let value = dict["DocId"] as? String {
            self.docId = value
        }
        if let value = dict["ModelName"] as? String {
            self.modelName = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["RecommendContent"] as? String {
            self.recommendContent = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunDocSummaryResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var content: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunDocSummaryResponseBody.Payload.Output?

        public var usage: RunDocSummaryResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunDocSummaryResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunDocSummaryResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunDocSummaryResponseBody.Header?

    public var payload: RunDocSummaryResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunDocSummaryResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunDocSummaryResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunDocSummaryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunDocSummaryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunDocSummaryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunDocTranslationRequest : Tea.TeaModel {
    public var cleanCache: Bool?

    public var docId: String?

    public var recommendContent: String?

    public var sessionId: String?

    public var transType: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cleanCache != nil {
            map["CleanCache"] = self.cleanCache!
        }
        if self.docId != nil {
            map["DocId"] = self.docId!
        }
        if self.recommendContent != nil {
            map["RecommendContent"] = self.recommendContent!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.transType != nil {
            map["TransType"] = self.transType!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CleanCache"] as? Bool {
            self.cleanCache = value
        }
        if let value = dict["DocId"] as? String {
            self.docId = value
        }
        if let value = dict["RecommendContent"] as? String {
            self.recommendContent = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["TransType"] as? String {
            self.transType = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunDocTranslationResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var content: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunDocTranslationResponseBody.Payload.Output?

        public var usage: RunDocTranslationResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunDocTranslationResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunDocTranslationResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunDocTranslationResponseBody.Header?

    public var payload: RunDocTranslationResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunDocTranslationResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunDocTranslationResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunDocTranslationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunDocTranslationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunDocTranslationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunDocWashingRequest : Tea.TeaModel {
    public var prompt: String?

    public var referenceContent: String?

    public var sessionId: String?

    public var topic: String?

    public var wordNumber: Int32?

    public var workspaceId: String?

    public var writingTypeName: String?

    public var writingTypeRefDoc: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.referenceContent != nil {
            map["ReferenceContent"] = self.referenceContent!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        if self.wordNumber != nil {
            map["WordNumber"] = self.wordNumber!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        if self.writingTypeName != nil {
            map["WritingTypeName"] = self.writingTypeName!
        }
        if self.writingTypeRefDoc != nil {
            map["WritingTypeRefDoc"] = self.writingTypeRefDoc!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["ReferenceContent"] as? String {
            self.referenceContent = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
        if let value = dict["WordNumber"] as? Int32 {
            self.wordNumber = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
        if let value = dict["WritingTypeName"] as? String {
            self.writingTypeName = value
        }
        if let value = dict["WritingTypeRefDoc"] as? String {
            self.writingTypeRefDoc = value
        }
    }
}

public class RunDocWashingResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var event: String?

        public var eventInfo: String?

        public var requestId: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.requestId != nil {
                map["RequestId"] = self.requestId!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["RequestId"] as? String {
                self.requestId = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunDocWashingResponseBody.Payload.Output?

        public var usage: RunDocWashingResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunDocWashingResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunDocWashingResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var end: Bool?

    public var header: RunDocWashingResponseBody.Header?

    public var payload: RunDocWashingResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.end != nil {
            map["End"] = self.end!
        }
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["End"] as? Bool {
            self.end = value
        }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunDocWashingResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunDocWashingResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunDocWashingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunDocWashingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunDocWashingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunExpandContentRequest : Tea.TeaModel {
    public var content: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunExpandContentResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunExpandContentResponseBody.Payload.Output?

        public var usage: RunExpandContentResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunExpandContentResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunExpandContentResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var end: Bool?

    public var header: RunExpandContentResponseBody.Header?

    public var payload: RunExpandContentResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.end != nil {
            map["End"] = self.end!
        }
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["End"] as? Bool {
            self.end = value
        }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunExpandContentResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunExpandContentResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunExpandContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunExpandContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunExpandContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunGenerateQuestionsRequest : Tea.TeaModel {
    public var docId: String?

    public var referenceContent: String?

    public var sessionId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.docId != nil {
            map["DocId"] = self.docId!
        }
        if self.referenceContent != nil {
            map["ReferenceContent"] = self.referenceContent!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocId"] as? String {
            self.docId = value
        }
        if let value = dict["ReferenceContent"] as? String {
            self.referenceContent = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunGenerateQuestionsResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var content: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunGenerateQuestionsResponseBody.Payload.Output?

        public var usage: RunGenerateQuestionsResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunGenerateQuestionsResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunGenerateQuestionsResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunGenerateQuestionsResponseBody.Header?

    public var payload: RunGenerateQuestionsResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunGenerateQuestionsResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunGenerateQuestionsResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunGenerateQuestionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunGenerateQuestionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunGenerateQuestionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunHotwordRequest : Tea.TeaModel {
    public var docId: String?

    public var prompt: String?

    public var referenceContent: String?

    public var sessionId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.docId != nil {
            map["DocId"] = self.docId!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.referenceContent != nil {
            map["ReferenceContent"] = self.referenceContent!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocId"] as? String {
            self.docId = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["ReferenceContent"] as? String {
            self.referenceContent = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunHotwordResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var content: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunHotwordResponseBody.Payload.Output?

        public var usage: RunHotwordResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunHotwordResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunHotwordResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunHotwordResponseBody.Header?

    public var payload: RunHotwordResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunHotwordResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunHotwordResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunHotwordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunHotwordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunHotwordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunKeywordsExtractionGenerationRequest : Tea.TeaModel {
    public class ReferenceData : Tea.TeaModel {
        public var contents: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contents != nil {
                map["Contents"] = self.contents!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Contents"] as? [String] {
                self.contents = value
            }
        }
    }
    public var referenceData: RunKeywordsExtractionGenerationRequest.ReferenceData?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.referenceData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.referenceData != nil {
            map["ReferenceData"] = self.referenceData?.toMap()
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ReferenceData"] as? [String: Any?] {
            var model = RunKeywordsExtractionGenerationRequest.ReferenceData()
            model.fromMap(value)
            self.referenceData = model
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunKeywordsExtractionGenerationShrinkRequest : Tea.TeaModel {
    public var referenceDataShrink: String?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.referenceDataShrink != nil {
            map["ReferenceData"] = self.referenceDataShrink!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ReferenceData"] as? String {
            self.referenceDataShrink = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunKeywordsExtractionGenerationResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunKeywordsExtractionGenerationResponseBody.Payload.Output?

        public var usage: RunKeywordsExtractionGenerationResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunKeywordsExtractionGenerationResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunKeywordsExtractionGenerationResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunKeywordsExtractionGenerationResponseBody.Header?

    public var payload: RunKeywordsExtractionGenerationResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunKeywordsExtractionGenerationResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunKeywordsExtractionGenerationResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunKeywordsExtractionGenerationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunKeywordsExtractionGenerationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunKeywordsExtractionGenerationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunMultiDocIntroductionRequest : Tea.TeaModel {
    public var docIds: [String]?

    public var keyPointPrompt: String?

    public var sessionId: String?

    public var summaryPrompt: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.docIds != nil {
            map["DocIds"] = self.docIds!
        }
        if self.keyPointPrompt != nil {
            map["KeyPointPrompt"] = self.keyPointPrompt!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.summaryPrompt != nil {
            map["SummaryPrompt"] = self.summaryPrompt!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocIds"] as? [String] {
            self.docIds = value
        }
        if let value = dict["KeyPointPrompt"] as? String {
            self.keyPointPrompt = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["SummaryPrompt"] as? String {
            self.summaryPrompt = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunMultiDocIntroductionShrinkRequest : Tea.TeaModel {
    public var docIdsShrink: String?

    public var keyPointPrompt: String?

    public var sessionId: String?

    public var summaryPrompt: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.docIdsShrink != nil {
            map["DocIds"] = self.docIdsShrink!
        }
        if self.keyPointPrompt != nil {
            map["KeyPointPrompt"] = self.keyPointPrompt!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.summaryPrompt != nil {
            map["SummaryPrompt"] = self.summaryPrompt!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocIds"] as? String {
            self.docIdsShrink = value
        }
        if let value = dict["KeyPointPrompt"] as? String {
            self.keyPointPrompt = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["SummaryPrompt"] as? String {
            self.summaryPrompt = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunMultiDocIntroductionResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public class KeyPoints : Tea.TeaModel {
                public var keyPoint: String?

                public var source: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.keyPoint != nil {
                        map["KeyPoint"] = self.keyPoint!
                    }
                    if self.source != nil {
                        map["Source"] = self.source!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["KeyPoint"] as? String {
                        self.keyPoint = value
                    }
                    if let value = dict["Source"] as? String {
                        self.source = value
                    }
                }
            }
            public var keyPoints: [RunMultiDocIntroductionResponseBody.Payload.Output.KeyPoints]?

            public var summary: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.keyPoints != nil {
                    var tmp : [Any] = []
                    for k in self.keyPoints! {
                        tmp.append(k.toMap())
                    }
                    map["KeyPoints"] = tmp
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["KeyPoints"] as? [Any?] {
                    var tmp : [RunMultiDocIntroductionResponseBody.Payload.Output.KeyPoints] = []
                    for v in value {
                        if v != nil {
                            var model = RunMultiDocIntroductionResponseBody.Payload.Output.KeyPoints()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.keyPoints = tmp
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunMultiDocIntroductionResponseBody.Payload.Output?

        public var usage: RunMultiDocIntroductionResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunMultiDocIntroductionResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunMultiDocIntroductionResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunMultiDocIntroductionResponseBody.Header?

    public var payload: RunMultiDocIntroductionResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunMultiDocIntroductionResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunMultiDocIntroductionResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunMultiDocIntroductionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunMultiDocIntroductionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunMultiDocIntroductionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunSearchGenerationRequest : Tea.TeaModel {
    public class AgentContext : Tea.TeaModel {
        public class BizContext : Tea.TeaModel {
            public class MultimodalMediaSelection : Tea.TeaModel {
                public class TextSearchResult : Tea.TeaModel {
                    public class SearchResult : Tea.TeaModel {
                        public var chunks: [String]?

                        public var content: String?

                        public var docId: String?

                        public var docUuid: String?

                        public var pubTime: String?

                        public var score: Double?

                        public var searchSource: String?

                        public var searchSourceName: String?

                        public var searchSourceType: String?

                        public var source: String?

                        public var summary: String?

                        public var title: String?

                        public var url: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.chunks != nil {
                                map["Chunks"] = self.chunks!
                            }
                            if self.content != nil {
                                map["Content"] = self.content!
                            }
                            if self.docId != nil {
                                map["DocId"] = self.docId!
                            }
                            if self.docUuid != nil {
                                map["DocUuid"] = self.docUuid!
                            }
                            if self.pubTime != nil {
                                map["PubTime"] = self.pubTime!
                            }
                            if self.score != nil {
                                map["Score"] = self.score!
                            }
                            if self.searchSource != nil {
                                map["SearchSource"] = self.searchSource!
                            }
                            if self.searchSourceName != nil {
                                map["SearchSourceName"] = self.searchSourceName!
                            }
                            if self.searchSourceType != nil {
                                map["SearchSourceType"] = self.searchSourceType!
                            }
                            if self.source != nil {
                                map["Source"] = self.source!
                            }
                            if self.summary != nil {
                                map["Summary"] = self.summary!
                            }
                            if self.title != nil {
                                map["Title"] = self.title!
                            }
                            if self.url != nil {
                                map["Url"] = self.url!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Chunks"] as? [String] {
                                self.chunks = value
                            }
                            if let value = dict["Content"] as? String {
                                self.content = value
                            }
                            if let value = dict["DocId"] as? String {
                                self.docId = value
                            }
                            if let value = dict["DocUuid"] as? String {
                                self.docUuid = value
                            }
                            if let value = dict["PubTime"] as? String {
                                self.pubTime = value
                            }
                            if let value = dict["Score"] as? Double {
                                self.score = value
                            }
                            if let value = dict["SearchSource"] as? String {
                                self.searchSource = value
                            }
                            if let value = dict["SearchSourceName"] as? String {
                                self.searchSourceName = value
                            }
                            if let value = dict["SearchSourceType"] as? String {
                                self.searchSourceType = value
                            }
                            if let value = dict["Source"] as? String {
                                self.source = value
                            }
                            if let value = dict["Summary"] as? String {
                                self.summary = value
                            }
                            if let value = dict["Title"] as? String {
                                self.title = value
                            }
                            if let value = dict["Url"] as? String {
                                self.url = value
                            }
                        }
                    }
                    public var searchResult: [RunSearchGenerationRequest.AgentContext.BizContext.MultimodalMediaSelection.TextSearchResult.SearchResult]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.searchResult != nil {
                            var tmp : [Any] = []
                            for k in self.searchResult! {
                                tmp.append(k.toMap())
                            }
                            map["SearchResult"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["SearchResult"] as? [Any?] {
                            var tmp : [RunSearchGenerationRequest.AgentContext.BizContext.MultimodalMediaSelection.TextSearchResult.SearchResult] = []
                            for v in value {
                                if v != nil {
                                    var model = RunSearchGenerationRequest.AgentContext.BizContext.MultimodalMediaSelection.TextSearchResult.SearchResult()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.searchResult = tmp
                        }
                    }
                }
                public var originalSessionId: String?

                public var searchModel: String?

                public var searchModelDataValue: String?

                public var selectionType: String?

                public var sessionId: String?

                public var textSearchResult: RunSearchGenerationRequest.AgentContext.BizContext.MultimodalMediaSelection.TextSearchResult?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.textSearchResult?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.originalSessionId != nil {
                        map["OriginalSessionId"] = self.originalSessionId!
                    }
                    if self.searchModel != nil {
                        map["SearchModel"] = self.searchModel!
                    }
                    if self.searchModelDataValue != nil {
                        map["SearchModelDataValue"] = self.searchModelDataValue!
                    }
                    if self.selectionType != nil {
                        map["SelectionType"] = self.selectionType!
                    }
                    if self.sessionId != nil {
                        map["SessionId"] = self.sessionId!
                    }
                    if self.textSearchResult != nil {
                        map["TextSearchResult"] = self.textSearchResult?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["OriginalSessionId"] as? String {
                        self.originalSessionId = value
                    }
                    if let value = dict["SearchModel"] as? String {
                        self.searchModel = value
                    }
                    if let value = dict["SearchModelDataValue"] as? String {
                        self.searchModelDataValue = value
                    }
                    if let value = dict["SelectionType"] as? String {
                        self.selectionType = value
                    }
                    if let value = dict["SessionId"] as? String {
                        self.sessionId = value
                    }
                    if let value = dict["TextSearchResult"] as? [String: Any?] {
                        var model = RunSearchGenerationRequest.AgentContext.BizContext.MultimodalMediaSelection.TextSearchResult()
                        model.fromMap(value)
                        self.textSearchResult = model
                    }
                }
            }
            public var askUser: String?

            public var askUserKeywords: [String]?

            public var currentStep: String?

            public var multimodalMediaSelection: RunSearchGenerationRequest.AgentContext.BizContext.MultimodalMediaSelection?

            public var nextStep: String?

            public var skipCurrentSupplement: Bool?

            public var supplementDataType: String?

            public var supplementEnable: Bool?

            public var userBack: String?

            public var userBackKeywords: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.multimodalMediaSelection?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.askUser != nil {
                    map["AskUser"] = self.askUser!
                }
                if self.askUserKeywords != nil {
                    map["AskUserKeywords"] = self.askUserKeywords!
                }
                if self.currentStep != nil {
                    map["CurrentStep"] = self.currentStep!
                }
                if self.multimodalMediaSelection != nil {
                    map["MultimodalMediaSelection"] = self.multimodalMediaSelection?.toMap()
                }
                if self.nextStep != nil {
                    map["NextStep"] = self.nextStep!
                }
                if self.skipCurrentSupplement != nil {
                    map["SkipCurrentSupplement"] = self.skipCurrentSupplement!
                }
                if self.supplementDataType != nil {
                    map["SupplementDataType"] = self.supplementDataType!
                }
                if self.supplementEnable != nil {
                    map["SupplementEnable"] = self.supplementEnable!
                }
                if self.userBack != nil {
                    map["UserBack"] = self.userBack!
                }
                if self.userBackKeywords != nil {
                    map["UserBackKeywords"] = self.userBackKeywords!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AskUser"] as? String {
                    self.askUser = value
                }
                if let value = dict["AskUserKeywords"] as? [String] {
                    self.askUserKeywords = value
                }
                if let value = dict["CurrentStep"] as? String {
                    self.currentStep = value
                }
                if let value = dict["MultimodalMediaSelection"] as? [String: Any?] {
                    var model = RunSearchGenerationRequest.AgentContext.BizContext.MultimodalMediaSelection()
                    model.fromMap(value)
                    self.multimodalMediaSelection = model
                }
                if let value = dict["NextStep"] as? String {
                    self.nextStep = value
                }
                if let value = dict["SkipCurrentSupplement"] as? Bool {
                    self.skipCurrentSupplement = value
                }
                if let value = dict["SupplementDataType"] as? String {
                    self.supplementDataType = value
                }
                if let value = dict["SupplementEnable"] as? Bool {
                    self.supplementEnable = value
                }
                if let value = dict["UserBack"] as? String {
                    self.userBack = value
                }
                if let value = dict["UserBackKeywords"] as? [String] {
                    self.userBackKeywords = value
                }
            }
        }
        public var bizContext: RunSearchGenerationRequest.AgentContext.BizContext?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.bizContext?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizContext != nil {
                map["BizContext"] = self.bizContext?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizContext"] as? [String: Any?] {
                var model = RunSearchGenerationRequest.AgentContext.BizContext()
                model.fromMap(value)
                self.bizContext = model
            }
        }
    }
    public class ChatConfig : Tea.TeaModel {
        public class SearchParam : Tea.TeaModel {
            public class SearchSources : Tea.TeaModel {
                public var code: String?

                public var datasetName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.code != nil {
                        map["Code"] = self.code!
                    }
                    if self.datasetName != nil {
                        map["DatasetName"] = self.datasetName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Code"] as? String {
                        self.code = value
                    }
                    if let value = dict["DatasetName"] as? String {
                        self.datasetName = value
                    }
                }
            }
            public var endTime: Int64?

            public var multimodalSearchTypes: [String]?

            public var searchSources: [RunSearchGenerationRequest.ChatConfig.SearchParam.SearchSources]?

            public var startTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.multimodalSearchTypes != nil {
                    map["MultimodalSearchTypes"] = self.multimodalSearchTypes!
                }
                if self.searchSources != nil {
                    var tmp : [Any] = []
                    for k in self.searchSources! {
                        tmp.append(k.toMap())
                    }
                    map["SearchSources"] = tmp
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndTime"] as? Int64 {
                    self.endTime = value
                }
                if let value = dict["MultimodalSearchTypes"] as? [String] {
                    self.multimodalSearchTypes = value
                }
                if let value = dict["SearchSources"] as? [Any?] {
                    var tmp : [RunSearchGenerationRequest.ChatConfig.SearchParam.SearchSources] = []
                    for v in value {
                        if v != nil {
                            var model = RunSearchGenerationRequest.ChatConfig.SearchParam.SearchSources()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.searchSources = tmp
                }
                if let value = dict["StartTime"] as? Int64 {
                    self.startTime = value
                }
            }
        }
        public var enableThinking: Bool?

        public var generateLevel: String?

        public var generateTechnology: String?

        public var searchModels: [String]?

        public var searchParam: RunSearchGenerationRequest.ChatConfig.SearchParam?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.searchParam?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.enableThinking != nil {
                map["EnableThinking"] = self.enableThinking!
            }
            if self.generateLevel != nil {
                map["GenerateLevel"] = self.generateLevel!
            }
            if self.generateTechnology != nil {
                map["GenerateTechnology"] = self.generateTechnology!
            }
            if self.searchModels != nil {
                map["SearchModels"] = self.searchModels!
            }
            if self.searchParam != nil {
                map["SearchParam"] = self.searchParam?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EnableThinking"] as? Bool {
                self.enableThinking = value
            }
            if let value = dict["GenerateLevel"] as? String {
                self.generateLevel = value
            }
            if let value = dict["GenerateTechnology"] as? String {
                self.generateTechnology = value
            }
            if let value = dict["SearchModels"] as? [String] {
                self.searchModels = value
            }
            if let value = dict["SearchParam"] as? [String: Any?] {
                var model = RunSearchGenerationRequest.ChatConfig.SearchParam()
                model.fromMap(value)
                self.searchParam = model
            }
        }
    }
    public var agentContext: RunSearchGenerationRequest.AgentContext?

    public var chatConfig: RunSearchGenerationRequest.ChatConfig?

    public var modelId: String?

    public var originalSessionId: String?

    public var prompt: String?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.agentContext?.validate()
        try self.chatConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentContext != nil {
            map["AgentContext"] = self.agentContext?.toMap()
        }
        if self.chatConfig != nil {
            map["ChatConfig"] = self.chatConfig?.toMap()
        }
        if self.modelId != nil {
            map["ModelId"] = self.modelId!
        }
        if self.originalSessionId != nil {
            map["OriginalSessionId"] = self.originalSessionId!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentContext"] as? [String: Any?] {
            var model = RunSearchGenerationRequest.AgentContext()
            model.fromMap(value)
            self.agentContext = model
        }
        if let value = dict["ChatConfig"] as? [String: Any?] {
            var model = RunSearchGenerationRequest.ChatConfig()
            model.fromMap(value)
            self.chatConfig = model
        }
        if let value = dict["ModelId"] as? String {
            self.modelId = value
        }
        if let value = dict["OriginalSessionId"] as? String {
            self.originalSessionId = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunSearchGenerationShrinkRequest : Tea.TeaModel {
    public var agentContextShrink: String?

    public var chatConfigShrink: String?

    public var modelId: String?

    public var originalSessionId: String?

    public var prompt: String?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentContextShrink != nil {
            map["AgentContext"] = self.agentContextShrink!
        }
        if self.chatConfigShrink != nil {
            map["ChatConfig"] = self.chatConfigShrink!
        }
        if self.modelId != nil {
            map["ModelId"] = self.modelId!
        }
        if self.originalSessionId != nil {
            map["OriginalSessionId"] = self.originalSessionId!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentContext"] as? String {
            self.agentContextShrink = value
        }
        if let value = dict["ChatConfig"] as? String {
            self.chatConfigShrink = value
        }
        if let value = dict["ModelId"] as? String {
            self.modelId = value
        }
        if let value = dict["OriginalSessionId"] as? String {
            self.originalSessionId = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunSearchGenerationResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var originSessionId: String?

        public var responseTime: Int64?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.originSessionId != nil {
                map["OriginSessionId"] = self.originSessionId!
            }
            if self.responseTime != nil {
                map["ResponseTime"] = self.responseTime!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["OriginSessionId"] as? String {
                self.originSessionId = value
            }
            if let value = dict["ResponseTime"] as? Int64 {
                self.responseTime = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public class AgentContext : Tea.TeaModel {
                public class BizContext : Tea.TeaModel {
                    public class GeneratedContent : Tea.TeaModel {
                        public class ClusterTopicResult : Tea.TeaModel {
                            public class ClusterTopics : Tea.TeaModel {
                                public class ImageSearchResult : Tea.TeaModel {
                                    public class SearchResult : Tea.TeaModel {
                                        public class Article : Tea.TeaModel {
                                            public var docId: String?

                                            public var docUuid: String?

                                            public var searchSourceName: String?

                                            public var summary: String?

                                            public var title: String?

                                            public var url: String?

                                            public override init() {
                                                super.init()
                                            }

                                            public init(_ dict: [String: Any]) {
                                                super.init()
                                                self.fromMap(dict)
                                            }

                                            public override func validate() throws -> Void {
                                            }

                                            public override func toMap() -> [String : Any] {
                                                var map = super.toMap()
                                                if self.docId != nil {
                                                    map["DocId"] = self.docId!
                                                }
                                                if self.docUuid != nil {
                                                    map["DocUuid"] = self.docUuid!
                                                }
                                                if self.searchSourceName != nil {
                                                    map["SearchSourceName"] = self.searchSourceName!
                                                }
                                                if self.summary != nil {
                                                    map["Summary"] = self.summary!
                                                }
                                                if self.title != nil {
                                                    map["Title"] = self.title!
                                                }
                                                if self.url != nil {
                                                    map["Url"] = self.url!
                                                }
                                                return map
                                            }

                                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                                guard let dict else { return }
                                                if let value = dict["DocId"] as? String {
                                                    self.docId = value
                                                }
                                                if let value = dict["DocUuid"] as? String {
                                                    self.docUuid = value
                                                }
                                                if let value = dict["SearchSourceName"] as? String {
                                                    self.searchSourceName = value
                                                }
                                                if let value = dict["Summary"] as? String {
                                                    self.summary = value
                                                }
                                                if let value = dict["Title"] as? String {
                                                    self.title = value
                                                }
                                                if let value = dict["Url"] as? String {
                                                    self.url = value
                                                }
                                            }
                                        }
                                        public var article: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.ImageSearchResult.SearchResult.Article?

                                        public var fileUrl: String?

                                        public var mediaId: String?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                            try self.article?.validate()
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.article != nil {
                                                map["Article"] = self.article?.toMap()
                                            }
                                            if self.fileUrl != nil {
                                                map["FileUrl"] = self.fileUrl!
                                            }
                                            if self.mediaId != nil {
                                                map["MediaId"] = self.mediaId!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["Article"] as? [String: Any?] {
                                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.ImageSearchResult.SearchResult.Article()
                                                model.fromMap(value)
                                                self.article = model
                                            }
                                            if let value = dict["FileUrl"] as? String {
                                                self.fileUrl = value
                                            }
                                            if let value = dict["MediaId"] as? String {
                                                self.mediaId = value
                                            }
                                        }
                                    }
                                    public var current: Int32?

                                    public var searchResult: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.ImageSearchResult.SearchResult]?

                                    public var size: Int32?

                                    public var total: Int32?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.current != nil {
                                            map["Current"] = self.current!
                                        }
                                        if self.searchResult != nil {
                                            var tmp : [Any] = []
                                            for k in self.searchResult! {
                                                tmp.append(k.toMap())
                                            }
                                            map["SearchResult"] = tmp
                                        }
                                        if self.size != nil {
                                            map["Size"] = self.size!
                                        }
                                        if self.total != nil {
                                            map["Total"] = self.total!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["Current"] as? Int32 {
                                            self.current = value
                                        }
                                        if let value = dict["SearchResult"] as? [Any?] {
                                            var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.ImageSearchResult.SearchResult] = []
                                            for v in value {
                                                if v != nil {
                                                    var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.ImageSearchResult.SearchResult()
                                                    if v != nil {
                                                        model.fromMap(v as? [String: Any?])
                                                    }
                                                    tmp.append(model)
                                                }
                                            }
                                            self.searchResult = tmp
                                        }
                                        if let value = dict["Size"] as? Int32 {
                                            self.size = value
                                        }
                                        if let value = dict["Total"] as? Int32 {
                                            self.total = value
                                        }
                                    }
                                }
                                public class TextSearchResult : Tea.TeaModel {
                                    public class SearchResult : Tea.TeaModel {
                                        public class MultimodalMedias : Tea.TeaModel {
                                            public var fileUrl: String?

                                            public var mediaId: String?

                                            public var mediaType: String?

                                            public override init() {
                                                super.init()
                                            }

                                            public init(_ dict: [String: Any]) {
                                                super.init()
                                                self.fromMap(dict)
                                            }

                                            public override func validate() throws -> Void {
                                            }

                                            public override func toMap() -> [String : Any] {
                                                var map = super.toMap()
                                                if self.fileUrl != nil {
                                                    map["FileUrl"] = self.fileUrl!
                                                }
                                                if self.mediaId != nil {
                                                    map["MediaId"] = self.mediaId!
                                                }
                                                if self.mediaType != nil {
                                                    map["MediaType"] = self.mediaType!
                                                }
                                                return map
                                            }

                                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                                guard let dict else { return }
                                                if let value = dict["FileUrl"] as? String {
                                                    self.fileUrl = value
                                                }
                                                if let value = dict["MediaId"] as? String {
                                                    self.mediaId = value
                                                }
                                                if let value = dict["MediaType"] as? String {
                                                    self.mediaType = value
                                                }
                                            }
                                        }
                                        public var docId: String?

                                        public var docUuid: String?

                                        public var multimodalMedias: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.TextSearchResult.SearchResult.MultimodalMedias]?

                                        public var pubTime: String?

                                        public var searchSource: String?

                                        public var searchSourceName: String?

                                        public var searchSourceType: String?

                                        public var summary: String?

                                        public var title: String?

                                        public var url: String?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.docId != nil {
                                                map["DocId"] = self.docId!
                                            }
                                            if self.docUuid != nil {
                                                map["DocUuid"] = self.docUuid!
                                            }
                                            if self.multimodalMedias != nil {
                                                var tmp : [Any] = []
                                                for k in self.multimodalMedias! {
                                                    tmp.append(k.toMap())
                                                }
                                                map["MultimodalMedias"] = tmp
                                            }
                                            if self.pubTime != nil {
                                                map["PubTime"] = self.pubTime!
                                            }
                                            if self.searchSource != nil {
                                                map["SearchSource"] = self.searchSource!
                                            }
                                            if self.searchSourceName != nil {
                                                map["SearchSourceName"] = self.searchSourceName!
                                            }
                                            if self.searchSourceType != nil {
                                                map["SearchSourceType"] = self.searchSourceType!
                                            }
                                            if self.summary != nil {
                                                map["Summary"] = self.summary!
                                            }
                                            if self.title != nil {
                                                map["Title"] = self.title!
                                            }
                                            if self.url != nil {
                                                map["Url"] = self.url!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["DocId"] as? String {
                                                self.docId = value
                                            }
                                            if let value = dict["DocUuid"] as? String {
                                                self.docUuid = value
                                            }
                                            if let value = dict["MultimodalMedias"] as? [Any?] {
                                                var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.TextSearchResult.SearchResult.MultimodalMedias] = []
                                                for v in value {
                                                    if v != nil {
                                                        var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.TextSearchResult.SearchResult.MultimodalMedias()
                                                        if v != nil {
                                                            model.fromMap(v as? [String: Any?])
                                                        }
                                                        tmp.append(model)
                                                    }
                                                }
                                                self.multimodalMedias = tmp
                                            }
                                            if let value = dict["PubTime"] as? String {
                                                self.pubTime = value
                                            }
                                            if let value = dict["SearchSource"] as? String {
                                                self.searchSource = value
                                            }
                                            if let value = dict["SearchSourceName"] as? String {
                                                self.searchSourceName = value
                                            }
                                            if let value = dict["SearchSourceType"] as? String {
                                                self.searchSourceType = value
                                            }
                                            if let value = dict["Summary"] as? String {
                                                self.summary = value
                                            }
                                            if let value = dict["Title"] as? String {
                                                self.title = value
                                            }
                                            if let value = dict["Url"] as? String {
                                                self.url = value
                                            }
                                        }
                                    }
                                    public var current: Int32?

                                    public var searchResult: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.TextSearchResult.SearchResult]?

                                    public var size: Int32?

                                    public var total: Int32?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.current != nil {
                                            map["Current"] = self.current!
                                        }
                                        if self.searchResult != nil {
                                            var tmp : [Any] = []
                                            for k in self.searchResult! {
                                                tmp.append(k.toMap())
                                            }
                                            map["SearchResult"] = tmp
                                        }
                                        if self.size != nil {
                                            map["Size"] = self.size!
                                        }
                                        if self.total != nil {
                                            map["Total"] = self.total!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["Current"] as? Int32 {
                                            self.current = value
                                        }
                                        if let value = dict["SearchResult"] as? [Any?] {
                                            var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.TextSearchResult.SearchResult] = []
                                            for v in value {
                                                if v != nil {
                                                    var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.TextSearchResult.SearchResult()
                                                    if v != nil {
                                                        model.fromMap(v as? [String: Any?])
                                                    }
                                                    tmp.append(model)
                                                }
                                            }
                                            self.searchResult = tmp
                                        }
                                        if let value = dict["Size"] as? Int32 {
                                            self.size = value
                                        }
                                        if let value = dict["Total"] as? Int32 {
                                            self.total = value
                                        }
                                    }
                                }
                                public class VideoSearchResult : Tea.TeaModel {
                                    public class SearchResult : Tea.TeaModel {
                                        public class Article : Tea.TeaModel {
                                            public var docId: String?

                                            public var docUuid: String?

                                            public var searchSourceName: String?

                                            public var summary: String?

                                            public var title: String?

                                            public var url: String?

                                            public override init() {
                                                super.init()
                                            }

                                            public init(_ dict: [String: Any]) {
                                                super.init()
                                                self.fromMap(dict)
                                            }

                                            public override func validate() throws -> Void {
                                            }

                                            public override func toMap() -> [String : Any] {
                                                var map = super.toMap()
                                                if self.docId != nil {
                                                    map["DocId"] = self.docId!
                                                }
                                                if self.docUuid != nil {
                                                    map["DocUuid"] = self.docUuid!
                                                }
                                                if self.searchSourceName != nil {
                                                    map["SearchSourceName"] = self.searchSourceName!
                                                }
                                                if self.summary != nil {
                                                    map["Summary"] = self.summary!
                                                }
                                                if self.title != nil {
                                                    map["Title"] = self.title!
                                                }
                                                if self.url != nil {
                                                    map["Url"] = self.url!
                                                }
                                                return map
                                            }

                                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                                guard let dict else { return }
                                                if let value = dict["DocId"] as? String {
                                                    self.docId = value
                                                }
                                                if let value = dict["DocUuid"] as? String {
                                                    self.docUuid = value
                                                }
                                                if let value = dict["SearchSourceName"] as? String {
                                                    self.searchSourceName = value
                                                }
                                                if let value = dict["Summary"] as? String {
                                                    self.summary = value
                                                }
                                                if let value = dict["Title"] as? String {
                                                    self.title = value
                                                }
                                                if let value = dict["Url"] as? String {
                                                    self.url = value
                                                }
                                            }
                                        }
                                        public class ClipInfos : Tea.TeaModel {
                                            public var from: Double?

                                            public var score: Double?

                                            public var text: String?

                                            public var to: Double?

                                            public var type: String?

                                            public override init() {
                                                super.init()
                                            }

                                            public init(_ dict: [String: Any]) {
                                                super.init()
                                                self.fromMap(dict)
                                            }

                                            public override func validate() throws -> Void {
                                            }

                                            public override func toMap() -> [String : Any] {
                                                var map = super.toMap()
                                                if self.from != nil {
                                                    map["From"] = self.from!
                                                }
                                                if self.score != nil {
                                                    map["Score"] = self.score!
                                                }
                                                if self.text != nil {
                                                    map["Text"] = self.text!
                                                }
                                                if self.to != nil {
                                                    map["To"] = self.to!
                                                }
                                                if self.type != nil {
                                                    map["Type"] = self.type!
                                                }
                                                return map
                                            }

                                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                                guard let dict else { return }
                                                if let value = dict["From"] as? Double {
                                                    self.from = value
                                                }
                                                if let value = dict["Score"] as? Double {
                                                    self.score = value
                                                }
                                                if let value = dict["Text"] as? String {
                                                    self.text = value
                                                }
                                                if let value = dict["To"] as? Double {
                                                    self.to = value
                                                }
                                                if let value = dict["Type"] as? String {
                                                    self.type = value
                                                }
                                            }
                                        }
                                        public var article: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.VideoSearchResult.SearchResult.Article?

                                        public var clipInfos: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.VideoSearchResult.SearchResult.ClipInfos]?

                                        public var fileUrl: String?

                                        public var mediaId: String?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                            try self.article?.validate()
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.article != nil {
                                                map["Article"] = self.article?.toMap()
                                            }
                                            if self.clipInfos != nil {
                                                var tmp : [Any] = []
                                                for k in self.clipInfos! {
                                                    tmp.append(k.toMap())
                                                }
                                                map["ClipInfos"] = tmp
                                            }
                                            if self.fileUrl != nil {
                                                map["FileUrl"] = self.fileUrl!
                                            }
                                            if self.mediaId != nil {
                                                map["MediaId"] = self.mediaId!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["Article"] as? [String: Any?] {
                                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.VideoSearchResult.SearchResult.Article()
                                                model.fromMap(value)
                                                self.article = model
                                            }
                                            if let value = dict["ClipInfos"] as? [Any?] {
                                                var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.VideoSearchResult.SearchResult.ClipInfos] = []
                                                for v in value {
                                                    if v != nil {
                                                        var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.VideoSearchResult.SearchResult.ClipInfos()
                                                        if v != nil {
                                                            model.fromMap(v as? [String: Any?])
                                                        }
                                                        tmp.append(model)
                                                    }
                                                }
                                                self.clipInfos = tmp
                                            }
                                            if let value = dict["FileUrl"] as? String {
                                                self.fileUrl = value
                                            }
                                            if let value = dict["MediaId"] as? String {
                                                self.mediaId = value
                                            }
                                        }
                                    }
                                    public var current: Int32?

                                    public var searchResult: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.VideoSearchResult.SearchResult]?

                                    public var size: Int32?

                                    public var total: Int32?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.current != nil {
                                            map["Current"] = self.current!
                                        }
                                        if self.searchResult != nil {
                                            var tmp : [Any] = []
                                            for k in self.searchResult! {
                                                tmp.append(k.toMap())
                                            }
                                            map["SearchResult"] = tmp
                                        }
                                        if self.size != nil {
                                            map["Size"] = self.size!
                                        }
                                        if self.total != nil {
                                            map["Total"] = self.total!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["Current"] as? Int32 {
                                            self.current = value
                                        }
                                        if let value = dict["SearchResult"] as? [Any?] {
                                            var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.VideoSearchResult.SearchResult] = []
                                            for v in value {
                                                if v != nil {
                                                    var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.VideoSearchResult.SearchResult()
                                                    if v != nil {
                                                        model.fromMap(v as? [String: Any?])
                                                    }
                                                    tmp.append(model)
                                                }
                                            }
                                            self.searchResult = tmp
                                        }
                                        if let value = dict["Size"] as? Int32 {
                                            self.size = value
                                        }
                                        if let value = dict["Total"] as? Int32 {
                                            self.total = value
                                        }
                                    }
                                }
                                public var imageSearchResult: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.ImageSearchResult?

                                public var textSearchResult: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.TextSearchResult?

                                public var topic: String?

                                public var videoSearchResult: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.VideoSearchResult?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                    try self.imageSearchResult?.validate()
                                    try self.textSearchResult?.validate()
                                    try self.videoSearchResult?.validate()
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.imageSearchResult != nil {
                                        map["ImageSearchResult"] = self.imageSearchResult?.toMap()
                                    }
                                    if self.textSearchResult != nil {
                                        map["TextSearchResult"] = self.textSearchResult?.toMap()
                                    }
                                    if self.topic != nil {
                                        map["Topic"] = self.topic!
                                    }
                                    if self.videoSearchResult != nil {
                                        map["VideoSearchResult"] = self.videoSearchResult?.toMap()
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["ImageSearchResult"] as? [String: Any?] {
                                        var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.ImageSearchResult()
                                        model.fromMap(value)
                                        self.imageSearchResult = model
                                    }
                                    if let value = dict["TextSearchResult"] as? [String: Any?] {
                                        var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.TextSearchResult()
                                        model.fromMap(value)
                                        self.textSearchResult = model
                                    }
                                    if let value = dict["Topic"] as? String {
                                        self.topic = value
                                    }
                                    if let value = dict["VideoSearchResult"] as? [String: Any?] {
                                        var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics.VideoSearchResult()
                                        model.fromMap(value)
                                        self.videoSearchResult = model
                                    }
                                }
                            }
                            public var clusterTopics: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics]?

                            public var generateFinished: Bool?

                            public var textGenerate: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.clusterTopics != nil {
                                    var tmp : [Any] = []
                                    for k in self.clusterTopics! {
                                        tmp.append(k.toMap())
                                    }
                                    map["ClusterTopics"] = tmp
                                }
                                if self.generateFinished != nil {
                                    map["GenerateFinished"] = self.generateFinished!
                                }
                                if self.textGenerate != nil {
                                    map["TextGenerate"] = self.textGenerate!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["ClusterTopics"] as? [Any?] {
                                    var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics] = []
                                    for v in value {
                                        if v != nil {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult.ClusterTopics()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.clusterTopics = tmp
                                }
                                if let value = dict["GenerateFinished"] as? Bool {
                                    self.generateFinished = value
                                }
                                if let value = dict["TextGenerate"] as? String {
                                    self.textGenerate = value
                                }
                            }
                        }
                        public class ExcerptResult : Tea.TeaModel {
                            public class SearchResult : Tea.TeaModel {
                                public class MultimodalMedias : Tea.TeaModel {
                                    public var fileUrl: String?

                                    public var mediaId: String?

                                    public var mediaType: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.fileUrl != nil {
                                            map["FileUrl"] = self.fileUrl!
                                        }
                                        if self.mediaId != nil {
                                            map["MediaId"] = self.mediaId!
                                        }
                                        if self.mediaType != nil {
                                            map["MediaType"] = self.mediaType!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["FileUrl"] as? String {
                                            self.fileUrl = value
                                        }
                                        if let value = dict["MediaId"] as? String {
                                            self.mediaId = value
                                        }
                                        if let value = dict["MediaType"] as? String {
                                            self.mediaType = value
                                        }
                                    }
                                }
                                public class TextGenerateMultimodalMediaList : Tea.TeaModel {
                                    public class MultimodalMediaList : Tea.TeaModel {
                                        public class Article : Tea.TeaModel {
                                            public var docId: String?

                                            public var docUuid: String?

                                            public var searchSourceName: String?

                                            public var title: String?

                                            public var url: String?

                                            public override init() {
                                                super.init()
                                            }

                                            public init(_ dict: [String: Any]) {
                                                super.init()
                                                self.fromMap(dict)
                                            }

                                            public override func validate() throws -> Void {
                                            }

                                            public override func toMap() -> [String : Any] {
                                                var map = super.toMap()
                                                if self.docId != nil {
                                                    map["DocId"] = self.docId!
                                                }
                                                if self.docUuid != nil {
                                                    map["DocUuid"] = self.docUuid!
                                                }
                                                if self.searchSourceName != nil {
                                                    map["SearchSourceName"] = self.searchSourceName!
                                                }
                                                if self.title != nil {
                                                    map["Title"] = self.title!
                                                }
                                                if self.url != nil {
                                                    map["Url"] = self.url!
                                                }
                                                return map
                                            }

                                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                                guard let dict else { return }
                                                if let value = dict["DocId"] as? String {
                                                    self.docId = value
                                                }
                                                if let value = dict["DocUuid"] as? String {
                                                    self.docUuid = value
                                                }
                                                if let value = dict["SearchSourceName"] as? String {
                                                    self.searchSourceName = value
                                                }
                                                if let value = dict["Title"] as? String {
                                                    self.title = value
                                                }
                                                if let value = dict["Url"] as? String {
                                                    self.url = value
                                                }
                                            }
                                        }
                                        public var article: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult.TextGenerateMultimodalMediaList.MultimodalMediaList.Article?

                                        public var fileUrl: String?

                                        public var mediaId: String?

                                        public var mediaType: String?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                            try self.article?.validate()
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.article != nil {
                                                map["Article"] = self.article?.toMap()
                                            }
                                            if self.fileUrl != nil {
                                                map["FileUrl"] = self.fileUrl!
                                            }
                                            if self.mediaId != nil {
                                                map["MediaId"] = self.mediaId!
                                            }
                                            if self.mediaType != nil {
                                                map["MediaType"] = self.mediaType!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["Article"] as? [String: Any?] {
                                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult.TextGenerateMultimodalMediaList.MultimodalMediaList.Article()
                                                model.fromMap(value)
                                                self.article = model
                                            }
                                            if let value = dict["FileUrl"] as? String {
                                                self.fileUrl = value
                                            }
                                            if let value = dict["MediaId"] as? String {
                                                self.mediaId = value
                                            }
                                            if let value = dict["MediaType"] as? String {
                                                self.mediaType = value
                                            }
                                        }
                                    }
                                    public var docUuid: String?

                                    public var end: Int32?

                                    public var multimodalMediaList: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult.TextGenerateMultimodalMediaList.MultimodalMediaList]?

                                    public var start: Int32?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.docUuid != nil {
                                            map["DocUuid"] = self.docUuid!
                                        }
                                        if self.end != nil {
                                            map["End"] = self.end!
                                        }
                                        if self.multimodalMediaList != nil {
                                            var tmp : [Any] = []
                                            for k in self.multimodalMediaList! {
                                                tmp.append(k.toMap())
                                            }
                                            map["MultimodalMediaList"] = tmp
                                        }
                                        if self.start != nil {
                                            map["Start"] = self.start!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["DocUuid"] as? String {
                                            self.docUuid = value
                                        }
                                        if let value = dict["End"] as? Int32 {
                                            self.end = value
                                        }
                                        if let value = dict["MultimodalMediaList"] as? [Any?] {
                                            var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult.TextGenerateMultimodalMediaList.MultimodalMediaList] = []
                                            for v in value {
                                                if v != nil {
                                                    var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult.TextGenerateMultimodalMediaList.MultimodalMediaList()
                                                    if v != nil {
                                                        model.fromMap(v as? [String: Any?])
                                                    }
                                                    tmp.append(model)
                                                }
                                            }
                                            self.multimodalMediaList = tmp
                                        }
                                        if let value = dict["Start"] as? Int32 {
                                            self.start = value
                                        }
                                    }
                                }
                                public var chunks: [String]?

                                public var content: String?

                                public var docId: String?

                                public var docUuid: String?

                                public var excerpt: String?

                                public var multimodalMedias: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult.MultimodalMedias]?

                                public var pubTime: String?

                                public var score: Double?

                                public var searchSource: String?

                                public var searchSourceName: String?

                                public var searchSourceType: String?

                                public var select: Bool?

                                public var summary: String?

                                public var textGenerateMultimodalMediaList: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult.TextGenerateMultimodalMediaList]?

                                public var title: String?

                                public var traceabilityId: Int32?

                                public var url: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.chunks != nil {
                                        map["Chunks"] = self.chunks!
                                    }
                                    if self.content != nil {
                                        map["Content"] = self.content!
                                    }
                                    if self.docId != nil {
                                        map["DocId"] = self.docId!
                                    }
                                    if self.docUuid != nil {
                                        map["DocUuid"] = self.docUuid!
                                    }
                                    if self.excerpt != nil {
                                        map["Excerpt"] = self.excerpt!
                                    }
                                    if self.multimodalMedias != nil {
                                        var tmp : [Any] = []
                                        for k in self.multimodalMedias! {
                                            tmp.append(k.toMap())
                                        }
                                        map["MultimodalMedias"] = tmp
                                    }
                                    if self.pubTime != nil {
                                        map["PubTime"] = self.pubTime!
                                    }
                                    if self.score != nil {
                                        map["Score"] = self.score!
                                    }
                                    if self.searchSource != nil {
                                        map["SearchSource"] = self.searchSource!
                                    }
                                    if self.searchSourceName != nil {
                                        map["SearchSourceName"] = self.searchSourceName!
                                    }
                                    if self.searchSourceType != nil {
                                        map["SearchSourceType"] = self.searchSourceType!
                                    }
                                    if self.select != nil {
                                        map["Select"] = self.select!
                                    }
                                    if self.summary != nil {
                                        map["Summary"] = self.summary!
                                    }
                                    if self.textGenerateMultimodalMediaList != nil {
                                        var tmp : [Any] = []
                                        for k in self.textGenerateMultimodalMediaList! {
                                            tmp.append(k.toMap())
                                        }
                                        map["TextGenerateMultimodalMediaList"] = tmp
                                    }
                                    if self.title != nil {
                                        map["Title"] = self.title!
                                    }
                                    if self.traceabilityId != nil {
                                        map["TraceabilityId"] = self.traceabilityId!
                                    }
                                    if self.url != nil {
                                        map["Url"] = self.url!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Chunks"] as? [String] {
                                        self.chunks = value
                                    }
                                    if let value = dict["Content"] as? String {
                                        self.content = value
                                    }
                                    if let value = dict["DocId"] as? String {
                                        self.docId = value
                                    }
                                    if let value = dict["DocUuid"] as? String {
                                        self.docUuid = value
                                    }
                                    if let value = dict["Excerpt"] as? String {
                                        self.excerpt = value
                                    }
                                    if let value = dict["MultimodalMedias"] as? [Any?] {
                                        var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult.MultimodalMedias] = []
                                        for v in value {
                                            if v != nil {
                                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult.MultimodalMedias()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.multimodalMedias = tmp
                                    }
                                    if let value = dict["PubTime"] as? String {
                                        self.pubTime = value
                                    }
                                    if let value = dict["Score"] as? Double {
                                        self.score = value
                                    }
                                    if let value = dict["SearchSource"] as? String {
                                        self.searchSource = value
                                    }
                                    if let value = dict["SearchSourceName"] as? String {
                                        self.searchSourceName = value
                                    }
                                    if let value = dict["SearchSourceType"] as? String {
                                        self.searchSourceType = value
                                    }
                                    if let value = dict["Select"] as? Bool {
                                        self.select = value
                                    }
                                    if let value = dict["Summary"] as? String {
                                        self.summary = value
                                    }
                                    if let value = dict["TextGenerateMultimodalMediaList"] as? [Any?] {
                                        var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult.TextGenerateMultimodalMediaList] = []
                                        for v in value {
                                            if v != nil {
                                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult.TextGenerateMultimodalMediaList()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.textGenerateMultimodalMediaList = tmp
                                    }
                                    if let value = dict["Title"] as? String {
                                        self.title = value
                                    }
                                    if let value = dict["TraceabilityId"] as? Int32 {
                                        self.traceabilityId = value
                                    }
                                    if let value = dict["Url"] as? String {
                                        self.url = value
                                    }
                                }
                            }
                            public var generateFinished: Bool?

                            public var generateLevel: String?

                            public var reasonTextGenerate: String?

                            public var searchResult: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult]?

                            public var textGenerate: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.generateFinished != nil {
                                    map["GenerateFinished"] = self.generateFinished!
                                }
                                if self.generateLevel != nil {
                                    map["GenerateLevel"] = self.generateLevel!
                                }
                                if self.reasonTextGenerate != nil {
                                    map["ReasonTextGenerate"] = self.reasonTextGenerate!
                                }
                                if self.searchResult != nil {
                                    var tmp : [Any] = []
                                    for k in self.searchResult! {
                                        tmp.append(k.toMap())
                                    }
                                    map["SearchResult"] = tmp
                                }
                                if self.textGenerate != nil {
                                    map["TextGenerate"] = self.textGenerate!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["GenerateFinished"] as? Bool {
                                    self.generateFinished = value
                                }
                                if let value = dict["GenerateLevel"] as? String {
                                    self.generateLevel = value
                                }
                                if let value = dict["ReasonTextGenerate"] as? String {
                                    self.reasonTextGenerate = value
                                }
                                if let value = dict["SearchResult"] as? [Any?] {
                                    var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult] = []
                                    for v in value {
                                        if v != nil {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult.SearchResult()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.searchResult = tmp
                                }
                                if let value = dict["TextGenerate"] as? String {
                                    self.textGenerate = value
                                }
                            }
                        }
                        public class ImageSearchResult : Tea.TeaModel {
                            public class SearchResult : Tea.TeaModel {
                                public class Article : Tea.TeaModel {
                                    public var docId: String?

                                    public var docUuid: String?

                                    public var searchSourceName: String?

                                    public var summary: String?

                                    public var title: String?

                                    public var url: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.docId != nil {
                                            map["DocId"] = self.docId!
                                        }
                                        if self.docUuid != nil {
                                            map["DocUuid"] = self.docUuid!
                                        }
                                        if self.searchSourceName != nil {
                                            map["SearchSourceName"] = self.searchSourceName!
                                        }
                                        if self.summary != nil {
                                            map["Summary"] = self.summary!
                                        }
                                        if self.title != nil {
                                            map["Title"] = self.title!
                                        }
                                        if self.url != nil {
                                            map["Url"] = self.url!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["DocId"] as? String {
                                            self.docId = value
                                        }
                                        if let value = dict["DocUuid"] as? String {
                                            self.docUuid = value
                                        }
                                        if let value = dict["SearchSourceName"] as? String {
                                            self.searchSourceName = value
                                        }
                                        if let value = dict["Summary"] as? String {
                                            self.summary = value
                                        }
                                        if let value = dict["Title"] as? String {
                                            self.title = value
                                        }
                                        if let value = dict["Url"] as? String {
                                            self.url = value
                                        }
                                    }
                                }
                                public var article: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ImageSearchResult.SearchResult.Article?

                                public var fileUrl: String?

                                public var mediaId: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                    try self.article?.validate()
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.article != nil {
                                        map["Article"] = self.article?.toMap()
                                    }
                                    if self.fileUrl != nil {
                                        map["FileUrl"] = self.fileUrl!
                                    }
                                    if self.mediaId != nil {
                                        map["MediaId"] = self.mediaId!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Article"] as? [String: Any?] {
                                        var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ImageSearchResult.SearchResult.Article()
                                        model.fromMap(value)
                                        self.article = model
                                    }
                                    if let value = dict["FileUrl"] as? String {
                                        self.fileUrl = value
                                    }
                                    if let value = dict["MediaId"] as? String {
                                        self.mediaId = value
                                    }
                                }
                            }
                            public var searchResult: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ImageSearchResult.SearchResult]?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.searchResult != nil {
                                    var tmp : [Any] = []
                                    for k in self.searchResult! {
                                        tmp.append(k.toMap())
                                    }
                                    map["SearchResult"] = tmp
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["SearchResult"] as? [Any?] {
                                    var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ImageSearchResult.SearchResult] = []
                                    for v in value {
                                        if v != nil {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ImageSearchResult.SearchResult()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.searchResult = tmp
                                }
                            }
                        }
                        public class NewsElementResult : Tea.TeaModel {
                            public class NewsElementArticleList : Tea.TeaModel {
                                public class Article : Tea.TeaModel {
                                    public var content: String?

                                    public var docId: String?

                                    public var docUuid: String?

                                    public var pubTime: String?

                                    public var score: Double?

                                    public var searchSource: String?

                                    public var searchSourceName: String?

                                    public var searchSourceType: String?

                                    public var select: Bool?

                                    public var summary: String?

                                    public var title: String?

                                    public var url: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.content != nil {
                                            map["Content"] = self.content!
                                        }
                                        if self.docId != nil {
                                            map["DocId"] = self.docId!
                                        }
                                        if self.docUuid != nil {
                                            map["DocUuid"] = self.docUuid!
                                        }
                                        if self.pubTime != nil {
                                            map["PubTime"] = self.pubTime!
                                        }
                                        if self.score != nil {
                                            map["Score"] = self.score!
                                        }
                                        if self.searchSource != nil {
                                            map["SearchSource"] = self.searchSource!
                                        }
                                        if self.searchSourceName != nil {
                                            map["SearchSourceName"] = self.searchSourceName!
                                        }
                                        if self.searchSourceType != nil {
                                            map["SearchSourceType"] = self.searchSourceType!
                                        }
                                        if self.select != nil {
                                            map["Select"] = self.select!
                                        }
                                        if self.summary != nil {
                                            map["Summary"] = self.summary!
                                        }
                                        if self.title != nil {
                                            map["Title"] = self.title!
                                        }
                                        if self.url != nil {
                                            map["Url"] = self.url!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["Content"] as? String {
                                            self.content = value
                                        }
                                        if let value = dict["DocId"] as? String {
                                            self.docId = value
                                        }
                                        if let value = dict["DocUuid"] as? String {
                                            self.docUuid = value
                                        }
                                        if let value = dict["PubTime"] as? String {
                                            self.pubTime = value
                                        }
                                        if let value = dict["Score"] as? Double {
                                            self.score = value
                                        }
                                        if let value = dict["SearchSource"] as? String {
                                            self.searchSource = value
                                        }
                                        if let value = dict["SearchSourceName"] as? String {
                                            self.searchSourceName = value
                                        }
                                        if let value = dict["SearchSourceType"] as? String {
                                            self.searchSourceType = value
                                        }
                                        if let value = dict["Select"] as? Bool {
                                            self.select = value
                                        }
                                        if let value = dict["Summary"] as? String {
                                            self.summary = value
                                        }
                                        if let value = dict["Title"] as? String {
                                            self.title = value
                                        }
                                        if let value = dict["Url"] as? String {
                                            self.url = value
                                        }
                                    }
                                }
                                public class NewsElementList : Tea.TeaModel {
                                    public class Event : Tea.TeaModel {
                                        public var causeList: [String]?

                                        public var processList: [String]?

                                        public var resultList: [String]?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.causeList != nil {
                                                map["CauseList"] = self.causeList!
                                            }
                                            if self.processList != nil {
                                                map["ProcessList"] = self.processList!
                                            }
                                            if self.resultList != nil {
                                                map["ResultList"] = self.resultList!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["CauseList"] as? [String] {
                                                self.causeList = value
                                            }
                                            if let value = dict["ProcessList"] as? [String] {
                                                self.processList = value
                                            }
                                            if let value = dict["ResultList"] as? [String] {
                                                self.resultList = value
                                            }
                                        }
                                    }
                                    public var event: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.NewsElementResult.NewsElementArticleList.NewsElementList.Event?

                                    public var location: String?

                                    public var people: String?

                                    public var time: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                        try self.event?.validate()
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.event != nil {
                                            map["Event"] = self.event?.toMap()
                                        }
                                        if self.location != nil {
                                            map["Location"] = self.location!
                                        }
                                        if self.people != nil {
                                            map["People"] = self.people!
                                        }
                                        if self.time != nil {
                                            map["Time"] = self.time!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["Event"] as? [String: Any?] {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.NewsElementResult.NewsElementArticleList.NewsElementList.Event()
                                            model.fromMap(value)
                                            self.event = model
                                        }
                                        if let value = dict["Location"] as? String {
                                            self.location = value
                                        }
                                        if let value = dict["People"] as? String {
                                            self.people = value
                                        }
                                        if let value = dict["Time"] as? String {
                                            self.time = value
                                        }
                                    }
                                }
                                public var article: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.NewsElementResult.NewsElementArticleList.Article?

                                public var newsElementList: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.NewsElementResult.NewsElementArticleList.NewsElementList]?

                                public var textGenerate: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                    try self.article?.validate()
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.article != nil {
                                        map["Article"] = self.article?.toMap()
                                    }
                                    if self.newsElementList != nil {
                                        var tmp : [Any] = []
                                        for k in self.newsElementList! {
                                            tmp.append(k.toMap())
                                        }
                                        map["NewsElementList"] = tmp
                                    }
                                    if self.textGenerate != nil {
                                        map["TextGenerate"] = self.textGenerate!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Article"] as? [String: Any?] {
                                        var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.NewsElementResult.NewsElementArticleList.Article()
                                        model.fromMap(value)
                                        self.article = model
                                    }
                                    if let value = dict["NewsElementList"] as? [Any?] {
                                        var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.NewsElementResult.NewsElementArticleList.NewsElementList] = []
                                        for v in value {
                                            if v != nil {
                                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.NewsElementResult.NewsElementArticleList.NewsElementList()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.newsElementList = tmp
                                    }
                                    if let value = dict["TextGenerate"] as? String {
                                        self.textGenerate = value
                                    }
                                }
                            }
                            public var generateFinished: Bool?

                            public var newsElementArticleList: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.NewsElementResult.NewsElementArticleList]?

                            public var textGenerate: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.generateFinished != nil {
                                    map["GenerateFinished"] = self.generateFinished!
                                }
                                if self.newsElementArticleList != nil {
                                    var tmp : [Any] = []
                                    for k in self.newsElementArticleList! {
                                        tmp.append(k.toMap())
                                    }
                                    map["NewsElementArticleList"] = tmp
                                }
                                if self.textGenerate != nil {
                                    map["TextGenerate"] = self.textGenerate!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["GenerateFinished"] as? Bool {
                                    self.generateFinished = value
                                }
                                if let value = dict["NewsElementArticleList"] as? [Any?] {
                                    var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.NewsElementResult.NewsElementArticleList] = []
                                    for v in value {
                                        if v != nil {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.NewsElementResult.NewsElementArticleList()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.newsElementArticleList = tmp
                                }
                                if let value = dict["TextGenerate"] as? String {
                                    self.textGenerate = value
                                }
                            }
                        }
                        public class TextGenerateResult : Tea.TeaModel {
                            public class GenerateTraceability : Tea.TeaModel {
                                public class Coordinates : Tea.TeaModel {
                                    public class GenerateCoordinate : Tea.TeaModel {
                                        public var x: Int32?

                                        public var y: Int32?

                                        public var z: Int32?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.x != nil {
                                                map["X"] = self.x!
                                            }
                                            if self.y != nil {
                                                map["Y"] = self.y!
                                            }
                                            if self.z != nil {
                                                map["Z"] = self.z!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["X"] as? Int32 {
                                                self.x = value
                                            }
                                            if let value = dict["Y"] as? Int32 {
                                                self.y = value
                                            }
                                            if let value = dict["Z"] as? Int32 {
                                                self.z = value
                                            }
                                        }
                                    }
                                    public class NewsCoordinate : Tea.TeaModel {
                                        public var x: Int32?

                                        public var y: Int32?

                                        public var z: Int32?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.x != nil {
                                                map["X"] = self.x!
                                            }
                                            if self.y != nil {
                                                map["Y"] = self.y!
                                            }
                                            if self.z != nil {
                                                map["Z"] = self.z!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["X"] as? Int32 {
                                                self.x = value
                                            }
                                            if let value = dict["Y"] as? Int32 {
                                                self.y = value
                                            }
                                            if let value = dict["Z"] as? Int32 {
                                                self.z = value
                                            }
                                        }
                                    }
                                    public var generateCoordinate: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.GenerateTraceability.Coordinates.GenerateCoordinate?

                                    public var newsCoordinate: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.GenerateTraceability.Coordinates.NewsCoordinate?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                        try self.generateCoordinate?.validate()
                                        try self.newsCoordinate?.validate()
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.generateCoordinate != nil {
                                            map["GenerateCoordinate"] = self.generateCoordinate?.toMap()
                                        }
                                        if self.newsCoordinate != nil {
                                            map["NewsCoordinate"] = self.newsCoordinate?.toMap()
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["GenerateCoordinate"] as? [String: Any?] {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.GenerateTraceability.Coordinates.GenerateCoordinate()
                                            model.fromMap(value)
                                            self.generateCoordinate = model
                                        }
                                        if let value = dict["NewsCoordinate"] as? [String: Any?] {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.GenerateTraceability.Coordinates.NewsCoordinate()
                                            model.fromMap(value)
                                            self.newsCoordinate = model
                                        }
                                    }
                                }
                                public var coordinates: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.GenerateTraceability.Coordinates]?

                                public var duplicate: Double?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.coordinates != nil {
                                        var tmp : [Any] = []
                                        for k in self.coordinates! {
                                            tmp.append(k.toMap())
                                        }
                                        map["Coordinates"] = tmp
                                    }
                                    if self.duplicate != nil {
                                        map["Duplicate"] = self.duplicate!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Coordinates"] as? [Any?] {
                                        var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.GenerateTraceability.Coordinates] = []
                                        for v in value {
                                            if v != nil {
                                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.GenerateTraceability.Coordinates()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.coordinates = tmp
                                    }
                                    if let value = dict["Duplicate"] as? Double {
                                        self.duplicate = value
                                    }
                                }
                            }
                            public class MultimodalSearchResultList : Tea.TeaModel {
                                public class SearchResult : Tea.TeaModel {
                                    public class Article : Tea.TeaModel {
                                        public var docId: String?

                                        public var docUuid: String?

                                        public var searchSourceName: String?

                                        public var summary: String?

                                        public var title: String?

                                        public var url: String?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.docId != nil {
                                                map["DocId"] = self.docId!
                                            }
                                            if self.docUuid != nil {
                                                map["DocUuid"] = self.docUuid!
                                            }
                                            if self.searchSourceName != nil {
                                                map["SearchSourceName"] = self.searchSourceName!
                                            }
                                            if self.summary != nil {
                                                map["Summary"] = self.summary!
                                            }
                                            if self.title != nil {
                                                map["Title"] = self.title!
                                            }
                                            if self.url != nil {
                                                map["Url"] = self.url!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["DocId"] as? String {
                                                self.docId = value
                                            }
                                            if let value = dict["DocUuid"] as? String {
                                                self.docUuid = value
                                            }
                                            if let value = dict["SearchSourceName"] as? String {
                                                self.searchSourceName = value
                                            }
                                            if let value = dict["Summary"] as? String {
                                                self.summary = value
                                            }
                                            if let value = dict["Title"] as? String {
                                                self.title = value
                                            }
                                            if let value = dict["Url"] as? String {
                                                self.url = value
                                            }
                                        }
                                    }
                                    public class ClipInfos : Tea.TeaModel {
                                        public var from: Double?

                                        public var score: Double?

                                        public var text: String?

                                        public var to: Double?

                                        public var type: String?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.from != nil {
                                                map["From"] = self.from!
                                            }
                                            if self.score != nil {
                                                map["Score"] = self.score!
                                            }
                                            if self.text != nil {
                                                map["Text"] = self.text!
                                            }
                                            if self.to != nil {
                                                map["To"] = self.to!
                                            }
                                            if self.type != nil {
                                                map["Type"] = self.type!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["From"] as? Double {
                                                self.from = value
                                            }
                                            if let value = dict["Score"] as? Double {
                                                self.score = value
                                            }
                                            if let value = dict["Text"] as? String {
                                                self.text = value
                                            }
                                            if let value = dict["To"] as? Double {
                                                self.to = value
                                            }
                                            if let value = dict["Type"] as? String {
                                                self.type = value
                                            }
                                        }
                                    }
                                    public var article: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.MultimodalSearchResultList.SearchResult.Article?

                                    public var clipInfos: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.MultimodalSearchResultList.SearchResult.ClipInfos]?

                                    public var fileUrl: String?

                                    public var mediaId: String?

                                    public var mediaType: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                        try self.article?.validate()
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.article != nil {
                                            map["Article"] = self.article?.toMap()
                                        }
                                        if self.clipInfos != nil {
                                            var tmp : [Any] = []
                                            for k in self.clipInfos! {
                                                tmp.append(k.toMap())
                                            }
                                            map["ClipInfos"] = tmp
                                        }
                                        if self.fileUrl != nil {
                                            map["FileUrl"] = self.fileUrl!
                                        }
                                        if self.mediaId != nil {
                                            map["MediaId"] = self.mediaId!
                                        }
                                        if self.mediaType != nil {
                                            map["MediaType"] = self.mediaType!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["Article"] as? [String: Any?] {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.MultimodalSearchResultList.SearchResult.Article()
                                            model.fromMap(value)
                                            self.article = model
                                        }
                                        if let value = dict["ClipInfos"] as? [Any?] {
                                            var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.MultimodalSearchResultList.SearchResult.ClipInfos] = []
                                            for v in value {
                                                if v != nil {
                                                    var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.MultimodalSearchResultList.SearchResult.ClipInfos()
                                                    if v != nil {
                                                        model.fromMap(v as? [String: Any?])
                                                    }
                                                    tmp.append(model)
                                                }
                                            }
                                            self.clipInfos = tmp
                                        }
                                        if let value = dict["FileUrl"] as? String {
                                            self.fileUrl = value
                                        }
                                        if let value = dict["MediaId"] as? String {
                                            self.mediaId = value
                                        }
                                        if let value = dict["MediaType"] as? String {
                                            self.mediaType = value
                                        }
                                    }
                                }
                                public var current: Int32?

                                public var searchQuery: String?

                                public var searchResult: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.MultimodalSearchResultList.SearchResult]?

                                public var searchType: String?

                                public var size: Int32?

                                public var timelineDateStr: String?

                                public var total: Int32?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.current != nil {
                                        map["Current"] = self.current!
                                    }
                                    if self.searchQuery != nil {
                                        map["SearchQuery"] = self.searchQuery!
                                    }
                                    if self.searchResult != nil {
                                        var tmp : [Any] = []
                                        for k in self.searchResult! {
                                            tmp.append(k.toMap())
                                        }
                                        map["SearchResult"] = tmp
                                    }
                                    if self.searchType != nil {
                                        map["SearchType"] = self.searchType!
                                    }
                                    if self.size != nil {
                                        map["Size"] = self.size!
                                    }
                                    if self.timelineDateStr != nil {
                                        map["TimelineDateStr"] = self.timelineDateStr!
                                    }
                                    if self.total != nil {
                                        map["Total"] = self.total!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Current"] as? Int32 {
                                        self.current = value
                                    }
                                    if let value = dict["SearchQuery"] as? String {
                                        self.searchQuery = value
                                    }
                                    if let value = dict["SearchResult"] as? [Any?] {
                                        var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.MultimodalSearchResultList.SearchResult] = []
                                        for v in value {
                                            if v != nil {
                                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.MultimodalSearchResultList.SearchResult()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.searchResult = tmp
                                    }
                                    if let value = dict["SearchType"] as? String {
                                        self.searchType = value
                                    }
                                    if let value = dict["Size"] as? Int32 {
                                        self.size = value
                                    }
                                    if let value = dict["TimelineDateStr"] as? String {
                                        self.timelineDateStr = value
                                    }
                                    if let value = dict["Total"] as? Int32 {
                                        self.total = value
                                    }
                                }
                            }
                            public class ReferenceList : Tea.TeaModel {
                                public var chunks: [String]?

                                public var content: String?

                                public var docId: String?

                                public var docUuid: String?

                                public var pubTime: String?

                                public var score: Double?

                                public var searchSource: String?

                                public var searchSourceName: String?

                                public var searchSourceType: String?

                                public var select: Bool?

                                public var source: String?

                                public var summary: String?

                                public var title: String?

                                public var traceabilityId: Int32?

                                public var url: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.chunks != nil {
                                        map["Chunks"] = self.chunks!
                                    }
                                    if self.content != nil {
                                        map["Content"] = self.content!
                                    }
                                    if self.docId != nil {
                                        map["DocId"] = self.docId!
                                    }
                                    if self.docUuid != nil {
                                        map["DocUuid"] = self.docUuid!
                                    }
                                    if self.pubTime != nil {
                                        map["PubTime"] = self.pubTime!
                                    }
                                    if self.score != nil {
                                        map["Score"] = self.score!
                                    }
                                    if self.searchSource != nil {
                                        map["SearchSource"] = self.searchSource!
                                    }
                                    if self.searchSourceName != nil {
                                        map["SearchSourceName"] = self.searchSourceName!
                                    }
                                    if self.searchSourceType != nil {
                                        map["SearchSourceType"] = self.searchSourceType!
                                    }
                                    if self.select != nil {
                                        map["Select"] = self.select!
                                    }
                                    if self.source != nil {
                                        map["Source"] = self.source!
                                    }
                                    if self.summary != nil {
                                        map["Summary"] = self.summary!
                                    }
                                    if self.title != nil {
                                        map["Title"] = self.title!
                                    }
                                    if self.traceabilityId != nil {
                                        map["TraceabilityId"] = self.traceabilityId!
                                    }
                                    if self.url != nil {
                                        map["Url"] = self.url!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Chunks"] as? [String] {
                                        self.chunks = value
                                    }
                                    if let value = dict["Content"] as? String {
                                        self.content = value
                                    }
                                    if let value = dict["DocId"] as? String {
                                        self.docId = value
                                    }
                                    if let value = dict["DocUuid"] as? String {
                                        self.docUuid = value
                                    }
                                    if let value = dict["PubTime"] as? String {
                                        self.pubTime = value
                                    }
                                    if let value = dict["Score"] as? Double {
                                        self.score = value
                                    }
                                    if let value = dict["SearchSource"] as? String {
                                        self.searchSource = value
                                    }
                                    if let value = dict["SearchSourceName"] as? String {
                                        self.searchSourceName = value
                                    }
                                    if let value = dict["SearchSourceType"] as? String {
                                        self.searchSourceType = value
                                    }
                                    if let value = dict["Select"] as? Bool {
                                        self.select = value
                                    }
                                    if let value = dict["Source"] as? String {
                                        self.source = value
                                    }
                                    if let value = dict["Summary"] as? String {
                                        self.summary = value
                                    }
                                    if let value = dict["Title"] as? String {
                                        self.title = value
                                    }
                                    if let value = dict["TraceabilityId"] as? Int32 {
                                        self.traceabilityId = value
                                    }
                                    if let value = dict["Url"] as? String {
                                        self.url = value
                                    }
                                }
                            }
                            public class TextGenerateMultimodalMediaList : Tea.TeaModel {
                                public class MultimodalMediaList : Tea.TeaModel {
                                    public class Article : Tea.TeaModel {
                                        public var docId: String?

                                        public var docUuid: String?

                                        public var searchSourceName: String?

                                        public var summary: String?

                                        public var title: String?

                                        public var url: String?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.docId != nil {
                                                map["DocId"] = self.docId!
                                            }
                                            if self.docUuid != nil {
                                                map["DocUuid"] = self.docUuid!
                                            }
                                            if self.searchSourceName != nil {
                                                map["SearchSourceName"] = self.searchSourceName!
                                            }
                                            if self.summary != nil {
                                                map["Summary"] = self.summary!
                                            }
                                            if self.title != nil {
                                                map["Title"] = self.title!
                                            }
                                            if self.url != nil {
                                                map["Url"] = self.url!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["DocId"] as? String {
                                                self.docId = value
                                            }
                                            if let value = dict["DocUuid"] as? String {
                                                self.docUuid = value
                                            }
                                            if let value = dict["SearchSourceName"] as? String {
                                                self.searchSourceName = value
                                            }
                                            if let value = dict["Summary"] as? String {
                                                self.summary = value
                                            }
                                            if let value = dict["Title"] as? String {
                                                self.title = value
                                            }
                                            if let value = dict["Url"] as? String {
                                                self.url = value
                                            }
                                        }
                                    }
                                    public var article: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.TextGenerateMultimodalMediaList.MultimodalMediaList.Article?

                                    public var fileUrl: String?

                                    public var mediaId: String?

                                    public var mediaType: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                        try self.article?.validate()
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.article != nil {
                                            map["Article"] = self.article?.toMap()
                                        }
                                        if self.fileUrl != nil {
                                            map["FileUrl"] = self.fileUrl!
                                        }
                                        if self.mediaId != nil {
                                            map["MediaId"] = self.mediaId!
                                        }
                                        if self.mediaType != nil {
                                            map["MediaType"] = self.mediaType!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["Article"] as? [String: Any?] {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.TextGenerateMultimodalMediaList.MultimodalMediaList.Article()
                                            model.fromMap(value)
                                            self.article = model
                                        }
                                        if let value = dict["FileUrl"] as? String {
                                            self.fileUrl = value
                                        }
                                        if let value = dict["MediaId"] as? String {
                                            self.mediaId = value
                                        }
                                        if let value = dict["MediaType"] as? String {
                                            self.mediaType = value
                                        }
                                    }
                                }
                                public var end: Int32?

                                public var multimodalMediaList: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.TextGenerateMultimodalMediaList.MultimodalMediaList]?

                                public var start: Int32?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.end != nil {
                                        map["End"] = self.end!
                                    }
                                    if self.multimodalMediaList != nil {
                                        var tmp : [Any] = []
                                        for k in self.multimodalMediaList! {
                                            tmp.append(k.toMap())
                                        }
                                        map["MultimodalMediaList"] = tmp
                                    }
                                    if self.start != nil {
                                        map["Start"] = self.start!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["End"] as? Int32 {
                                        self.end = value
                                    }
                                    if let value = dict["MultimodalMediaList"] as? [Any?] {
                                        var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.TextGenerateMultimodalMediaList.MultimodalMediaList] = []
                                        for v in value {
                                            if v != nil {
                                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.TextGenerateMultimodalMediaList.MultimodalMediaList()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.multimodalMediaList = tmp
                                    }
                                    if let value = dict["Start"] as? Int32 {
                                        self.start = value
                                    }
                                }
                            }
                            public var generateFinished: Bool?

                            public var generateLevel: String?

                            public var generateTraceability: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.GenerateTraceability?

                            public var multimodalSearchResultList: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.MultimodalSearchResultList]?

                            public var reasonTextGenerate: String?

                            public var referenceList: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.ReferenceList]?

                            public var textGenerate: String?

                            public var textGenerateMultimodalMediaList: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.TextGenerateMultimodalMediaList]?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                                try self.generateTraceability?.validate()
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.generateFinished != nil {
                                    map["GenerateFinished"] = self.generateFinished!
                                }
                                if self.generateLevel != nil {
                                    map["GenerateLevel"] = self.generateLevel!
                                }
                                if self.generateTraceability != nil {
                                    map["GenerateTraceability"] = self.generateTraceability?.toMap()
                                }
                                if self.multimodalSearchResultList != nil {
                                    var tmp : [Any] = []
                                    for k in self.multimodalSearchResultList! {
                                        tmp.append(k.toMap())
                                    }
                                    map["MultimodalSearchResultList"] = tmp
                                }
                                if self.reasonTextGenerate != nil {
                                    map["ReasonTextGenerate"] = self.reasonTextGenerate!
                                }
                                if self.referenceList != nil {
                                    var tmp : [Any] = []
                                    for k in self.referenceList! {
                                        tmp.append(k.toMap())
                                    }
                                    map["ReferenceList"] = tmp
                                }
                                if self.textGenerate != nil {
                                    map["TextGenerate"] = self.textGenerate!
                                }
                                if self.textGenerateMultimodalMediaList != nil {
                                    var tmp : [Any] = []
                                    for k in self.textGenerateMultimodalMediaList! {
                                        tmp.append(k.toMap())
                                    }
                                    map["TextGenerateMultimodalMediaList"] = tmp
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["GenerateFinished"] as? Bool {
                                    self.generateFinished = value
                                }
                                if let value = dict["GenerateLevel"] as? String {
                                    self.generateLevel = value
                                }
                                if let value = dict["GenerateTraceability"] as? [String: Any?] {
                                    var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.GenerateTraceability()
                                    model.fromMap(value)
                                    self.generateTraceability = model
                                }
                                if let value = dict["MultimodalSearchResultList"] as? [Any?] {
                                    var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.MultimodalSearchResultList] = []
                                    for v in value {
                                        if v != nil {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.MultimodalSearchResultList()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.multimodalSearchResultList = tmp
                                }
                                if let value = dict["ReasonTextGenerate"] as? String {
                                    self.reasonTextGenerate = value
                                }
                                if let value = dict["ReferenceList"] as? [Any?] {
                                    var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.ReferenceList] = []
                                    for v in value {
                                        if v != nil {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.ReferenceList()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.referenceList = tmp
                                }
                                if let value = dict["TextGenerate"] as? String {
                                    self.textGenerate = value
                                }
                                if let value = dict["TextGenerateMultimodalMediaList"] as? [Any?] {
                                    var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.TextGenerateMultimodalMediaList] = []
                                    for v in value {
                                        if v != nil {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult.TextGenerateMultimodalMediaList()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.textGenerateMultimodalMediaList = tmp
                                }
                            }
                        }
                        public class TextSearchResult : Tea.TeaModel {
                            public class SearchResult : Tea.TeaModel {
                                public var content: String?

                                public var docId: String?

                                public var docUuid: String?

                                public var pubTime: String?

                                public var searchSource: String?

                                public var searchSourceName: String?

                                public var searchSourceType: String?

                                public var summary: String?

                                public var title: String?

                                public var url: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.content != nil {
                                        map["Content"] = self.content!
                                    }
                                    if self.docId != nil {
                                        map["DocId"] = self.docId!
                                    }
                                    if self.docUuid != nil {
                                        map["DocUuid"] = self.docUuid!
                                    }
                                    if self.pubTime != nil {
                                        map["PubTime"] = self.pubTime!
                                    }
                                    if self.searchSource != nil {
                                        map["SearchSource"] = self.searchSource!
                                    }
                                    if self.searchSourceName != nil {
                                        map["SearchSourceName"] = self.searchSourceName!
                                    }
                                    if self.searchSourceType != nil {
                                        map["SearchSourceType"] = self.searchSourceType!
                                    }
                                    if self.summary != nil {
                                        map["Summary"] = self.summary!
                                    }
                                    if self.title != nil {
                                        map["Title"] = self.title!
                                    }
                                    if self.url != nil {
                                        map["Url"] = self.url!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Content"] as? String {
                                        self.content = value
                                    }
                                    if let value = dict["DocId"] as? String {
                                        self.docId = value
                                    }
                                    if let value = dict["DocUuid"] as? String {
                                        self.docUuid = value
                                    }
                                    if let value = dict["PubTime"] as? String {
                                        self.pubTime = value
                                    }
                                    if let value = dict["SearchSource"] as? String {
                                        self.searchSource = value
                                    }
                                    if let value = dict["SearchSourceName"] as? String {
                                        self.searchSourceName = value
                                    }
                                    if let value = dict["SearchSourceType"] as? String {
                                        self.searchSourceType = value
                                    }
                                    if let value = dict["Summary"] as? String {
                                        self.summary = value
                                    }
                                    if let value = dict["Title"] as? String {
                                        self.title = value
                                    }
                                    if let value = dict["Url"] as? String {
                                        self.url = value
                                    }
                                }
                            }
                            public var current: Int32?

                            public var searchResult: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextSearchResult.SearchResult]?

                            public var size: Int32?

                            public var total: Int32?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.current != nil {
                                    map["Current"] = self.current!
                                }
                                if self.searchResult != nil {
                                    var tmp : [Any] = []
                                    for k in self.searchResult! {
                                        tmp.append(k.toMap())
                                    }
                                    map["SearchResult"] = tmp
                                }
                                if self.size != nil {
                                    map["Size"] = self.size!
                                }
                                if self.total != nil {
                                    map["Total"] = self.total!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["Current"] as? Int32 {
                                    self.current = value
                                }
                                if let value = dict["SearchResult"] as? [Any?] {
                                    var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextSearchResult.SearchResult] = []
                                    for v in value {
                                        if v != nil {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextSearchResult.SearchResult()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.searchResult = tmp
                                }
                                if let value = dict["Size"] as? Int32 {
                                    self.size = value
                                }
                                if let value = dict["Total"] as? Int32 {
                                    self.total = value
                                }
                            }
                        }
                        public class TimelineResult : Tea.TeaModel {
                            public class GenerateTraceability : Tea.TeaModel {
                                public class Coordinates : Tea.TeaModel {
                                    public class GenerateCoordinate : Tea.TeaModel {
                                        public var x: Int32?

                                        public var y: Int32?

                                        public var z: Int32?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.x != nil {
                                                map["X"] = self.x!
                                            }
                                            if self.y != nil {
                                                map["Y"] = self.y!
                                            }
                                            if self.z != nil {
                                                map["Z"] = self.z!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["X"] as? Int32 {
                                                self.x = value
                                            }
                                            if let value = dict["Y"] as? Int32 {
                                                self.y = value
                                            }
                                            if let value = dict["Z"] as? Int32 {
                                                self.z = value
                                            }
                                        }
                                    }
                                    public class NewsCoordinate : Tea.TeaModel {
                                        public var x: Int32?

                                        public var y: Int32?

                                        public var z: Int32?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.x != nil {
                                                map["X"] = self.x!
                                            }
                                            if self.y != nil {
                                                map["Y"] = self.y!
                                            }
                                            if self.z != nil {
                                                map["Z"] = self.z!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["X"] as? Int32 {
                                                self.x = value
                                            }
                                            if let value = dict["Y"] as? Int32 {
                                                self.y = value
                                            }
                                            if let value = dict["Z"] as? Int32 {
                                                self.z = value
                                            }
                                        }
                                    }
                                    public var generateCoordinate: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.GenerateTraceability.Coordinates.GenerateCoordinate?

                                    public var newsCoordinate: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.GenerateTraceability.Coordinates.NewsCoordinate?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                        try self.generateCoordinate?.validate()
                                        try self.newsCoordinate?.validate()
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.generateCoordinate != nil {
                                            map["GenerateCoordinate"] = self.generateCoordinate?.toMap()
                                        }
                                        if self.newsCoordinate != nil {
                                            map["NewsCoordinate"] = self.newsCoordinate?.toMap()
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["GenerateCoordinate"] as? [String: Any?] {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.GenerateTraceability.Coordinates.GenerateCoordinate()
                                            model.fromMap(value)
                                            self.generateCoordinate = model
                                        }
                                        if let value = dict["NewsCoordinate"] as? [String: Any?] {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.GenerateTraceability.Coordinates.NewsCoordinate()
                                            model.fromMap(value)
                                            self.newsCoordinate = model
                                        }
                                    }
                                }
                                public var coordinates: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.GenerateTraceability.Coordinates]?

                                public var duplicate: Double?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.coordinates != nil {
                                        var tmp : [Any] = []
                                        for k in self.coordinates! {
                                            tmp.append(k.toMap())
                                        }
                                        map["Coordinates"] = tmp
                                    }
                                    if self.duplicate != nil {
                                        map["Duplicate"] = self.duplicate!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Coordinates"] as? [Any?] {
                                        var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.GenerateTraceability.Coordinates] = []
                                        for v in value {
                                            if v != nil {
                                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.GenerateTraceability.Coordinates()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.coordinates = tmp
                                    }
                                    if let value = dict["Duplicate"] as? Double {
                                        self.duplicate = value
                                    }
                                }
                            }
                            public class MultimodalSearchResultList : Tea.TeaModel {
                                public class SearchResult : Tea.TeaModel {
                                    public class Article : Tea.TeaModel {
                                        public var docId: String?

                                        public var docUuid: String?

                                        public var searchSourceName: String?

                                        public var summary: String?

                                        public var title: String?

                                        public var url: String?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.docId != nil {
                                                map["DocId"] = self.docId!
                                            }
                                            if self.docUuid != nil {
                                                map["DocUuid"] = self.docUuid!
                                            }
                                            if self.searchSourceName != nil {
                                                map["SearchSourceName"] = self.searchSourceName!
                                            }
                                            if self.summary != nil {
                                                map["Summary"] = self.summary!
                                            }
                                            if self.title != nil {
                                                map["Title"] = self.title!
                                            }
                                            if self.url != nil {
                                                map["Url"] = self.url!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["DocId"] as? String {
                                                self.docId = value
                                            }
                                            if let value = dict["DocUuid"] as? String {
                                                self.docUuid = value
                                            }
                                            if let value = dict["SearchSourceName"] as? String {
                                                self.searchSourceName = value
                                            }
                                            if let value = dict["Summary"] as? String {
                                                self.summary = value
                                            }
                                            if let value = dict["Title"] as? String {
                                                self.title = value
                                            }
                                            if let value = dict["Url"] as? String {
                                                self.url = value
                                            }
                                        }
                                    }
                                    public class ClipInfos : Tea.TeaModel {
                                        public var from: Double?

                                        public var score: Double?

                                        public var text: String?

                                        public var to: Double?

                                        public var type: String?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.from != nil {
                                                map["From"] = self.from!
                                            }
                                            if self.score != nil {
                                                map["Score"] = self.score!
                                            }
                                            if self.text != nil {
                                                map["Text"] = self.text!
                                            }
                                            if self.to != nil {
                                                map["To"] = self.to!
                                            }
                                            if self.type != nil {
                                                map["Type"] = self.type!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["From"] as? Double {
                                                self.from = value
                                            }
                                            if let value = dict["Score"] as? Double {
                                                self.score = value
                                            }
                                            if let value = dict["Text"] as? String {
                                                self.text = value
                                            }
                                            if let value = dict["To"] as? Double {
                                                self.to = value
                                            }
                                            if let value = dict["Type"] as? String {
                                                self.type = value
                                            }
                                        }
                                    }
                                    public var article: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.MultimodalSearchResultList.SearchResult.Article?

                                    public var clipInfos: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.MultimodalSearchResultList.SearchResult.ClipInfos]?

                                    public var fileUrl: String?

                                    public var mediaId: String?

                                    public var mediaType: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                        try self.article?.validate()
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.article != nil {
                                            map["Article"] = self.article?.toMap()
                                        }
                                        if self.clipInfos != nil {
                                            var tmp : [Any] = []
                                            for k in self.clipInfos! {
                                                tmp.append(k.toMap())
                                            }
                                            map["ClipInfos"] = tmp
                                        }
                                        if self.fileUrl != nil {
                                            map["FileUrl"] = self.fileUrl!
                                        }
                                        if self.mediaId != nil {
                                            map["MediaId"] = self.mediaId!
                                        }
                                        if self.mediaType != nil {
                                            map["MediaType"] = self.mediaType!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["Article"] as? [String: Any?] {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.MultimodalSearchResultList.SearchResult.Article()
                                            model.fromMap(value)
                                            self.article = model
                                        }
                                        if let value = dict["ClipInfos"] as? [Any?] {
                                            var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.MultimodalSearchResultList.SearchResult.ClipInfos] = []
                                            for v in value {
                                                if v != nil {
                                                    var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.MultimodalSearchResultList.SearchResult.ClipInfos()
                                                    if v != nil {
                                                        model.fromMap(v as? [String: Any?])
                                                    }
                                                    tmp.append(model)
                                                }
                                            }
                                            self.clipInfos = tmp
                                        }
                                        if let value = dict["FileUrl"] as? String {
                                            self.fileUrl = value
                                        }
                                        if let value = dict["MediaId"] as? String {
                                            self.mediaId = value
                                        }
                                        if let value = dict["MediaType"] as? String {
                                            self.mediaType = value
                                        }
                                    }
                                }
                                public var searchResult: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.MultimodalSearchResultList.SearchResult]?

                                public var timelineDateStr: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.searchResult != nil {
                                        var tmp : [Any] = []
                                        for k in self.searchResult! {
                                            tmp.append(k.toMap())
                                        }
                                        map["SearchResult"] = tmp
                                    }
                                    if self.timelineDateStr != nil {
                                        map["TimelineDateStr"] = self.timelineDateStr!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["SearchResult"] as? [Any?] {
                                        var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.MultimodalSearchResultList.SearchResult] = []
                                        for v in value {
                                            if v != nil {
                                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.MultimodalSearchResultList.SearchResult()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.searchResult = tmp
                                    }
                                    if let value = dict["TimelineDateStr"] as? String {
                                        self.timelineDateStr = value
                                    }
                                }
                            }
                            public class ReferenceList : Tea.TeaModel {
                                public var chunks: [String]?

                                public var content: String?

                                public var docId: String?

                                public var docUuid: String?

                                public var pubTime: String?

                                public var score: Double?

                                public var searchSource: String?

                                public var searchSourceName: String?

                                public var searchSourceType: String?

                                public var select: Bool?

                                public var source: String?

                                public var summary: String?

                                public var title: String?

                                public var traceabilityId: Int32?

                                public var url: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.chunks != nil {
                                        map["Chunks"] = self.chunks!
                                    }
                                    if self.content != nil {
                                        map["Content"] = self.content!
                                    }
                                    if self.docId != nil {
                                        map["DocId"] = self.docId!
                                    }
                                    if self.docUuid != nil {
                                        map["DocUuid"] = self.docUuid!
                                    }
                                    if self.pubTime != nil {
                                        map["PubTime"] = self.pubTime!
                                    }
                                    if self.score != nil {
                                        map["Score"] = self.score!
                                    }
                                    if self.searchSource != nil {
                                        map["SearchSource"] = self.searchSource!
                                    }
                                    if self.searchSourceName != nil {
                                        map["SearchSourceName"] = self.searchSourceName!
                                    }
                                    if self.searchSourceType != nil {
                                        map["SearchSourceType"] = self.searchSourceType!
                                    }
                                    if self.select != nil {
                                        map["Select"] = self.select!
                                    }
                                    if self.source != nil {
                                        map["Source"] = self.source!
                                    }
                                    if self.summary != nil {
                                        map["Summary"] = self.summary!
                                    }
                                    if self.title != nil {
                                        map["Title"] = self.title!
                                    }
                                    if self.traceabilityId != nil {
                                        map["TraceabilityId"] = self.traceabilityId!
                                    }
                                    if self.url != nil {
                                        map["Url"] = self.url!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Chunks"] as? [String] {
                                        self.chunks = value
                                    }
                                    if let value = dict["Content"] as? String {
                                        self.content = value
                                    }
                                    if let value = dict["DocId"] as? String {
                                        self.docId = value
                                    }
                                    if let value = dict["DocUuid"] as? String {
                                        self.docUuid = value
                                    }
                                    if let value = dict["PubTime"] as? String {
                                        self.pubTime = value
                                    }
                                    if let value = dict["Score"] as? Double {
                                        self.score = value
                                    }
                                    if let value = dict["SearchSource"] as? String {
                                        self.searchSource = value
                                    }
                                    if let value = dict["SearchSourceName"] as? String {
                                        self.searchSourceName = value
                                    }
                                    if let value = dict["SearchSourceType"] as? String {
                                        self.searchSourceType = value
                                    }
                                    if let value = dict["Select"] as? Bool {
                                        self.select = value
                                    }
                                    if let value = dict["Source"] as? String {
                                        self.source = value
                                    }
                                    if let value = dict["Summary"] as? String {
                                        self.summary = value
                                    }
                                    if let value = dict["Title"] as? String {
                                        self.title = value
                                    }
                                    if let value = dict["TraceabilityId"] as? Int32 {
                                        self.traceabilityId = value
                                    }
                                    if let value = dict["Url"] as? String {
                                        self.url = value
                                    }
                                }
                            }
                            public class TextGenerateMultimodalMediaList : Tea.TeaModel {
                                public class MultimodalMediaList : Tea.TeaModel {
                                    public class Article : Tea.TeaModel {
                                        public var docId: String?

                                        public var docUuid: String?

                                        public var searchSourceName: String?

                                        public var summary: String?

                                        public var title: String?

                                        public var url: String?

                                        public override init() {
                                            super.init()
                                        }

                                        public init(_ dict: [String: Any]) {
                                            super.init()
                                            self.fromMap(dict)
                                        }

                                        public override func validate() throws -> Void {
                                        }

                                        public override func toMap() -> [String : Any] {
                                            var map = super.toMap()
                                            if self.docId != nil {
                                                map["DocId"] = self.docId!
                                            }
                                            if self.docUuid != nil {
                                                map["DocUuid"] = self.docUuid!
                                            }
                                            if self.searchSourceName != nil {
                                                map["SearchSourceName"] = self.searchSourceName!
                                            }
                                            if self.summary != nil {
                                                map["Summary"] = self.summary!
                                            }
                                            if self.title != nil {
                                                map["Title"] = self.title!
                                            }
                                            if self.url != nil {
                                                map["Url"] = self.url!
                                            }
                                            return map
                                        }

                                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                            guard let dict else { return }
                                            if let value = dict["DocId"] as? String {
                                                self.docId = value
                                            }
                                            if let value = dict["DocUuid"] as? String {
                                                self.docUuid = value
                                            }
                                            if let value = dict["SearchSourceName"] as? String {
                                                self.searchSourceName = value
                                            }
                                            if let value = dict["Summary"] as? String {
                                                self.summary = value
                                            }
                                            if let value = dict["Title"] as? String {
                                                self.title = value
                                            }
                                            if let value = dict["Url"] as? String {
                                                self.url = value
                                            }
                                        }
                                    }
                                    public var article: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.TextGenerateMultimodalMediaList.MultimodalMediaList.Article?

                                    public var fileUrl: String?

                                    public var mediaId: String?

                                    public var mediaType: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                        try self.article?.validate()
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.article != nil {
                                            map["Article"] = self.article?.toMap()
                                        }
                                        if self.fileUrl != nil {
                                            map["FileUrl"] = self.fileUrl!
                                        }
                                        if self.mediaId != nil {
                                            map["MediaId"] = self.mediaId!
                                        }
                                        if self.mediaType != nil {
                                            map["MediaType"] = self.mediaType!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["Article"] as? [String: Any?] {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.TextGenerateMultimodalMediaList.MultimodalMediaList.Article()
                                            model.fromMap(value)
                                            self.article = model
                                        }
                                        if let value = dict["FileUrl"] as? String {
                                            self.fileUrl = value
                                        }
                                        if let value = dict["MediaId"] as? String {
                                            self.mediaId = value
                                        }
                                        if let value = dict["MediaType"] as? String {
                                            self.mediaType = value
                                        }
                                    }
                                }
                                public var end: Int32?

                                public var multimodalMediaList: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.TextGenerateMultimodalMediaList.MultimodalMediaList]?

                                public var start: Int32?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.end != nil {
                                        map["End"] = self.end!
                                    }
                                    if self.multimodalMediaList != nil {
                                        var tmp : [Any] = []
                                        for k in self.multimodalMediaList! {
                                            tmp.append(k.toMap())
                                        }
                                        map["MultimodalMediaList"] = tmp
                                    }
                                    if self.start != nil {
                                        map["Start"] = self.start!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["End"] as? Int32 {
                                        self.end = value
                                    }
                                    if let value = dict["MultimodalMediaList"] as? [Any?] {
                                        var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.TextGenerateMultimodalMediaList.MultimodalMediaList] = []
                                        for v in value {
                                            if v != nil {
                                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.TextGenerateMultimodalMediaList.MultimodalMediaList()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.multimodalMediaList = tmp
                                    }
                                    if let value = dict["Start"] as? Int32 {
                                        self.start = value
                                    }
                                }
                            }
                            public var generateFinished: Bool?

                            public var generateTraceability: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.GenerateTraceability?

                            public var multimodalSearchResultList: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.MultimodalSearchResultList]?

                            public var reasonTextGenerate: String?

                            public var referenceList: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.ReferenceList]?

                            public var textGenerate: String?

                            public var textGenerateMultimodalMediaList: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.TextGenerateMultimodalMediaList]?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                                try self.generateTraceability?.validate()
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.generateFinished != nil {
                                    map["GenerateFinished"] = self.generateFinished!
                                }
                                if self.generateTraceability != nil {
                                    map["GenerateTraceability"] = self.generateTraceability?.toMap()
                                }
                                if self.multimodalSearchResultList != nil {
                                    var tmp : [Any] = []
                                    for k in self.multimodalSearchResultList! {
                                        tmp.append(k.toMap())
                                    }
                                    map["MultimodalSearchResultList"] = tmp
                                }
                                if self.reasonTextGenerate != nil {
                                    map["ReasonTextGenerate"] = self.reasonTextGenerate!
                                }
                                if self.referenceList != nil {
                                    var tmp : [Any] = []
                                    for k in self.referenceList! {
                                        tmp.append(k.toMap())
                                    }
                                    map["ReferenceList"] = tmp
                                }
                                if self.textGenerate != nil {
                                    map["TextGenerate"] = self.textGenerate!
                                }
                                if self.textGenerateMultimodalMediaList != nil {
                                    var tmp : [Any] = []
                                    for k in self.textGenerateMultimodalMediaList! {
                                        tmp.append(k.toMap())
                                    }
                                    map["TextGenerateMultimodalMediaList"] = tmp
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["GenerateFinished"] as? Bool {
                                    self.generateFinished = value
                                }
                                if let value = dict["GenerateTraceability"] as? [String: Any?] {
                                    var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.GenerateTraceability()
                                    model.fromMap(value)
                                    self.generateTraceability = model
                                }
                                if let value = dict["MultimodalSearchResultList"] as? [Any?] {
                                    var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.MultimodalSearchResultList] = []
                                    for v in value {
                                        if v != nil {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.MultimodalSearchResultList()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.multimodalSearchResultList = tmp
                                }
                                if let value = dict["ReasonTextGenerate"] as? String {
                                    self.reasonTextGenerate = value
                                }
                                if let value = dict["ReferenceList"] as? [Any?] {
                                    var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.ReferenceList] = []
                                    for v in value {
                                        if v != nil {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.ReferenceList()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.referenceList = tmp
                                }
                                if let value = dict["TextGenerate"] as? String {
                                    self.textGenerate = value
                                }
                                if let value = dict["TextGenerateMultimodalMediaList"] as? [Any?] {
                                    var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.TextGenerateMultimodalMediaList] = []
                                    for v in value {
                                        if v != nil {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult.TextGenerateMultimodalMediaList()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.textGenerateMultimodalMediaList = tmp
                                }
                            }
                        }
                        public class VideoSearchResult : Tea.TeaModel {
                            public class SearchResult : Tea.TeaModel {
                                public class Article : Tea.TeaModel {
                                    public var docId: String?

                                    public var docUuid: String?

                                    public var searchSourceName: String?

                                    public var summary: String?

                                    public var title: String?

                                    public var url: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.docId != nil {
                                            map["DocId"] = self.docId!
                                        }
                                        if self.docUuid != nil {
                                            map["DocUuid"] = self.docUuid!
                                        }
                                        if self.searchSourceName != nil {
                                            map["SearchSourceName"] = self.searchSourceName!
                                        }
                                        if self.summary != nil {
                                            map["Summary"] = self.summary!
                                        }
                                        if self.title != nil {
                                            map["Title"] = self.title!
                                        }
                                        if self.url != nil {
                                            map["Url"] = self.url!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["DocId"] as? String {
                                            self.docId = value
                                        }
                                        if let value = dict["DocUuid"] as? String {
                                            self.docUuid = value
                                        }
                                        if let value = dict["SearchSourceName"] as? String {
                                            self.searchSourceName = value
                                        }
                                        if let value = dict["Summary"] as? String {
                                            self.summary = value
                                        }
                                        if let value = dict["Title"] as? String {
                                            self.title = value
                                        }
                                        if let value = dict["Url"] as? String {
                                            self.url = value
                                        }
                                    }
                                }
                                public class ClipInfos : Tea.TeaModel {
                                    public var from: Double?

                                    public var score: Double?

                                    public var text: String?

                                    public var to: Double?

                                    public var type: String?

                                    public override init() {
                                        super.init()
                                    }

                                    public init(_ dict: [String: Any]) {
                                        super.init()
                                        self.fromMap(dict)
                                    }

                                    public override func validate() throws -> Void {
                                    }

                                    public override func toMap() -> [String : Any] {
                                        var map = super.toMap()
                                        if self.from != nil {
                                            map["From"] = self.from!
                                        }
                                        if self.score != nil {
                                            map["Score"] = self.score!
                                        }
                                        if self.text != nil {
                                            map["Text"] = self.text!
                                        }
                                        if self.to != nil {
                                            map["To"] = self.to!
                                        }
                                        if self.type != nil {
                                            map["Type"] = self.type!
                                        }
                                        return map
                                    }

                                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                        guard let dict else { return }
                                        if let value = dict["From"] as? Double {
                                            self.from = value
                                        }
                                        if let value = dict["Score"] as? Double {
                                            self.score = value
                                        }
                                        if let value = dict["Text"] as? String {
                                            self.text = value
                                        }
                                        if let value = dict["To"] as? Double {
                                            self.to = value
                                        }
                                        if let value = dict["Type"] as? String {
                                            self.type = value
                                        }
                                    }
                                }
                                public var article: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.VideoSearchResult.SearchResult.Article?

                                public var clipInfos: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.VideoSearchResult.SearchResult.ClipInfos]?

                                public var fileUrl: String?

                                public var mediaId: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                    try self.article?.validate()
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.article != nil {
                                        map["Article"] = self.article?.toMap()
                                    }
                                    if self.clipInfos != nil {
                                        var tmp : [Any] = []
                                        for k in self.clipInfos! {
                                            tmp.append(k.toMap())
                                        }
                                        map["ClipInfos"] = tmp
                                    }
                                    if self.fileUrl != nil {
                                        map["FileUrl"] = self.fileUrl!
                                    }
                                    if self.mediaId != nil {
                                        map["MediaId"] = self.mediaId!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                    guard let dict else { return }
                                    if let value = dict["Article"] as? [String: Any?] {
                                        var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.VideoSearchResult.SearchResult.Article()
                                        model.fromMap(value)
                                        self.article = model
                                    }
                                    if let value = dict["ClipInfos"] as? [Any?] {
                                        var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.VideoSearchResult.SearchResult.ClipInfos] = []
                                        for v in value {
                                            if v != nil {
                                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.VideoSearchResult.SearchResult.ClipInfos()
                                                if v != nil {
                                                    model.fromMap(v as? [String: Any?])
                                                }
                                                tmp.append(model)
                                            }
                                        }
                                        self.clipInfos = tmp
                                    }
                                    if let value = dict["FileUrl"] as? String {
                                        self.fileUrl = value
                                    }
                                    if let value = dict["MediaId"] as? String {
                                        self.mediaId = value
                                    }
                                }
                            }
                            public var searchResult: [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.VideoSearchResult.SearchResult]?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.searchResult != nil {
                                    var tmp : [Any] = []
                                    for k in self.searchResult! {
                                        tmp.append(k.toMap())
                                    }
                                    map["SearchResult"] = tmp
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["SearchResult"] as? [Any?] {
                                    var tmp : [RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.VideoSearchResult.SearchResult] = []
                                    for v in value {
                                        if v != nil {
                                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.VideoSearchResult.SearchResult()
                                            if v != nil {
                                                model.fromMap(v as? [String: Any?])
                                            }
                                            tmp.append(model)
                                        }
                                    }
                                    self.searchResult = tmp
                                }
                            }
                        }
                        public var clusterTopicResult: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult?

                        public var excerptResult: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult?

                        public var imageSearchResult: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ImageSearchResult?

                        public var newsElementResult: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.NewsElementResult?

                        public var textGenerateResult: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult?

                        public var textSearchResult: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextSearchResult?

                        public var timelineResult: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult?

                        public var videoSearchResult: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.VideoSearchResult?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.clusterTopicResult?.validate()
                            try self.excerptResult?.validate()
                            try self.imageSearchResult?.validate()
                            try self.newsElementResult?.validate()
                            try self.textGenerateResult?.validate()
                            try self.textSearchResult?.validate()
                            try self.timelineResult?.validate()
                            try self.videoSearchResult?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.clusterTopicResult != nil {
                                map["ClusterTopicResult"] = self.clusterTopicResult?.toMap()
                            }
                            if self.excerptResult != nil {
                                map["ExcerptResult"] = self.excerptResult?.toMap()
                            }
                            if self.imageSearchResult != nil {
                                map["ImageSearchResult"] = self.imageSearchResult?.toMap()
                            }
                            if self.newsElementResult != nil {
                                map["NewsElementResult"] = self.newsElementResult?.toMap()
                            }
                            if self.textGenerateResult != nil {
                                map["TextGenerateResult"] = self.textGenerateResult?.toMap()
                            }
                            if self.textSearchResult != nil {
                                map["TextSearchResult"] = self.textSearchResult?.toMap()
                            }
                            if self.timelineResult != nil {
                                map["TimelineResult"] = self.timelineResult?.toMap()
                            }
                            if self.videoSearchResult != nil {
                                map["VideoSearchResult"] = self.videoSearchResult?.toMap()
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ClusterTopicResult"] as? [String: Any?] {
                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ClusterTopicResult()
                                model.fromMap(value)
                                self.clusterTopicResult = model
                            }
                            if let value = dict["ExcerptResult"] as? [String: Any?] {
                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ExcerptResult()
                                model.fromMap(value)
                                self.excerptResult = model
                            }
                            if let value = dict["ImageSearchResult"] as? [String: Any?] {
                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.ImageSearchResult()
                                model.fromMap(value)
                                self.imageSearchResult = model
                            }
                            if let value = dict["NewsElementResult"] as? [String: Any?] {
                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.NewsElementResult()
                                model.fromMap(value)
                                self.newsElementResult = model
                            }
                            if let value = dict["TextGenerateResult"] as? [String: Any?] {
                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextGenerateResult()
                                model.fromMap(value)
                                self.textGenerateResult = model
                            }
                            if let value = dict["TextSearchResult"] as? [String: Any?] {
                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TextSearchResult()
                                model.fromMap(value)
                                self.textSearchResult = model
                            }
                            if let value = dict["TimelineResult"] as? [String: Any?] {
                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.TimelineResult()
                                model.fromMap(value)
                                self.timelineResult = model
                            }
                            if let value = dict["VideoSearchResult"] as? [String: Any?] {
                                var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent.VideoSearchResult()
                                model.fromMap(value)
                                self.videoSearchResult = model
                            }
                        }
                    }
                    public class TokenCalculate : Tea.TeaModel {
                        public var firstTokenTime: Double?

                        public var outputAvgTime: Double?

                        public var searchTime: Double?

                        public var time: Double?

                        public var totalTokens: Int64?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.firstTokenTime != nil {
                                map["FirstTokenTime"] = self.firstTokenTime!
                            }
                            if self.outputAvgTime != nil {
                                map["OutputAvgTime"] = self.outputAvgTime!
                            }
                            if self.searchTime != nil {
                                map["SearchTime"] = self.searchTime!
                            }
                            if self.time != nil {
                                map["Time"] = self.time!
                            }
                            if self.totalTokens != nil {
                                map["TotalTokens"] = self.totalTokens!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["FirstTokenTime"] as? Double {
                                self.firstTokenTime = value
                            }
                            if let value = dict["OutputAvgTime"] as? Double {
                                self.outputAvgTime = value
                            }
                            if let value = dict["SearchTime"] as? Double {
                                self.searchTime = value
                            }
                            if let value = dict["Time"] as? Double {
                                self.time = value
                            }
                            if let value = dict["TotalTokens"] as? Int64 {
                                self.totalTokens = value
                            }
                        }
                    }
                    public var askUser: String?

                    public var askUserKeywords: [String]?

                    public var currentStep: String?

                    public var generatedContent: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent?

                    public var modelId: String?

                    public var nextStep: String?

                    public var recommendSearchQueryList: [String]?

                    public var searchKeywords: [String]?

                    public var searchQueryList: [String]?

                    public var supplementDataType: String?

                    public var supplementEnable: Bool?

                    public var tokenCalculate: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.TokenCalculate?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.generatedContent?.validate()
                        try self.tokenCalculate?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.askUser != nil {
                            map["AskUser"] = self.askUser!
                        }
                        if self.askUserKeywords != nil {
                            map["AskUserKeywords"] = self.askUserKeywords!
                        }
                        if self.currentStep != nil {
                            map["CurrentStep"] = self.currentStep!
                        }
                        if self.generatedContent != nil {
                            map["GeneratedContent"] = self.generatedContent?.toMap()
                        }
                        if self.modelId != nil {
                            map["ModelId"] = self.modelId!
                        }
                        if self.nextStep != nil {
                            map["NextStep"] = self.nextStep!
                        }
                        if self.recommendSearchQueryList != nil {
                            map["RecommendSearchQueryList"] = self.recommendSearchQueryList!
                        }
                        if self.searchKeywords != nil {
                            map["SearchKeywords"] = self.searchKeywords!
                        }
                        if self.searchQueryList != nil {
                            map["SearchQueryList"] = self.searchQueryList!
                        }
                        if self.supplementDataType != nil {
                            map["SupplementDataType"] = self.supplementDataType!
                        }
                        if self.supplementEnable != nil {
                            map["SupplementEnable"] = self.supplementEnable!
                        }
                        if self.tokenCalculate != nil {
                            map["TokenCalculate"] = self.tokenCalculate?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AskUser"] as? String {
                            self.askUser = value
                        }
                        if let value = dict["AskUserKeywords"] as? [String] {
                            self.askUserKeywords = value
                        }
                        if let value = dict["CurrentStep"] as? String {
                            self.currentStep = value
                        }
                        if let value = dict["GeneratedContent"] as? [String: Any?] {
                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.GeneratedContent()
                            model.fromMap(value)
                            self.generatedContent = model
                        }
                        if let value = dict["ModelId"] as? String {
                            self.modelId = value
                        }
                        if let value = dict["NextStep"] as? String {
                            self.nextStep = value
                        }
                        if let value = dict["RecommendSearchQueryList"] as? [String] {
                            self.recommendSearchQueryList = value
                        }
                        if let value = dict["SearchKeywords"] as? [String] {
                            self.searchKeywords = value
                        }
                        if let value = dict["SearchQueryList"] as? [String] {
                            self.searchQueryList = value
                        }
                        if let value = dict["SupplementDataType"] as? String {
                            self.supplementDataType = value
                        }
                        if let value = dict["SupplementEnable"] as? Bool {
                            self.supplementEnable = value
                        }
                        if let value = dict["TokenCalculate"] as? [String: Any?] {
                            var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext.TokenCalculate()
                            model.fromMap(value)
                            self.tokenCalculate = model
                        }
                    }
                }
                public var bizContext: RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.bizContext?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bizContext != nil {
                        map["BizContext"] = self.bizContext?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BizContext"] as? [String: Any?] {
                        var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext.BizContext()
                        model.fromMap(value)
                        self.bizContext = model
                    }
                }
            }
            public var agentContext: RunSearchGenerationResponseBody.Payload.Output.AgentContext?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.agentContext?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentContext != nil {
                    map["AgentContext"] = self.agentContext?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AgentContext"] as? [String: Any?] {
                    var model = RunSearchGenerationResponseBody.Payload.Output.AgentContext()
                    model.fromMap(value)
                    self.agentContext = model
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunSearchGenerationResponseBody.Payload.Output?

        public var usage: RunSearchGenerationResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunSearchGenerationResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunSearchGenerationResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunSearchGenerationResponseBody.Header?

    public var payload: RunSearchGenerationResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunSearchGenerationResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunSearchGenerationResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunSearchGenerationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunSearchGenerationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunSearchGenerationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunSearchSimilarArticlesRequest : Tea.TeaModel {
    public class ChatConfig : Tea.TeaModel {
        public class SearchParam : Tea.TeaModel {
            public class SearchSources : Tea.TeaModel {
                public var code: String?

                public var datasetName: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.code != nil {
                        map["Code"] = self.code!
                    }
                    if self.datasetName != nil {
                        map["DatasetName"] = self.datasetName!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Code"] as? String {
                        self.code = value
                    }
                    if let value = dict["DatasetName"] as? String {
                        self.datasetName = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var searchSources: [RunSearchSimilarArticlesRequest.ChatConfig.SearchParam.SearchSources]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.searchSources != nil {
                    var tmp : [Any] = []
                    for k in self.searchSources! {
                        tmp.append(k.toMap())
                    }
                    map["SearchSources"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SearchSources"] as? [Any?] {
                    var tmp : [RunSearchSimilarArticlesRequest.ChatConfig.SearchParam.SearchSources] = []
                    for v in value {
                        if v != nil {
                            var model = RunSearchSimilarArticlesRequest.ChatConfig.SearchParam.SearchSources()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.searchSources = tmp
                }
            }
        }
        public var searchParam: RunSearchSimilarArticlesRequest.ChatConfig.SearchParam?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.searchParam?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.searchParam != nil {
                map["SearchParam"] = self.searchParam?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SearchParam"] as? [String: Any?] {
                var model = RunSearchSimilarArticlesRequest.ChatConfig.SearchParam()
                model.fromMap(value)
                self.searchParam = model
            }
        }
    }
    public var chatConfig: RunSearchSimilarArticlesRequest.ChatConfig?

    public var docType: String?

    public var title: String?

    public var url: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.chatConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.chatConfig != nil {
            map["ChatConfig"] = self.chatConfig?.toMap()
        }
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChatConfig"] as? [String: Any?] {
            var model = RunSearchSimilarArticlesRequest.ChatConfig()
            model.fromMap(value)
            self.chatConfig = model
        }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunSearchSimilarArticlesShrinkRequest : Tea.TeaModel {
    public var chatConfigShrink: String?

    public var docType: String?

    public var title: String?

    public var url: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.chatConfigShrink != nil {
            map["ChatConfig"] = self.chatConfigShrink!
        }
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChatConfig"] as? String {
            self.chatConfigShrink = value
        }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunSearchSimilarArticlesResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var sessionId: String?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public class Articles : Tea.TeaModel {
                public var docId: String?

                public var docUuid: String?

                public var pubTime: String?

                public var searchSourceName: String?

                public var source: String?

                public var summary: String?

                public var title: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.docId != nil {
                        map["DocId"] = self.docId!
                    }
                    if self.docUuid != nil {
                        map["DocUuid"] = self.docUuid!
                    }
                    if self.pubTime != nil {
                        map["PubTime"] = self.pubTime!
                    }
                    if self.searchSourceName != nil {
                        map["SearchSourceName"] = self.searchSourceName!
                    }
                    if self.source != nil {
                        map["Source"] = self.source!
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DocId"] as? String {
                        self.docId = value
                    }
                    if let value = dict["DocUuid"] as? String {
                        self.docUuid = value
                    }
                    if let value = dict["PubTime"] as? String {
                        self.pubTime = value
                    }
                    if let value = dict["SearchSourceName"] as? String {
                        self.searchSourceName = value
                    }
                    if let value = dict["Source"] as? String {
                        self.source = value
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var articles: [RunSearchSimilarArticlesResponseBody.Payload.Output.Articles]?

            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.articles != nil {
                    var tmp : [Any] = []
                    for k in self.articles! {
                        tmp.append(k.toMap())
                    }
                    map["Articles"] = tmp
                }
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Articles"] as? [Any?] {
                    var tmp : [RunSearchSimilarArticlesResponseBody.Payload.Output.Articles] = []
                    for v in value {
                        if v != nil {
                            var model = RunSearchSimilarArticlesResponseBody.Payload.Output.Articles()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.articles = tmp
                }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunSearchSimilarArticlesResponseBody.Payload.Output?

        public var usage: RunSearchSimilarArticlesResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunSearchSimilarArticlesResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunSearchSimilarArticlesResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunSearchSimilarArticlesResponseBody.Header?

    public var payload: RunSearchSimilarArticlesResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunSearchSimilarArticlesResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunSearchSimilarArticlesResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunSearchSimilarArticlesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunSearchSimilarArticlesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunSearchSimilarArticlesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunStepByStepWritingRequest : Tea.TeaModel {
    public class ReferenceData : Tea.TeaModel {
        public class Articles : Tea.TeaModel {
            public var author: String?

            public var content: String?

            public var docId: String?

            public var docUuid: String?

            public var mediaUrl: String?

            public var pubTime: String?

            public var source: String?

            public var summary: String?

            public var tag: String?

            public var title: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.author != nil {
                    map["Author"] = self.author!
                }
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.docId != nil {
                    map["DocId"] = self.docId!
                }
                if self.docUuid != nil {
                    map["DocUuid"] = self.docUuid!
                }
                if self.mediaUrl != nil {
                    map["MediaUrl"] = self.mediaUrl!
                }
                if self.pubTime != nil {
                    map["PubTime"] = self.pubTime!
                }
                if self.source != nil {
                    map["Source"] = self.source!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Author"] as? String {
                    self.author = value
                }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["DocId"] as? String {
                    self.docId = value
                }
                if let value = dict["DocUuid"] as? String {
                    self.docUuid = value
                }
                if let value = dict["MediaUrl"] as? String {
                    self.mediaUrl = value
                }
                if let value = dict["PubTime"] as? String {
                    self.pubTime = value
                }
                if let value = dict["Source"] as? String {
                    self.source = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public class Outlines : Tea.TeaModel {
            public class Articles : Tea.TeaModel {
                public var content: String?

                public var title: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var articles: [RunStepByStepWritingRequest.ReferenceData.Outlines.Articles]?

            public var outline: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.articles != nil {
                    var tmp : [Any] = []
                    for k in self.articles! {
                        tmp.append(k.toMap())
                    }
                    map["Articles"] = tmp
                }
                if self.outline != nil {
                    map["Outline"] = self.outline!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Articles"] as? [Any?] {
                    var tmp : [RunStepByStepWritingRequest.ReferenceData.Outlines.Articles] = []
                    for v in value {
                        if v != nil {
                            var model = RunStepByStepWritingRequest.ReferenceData.Outlines.Articles()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.articles = tmp
                }
                if let value = dict["Outline"] as? String {
                    self.outline = value
                }
            }
        }
        public var articles: [RunStepByStepWritingRequest.ReferenceData.Articles]?

        public var miniDoc: [String]?

        public var outlines: [RunStepByStepWritingRequest.ReferenceData.Outlines]?

        public var summarization: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.articles != nil {
                var tmp : [Any] = []
                for k in self.articles! {
                    tmp.append(k.toMap())
                }
                map["Articles"] = tmp
            }
            if self.miniDoc != nil {
                map["MiniDoc"] = self.miniDoc!
            }
            if self.outlines != nil {
                var tmp : [Any] = []
                for k in self.outlines! {
                    tmp.append(k.toMap())
                }
                map["Outlines"] = tmp
            }
            if self.summarization != nil {
                map["Summarization"] = self.summarization!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Articles"] as? [Any?] {
                var tmp : [RunStepByStepWritingRequest.ReferenceData.Articles] = []
                for v in value {
                    if v != nil {
                        var model = RunStepByStepWritingRequest.ReferenceData.Articles()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.articles = tmp
            }
            if let value = dict["MiniDoc"] as? [String] {
                self.miniDoc = value
            }
            if let value = dict["Outlines"] as? [Any?] {
                var tmp : [RunStepByStepWritingRequest.ReferenceData.Outlines] = []
                for v in value {
                    if v != nil {
                        var model = RunStepByStepWritingRequest.ReferenceData.Outlines()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.outlines = tmp
            }
            if let value = dict["Summarization"] as? [String] {
                self.summarization = value
            }
        }
    }
    public class WritingConfig : Tea.TeaModel {
        public class PromptTag : Tea.TeaModel {
            public var necessaryTips: String?

            public var position: String?

            public var reverseWords: String?

            public var theme: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.necessaryTips != nil {
                    map["NecessaryTips"] = self.necessaryTips!
                }
                if self.position != nil {
                    map["Position"] = self.position!
                }
                if self.reverseWords != nil {
                    map["ReverseWords"] = self.reverseWords!
                }
                if self.theme != nil {
                    map["Theme"] = self.theme!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NecessaryTips"] as? String {
                    self.necessaryTips = value
                }
                if let value = dict["Position"] as? String {
                    self.position = value
                }
                if let value = dict["ReverseWords"] as? String {
                    self.reverseWords = value
                }
                if let value = dict["Theme"] as? String {
                    self.theme = value
                }
            }
        }
        public class Tags : Tea.TeaModel {
            public var keyword: String?

            public var tag: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.keyword != nil {
                    map["Keyword"] = self.keyword!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Keyword"] as? String {
                    self.keyword = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
            }
        }
        public var domain: String?

        public var keywords: [String]?

        public var promptTag: RunStepByStepWritingRequest.WritingConfig.PromptTag?

        public var scene: String?

        public var step: String?

        public var summaryReturnType: String?

        public var tags: [RunStepByStepWritingRequest.WritingConfig.Tags]?

        public var useSearch: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.promptTag?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.keywords != nil {
                map["Keywords"] = self.keywords!
            }
            if self.promptTag != nil {
                map["PromptTag"] = self.promptTag?.toMap()
            }
            if self.scene != nil {
                map["Scene"] = self.scene!
            }
            if self.step != nil {
                map["Step"] = self.step!
            }
            if self.summaryReturnType != nil {
                map["SummaryReturnType"] = self.summaryReturnType!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.useSearch != nil {
                map["UseSearch"] = self.useSearch!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["Keywords"] as? [String] {
                self.keywords = value
            }
            if let value = dict["PromptTag"] as? [String: Any?] {
                var model = RunStepByStepWritingRequest.WritingConfig.PromptTag()
                model.fromMap(value)
                self.promptTag = model
            }
            if let value = dict["Scene"] as? String {
                self.scene = value
            }
            if let value = dict["Step"] as? String {
                self.step = value
            }
            if let value = dict["SummaryReturnType"] as? String {
                self.summaryReturnType = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [RunStepByStepWritingRequest.WritingConfig.Tags] = []
                for v in value {
                    if v != nil {
                        var model = RunStepByStepWritingRequest.WritingConfig.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["UseSearch"] as? Bool {
                self.useSearch = value
            }
        }
    }
    public var originSessionId: String?

    public var prompt: String?

    public var referenceData: RunStepByStepWritingRequest.ReferenceData?

    public var sessionId: String?

    public var taskId: String?

    public var workspaceId: String?

    public var writingConfig: RunStepByStepWritingRequest.WritingConfig?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.referenceData?.validate()
        try self.writingConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.originSessionId != nil {
            map["OriginSessionId"] = self.originSessionId!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.referenceData != nil {
            map["ReferenceData"] = self.referenceData?.toMap()
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        if self.writingConfig != nil {
            map["WritingConfig"] = self.writingConfig?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OriginSessionId"] as? String {
            self.originSessionId = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["ReferenceData"] as? [String: Any?] {
            var model = RunStepByStepWritingRequest.ReferenceData()
            model.fromMap(value)
            self.referenceData = model
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
        if let value = dict["WritingConfig"] as? [String: Any?] {
            var model = RunStepByStepWritingRequest.WritingConfig()
            model.fromMap(value)
            self.writingConfig = model
        }
    }
}

public class RunStepByStepWritingShrinkRequest : Tea.TeaModel {
    public var originSessionId: String?

    public var prompt: String?

    public var referenceDataShrink: String?

    public var sessionId: String?

    public var taskId: String?

    public var workspaceId: String?

    public var writingConfigShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.originSessionId != nil {
            map["OriginSessionId"] = self.originSessionId!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.referenceDataShrink != nil {
            map["ReferenceData"] = self.referenceDataShrink!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        if self.writingConfigShrink != nil {
            map["WritingConfig"] = self.writingConfigShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OriginSessionId"] as? String {
            self.originSessionId = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["ReferenceData"] as? String {
            self.referenceDataShrink = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
        if let value = dict["WritingConfig"] as? String {
            self.writingConfigShrink = value
        }
    }
}

public class RunStepByStepWritingResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var originSessionId: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.originSessionId != nil {
                map["OriginSessionId"] = self.originSessionId!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["OriginSessionId"] as? String {
                self.originSessionId = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public class Articles : Tea.TeaModel {
                public var author: String?

                public var content: String?

                public var docId: String?

                public var docUuid: String?

                public var mediaUrl: String?

                public var pubTime: String?

                public var source: String?

                public var summary: String?

                public var tag: String?

                public var title: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.author != nil {
                        map["Author"] = self.author!
                    }
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.docId != nil {
                        map["DocId"] = self.docId!
                    }
                    if self.docUuid != nil {
                        map["DocUuid"] = self.docUuid!
                    }
                    if self.mediaUrl != nil {
                        map["MediaUrl"] = self.mediaUrl!
                    }
                    if self.pubTime != nil {
                        map["PubTime"] = self.pubTime!
                    }
                    if self.source != nil {
                        map["Source"] = self.source!
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    if self.tag != nil {
                        map["Tag"] = self.tag!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Author"] as? String {
                        self.author = value
                    }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["DocId"] as? String {
                        self.docId = value
                    }
                    if let value = dict["DocUuid"] as? String {
                        self.docUuid = value
                    }
                    if let value = dict["MediaUrl"] as? String {
                        self.mediaUrl = value
                    }
                    if let value = dict["PubTime"] as? String {
                        self.pubTime = value
                    }
                    if let value = dict["Source"] as? String {
                        self.source = value
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                    if let value = dict["Tag"] as? String {
                        self.tag = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public class ExtraOutput : Tea.TeaModel {
                public var summarization: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.summarization != nil {
                        map["summarization"] = self.summarization!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["summarization"] as? [String] {
                        self.summarization = value
                    }
                }
            }
            public var articles: [RunStepByStepWritingResponseBody.Payload.Output.Articles]?

            public var extraOutput: RunStepByStepWritingResponseBody.Payload.Output.ExtraOutput?

            public var miniDoc: [String]?

            public var searchQuery: String?

            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.extraOutput?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.articles != nil {
                    var tmp : [Any] = []
                    for k in self.articles! {
                        tmp.append(k.toMap())
                    }
                    map["Articles"] = tmp
                }
                if self.extraOutput != nil {
                    map["ExtraOutput"] = self.extraOutput?.toMap()
                }
                if self.miniDoc != nil {
                    map["MiniDoc"] = self.miniDoc!
                }
                if self.searchQuery != nil {
                    map["SearchQuery"] = self.searchQuery!
                }
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Articles"] as? [Any?] {
                    var tmp : [RunStepByStepWritingResponseBody.Payload.Output.Articles] = []
                    for v in value {
                        if v != nil {
                            var model = RunStepByStepWritingResponseBody.Payload.Output.Articles()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.articles = tmp
                }
                if let value = dict["ExtraOutput"] as? [String: Any?] {
                    var model = RunStepByStepWritingResponseBody.Payload.Output.ExtraOutput()
                    model.fromMap(value)
                    self.extraOutput = model
                }
                if let value = dict["MiniDoc"] as? [String] {
                    self.miniDoc = value
                }
                if let value = dict["SearchQuery"] as? String {
                    self.searchQuery = value
                }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunStepByStepWritingResponseBody.Payload.Output?

        public var usage: RunStepByStepWritingResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunStepByStepWritingResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunStepByStepWritingResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunStepByStepWritingResponseBody.Header?

    public var payload: RunStepByStepWritingResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunStepByStepWritingResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunStepByStepWritingResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunStepByStepWritingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunStepByStepWritingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunStepByStepWritingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunStyleFeatureAnalysisRequest : Tea.TeaModel {
    public var contents: [String]?

    public var materialIds: [Int64]?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contents != nil {
            map["Contents"] = self.contents!
        }
        if self.materialIds != nil {
            map["MaterialIds"] = self.materialIds!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Contents"] as? [String] {
            self.contents = value
        }
        if let value = dict["MaterialIds"] as? [Int64] {
            self.materialIds = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunStyleFeatureAnalysisShrinkRequest : Tea.TeaModel {
    public var contentsShrink: String?

    public var materialIdsShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contentsShrink != nil {
            map["Contents"] = self.contentsShrink!
        }
        if self.materialIdsShrink != nil {
            map["MaterialIds"] = self.materialIdsShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Contents"] as? String {
            self.contentsShrink = value
        }
        if let value = dict["MaterialIds"] as? String {
            self.materialIdsShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunStyleFeatureAnalysisResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunStyleFeatureAnalysisResponseBody.Payload.Output?

        public var usage: RunStyleFeatureAnalysisResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunStyleFeatureAnalysisResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunStyleFeatureAnalysisResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var end: Bool?

    public var header: RunStyleFeatureAnalysisResponseBody.Header?

    public var payload: RunStyleFeatureAnalysisResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.end != nil {
            map["End"] = self.end!
        }
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["End"] as? Bool {
            self.end = value
        }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunStyleFeatureAnalysisResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunStyleFeatureAnalysisResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunStyleFeatureAnalysisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunStyleFeatureAnalysisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunStyleFeatureAnalysisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunSummaryGenerateRequest : Tea.TeaModel {
    public var content: String?

    public var prompt: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunSummaryGenerateResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var eventInfo: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.eventInfo != nil {
                map["EventInfo"] = self.eventInfo!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["EventInfo"] as? String {
                self.eventInfo = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunSummaryGenerateResponseBody.Payload.Output?

        public var usage: RunSummaryGenerateResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunSummaryGenerateResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunSummaryGenerateResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var end: Bool?

    public var header: RunSummaryGenerateResponseBody.Header?

    public var payload: RunSummaryGenerateResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.end != nil {
            map["End"] = self.end!
        }
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["End"] as? Bool {
            self.end = value
        }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunSummaryGenerateResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunSummaryGenerateResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunSummaryGenerateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunSummaryGenerateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunSummaryGenerateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunTextPolishingRequest : Tea.TeaModel {
    public var content: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunTextPolishingResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var originSessionId: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.originSessionId != nil {
                map["OriginSessionId"] = self.originSessionId!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["OriginSessionId"] as? String {
                self.originSessionId = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunTextPolishingResponseBody.Payload.Output?

        public var usage: RunTextPolishingResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunTextPolishingResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunTextPolishingResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunTextPolishingResponseBody.Header?

    public var payload: RunTextPolishingResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunTextPolishingResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunTextPolishingResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunTextPolishingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunTextPolishingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunTextPolishingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunTitleGenerationRequest : Tea.TeaModel {
    public class ReferenceData : Tea.TeaModel {
        public var contents: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contents != nil {
                map["Contents"] = self.contents!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Contents"] as? [String] {
                self.contents = value
            }
        }
    }
    public var deduplicatedTitles: [String]?

    public var referenceData: RunTitleGenerationRequest.ReferenceData?

    public var taskId: String?

    public var titleCount: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.referenceData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deduplicatedTitles != nil {
            map["DeduplicatedTitles"] = self.deduplicatedTitles!
        }
        if self.referenceData != nil {
            map["ReferenceData"] = self.referenceData?.toMap()
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.titleCount != nil {
            map["TitleCount"] = self.titleCount!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeduplicatedTitles"] as? [String] {
            self.deduplicatedTitles = value
        }
        if let value = dict["ReferenceData"] as? [String: Any?] {
            var model = RunTitleGenerationRequest.ReferenceData()
            model.fromMap(value)
            self.referenceData = model
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TitleCount"] as? String {
            self.titleCount = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunTitleGenerationShrinkRequest : Tea.TeaModel {
    public var deduplicatedTitlesShrink: String?

    public var referenceDataShrink: String?

    public var taskId: String?

    public var titleCount: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deduplicatedTitlesShrink != nil {
            map["DeduplicatedTitles"] = self.deduplicatedTitlesShrink!
        }
        if self.referenceDataShrink != nil {
            map["ReferenceData"] = self.referenceDataShrink!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.titleCount != nil {
            map["TitleCount"] = self.titleCount!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeduplicatedTitles"] as? String {
            self.deduplicatedTitlesShrink = value
        }
        if let value = dict["ReferenceData"] as? String {
            self.referenceDataShrink = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TitleCount"] as? String {
            self.titleCount = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunTitleGenerationResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var sessionId: String?

        public var statusCode: Int32?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.statusCode != nil {
                map["StatusCode"] = self.statusCode!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["StatusCode"] as? Int32 {
                self.statusCode = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunTitleGenerationResponseBody.Payload.Output?

        public var usage: RunTitleGenerationResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunTitleGenerationResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunTitleGenerationResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var code: String?

    public var header: RunTitleGenerationResponseBody.Header?

    public var httpStatusCode: String?

    public var message: String?

    public var payload: RunTitleGenerationResponseBody.Payload?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunTitleGenerationResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["HttpStatusCode"] as? String {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunTitleGenerationResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RunTitleGenerationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunTitleGenerationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunTitleGenerationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunTranslateGenerationRequest : Tea.TeaModel {
    public class ReferenceData : Tea.TeaModel {
        public var contents: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contents != nil {
                map["Contents"] = self.contents!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Contents"] as? [String] {
                self.contents = value
            }
        }
    }
    public var prompt: String?

    public var referenceData: RunTranslateGenerationRequest.ReferenceData?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.referenceData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.referenceData != nil {
            map["ReferenceData"] = self.referenceData?.toMap()
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["ReferenceData"] as? [String: Any?] {
            var model = RunTranslateGenerationRequest.ReferenceData()
            model.fromMap(value)
            self.referenceData = model
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunTranslateGenerationShrinkRequest : Tea.TeaModel {
    public var prompt: String?

    public var referenceDataShrink: String?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.referenceDataShrink != nil {
            map["ReferenceData"] = self.referenceDataShrink!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["ReferenceData"] as? String {
            self.referenceDataShrink = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunTranslateGenerationResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunTranslateGenerationResponseBody.Payload.Output?

        public var usage: RunTranslateGenerationResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunTranslateGenerationResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunTranslateGenerationResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunTranslateGenerationResponseBody.Header?

    public var payload: RunTranslateGenerationResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunTranslateGenerationResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunTranslateGenerationResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunTranslateGenerationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunTranslateGenerationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunTranslateGenerationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunWriteToneGenerationRequest : Tea.TeaModel {
    public class ReferenceData : Tea.TeaModel {
        public var contents: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contents != nil {
                map["Contents"] = self.contents!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Contents"] as? [String] {
                self.contents = value
            }
        }
    }
    public var prompt: String?

    public var referenceData: RunWriteToneGenerationRequest.ReferenceData?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.referenceData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.referenceData != nil {
            map["ReferenceData"] = self.referenceData?.toMap()
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["ReferenceData"] as? [String: Any?] {
            var model = RunWriteToneGenerationRequest.ReferenceData()
            model.fromMap(value)
            self.referenceData = model
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunWriteToneGenerationShrinkRequest : Tea.TeaModel {
    public var prompt: String?

    public var referenceDataShrink: String?

    public var taskId: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.referenceDataShrink != nil {
            map["ReferenceData"] = self.referenceDataShrink!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["ReferenceData"] as? String {
            self.referenceDataShrink = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class RunWriteToneGenerationResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var sessionId: String?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunWriteToneGenerationResponseBody.Payload.Output?

        public var usage: RunWriteToneGenerationResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunWriteToneGenerationResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunWriteToneGenerationResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var header: RunWriteToneGenerationResponseBody.Header?

    public var payload: RunWriteToneGenerationResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunWriteToneGenerationResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunWriteToneGenerationResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunWriteToneGenerationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunWriteToneGenerationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunWriteToneGenerationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunWritingRequest : Tea.TeaModel {
    public class ReferenceData : Tea.TeaModel {
        public class Articles : Tea.TeaModel {
            public var author: String?

            public var content: String?

            public var docId: String?

            public var docUuid: String?

            public var pubTime: String?

            public var source: String?

            public var summary: String?

            public var tag: String?

            public var title: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.author != nil {
                    map["Author"] = self.author!
                }
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.docId != nil {
                    map["DocId"] = self.docId!
                }
                if self.docUuid != nil {
                    map["DocUuid"] = self.docUuid!
                }
                if self.pubTime != nil {
                    map["PubTime"] = self.pubTime!
                }
                if self.source != nil {
                    map["Source"] = self.source!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Author"] as? String {
                    self.author = value
                }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["DocId"] as? String {
                    self.docId = value
                }
                if let value = dict["DocUuid"] as? String {
                    self.docUuid = value
                }
                if let value = dict["PubTime"] as? String {
                    self.pubTime = value
                }
                if let value = dict["Source"] as? String {
                    self.source = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var articles: [RunWritingRequest.ReferenceData.Articles]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.articles != nil {
                var tmp : [Any] = []
                for k in self.articles! {
                    tmp.append(k.toMap())
                }
                map["Articles"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Articles"] as? [Any?] {
                var tmp : [RunWritingRequest.ReferenceData.Articles] = []
                for v in value {
                    if v != nil {
                        var model = RunWritingRequest.ReferenceData.Articles()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.articles = tmp
            }
        }
    }
    public class WritingConfig : Tea.TeaModel {
        public class PromptTag : Tea.TeaModel {
            public var necessaryTips: String?

            public var position: String?

            public var reverseWords: String?

            public var theme: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.necessaryTips != nil {
                    map["NecessaryTips"] = self.necessaryTips!
                }
                if self.position != nil {
                    map["Position"] = self.position!
                }
                if self.reverseWords != nil {
                    map["ReverseWords"] = self.reverseWords!
                }
                if self.theme != nil {
                    map["Theme"] = self.theme!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NecessaryTips"] as? String {
                    self.necessaryTips = value
                }
                if let value = dict["Position"] as? String {
                    self.position = value
                }
                if let value = dict["ReverseWords"] as? String {
                    self.reverseWords = value
                }
                if let value = dict["Theme"] as? String {
                    self.theme = value
                }
            }
        }
        public class Tags : Tea.TeaModel {
            public var keyword: String?

            public var tag: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.keyword != nil {
                    map["Keyword"] = self.keyword!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Keyword"] as? String {
                    self.keyword = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
            }
        }
        public var domain: String?

        public var promptTag: RunWritingRequest.WritingConfig.PromptTag?

        public var tags: [RunWritingRequest.WritingConfig.Tags]?

        public var useSearch: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.promptTag?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.promptTag != nil {
                map["PromptTag"] = self.promptTag?.toMap()
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            if self.useSearch != nil {
                map["UseSearch"] = self.useSearch!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["PromptTag"] as? [String: Any?] {
                var model = RunWritingRequest.WritingConfig.PromptTag()
                model.fromMap(value)
                self.promptTag = model
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [RunWritingRequest.WritingConfig.Tags] = []
                for v in value {
                    if v != nil {
                        var model = RunWritingRequest.WritingConfig.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
            if let value = dict["UseSearch"] as? Bool {
                self.useSearch = value
            }
        }
    }
    public var originSessionId: String?

    public var prompt: String?

    public var referenceData: RunWritingRequest.ReferenceData?

    public var sessionId: String?

    public var taskId: String?

    public var workspaceId: String?

    public var writingConfig: RunWritingRequest.WritingConfig?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.referenceData?.validate()
        try self.writingConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.originSessionId != nil {
            map["OriginSessionId"] = self.originSessionId!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.referenceData != nil {
            map["ReferenceData"] = self.referenceData?.toMap()
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        if self.writingConfig != nil {
            map["WritingConfig"] = self.writingConfig?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OriginSessionId"] as? String {
            self.originSessionId = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["ReferenceData"] as? [String: Any?] {
            var model = RunWritingRequest.ReferenceData()
            model.fromMap(value)
            self.referenceData = model
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
        if let value = dict["WritingConfig"] as? [String: Any?] {
            var model = RunWritingRequest.WritingConfig()
            model.fromMap(value)
            self.writingConfig = model
        }
    }
}

public class RunWritingShrinkRequest : Tea.TeaModel {
    public var originSessionId: String?

    public var prompt: String?

    public var referenceDataShrink: String?

    public var sessionId: String?

    public var taskId: String?

    public var workspaceId: String?

    public var writingConfigShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.originSessionId != nil {
            map["OriginSessionId"] = self.originSessionId!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.referenceDataShrink != nil {
            map["ReferenceData"] = self.referenceDataShrink!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        if self.writingConfigShrink != nil {
            map["WritingConfig"] = self.writingConfigShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OriginSessionId"] as? String {
            self.originSessionId = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["ReferenceData"] as? String {
            self.referenceDataShrink = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
        if let value = dict["WritingConfig"] as? String {
            self.writingConfigShrink = value
        }
    }
}

public class RunWritingResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var originSessionId: String?

        public var sessionId: String?

        public var statusCode: Int32?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.originSessionId != nil {
                map["OriginSessionId"] = self.originSessionId!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.statusCode != nil {
                map["StatusCode"] = self.statusCode!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["OriginSessionId"] as? String {
                self.originSessionId = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["StatusCode"] as? Int32 {
                self.statusCode = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public class Articles : Tea.TeaModel {
                public var author: String?

                public var content: String?

                public var docId: String?

                public var docUuid: String?

                public var pubTime: String?

                public var source: String?

                public var summary: String?

                public var tag: String?

                public var title: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.author != nil {
                        map["Author"] = self.author!
                    }
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.docId != nil {
                        map["DocId"] = self.docId!
                    }
                    if self.docUuid != nil {
                        map["DocUuid"] = self.docUuid!
                    }
                    if self.pubTime != nil {
                        map["PubTime"] = self.pubTime!
                    }
                    if self.source != nil {
                        map["Source"] = self.source!
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    if self.tag != nil {
                        map["Tag"] = self.tag!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Author"] as? String {
                        self.author = value
                    }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["DocId"] as? String {
                        self.docId = value
                    }
                    if let value = dict["DocUuid"] as? String {
                        self.docUuid = value
                    }
                    if let value = dict["PubTime"] as? String {
                        self.pubTime = value
                    }
                    if let value = dict["Source"] as? String {
                        self.source = value
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                    if let value = dict["Tag"] as? String {
                        self.tag = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var articles: [RunWritingResponseBody.Payload.Output.Articles]?

            public var miniDoc: [String]?

            public var searchQuery: String?

            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.articles != nil {
                    var tmp : [Any] = []
                    for k in self.articles! {
                        tmp.append(k.toMap())
                    }
                    map["Articles"] = tmp
                }
                if self.miniDoc != nil {
                    map["MiniDoc"] = self.miniDoc!
                }
                if self.searchQuery != nil {
                    map["SearchQuery"] = self.searchQuery!
                }
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Articles"] as? [Any?] {
                    var tmp : [RunWritingResponseBody.Payload.Output.Articles] = []
                    for v in value {
                        if v != nil {
                            var model = RunWritingResponseBody.Payload.Output.Articles()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.articles = tmp
                }
                if let value = dict["MiniDoc"] as? [String] {
                    self.miniDoc = value
                }
                if let value = dict["SearchQuery"] as? String {
                    self.searchQuery = value
                }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var tokenMap: [String: Int64]?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.tokenMap != nil {
                    map["TokenMap"] = self.tokenMap!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TokenMap"] as? [String: Int64] {
                    self.tokenMap = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunWritingResponseBody.Payload.Output?

        public var usage: RunWritingResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunWritingResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunWritingResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var end: Bool?

    public var header: RunWritingResponseBody.Header?

    public var payload: RunWritingResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.end != nil {
            map["End"] = self.end!
        }
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["End"] as? Bool {
            self.end = value
        }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunWritingResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunWritingResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunWritingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunWritingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunWritingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RunWritingV2Request : Tea.TeaModel {
    public class Articles : Tea.TeaModel {
        public var content: String?

        public var pubTime: String?

        public var searchSourceName: String?

        public var source: String?

        public var title: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.pubTime != nil {
                map["PubTime"] = self.pubTime!
            }
            if self.searchSourceName != nil {
                map["SearchSourceName"] = self.searchSourceName!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["PubTime"] as? String {
                self.pubTime = value
            }
            if let value = dict["SearchSourceName"] as? String {
                self.searchSourceName = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public class MiniDocs : Tea.TeaModel {
        public var content: String?

        public var index: String?

        public var star: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.index != nil {
                map["Index"] = self.index!
            }
            if self.star != nil {
                map["Star"] = self.star!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["Index"] as? String {
                self.index = value
            }
            if let value = dict["Star"] as? Bool {
                self.star = value
            }
        }
    }
    public class Outlines : Tea.TeaModel {
        public class Articles : Tea.TeaModel {
            public var content: String?

            public var title: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var articles: [RunWritingV2Request.Outlines.Articles]?

        public var outline: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.articles != nil {
                var tmp : [Any] = []
                for k in self.articles! {
                    tmp.append(k.toMap())
                }
                map["Articles"] = tmp
            }
            if self.outline != nil {
                map["Outline"] = self.outline!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Articles"] as? [Any?] {
                var tmp : [RunWritingV2Request.Outlines.Articles] = []
                for v in value {
                    if v != nil {
                        var model = RunWritingV2Request.Outlines.Articles()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.articles = tmp
            }
            if let value = dict["Outline"] as? String {
                self.outline = value
            }
        }
    }
    public class SearchSources : Tea.TeaModel {
        public var code: String?

        public var datasetName: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.datasetName != nil {
                map["DatasetName"] = self.datasetName!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["DatasetName"] as? String {
                self.datasetName = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public class Summarization : Tea.TeaModel {
        public var event: String?

        public var message: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.message != nil {
                map["Message"] = self.message!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["Message"] as? String {
                self.message = value
            }
        }
    }
    public var articles: [RunWritingV2Request.Articles]?

    public var distributeWriting: Bool?

    public var gcNumberSize: Int32?

    public var gcNumberSizeTag: String?

    public var keywords: [String]?

    public var language: String?

    public var miniDocs: [RunWritingV2Request.MiniDocs]?

    public var outlines: [RunWritingV2Request.Outlines]?

    public var prompt: String?

    public var promptMode: String?

    public var searchSources: [RunWritingV2Request.SearchSources]?

    public var sessionId: String?

    public var step: String?

    public var summarization: [RunWritingV2Request.Summarization]?

    public var taskId: String?

    public var useSearch: Bool?

    public var workspaceId: String?

    public var writingParams: [String: String]?

    public var writingScene: String?

    public var writingStyle: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.articles != nil {
            var tmp : [Any] = []
            for k in self.articles! {
                tmp.append(k.toMap())
            }
            map["Articles"] = tmp
        }
        if self.distributeWriting != nil {
            map["DistributeWriting"] = self.distributeWriting!
        }
        if self.gcNumberSize != nil {
            map["GcNumberSize"] = self.gcNumberSize!
        }
        if self.gcNumberSizeTag != nil {
            map["GcNumberSizeTag"] = self.gcNumberSizeTag!
        }
        if self.keywords != nil {
            map["Keywords"] = self.keywords!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.miniDocs != nil {
            var tmp : [Any] = []
            for k in self.miniDocs! {
                tmp.append(k.toMap())
            }
            map["MiniDocs"] = tmp
        }
        if self.outlines != nil {
            var tmp : [Any] = []
            for k in self.outlines! {
                tmp.append(k.toMap())
            }
            map["Outlines"] = tmp
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.promptMode != nil {
            map["PromptMode"] = self.promptMode!
        }
        if self.searchSources != nil {
            var tmp : [Any] = []
            for k in self.searchSources! {
                tmp.append(k.toMap())
            }
            map["SearchSources"] = tmp
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.step != nil {
            map["Step"] = self.step!
        }
        if self.summarization != nil {
            var tmp : [Any] = []
            for k in self.summarization! {
                tmp.append(k.toMap())
            }
            map["Summarization"] = tmp
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.useSearch != nil {
            map["UseSearch"] = self.useSearch!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        if self.writingParams != nil {
            map["WritingParams"] = self.writingParams!
        }
        if self.writingScene != nil {
            map["WritingScene"] = self.writingScene!
        }
        if self.writingStyle != nil {
            map["WritingStyle"] = self.writingStyle!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Articles"] as? [Any?] {
            var tmp : [RunWritingV2Request.Articles] = []
            for v in value {
                if v != nil {
                    var model = RunWritingV2Request.Articles()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.articles = tmp
        }
        if let value = dict["DistributeWriting"] as? Bool {
            self.distributeWriting = value
        }
        if let value = dict["GcNumberSize"] as? Int32 {
            self.gcNumberSize = value
        }
        if let value = dict["GcNumberSizeTag"] as? String {
            self.gcNumberSizeTag = value
        }
        if let value = dict["Keywords"] as? [String] {
            self.keywords = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["MiniDocs"] as? [Any?] {
            var tmp : [RunWritingV2Request.MiniDocs] = []
            for v in value {
                if v != nil {
                    var model = RunWritingV2Request.MiniDocs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.miniDocs = tmp
        }
        if let value = dict["Outlines"] as? [Any?] {
            var tmp : [RunWritingV2Request.Outlines] = []
            for v in value {
                if v != nil {
                    var model = RunWritingV2Request.Outlines()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.outlines = tmp
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["PromptMode"] as? String {
            self.promptMode = value
        }
        if let value = dict["SearchSources"] as? [Any?] {
            var tmp : [RunWritingV2Request.SearchSources] = []
            for v in value {
                if v != nil {
                    var model = RunWritingV2Request.SearchSources()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.searchSources = tmp
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["Step"] as? String {
            self.step = value
        }
        if let value = dict["Summarization"] as? [Any?] {
            var tmp : [RunWritingV2Request.Summarization] = []
            for v in value {
                if v != nil {
                    var model = RunWritingV2Request.Summarization()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.summarization = tmp
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["UseSearch"] as? Bool {
            self.useSearch = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
        if let value = dict["WritingParams"] as? [String: String] {
            self.writingParams = value
        }
        if let value = dict["WritingScene"] as? String {
            self.writingScene = value
        }
        if let value = dict["WritingStyle"] as? String {
            self.writingStyle = value
        }
    }
}

public class RunWritingV2ShrinkRequest : Tea.TeaModel {
    public var articlesShrink: String?

    public var distributeWriting: Bool?

    public var gcNumberSize: Int32?

    public var gcNumberSizeTag: String?

    public var keywordsShrink: String?

    public var language: String?

    public var miniDocsShrink: String?

    public var outlinesShrink: String?

    public var prompt: String?

    public var promptMode: String?

    public var searchSourcesShrink: String?

    public var sessionId: String?

    public var step: String?

    public var summarizationShrink: String?

    public var taskId: String?

    public var useSearch: Bool?

    public var workspaceId: String?

    public var writingParamsShrink: String?

    public var writingScene: String?

    public var writingStyle: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.articlesShrink != nil {
            map["Articles"] = self.articlesShrink!
        }
        if self.distributeWriting != nil {
            map["DistributeWriting"] = self.distributeWriting!
        }
        if self.gcNumberSize != nil {
            map["GcNumberSize"] = self.gcNumberSize!
        }
        if self.gcNumberSizeTag != nil {
            map["GcNumberSizeTag"] = self.gcNumberSizeTag!
        }
        if self.keywordsShrink != nil {
            map["Keywords"] = self.keywordsShrink!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.miniDocsShrink != nil {
            map["MiniDocs"] = self.miniDocsShrink!
        }
        if self.outlinesShrink != nil {
            map["Outlines"] = self.outlinesShrink!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.promptMode != nil {
            map["PromptMode"] = self.promptMode!
        }
        if self.searchSourcesShrink != nil {
            map["SearchSources"] = self.searchSourcesShrink!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.step != nil {
            map["Step"] = self.step!
        }
        if self.summarizationShrink != nil {
            map["Summarization"] = self.summarizationShrink!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.useSearch != nil {
            map["UseSearch"] = self.useSearch!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        if self.writingParamsShrink != nil {
            map["WritingParams"] = self.writingParamsShrink!
        }
        if self.writingScene != nil {
            map["WritingScene"] = self.writingScene!
        }
        if self.writingStyle != nil {
            map["WritingStyle"] = self.writingStyle!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Articles"] as? String {
            self.articlesShrink = value
        }
        if let value = dict["DistributeWriting"] as? Bool {
            self.distributeWriting = value
        }
        if let value = dict["GcNumberSize"] as? Int32 {
            self.gcNumberSize = value
        }
        if let value = dict["GcNumberSizeTag"] as? String {
            self.gcNumberSizeTag = value
        }
        if let value = dict["Keywords"] as? String {
            self.keywordsShrink = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["MiniDocs"] as? String {
            self.miniDocsShrink = value
        }
        if let value = dict["Outlines"] as? String {
            self.outlinesShrink = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["PromptMode"] as? String {
            self.promptMode = value
        }
        if let value = dict["SearchSources"] as? String {
            self.searchSourcesShrink = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["Step"] as? String {
            self.step = value
        }
        if let value = dict["Summarization"] as? String {
            self.summarizationShrink = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["UseSearch"] as? Bool {
            self.useSearch = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
        if let value = dict["WritingParams"] as? String {
            self.writingParamsShrink = value
        }
        if let value = dict["WritingScene"] as? String {
            self.writingScene = value
        }
        if let value = dict["WritingStyle"] as? String {
            self.writingStyle = value
        }
    }
}

public class RunWritingV2ResponseBody : Tea.TeaModel {
    public class Header : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var event: String?

        public var originSessionId: String?

        public var sessionId: String?

        public var statusCode: Int32?

        public var taskId: String?

        public var traceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.event != nil {
                map["Event"] = self.event!
            }
            if self.originSessionId != nil {
                map["OriginSessionId"] = self.originSessionId!
            }
            if self.sessionId != nil {
                map["SessionId"] = self.sessionId!
            }
            if self.statusCode != nil {
                map["StatusCode"] = self.statusCode!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.traceId != nil {
                map["TraceId"] = self.traceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Event"] as? String {
                self.event = value
            }
            if let value = dict["OriginSessionId"] as? String {
                self.originSessionId = value
            }
            if let value = dict["SessionId"] as? String {
                self.sessionId = value
            }
            if let value = dict["StatusCode"] as? Int32 {
                self.statusCode = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TraceId"] as? String {
                self.traceId = value
            }
        }
    }
    public class Payload : Tea.TeaModel {
        public class Output : Tea.TeaModel {
            public class Articles : Tea.TeaModel {
                public var author: String?

                public var content: String?

                public var docId: String?

                public var docUuid: String?

                public var pubTime: String?

                public var source: String?

                public var summary: String?

                public var tag: String?

                public var title: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.author != nil {
                        map["Author"] = self.author!
                    }
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.docId != nil {
                        map["DocId"] = self.docId!
                    }
                    if self.docUuid != nil {
                        map["DocUuid"] = self.docUuid!
                    }
                    if self.pubTime != nil {
                        map["PubTime"] = self.pubTime!
                    }
                    if self.source != nil {
                        map["Source"] = self.source!
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    if self.tag != nil {
                        map["Tag"] = self.tag!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Author"] as? String {
                        self.author = value
                    }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["DocId"] as? String {
                        self.docId = value
                    }
                    if let value = dict["DocUuid"] as? String {
                        self.docUuid = value
                    }
                    if let value = dict["PubTime"] as? String {
                        self.pubTime = value
                    }
                    if let value = dict["Source"] as? String {
                        self.source = value
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                    if let value = dict["Tag"] as? String {
                        self.tag = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var articles: [RunWritingV2ResponseBody.Payload.Output.Articles]?

            public var miniDoc: [String]?

            public var searchQuery: String?

            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.articles != nil {
                    var tmp : [Any] = []
                    for k in self.articles! {
                        tmp.append(k.toMap())
                    }
                    map["Articles"] = tmp
                }
                if self.miniDoc != nil {
                    map["MiniDoc"] = self.miniDoc!
                }
                if self.searchQuery != nil {
                    map["SearchQuery"] = self.searchQuery!
                }
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Articles"] as? [Any?] {
                    var tmp : [RunWritingV2ResponseBody.Payload.Output.Articles] = []
                    for v in value {
                        if v != nil {
                            var model = RunWritingV2ResponseBody.Payload.Output.Articles()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.articles = tmp
                }
                if let value = dict["MiniDoc"] as? [String] {
                    self.miniDoc = value
                }
                if let value = dict["SearchQuery"] as? String {
                    self.searchQuery = value
                }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Usage : Tea.TeaModel {
            public var inputTokens: Int64?

            public var outputTokens: Int64?

            public var tokenMap: [String: Int64]?

            public var totalTokens: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputTokens != nil {
                    map["InputTokens"] = self.inputTokens!
                }
                if self.outputTokens != nil {
                    map["OutputTokens"] = self.outputTokens!
                }
                if self.tokenMap != nil {
                    map["TokenMap"] = self.tokenMap!
                }
                if self.totalTokens != nil {
                    map["TotalTokens"] = self.totalTokens!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputTokens"] as? Int64 {
                    self.inputTokens = value
                }
                if let value = dict["OutputTokens"] as? Int64 {
                    self.outputTokens = value
                }
                if let value = dict["TokenMap"] as? [String: Int64] {
                    self.tokenMap = value
                }
                if let value = dict["TotalTokens"] as? Int64 {
                    self.totalTokens = value
                }
            }
        }
        public var output: RunWritingV2ResponseBody.Payload.Output?

        public var usage: RunWritingV2ResponseBody.Payload.Usage?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.output?.validate()
            try self.usage?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.output != nil {
                map["Output"] = self.output?.toMap()
            }
            if self.usage != nil {
                map["Usage"] = self.usage?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Output"] as? [String: Any?] {
                var model = RunWritingV2ResponseBody.Payload.Output()
                model.fromMap(value)
                self.output = model
            }
            if let value = dict["Usage"] as? [String: Any?] {
                var model = RunWritingV2ResponseBody.Payload.Usage()
                model.fromMap(value)
                self.usage = model
            }
        }
    }
    public var end: Bool?

    public var header: RunWritingV2ResponseBody.Header?

    public var payload: RunWritingV2ResponseBody.Payload?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.header?.validate()
        try self.payload?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.end != nil {
            map["End"] = self.end!
        }
        if self.header != nil {
            map["Header"] = self.header?.toMap()
        }
        if self.payload != nil {
            map["Payload"] = self.payload?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["End"] as? Bool {
            self.end = value
        }
        if let value = dict["Header"] as? [String: Any?] {
            var model = RunWritingV2ResponseBody.Header()
            model.fromMap(value)
            self.header = model
        }
        if let value = dict["Payload"] as? [String: Any?] {
            var model = RunWritingV2ResponseBody.Payload()
            model.fromMap(value)
            self.payload = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RunWritingV2Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RunWritingV2ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RunWritingV2ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveCustomTextRequest : Tea.TeaModel {
    public var agentKey: String?

    public var commodityCode: String?

    public var content: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class SaveCustomTextResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SaveCustomTextResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveCustomTextResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveCustomTextResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveDataSourceOrderConfigRequest : Tea.TeaModel {
    public class UserConfigDataSourceList : Tea.TeaModel {
        public var code: String?

        public var enable: Bool?

        public var name: String?

        public var number: Int32?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.enable != nil {
                map["Enable"] = self.enable!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.number != nil {
                map["Number"] = self.number!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["Enable"] as? Bool {
                self.enable = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Number"] as? Int32 {
                self.number = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var agentKey: String?

    public var generateTechnology: String?

    public var productCode: String?

    public var userConfigDataSourceList: [SaveDataSourceOrderConfigRequest.UserConfigDataSourceList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.generateTechnology != nil {
            map["GenerateTechnology"] = self.generateTechnology!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.userConfigDataSourceList != nil {
            var tmp : [Any] = []
            for k in self.userConfigDataSourceList! {
                tmp.append(k.toMap())
            }
            map["UserConfigDataSourceList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["GenerateTechnology"] as? String {
            self.generateTechnology = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["UserConfigDataSourceList"] as? [Any?] {
            var tmp : [SaveDataSourceOrderConfigRequest.UserConfigDataSourceList] = []
            for v in value {
                if v != nil {
                    var model = SaveDataSourceOrderConfigRequest.UserConfigDataSourceList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.userConfigDataSourceList = tmp
        }
    }
}

public class SaveDataSourceOrderConfigShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var generateTechnology: String?

    public var productCode: String?

    public var userConfigDataSourceListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.generateTechnology != nil {
            map["GenerateTechnology"] = self.generateTechnology!
        }
        if self.productCode != nil {
            map["ProductCode"] = self.productCode!
        }
        if self.userConfigDataSourceListShrink != nil {
            map["UserConfigDataSourceList"] = self.userConfigDataSourceListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["GenerateTechnology"] as? String {
            self.generateTechnology = value
        }
        if let value = dict["ProductCode"] as? String {
            self.productCode = value
        }
        if let value = dict["UserConfigDataSourceList"] as? String {
            self.userConfigDataSourceListShrink = value
        }
    }
}

public class SaveDataSourceOrderConfigResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SaveDataSourceOrderConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveDataSourceOrderConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveDataSourceOrderConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveMaterialDocumentRequest : Tea.TeaModel {
    public var agentKey: String?

    public var author: String?

    public var bothSavePrivateAndShare: Bool?

    public var docKeywords: [String]?

    public var docType: String?

    public var externalUrl: String?

    public var htmlContent: String?

    public var pubTime: String?

    public var shareAttr: Int32?

    public var srcFrom: String?

    public var summary: String?

    public var textContent: String?

    public var title: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.author != nil {
            map["Author"] = self.author!
        }
        if self.bothSavePrivateAndShare != nil {
            map["BothSavePrivateAndShare"] = self.bothSavePrivateAndShare!
        }
        if self.docKeywords != nil {
            map["DocKeywords"] = self.docKeywords!
        }
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.externalUrl != nil {
            map["ExternalUrl"] = self.externalUrl!
        }
        if self.htmlContent != nil {
            map["HtmlContent"] = self.htmlContent!
        }
        if self.pubTime != nil {
            map["PubTime"] = self.pubTime!
        }
        if self.shareAttr != nil {
            map["ShareAttr"] = self.shareAttr!
        }
        if self.srcFrom != nil {
            map["SrcFrom"] = self.srcFrom!
        }
        if self.summary != nil {
            map["Summary"] = self.summary!
        }
        if self.textContent != nil {
            map["TextContent"] = self.textContent!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Author"] as? String {
            self.author = value
        }
        if let value = dict["BothSavePrivateAndShare"] as? Bool {
            self.bothSavePrivateAndShare = value
        }
        if let value = dict["DocKeywords"] as? [String] {
            self.docKeywords = value
        }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["ExternalUrl"] as? String {
            self.externalUrl = value
        }
        if let value = dict["HtmlContent"] as? String {
            self.htmlContent = value
        }
        if let value = dict["PubTime"] as? String {
            self.pubTime = value
        }
        if let value = dict["ShareAttr"] as? Int32 {
            self.shareAttr = value
        }
        if let value = dict["SrcFrom"] as? String {
            self.srcFrom = value
        }
        if let value = dict["Summary"] as? String {
            self.summary = value
        }
        if let value = dict["TextContent"] as? String {
            self.textContent = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class SaveMaterialDocumentShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var author: String?

    public var bothSavePrivateAndShare: Bool?

    public var docKeywordsShrink: String?

    public var docType: String?

    public var externalUrl: String?

    public var htmlContent: String?

    public var pubTime: String?

    public var shareAttr: Int32?

    public var srcFrom: String?

    public var summary: String?

    public var textContent: String?

    public var title: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.author != nil {
            map["Author"] = self.author!
        }
        if self.bothSavePrivateAndShare != nil {
            map["BothSavePrivateAndShare"] = self.bothSavePrivateAndShare!
        }
        if self.docKeywordsShrink != nil {
            map["DocKeywords"] = self.docKeywordsShrink!
        }
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.externalUrl != nil {
            map["ExternalUrl"] = self.externalUrl!
        }
        if self.htmlContent != nil {
            map["HtmlContent"] = self.htmlContent!
        }
        if self.pubTime != nil {
            map["PubTime"] = self.pubTime!
        }
        if self.shareAttr != nil {
            map["ShareAttr"] = self.shareAttr!
        }
        if self.srcFrom != nil {
            map["SrcFrom"] = self.srcFrom!
        }
        if self.summary != nil {
            map["Summary"] = self.summary!
        }
        if self.textContent != nil {
            map["TextContent"] = self.textContent!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Author"] as? String {
            self.author = value
        }
        if let value = dict["BothSavePrivateAndShare"] as? Bool {
            self.bothSavePrivateAndShare = value
        }
        if let value = dict["DocKeywords"] as? String {
            self.docKeywordsShrink = value
        }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["ExternalUrl"] as? String {
            self.externalUrl = value
        }
        if let value = dict["HtmlContent"] as? String {
            self.htmlContent = value
        }
        if let value = dict["PubTime"] as? String {
            self.pubTime = value
        }
        if let value = dict["ShareAttr"] as? Int32 {
            self.shareAttr = value
        }
        if let value = dict["SrcFrom"] as? String {
            self.srcFrom = value
        }
        if let value = dict["Summary"] as? String {
            self.summary = value
        }
        if let value = dict["TextContent"] as? String {
            self.textContent = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class SaveMaterialDocumentResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SaveMaterialDocumentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveMaterialDocumentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveMaterialDocumentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveStyleLearningResultRequest : Tea.TeaModel {
    public var agentKey: String?

    public var aigcResult: String?

    public var customTextIdList: [Int64]?

    public var materialIdList: [Int64]?

    public var rewriteResult: String?

    public var styleName: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.aigcResult != nil {
            map["AigcResult"] = self.aigcResult!
        }
        if self.customTextIdList != nil {
            map["CustomTextIdList"] = self.customTextIdList!
        }
        if self.materialIdList != nil {
            map["MaterialIdList"] = self.materialIdList!
        }
        if self.rewriteResult != nil {
            map["RewriteResult"] = self.rewriteResult!
        }
        if self.styleName != nil {
            map["StyleName"] = self.styleName!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["AigcResult"] as? String {
            self.aigcResult = value
        }
        if let value = dict["CustomTextIdList"] as? [Int64] {
            self.customTextIdList = value
        }
        if let value = dict["MaterialIdList"] as? [Int64] {
            self.materialIdList = value
        }
        if let value = dict["RewriteResult"] as? String {
            self.rewriteResult = value
        }
        if let value = dict["StyleName"] as? String {
            self.styleName = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class SaveStyleLearningResultShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var aigcResult: String?

    public var customTextIdListShrink: String?

    public var materialIdListShrink: String?

    public var rewriteResult: String?

    public var styleName: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.aigcResult != nil {
            map["AigcResult"] = self.aigcResult!
        }
        if self.customTextIdListShrink != nil {
            map["CustomTextIdList"] = self.customTextIdListShrink!
        }
        if self.materialIdListShrink != nil {
            map["MaterialIdList"] = self.materialIdListShrink!
        }
        if self.rewriteResult != nil {
            map["RewriteResult"] = self.rewriteResult!
        }
        if self.styleName != nil {
            map["StyleName"] = self.styleName!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["AigcResult"] as? String {
            self.aigcResult = value
        }
        if let value = dict["CustomTextIdList"] as? String {
            self.customTextIdListShrink = value
        }
        if let value = dict["MaterialIdList"] as? String {
            self.materialIdListShrink = value
        }
        if let value = dict["RewriteResult"] as? String {
            self.rewriteResult = value
        }
        if let value = dict["StyleName"] as? String {
            self.styleName = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class SaveStyleLearningResultResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SaveStyleLearningResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveStyleLearningResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveStyleLearningResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchDatasetDocumentsRequest : Tea.TeaModel {
    public var datasetId: Int64?

    public var datasetName: String?

    public var extend1: String?

    public var includeContent: Bool?

    public var pageSize: String?

    public var query: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.extend1 != nil {
            map["Extend1"] = self.extend1!
        }
        if self.includeContent != nil {
            map["IncludeContent"] = self.includeContent!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["Extend1"] as? String {
            self.extend1 = value
        }
        if let value = dict["IncludeContent"] as? Bool {
            self.includeContent = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class SearchDatasetDocumentsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Documents : Tea.TeaModel {
            public var content: String?

            public var docId: String?

            public var docUuid: String?

            public var pubTime: String?

            public var sourceFrom: String?

            public var summary: String?

            public var title: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.docId != nil {
                    map["DocId"] = self.docId!
                }
                if self.docUuid != nil {
                    map["DocUuid"] = self.docUuid!
                }
                if self.pubTime != nil {
                    map["PubTime"] = self.pubTime!
                }
                if self.sourceFrom != nil {
                    map["SourceFrom"] = self.sourceFrom!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["DocId"] as? String {
                    self.docId = value
                }
                if let value = dict["DocUuid"] as? String {
                    self.docUuid = value
                }
                if let value = dict["PubTime"] as? String {
                    self.pubTime = value
                }
                if let value = dict["SourceFrom"] as? String {
                    self.sourceFrom = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var documents: [SearchDatasetDocumentsResponseBody.Data.Documents]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.documents != nil {
                var tmp : [Any] = []
                for k in self.documents! {
                    tmp.append(k.toMap())
                }
                map["Documents"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Documents"] as? [Any?] {
                var tmp : [SearchDatasetDocumentsResponseBody.Data.Documents] = []
                for v in value {
                    if v != nil {
                        var model = SearchDatasetDocumentsResponseBody.Data.Documents()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.documents = tmp
            }
        }
    }
    public var code: String?

    public var data: SearchDatasetDocumentsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SearchDatasetDocumentsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SearchDatasetDocumentsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchDatasetDocumentsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchDatasetDocumentsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchNewsRequest : Tea.TeaModel {
    public var agentKey: String?

    public var filterNotNull: Bool?

    public var includeContent: Bool?

    public var page: Int32?

    public var pageSize: Int32?

    public var query: String?

    public var searchSources: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.filterNotNull != nil {
            map["FilterNotNull"] = self.filterNotNull!
        }
        if self.includeContent != nil {
            map["IncludeContent"] = self.includeContent!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.searchSources != nil {
            map["SearchSources"] = self.searchSources!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["FilterNotNull"] as? Bool {
            self.filterNotNull = value
        }
        if let value = dict["IncludeContent"] as? Bool {
            self.includeContent = value
        }
        if let value = dict["Page"] as? Int32 {
            self.page = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["SearchSources"] as? [String] {
            self.searchSources = value
        }
    }
}

public class SearchNewsShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var filterNotNull: Bool?

    public var includeContent: Bool?

    public var page: Int32?

    public var pageSize: Int32?

    public var query: String?

    public var searchSourcesShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.filterNotNull != nil {
            map["FilterNotNull"] = self.filterNotNull!
        }
        if self.includeContent != nil {
            map["IncludeContent"] = self.includeContent!
        }
        if self.page != nil {
            map["Page"] = self.page!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.query != nil {
            map["Query"] = self.query!
        }
        if self.searchSourcesShrink != nil {
            map["SearchSources"] = self.searchSourcesShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["FilterNotNull"] as? Bool {
            self.filterNotNull = value
        }
        if let value = dict["IncludeContent"] as? Bool {
            self.includeContent = value
        }
        if let value = dict["Page"] as? Int32 {
            self.page = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Query"] as? String {
            self.query = value
        }
        if let value = dict["SearchSources"] as? String {
            self.searchSourcesShrink = value
        }
    }
}

public class SearchNewsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var author: String?

        public var content: String?

        public var docUuid: String?

        public var imageUrls: [String]?

        public var pubTime: String?

        public var searchSource: String?

        public var searchSourceName: String?

        public var source: String?

        public var summary: String?

        public var tag: String?

        public var title: String?

        public var updateTime: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.author != nil {
                map["Author"] = self.author!
            }
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.docUuid != nil {
                map["DocUuid"] = self.docUuid!
            }
            if self.imageUrls != nil {
                map["ImageUrls"] = self.imageUrls!
            }
            if self.pubTime != nil {
                map["PubTime"] = self.pubTime!
            }
            if self.searchSource != nil {
                map["SearchSource"] = self.searchSource!
            }
            if self.searchSourceName != nil {
                map["SearchSourceName"] = self.searchSourceName!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.tag != nil {
                map["Tag"] = self.tag!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Author"] as? String {
                self.author = value
            }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["DocUuid"] as? String {
                self.docUuid = value
            }
            if let value = dict["ImageUrls"] as? [String] {
                self.imageUrls = value
            }
            if let value = dict["PubTime"] as? String {
                self.pubTime = value
            }
            if let value = dict["SearchSource"] as? String {
                self.searchSource = value
            }
            if let value = dict["SearchSourceName"] as? String {
                self.searchSourceName = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["Tag"] as? String {
                self.tag = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var code: String?

    public var current: Int32?

    public var data: [SearchNewsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var size: Int32?

    public var success: Bool?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.current != nil {
            map["Current"] = self.current!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Current"] as? Int32 {
            self.current = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [SearchNewsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = SearchNewsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Size"] as? Int32 {
            self.size = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class SearchNewsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchNewsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchNewsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitAsyncTaskRequest : Tea.TeaModel {
    public var agentKey: String?

    public var taskCode: String?

    public var taskExecuteTime: String?

    public var taskName: String?

    public var taskParam: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.taskCode != nil {
            map["TaskCode"] = self.taskCode!
        }
        if self.taskExecuteTime != nil {
            map["TaskExecuteTime"] = self.taskExecuteTime!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.taskParam != nil {
            map["TaskParam"] = self.taskParam!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["TaskCode"] as? String {
            self.taskCode = value
        }
        if let value = dict["TaskExecuteTime"] as? String {
            self.taskExecuteTime = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["TaskParam"] as? String {
            self.taskParam = value
        }
    }
}

public class SubmitAsyncTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public var taskIntermediateResult: Any?

        public var taskName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskIntermediateResult != nil {
                map["TaskIntermediateResult"] = self.taskIntermediateResult!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskIntermediateResult"] as? Any {
                self.taskIntermediateResult = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
        }
    }
    public var code: String?

    public var data: SubmitAsyncTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SubmitAsyncTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitAsyncTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitAsyncTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitAsyncTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitAuditTaskRequest : Tea.TeaModel {
    public var articleId: String?

    public var content: String?

    public var htmlContent: String?

    public var title: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.articleId != nil {
            map["ArticleId"] = self.articleId!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.htmlContent != nil {
            map["HtmlContent"] = self.htmlContent!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ArticleId"] as? String {
            self.articleId = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["HtmlContent"] as? String {
            self.htmlContent = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class SubmitAuditTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: SubmitAuditTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SubmitAuditTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitAuditTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitAuditTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitAuditTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitCustomHotTopicBroadcastJobRequest : Tea.TeaModel {
    public class HotTopicBroadcastConfig : Tea.TeaModel {
        public class StepForCustomSummaryStyleConfig : Tea.TeaModel {
            public var summaryImageCount: Int32?

            public var summaryModel: String?

            public var summaryPrompt: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.summaryImageCount != nil {
                    map["SummaryImageCount"] = self.summaryImageCount!
                }
                if self.summaryModel != nil {
                    map["SummaryModel"] = self.summaryModel!
                }
                if self.summaryPrompt != nil {
                    map["SummaryPrompt"] = self.summaryPrompt!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SummaryImageCount"] as? Int32 {
                    self.summaryImageCount = value
                }
                if let value = dict["SummaryModel"] as? String {
                    self.summaryModel = value
                }
                if let value = dict["SummaryPrompt"] as? String {
                    self.summaryPrompt = value
                }
            }
        }
        public class StepForNewsBroadcastContentConfig : Tea.TeaModel {
            public class CustomHotValueWeights : Tea.TeaModel {
                public var dimension: String?

                public var dimensionName: String?

                public var weight: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dimension != nil {
                        map["Dimension"] = self.dimension!
                    }
                    if self.dimensionName != nil {
                        map["DimensionName"] = self.dimensionName!
                    }
                    if self.weight != nil {
                        map["Weight"] = self.weight!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Dimension"] as? String {
                        self.dimension = value
                    }
                    if let value = dict["DimensionName"] as? String {
                        self.dimensionName = value
                    }
                    if let value = dict["Weight"] as? Int32 {
                        self.weight = value
                    }
                }
            }
            public var categories: [String]?

            public var customHotValueWeights: [SubmitCustomHotTopicBroadcastJobRequest.HotTopicBroadcastConfig.StepForNewsBroadcastContentConfig.CustomHotValueWeights]?

            public var topicCount: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.categories != nil {
                    map["Categories"] = self.categories!
                }
                if self.customHotValueWeights != nil {
                    var tmp : [Any] = []
                    for k in self.customHotValueWeights! {
                        tmp.append(k.toMap())
                    }
                    map["CustomHotValueWeights"] = tmp
                }
                if self.topicCount != nil {
                    map["TopicCount"] = self.topicCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Categories"] as? [String] {
                    self.categories = value
                }
                if let value = dict["CustomHotValueWeights"] as? [Any?] {
                    var tmp : [SubmitCustomHotTopicBroadcastJobRequest.HotTopicBroadcastConfig.StepForNewsBroadcastContentConfig.CustomHotValueWeights] = []
                    for v in value {
                        if v != nil {
                            var model = SubmitCustomHotTopicBroadcastJobRequest.HotTopicBroadcastConfig.StepForNewsBroadcastContentConfig.CustomHotValueWeights()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.customHotValueWeights = tmp
                }
                if let value = dict["TopicCount"] as? Int32 {
                    self.topicCount = value
                }
            }
        }
        public var stepForCustomSummaryStyleConfig: SubmitCustomHotTopicBroadcastJobRequest.HotTopicBroadcastConfig.StepForCustomSummaryStyleConfig?

        public var stepForNewsBroadcastContentConfig: SubmitCustomHotTopicBroadcastJobRequest.HotTopicBroadcastConfig.StepForNewsBroadcastContentConfig?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.stepForCustomSummaryStyleConfig?.validate()
            try self.stepForNewsBroadcastContentConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.stepForCustomSummaryStyleConfig != nil {
                map["StepForCustomSummaryStyleConfig"] = self.stepForCustomSummaryStyleConfig?.toMap()
            }
            if self.stepForNewsBroadcastContentConfig != nil {
                map["StepForNewsBroadcastContentConfig"] = self.stepForNewsBroadcastContentConfig?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["StepForCustomSummaryStyleConfig"] as? [String: Any?] {
                var model = SubmitCustomHotTopicBroadcastJobRequest.HotTopicBroadcastConfig.StepForCustomSummaryStyleConfig()
                model.fromMap(value)
                self.stepForCustomSummaryStyleConfig = model
            }
            if let value = dict["StepForNewsBroadcastContentConfig"] as? [String: Any?] {
                var model = SubmitCustomHotTopicBroadcastJobRequest.HotTopicBroadcastConfig.StepForNewsBroadcastContentConfig()
                model.fromMap(value)
                self.stepForNewsBroadcastContentConfig = model
            }
        }
    }
    public var hotTopicBroadcastConfig: SubmitCustomHotTopicBroadcastJobRequest.HotTopicBroadcastConfig?

    public var hotTopicVersion: String?

    public var topics: [String]?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.hotTopicBroadcastConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hotTopicBroadcastConfig != nil {
            map["HotTopicBroadcastConfig"] = self.hotTopicBroadcastConfig?.toMap()
        }
        if self.hotTopicVersion != nil {
            map["HotTopicVersion"] = self.hotTopicVersion!
        }
        if self.topics != nil {
            map["Topics"] = self.topics!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["HotTopicBroadcastConfig"] as? [String: Any?] {
            var model = SubmitCustomHotTopicBroadcastJobRequest.HotTopicBroadcastConfig()
            model.fromMap(value)
            self.hotTopicBroadcastConfig = model
        }
        if let value = dict["HotTopicVersion"] as? String {
            self.hotTopicVersion = value
        }
        if let value = dict["Topics"] as? [String] {
            self.topics = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class SubmitCustomHotTopicBroadcastJobShrinkRequest : Tea.TeaModel {
    public var hotTopicBroadcastConfigShrink: String?

    public var hotTopicVersion: String?

    public var topicsShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hotTopicBroadcastConfigShrink != nil {
            map["HotTopicBroadcastConfig"] = self.hotTopicBroadcastConfigShrink!
        }
        if self.hotTopicVersion != nil {
            map["HotTopicVersion"] = self.hotTopicVersion!
        }
        if self.topicsShrink != nil {
            map["Topics"] = self.topicsShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["HotTopicBroadcastConfig"] as? String {
            self.hotTopicBroadcastConfigShrink = value
        }
        if let value = dict["HotTopicVersion"] as? String {
            self.hotTopicVersion = value
        }
        if let value = dict["Topics"] as? String {
            self.topicsShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class SubmitCustomHotTopicBroadcastJobResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: SubmitCustomHotTopicBroadcastJobResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SubmitCustomHotTopicBroadcastJobResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitCustomHotTopicBroadcastJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitCustomHotTopicBroadcastJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitCustomHotTopicBroadcastJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitCustomSourceTopicAnalysisRequest : Tea.TeaModel {
    public class News : Tea.TeaModel {
        public class Comments : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public var comments: [SubmitCustomSourceTopicAnalysisRequest.News.Comments]?

        public var content: String?

        public var pubTime: String?

        public var title: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.comments != nil {
                var tmp : [Any] = []
                for k in self.comments! {
                    tmp.append(k.toMap())
                }
                map["Comments"] = tmp
            }
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.pubTime != nil {
                map["PubTime"] = self.pubTime!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Comments"] as? [Any?] {
                var tmp : [SubmitCustomSourceTopicAnalysisRequest.News.Comments] = []
                for v in value {
                    if v != nil {
                        var model = SubmitCustomSourceTopicAnalysisRequest.News.Comments()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.comments = tmp
            }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["PubTime"] as? String {
                self.pubTime = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var fileType: String?

    public var fileUrl: String?

    public var maxTopicSize: Int32?

    public var news: [SubmitCustomSourceTopicAnalysisRequest.News]?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileType != nil {
            map["FileType"] = self.fileType!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.maxTopicSize != nil {
            map["MaxTopicSize"] = self.maxTopicSize!
        }
        if self.news != nil {
            var tmp : [Any] = []
            for k in self.news! {
                tmp.append(k.toMap())
            }
            map["News"] = tmp
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileType"] as? String {
            self.fileType = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["MaxTopicSize"] as? Int32 {
            self.maxTopicSize = value
        }
        if let value = dict["News"] as? [Any?] {
            var tmp : [SubmitCustomSourceTopicAnalysisRequest.News] = []
            for v in value {
                if v != nil {
                    var model = SubmitCustomSourceTopicAnalysisRequest.News()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.news = tmp
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class SubmitCustomSourceTopicAnalysisShrinkRequest : Tea.TeaModel {
    public var fileType: String?

    public var fileUrl: String?

    public var maxTopicSize: Int32?

    public var newsShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileType != nil {
            map["FileType"] = self.fileType!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.maxTopicSize != nil {
            map["MaxTopicSize"] = self.maxTopicSize!
        }
        if self.newsShrink != nil {
            map["News"] = self.newsShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileType"] as? String {
            self.fileType = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["MaxTopicSize"] as? Int32 {
            self.maxTopicSize = value
        }
        if let value = dict["News"] as? String {
            self.newsShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class SubmitCustomSourceTopicAnalysisResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public var taskName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
        }
    }
    public var code: String?

    public var data: SubmitCustomSourceTopicAnalysisResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SubmitCustomSourceTopicAnalysisResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitCustomSourceTopicAnalysisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitCustomSourceTopicAnalysisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitCustomSourceTopicAnalysisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest : Tea.TeaModel {
    public class Documents : Tea.TeaModel {
        public var author: String?

        public var content: String?

        public var pubTime: String?

        public var source: String?

        public var summary: String?

        public var title: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.author != nil {
                map["Author"] = self.author!
            }
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.pubTime != nil {
                map["PubTime"] = self.pubTime!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Author"] as? String {
                self.author = value
            }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["PubTime"] as? String {
                self.pubTime = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var agentKey: String?

    public var documents: [SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest.Documents]?

    public var prompt: String?

    public var topic: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.documents != nil {
            var tmp : [Any] = []
            for k in self.documents! {
                tmp.append(k.toMap())
            }
            map["Documents"] = tmp
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Documents"] as? [Any?] {
            var tmp : [SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest.Documents] = []
            for v in value {
                if v != nil {
                    var model = SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest.Documents()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.documents = tmp
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
    }
}

public class SubmitCustomTopicSelectionPerspectiveAnalysisTaskShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var documentsShrink: String?

    public var prompt: String?

    public var topic: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.documentsShrink != nil {
            map["Documents"] = self.documentsShrink!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Documents"] as? String {
            self.documentsShrink = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
    }
}

public class SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitDocClusterTaskRequest : Tea.TeaModel {
    public class Documents : Tea.TeaModel {
        public var content: String?

        public var docId: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.docId != nil {
                map["DocId"] = self.docId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["DocId"] as? String {
                self.docId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var agentKey: String?

    public var documents: [SubmitDocClusterTaskRequest.Documents]?

    public var summaryLength: Int32?

    public var titleLength: Int32?

    public var topicCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.documents != nil {
            var tmp : [Any] = []
            for k in self.documents! {
                tmp.append(k.toMap())
            }
            map["Documents"] = tmp
        }
        if self.summaryLength != nil {
            map["SummaryLength"] = self.summaryLength!
        }
        if self.titleLength != nil {
            map["TitleLength"] = self.titleLength!
        }
        if self.topicCount != nil {
            map["TopicCount"] = self.topicCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Documents"] as? [Any?] {
            var tmp : [SubmitDocClusterTaskRequest.Documents] = []
            for v in value {
                if v != nil {
                    var model = SubmitDocClusterTaskRequest.Documents()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.documents = tmp
        }
        if let value = dict["SummaryLength"] as? Int32 {
            self.summaryLength = value
        }
        if let value = dict["TitleLength"] as? Int32 {
            self.titleLength = value
        }
        if let value = dict["TopicCount"] as? Int32 {
            self.topicCount = value
        }
    }
}

public class SubmitDocClusterTaskShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var documentsShrink: String?

    public var summaryLength: Int32?

    public var titleLength: Int32?

    public var topicCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.documentsShrink != nil {
            map["Documents"] = self.documentsShrink!
        }
        if self.summaryLength != nil {
            map["SummaryLength"] = self.summaryLength!
        }
        if self.titleLength != nil {
            map["TitleLength"] = self.titleLength!
        }
        if self.topicCount != nil {
            map["TopicCount"] = self.topicCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Documents"] as? String {
            self.documentsShrink = value
        }
        if let value = dict["SummaryLength"] as? Int32 {
            self.summaryLength = value
        }
        if let value = dict["TitleLength"] as? Int32 {
            self.titleLength = value
        }
        if let value = dict["TopicCount"] as? Int32 {
            self.topicCount = value
        }
    }
}

public class SubmitDocClusterTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: SubmitDocClusterTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SubmitDocClusterTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitDocClusterTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitDocClusterTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitDocClusterTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitEnterpriseVocAnalysisTaskRequest : Tea.TeaModel {
    public class ContentTags : Tea.TeaModel {
        public var tagDefinePrompt: String?

        public var tagName: String?

        public var tagTaskType: String?

        public var tagValueDefinePrompt: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagDefinePrompt != nil {
                map["TagDefinePrompt"] = self.tagDefinePrompt!
            }
            if self.tagName != nil {
                map["TagName"] = self.tagName!
            }
            if self.tagTaskType != nil {
                map["TagTaskType"] = self.tagTaskType!
            }
            if self.tagValueDefinePrompt != nil {
                map["TagValueDefinePrompt"] = self.tagValueDefinePrompt!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TagDefinePrompt"] as? String {
                self.tagDefinePrompt = value
            }
            if let value = dict["TagName"] as? String {
                self.tagName = value
            }
            if let value = dict["TagTaskType"] as? String {
                self.tagTaskType = value
            }
            if let value = dict["TagValueDefinePrompt"] as? String {
                self.tagValueDefinePrompt = value
            }
        }
    }
    public class Contents : Tea.TeaModel {
        public var extraInfo: String?

        public var text: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.extraInfo != nil {
                map["ExtraInfo"] = self.extraInfo!
            }
            if self.text != nil {
                map["Text"] = self.text!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ExtraInfo"] as? String {
                self.extraInfo = value
            }
            if let value = dict["Text"] as? String {
                self.text = value
            }
        }
    }
    public class FilterTags : Tea.TeaModel {
        public var tagDefinePrompt: String?

        public var tagName: String?

        public var tagType: String?

        public var tagValueDefinePrompt: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagDefinePrompt != nil {
                map["TagDefinePrompt"] = self.tagDefinePrompt!
            }
            if self.tagName != nil {
                map["TagName"] = self.tagName!
            }
            if self.tagType != nil {
                map["TagType"] = self.tagType!
            }
            if self.tagValueDefinePrompt != nil {
                map["TagValueDefinePrompt"] = self.tagValueDefinePrompt!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TagDefinePrompt"] as? String {
                self.tagDefinePrompt = value
            }
            if let value = dict["TagName"] as? String {
                self.tagName = value
            }
            if let value = dict["TagType"] as? String {
                self.tagType = value
            }
            if let value = dict["TagValueDefinePrompt"] as? String {
                self.tagValueDefinePrompt = value
            }
        }
    }
    public var apiKey: String?

    public var contentTags: [SubmitEnterpriseVocAnalysisTaskRequest.ContentTags]?

    public var contents: [SubmitEnterpriseVocAnalysisTaskRequest.Contents]?

    public var fileKey: String?

    public var filterTags: [SubmitEnterpriseVocAnalysisTaskRequest.FilterTags]?

    public var materialType: String?

    public var modelId: String?

    public var positiveSample: String?

    public var positiveSampleFileKey: String?

    public var taskType: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiKey != nil {
            map["ApiKey"] = self.apiKey!
        }
        if self.contentTags != nil {
            var tmp : [Any] = []
            for k in self.contentTags! {
                tmp.append(k.toMap())
            }
            map["ContentTags"] = tmp
        }
        if self.contents != nil {
            var tmp : [Any] = []
            for k in self.contents! {
                tmp.append(k.toMap())
            }
            map["Contents"] = tmp
        }
        if self.fileKey != nil {
            map["FileKey"] = self.fileKey!
        }
        if self.filterTags != nil {
            var tmp : [Any] = []
            for k in self.filterTags! {
                tmp.append(k.toMap())
            }
            map["FilterTags"] = tmp
        }
        if self.materialType != nil {
            map["MaterialType"] = self.materialType!
        }
        if self.modelId != nil {
            map["ModelId"] = self.modelId!
        }
        if self.positiveSample != nil {
            map["PositiveSample"] = self.positiveSample!
        }
        if self.positiveSampleFileKey != nil {
            map["PositiveSampleFileKey"] = self.positiveSampleFileKey!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiKey"] as? String {
            self.apiKey = value
        }
        if let value = dict["ContentTags"] as? [Any?] {
            var tmp : [SubmitEnterpriseVocAnalysisTaskRequest.ContentTags] = []
            for v in value {
                if v != nil {
                    var model = SubmitEnterpriseVocAnalysisTaskRequest.ContentTags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.contentTags = tmp
        }
        if let value = dict["Contents"] as? [Any?] {
            var tmp : [SubmitEnterpriseVocAnalysisTaskRequest.Contents] = []
            for v in value {
                if v != nil {
                    var model = SubmitEnterpriseVocAnalysisTaskRequest.Contents()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.contents = tmp
        }
        if let value = dict["FileKey"] as? String {
            self.fileKey = value
        }
        if let value = dict["FilterTags"] as? [Any?] {
            var tmp : [SubmitEnterpriseVocAnalysisTaskRequest.FilterTags] = []
            for v in value {
                if v != nil {
                    var model = SubmitEnterpriseVocAnalysisTaskRequest.FilterTags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.filterTags = tmp
        }
        if let value = dict["MaterialType"] as? String {
            self.materialType = value
        }
        if let value = dict["ModelId"] as? String {
            self.modelId = value
        }
        if let value = dict["PositiveSample"] as? String {
            self.positiveSample = value
        }
        if let value = dict["PositiveSampleFileKey"] as? String {
            self.positiveSampleFileKey = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class SubmitEnterpriseVocAnalysisTaskShrinkRequest : Tea.TeaModel {
    public var apiKey: String?

    public var contentTagsShrink: String?

    public var contentsShrink: String?

    public var fileKey: String?

    public var filterTagsShrink: String?

    public var materialType: String?

    public var modelId: String?

    public var positiveSample: String?

    public var positiveSampleFileKey: String?

    public var taskType: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiKey != nil {
            map["ApiKey"] = self.apiKey!
        }
        if self.contentTagsShrink != nil {
            map["ContentTags"] = self.contentTagsShrink!
        }
        if self.contentsShrink != nil {
            map["Contents"] = self.contentsShrink!
        }
        if self.fileKey != nil {
            map["FileKey"] = self.fileKey!
        }
        if self.filterTagsShrink != nil {
            map["FilterTags"] = self.filterTagsShrink!
        }
        if self.materialType != nil {
            map["MaterialType"] = self.materialType!
        }
        if self.modelId != nil {
            map["ModelId"] = self.modelId!
        }
        if self.positiveSample != nil {
            map["PositiveSample"] = self.positiveSample!
        }
        if self.positiveSampleFileKey != nil {
            map["PositiveSampleFileKey"] = self.positiveSampleFileKey!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiKey"] as? String {
            self.apiKey = value
        }
        if let value = dict["ContentTags"] as? String {
            self.contentTagsShrink = value
        }
        if let value = dict["Contents"] as? String {
            self.contentsShrink = value
        }
        if let value = dict["FileKey"] as? String {
            self.fileKey = value
        }
        if let value = dict["FilterTags"] as? String {
            self.filterTagsShrink = value
        }
        if let value = dict["MaterialType"] as? String {
            self.materialType = value
        }
        if let value = dict["ModelId"] as? String {
            self.modelId = value
        }
        if let value = dict["PositiveSample"] as? String {
            self.positiveSample = value
        }
        if let value = dict["PositiveSampleFileKey"] as? String {
            self.positiveSampleFileKey = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class SubmitEnterpriseVocAnalysisTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: SubmitEnterpriseVocAnalysisTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SubmitEnterpriseVocAnalysisTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitEnterpriseVocAnalysisTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitEnterpriseVocAnalysisTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitEnterpriseVocAnalysisTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitSmartAuditRequest : Tea.TeaModel {
    public var subCodes: [String]?

    public var text: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.subCodes != nil {
            map["SubCodes"] = self.subCodes!
        }
        if self.text != nil {
            map["Text"] = self.text!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SubCodes"] as? [String] {
            self.subCodes = value
        }
        if let value = dict["Text"] as? String {
            self.text = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class SubmitSmartAuditShrinkRequest : Tea.TeaModel {
    public var subCodesShrink: String?

    public var text: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.subCodesShrink != nil {
            map["SubCodes"] = self.subCodesShrink!
        }
        if self.text != nil {
            map["Text"] = self.text!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SubCodes"] as? String {
            self.subCodesShrink = value
        }
        if let value = dict["Text"] as? String {
            self.text = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class SubmitSmartAuditResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: SubmitSmartAuditResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SubmitSmartAuditResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitSmartAuditResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitSmartAuditResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitSmartAuditResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitSmartClipTaskRequest : Tea.TeaModel {
    public class EditingConfig : Tea.TeaModel {
        public class BackgroundMusicConfig : Tea.TeaModel {
            public var style: String?

            public var volume: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.style != nil {
                    map["Style"] = self.style!
                }
                if self.volume != nil {
                    map["Volume"] = self.volume!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Style"] as? String {
                    self.style = value
                }
                if let value = dict["Volume"] as? Double {
                    self.volume = value
                }
            }
        }
        public class MediaConfig : Tea.TeaModel {
            public var volume: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.volume != nil {
                    map["Volume"] = self.volume!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Volume"] as? Double {
                    self.volume = value
                }
            }
        }
        public class SpeechConfig : Tea.TeaModel {
            public class AsrConfig : Tea.TeaModel {
                public var alignment: String?

                public var font: String?

                public var fontColor: String?

                public var fontSize: String?

                public var spacing: String?

                public var x: Double?

                public var y: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alignment != nil {
                        map["Alignment"] = self.alignment!
                    }
                    if self.font != nil {
                        map["Font"] = self.font!
                    }
                    if self.fontColor != nil {
                        map["FontColor"] = self.fontColor!
                    }
                    if self.fontSize != nil {
                        map["FontSize"] = self.fontSize!
                    }
                    if self.spacing != nil {
                        map["Spacing"] = self.spacing!
                    }
                    if self.x != nil {
                        map["X"] = self.x!
                    }
                    if self.y != nil {
                        map["Y"] = self.y!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Alignment"] as? String {
                        self.alignment = value
                    }
                    if let value = dict["Font"] as? String {
                        self.font = value
                    }
                    if let value = dict["FontColor"] as? String {
                        self.fontColor = value
                    }
                    if let value = dict["FontSize"] as? String {
                        self.fontSize = value
                    }
                    if let value = dict["Spacing"] as? String {
                        self.spacing = value
                    }
                    if let value = dict["X"] as? Double {
                        self.x = value
                    }
                    if let value = dict["Y"] as? Double {
                        self.y = value
                    }
                }
            }
            public var asrConfig: SubmitSmartClipTaskRequest.EditingConfig.SpeechConfig.AsrConfig?

            public var speechRate: Double?

            public var style: String?

            public var voice: String?

            public var volume: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.asrConfig?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.asrConfig != nil {
                    map["AsrConfig"] = self.asrConfig?.toMap()
                }
                if self.speechRate != nil {
                    map["SpeechRate"] = self.speechRate!
                }
                if self.style != nil {
                    map["Style"] = self.style!
                }
                if self.voice != nil {
                    map["Voice"] = self.voice!
                }
                if self.volume != nil {
                    map["Volume"] = self.volume!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AsrConfig"] as? [String: Any?] {
                    var model = SubmitSmartClipTaskRequest.EditingConfig.SpeechConfig.AsrConfig()
                    model.fromMap(value)
                    self.asrConfig = model
                }
                if let value = dict["SpeechRate"] as? Double {
                    self.speechRate = value
                }
                if let value = dict["Style"] as? String {
                    self.style = value
                }
                if let value = dict["Voice"] as? String {
                    self.voice = value
                }
                if let value = dict["Volume"] as? Double {
                    self.volume = value
                }
            }
        }
        public class TitleConfig : Tea.TeaModel {
            public var alignment: String?

            public var timelineIn: Double?

            public var timelineOut: Double?

            public var x: Double?

            public var y: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alignment != nil {
                    map["Alignment"] = self.alignment!
                }
                if self.timelineIn != nil {
                    map["TimelineIn"] = self.timelineIn!
                }
                if self.timelineOut != nil {
                    map["TimelineOut"] = self.timelineOut!
                }
                if self.x != nil {
                    map["X"] = self.x!
                }
                if self.y != nil {
                    map["Y"] = self.y!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Alignment"] as? String {
                    self.alignment = value
                }
                if let value = dict["TimelineIn"] as? Double {
                    self.timelineIn = value
                }
                if let value = dict["TimelineOut"] as? Double {
                    self.timelineOut = value
                }
                if let value = dict["X"] as? Double {
                    self.x = value
                }
                if let value = dict["Y"] as? Double {
                    self.y = value
                }
            }
        }
        public var backgroundMusicConfig: SubmitSmartClipTaskRequest.EditingConfig.BackgroundMusicConfig?

        public var mediaConfig: SubmitSmartClipTaskRequest.EditingConfig.MediaConfig?

        public var speechConfig: SubmitSmartClipTaskRequest.EditingConfig.SpeechConfig?

        public var titleConfig: SubmitSmartClipTaskRequest.EditingConfig.TitleConfig?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.backgroundMusicConfig?.validate()
            try self.mediaConfig?.validate()
            try self.speechConfig?.validate()
            try self.titleConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.backgroundMusicConfig != nil {
                map["BackgroundMusicConfig"] = self.backgroundMusicConfig?.toMap()
            }
            if self.mediaConfig != nil {
                map["MediaConfig"] = self.mediaConfig?.toMap()
            }
            if self.speechConfig != nil {
                map["SpeechConfig"] = self.speechConfig?.toMap()
            }
            if self.titleConfig != nil {
                map["TitleConfig"] = self.titleConfig?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BackgroundMusicConfig"] as? [String: Any?] {
                var model = SubmitSmartClipTaskRequest.EditingConfig.BackgroundMusicConfig()
                model.fromMap(value)
                self.backgroundMusicConfig = model
            }
            if let value = dict["MediaConfig"] as? [String: Any?] {
                var model = SubmitSmartClipTaskRequest.EditingConfig.MediaConfig()
                model.fromMap(value)
                self.mediaConfig = model
            }
            if let value = dict["SpeechConfig"] as? [String: Any?] {
                var model = SubmitSmartClipTaskRequest.EditingConfig.SpeechConfig()
                model.fromMap(value)
                self.speechConfig = model
            }
            if let value = dict["TitleConfig"] as? [String: Any?] {
                var model = SubmitSmartClipTaskRequest.EditingConfig.TitleConfig()
                model.fromMap(value)
                self.titleConfig = model
            }
        }
    }
    public class InputConfig : Tea.TeaModel {
        public class BackgroundMusics : Tea.TeaModel {
            public var id: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class Stickers : Tea.TeaModel {
            public class StickerId : Tea.TeaModel {
                public var id: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var height: Double?

            public var stickerId: SubmitSmartClipTaskRequest.InputConfig.Stickers.StickerId?

            public var width: Double?

            public var x: Double?

            public var y: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.stickerId?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.stickerId != nil {
                    map["StickerId"] = self.stickerId?.toMap()
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                if self.x != nil {
                    map["X"] = self.x!
                }
                if self.y != nil {
                    map["Y"] = self.y!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Height"] as? Double {
                    self.height = value
                }
                if let value = dict["StickerId"] as? [String: Any?] {
                    var model = SubmitSmartClipTaskRequest.InputConfig.Stickers.StickerId()
                    model.fromMap(value)
                    self.stickerId = model
                }
                if let value = dict["Width"] as? Double {
                    self.width = value
                }
                if let value = dict["X"] as? Double {
                    self.x = value
                }
                if let value = dict["Y"] as? Double {
                    self.y = value
                }
            }
        }
        public class VideoIds : Tea.TeaModel {
            public var id: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var backgroundMusics: [SubmitSmartClipTaskRequest.InputConfig.BackgroundMusics]?

        public var speechTexts: [String]?

        public var stickers: [SubmitSmartClipTaskRequest.InputConfig.Stickers]?

        public var titles: [String]?

        public var videoIds: [SubmitSmartClipTaskRequest.InputConfig.VideoIds]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.backgroundMusics != nil {
                var tmp : [Any] = []
                for k in self.backgroundMusics! {
                    tmp.append(k.toMap())
                }
                map["BackgroundMusics"] = tmp
            }
            if self.speechTexts != nil {
                map["SpeechTexts"] = self.speechTexts!
            }
            if self.stickers != nil {
                var tmp : [Any] = []
                for k in self.stickers! {
                    tmp.append(k.toMap())
                }
                map["Stickers"] = tmp
            }
            if self.titles != nil {
                map["Titles"] = self.titles!
            }
            if self.videoIds != nil {
                var tmp : [Any] = []
                for k in self.videoIds! {
                    tmp.append(k.toMap())
                }
                map["VideoIds"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BackgroundMusics"] as? [Any?] {
                var tmp : [SubmitSmartClipTaskRequest.InputConfig.BackgroundMusics] = []
                for v in value {
                    if v != nil {
                        var model = SubmitSmartClipTaskRequest.InputConfig.BackgroundMusics()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.backgroundMusics = tmp
            }
            if let value = dict["SpeechTexts"] as? [String] {
                self.speechTexts = value
            }
            if let value = dict["Stickers"] as? [Any?] {
                var tmp : [SubmitSmartClipTaskRequest.InputConfig.Stickers] = []
                for v in value {
                    if v != nil {
                        var model = SubmitSmartClipTaskRequest.InputConfig.Stickers()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.stickers = tmp
            }
            if let value = dict["Titles"] as? [String] {
                self.titles = value
            }
            if let value = dict["VideoIds"] as? [Any?] {
                var tmp : [SubmitSmartClipTaskRequest.InputConfig.VideoIds] = []
                for v in value {
                    if v != nil {
                        var model = SubmitSmartClipTaskRequest.InputConfig.VideoIds()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.videoIds = tmp
            }
        }
    }
    public class OutputConfig : Tea.TeaModel {
        public var count: Int32?

        public var fileName: String?

        public var height: Int32?

        public var maxDuration: Int32?

        public var saveToGeneratedContent: Bool?

        public var width: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.height != nil {
                map["Height"] = self.height!
            }
            if self.maxDuration != nil {
                map["MaxDuration"] = self.maxDuration!
            }
            if self.saveToGeneratedContent != nil {
                map["SaveToGeneratedContent"] = self.saveToGeneratedContent!
            }
            if self.width != nil {
                map["Width"] = self.width!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int32 {
                self.count = value
            }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["Height"] as? Int32 {
                self.height = value
            }
            if let value = dict["MaxDuration"] as? Int32 {
                self.maxDuration = value
            }
            if let value = dict["SaveToGeneratedContent"] as? Bool {
                self.saveToGeneratedContent = value
            }
            if let value = dict["Width"] as? Int32 {
                self.width = value
            }
        }
    }
    public var editingConfig: SubmitSmartClipTaskRequest.EditingConfig?

    public var extendParam: String?

    public var inputConfig: SubmitSmartClipTaskRequest.InputConfig?

    public var outputConfig: SubmitSmartClipTaskRequest.OutputConfig?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.editingConfig?.validate()
        try self.inputConfig?.validate()
        try self.outputConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.editingConfig != nil {
            map["EditingConfig"] = self.editingConfig?.toMap()
        }
        if self.extendParam != nil {
            map["ExtendParam"] = self.extendParam!
        }
        if self.inputConfig != nil {
            map["InputConfig"] = self.inputConfig?.toMap()
        }
        if self.outputConfig != nil {
            map["OutputConfig"] = self.outputConfig?.toMap()
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EditingConfig"] as? [String: Any?] {
            var model = SubmitSmartClipTaskRequest.EditingConfig()
            model.fromMap(value)
            self.editingConfig = model
        }
        if let value = dict["ExtendParam"] as? String {
            self.extendParam = value
        }
        if let value = dict["InputConfig"] as? [String: Any?] {
            var model = SubmitSmartClipTaskRequest.InputConfig()
            model.fromMap(value)
            self.inputConfig = model
        }
        if let value = dict["OutputConfig"] as? [String: Any?] {
            var model = SubmitSmartClipTaskRequest.OutputConfig()
            model.fromMap(value)
            self.outputConfig = model
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class SubmitSmartClipTaskShrinkRequest : Tea.TeaModel {
    public var editingConfigShrink: String?

    public var extendParam: String?

    public var inputConfigShrink: String?

    public var outputConfigShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.editingConfigShrink != nil {
            map["EditingConfig"] = self.editingConfigShrink!
        }
        if self.extendParam != nil {
            map["ExtendParam"] = self.extendParam!
        }
        if self.inputConfigShrink != nil {
            map["InputConfig"] = self.inputConfigShrink!
        }
        if self.outputConfigShrink != nil {
            map["OutputConfig"] = self.outputConfigShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EditingConfig"] as? String {
            self.editingConfigShrink = value
        }
        if let value = dict["ExtendParam"] as? String {
            self.extendParam = value
        }
        if let value = dict["InputConfig"] as? String {
            self.inputConfigShrink = value
        }
        if let value = dict["OutputConfig"] as? String {
            self.outputConfigShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class SubmitSmartClipTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var data: SubmitSmartClipTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SubmitSmartClipTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitSmartClipTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitSmartClipTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitSmartClipTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitTopicSelectionPerspectiveAnalysisTaskRequest : Tea.TeaModel {
    public class Documents : Tea.TeaModel {
        public class Comments : Tea.TeaModel {
            public var text: String?

            public var username: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
            }
        }
        public var author: String?

        public var comments: [SubmitTopicSelectionPerspectiveAnalysisTaskRequest.Documents.Comments]?

        public var content: String?

        public var pubTime: String?

        public var source: String?

        public var summary: String?

        public var title: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.author != nil {
                map["Author"] = self.author!
            }
            if self.comments != nil {
                var tmp : [Any] = []
                for k in self.comments! {
                    tmp.append(k.toMap())
                }
                map["Comments"] = tmp
            }
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.pubTime != nil {
                map["PubTime"] = self.pubTime!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Author"] as? String {
                self.author = value
            }
            if let value = dict["Comments"] as? [Any?] {
                var tmp : [SubmitTopicSelectionPerspectiveAnalysisTaskRequest.Documents.Comments] = []
                for v in value {
                    if v != nil {
                        var model = SubmitTopicSelectionPerspectiveAnalysisTaskRequest.Documents.Comments()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.comments = tmp
            }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["PubTime"] as? String {
                self.pubTime = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var agentKey: String?

    public var documents: [SubmitTopicSelectionPerspectiveAnalysisTaskRequest.Documents]?

    public var perspectiveTypes: [String]?

    public var topic: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.documents != nil {
            var tmp : [Any] = []
            for k in self.documents! {
                tmp.append(k.toMap())
            }
            map["Documents"] = tmp
        }
        if self.perspectiveTypes != nil {
            map["PerspectiveTypes"] = self.perspectiveTypes!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Documents"] as? [Any?] {
            var tmp : [SubmitTopicSelectionPerspectiveAnalysisTaskRequest.Documents] = []
            for v in value {
                if v != nil {
                    var model = SubmitTopicSelectionPerspectiveAnalysisTaskRequest.Documents()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.documents = tmp
        }
        if let value = dict["PerspectiveTypes"] as? [String] {
            self.perspectiveTypes = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
    }
}

public class SubmitTopicSelectionPerspectiveAnalysisTaskShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var documentsShrink: String?

    public var perspectiveTypesShrink: String?

    public var topic: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.documentsShrink != nil {
            map["Documents"] = self.documentsShrink!
        }
        if self.perspectiveTypesShrink != nil {
            map["PerspectiveTypes"] = self.perspectiveTypesShrink!
        }
        if self.topic != nil {
            map["Topic"] = self.topic!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Documents"] as? String {
            self.documentsShrink = value
        }
        if let value = dict["PerspectiveTypes"] as? String {
            self.perspectiveTypesShrink = value
        }
        if let value = dict["Topic"] as? String {
            self.topic = value
        }
    }
}

public class SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var taskId: String?

        public var taskName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
        }
    }
    public var code: String?

    public var data: SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitTopicSelectionPerspectiveAnalysisTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateCustomTextRequest : Tea.TeaModel {
    public var agentKey: String?

    public var commodityCode: String?

    public var content: String?

    public var id: Int64?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.commodityCode != nil {
            map["CommodityCode"] = self.commodityCode!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["CommodityCode"] as? String {
            self.commodityCode = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class UpdateCustomTextResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateCustomTextResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateCustomTextResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateCustomTextResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateDatasetRequest : Tea.TeaModel {
    public class DatasetConfig : Tea.TeaModel {
        public class SearchSourceConfigs : Tea.TeaModel {
            public class SearchSourceRequestConfig : Tea.TeaModel {
                public class Headers : Tea.TeaModel {
                    public var name: String?

                    public var value: String?

                    public var valueFormat: String?

                    public var valueType: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        if self.valueFormat != nil {
                            map["ValueFormat"] = self.valueFormat!
                        }
                        if self.valueType != nil {
                            map["ValueType"] = self.valueType!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                        if let value = dict["ValueFormat"] as? String {
                            self.valueFormat = value
                        }
                        if let value = dict["ValueType"] as? String {
                            self.valueType = value
                        }
                    }
                }
                public class Params : Tea.TeaModel {
                    public var name: String?

                    public var value: String?

                    public var valueFormat: String?

                    public var valueType: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        if self.valueFormat != nil {
                            map["ValueFormat"] = self.valueFormat!
                        }
                        if self.valueType != nil {
                            map["ValueType"] = self.valueType!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                        if let value = dict["ValueFormat"] as? String {
                            self.valueFormat = value
                        }
                        if let value = dict["ValueType"] as? String {
                            self.valueType = value
                        }
                    }
                }
                public var body: String?

                public var connectTimeout: Int32?

                public var headers: [UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Headers]?

                public var method: String?

                public var params: [UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Params]?

                public var pathParamsEnable: Bool?

                public var socketTimeout: Int32?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.body != nil {
                        map["Body"] = self.body!
                    }
                    if self.connectTimeout != nil {
                        map["ConnectTimeout"] = self.connectTimeout!
                    }
                    if self.headers != nil {
                        var tmp : [Any] = []
                        for k in self.headers! {
                            tmp.append(k.toMap())
                        }
                        map["Headers"] = tmp
                    }
                    if self.method != nil {
                        map["Method"] = self.method!
                    }
                    if self.params != nil {
                        var tmp : [Any] = []
                        for k in self.params! {
                            tmp.append(k.toMap())
                        }
                        map["Params"] = tmp
                    }
                    if self.pathParamsEnable != nil {
                        map["PathParamsEnable"] = self.pathParamsEnable!
                    }
                    if self.socketTimeout != nil {
                        map["SocketTimeout"] = self.socketTimeout!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Body"] as? String {
                        self.body = value
                    }
                    if let value = dict["ConnectTimeout"] as? Int32 {
                        self.connectTimeout = value
                    }
                    if let value = dict["Headers"] as? [Any?] {
                        var tmp : [UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Headers] = []
                        for v in value {
                            if v != nil {
                                var model = UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Headers()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.headers = tmp
                    }
                    if let value = dict["Method"] as? String {
                        self.method = value
                    }
                    if let value = dict["Params"] as? [Any?] {
                        var tmp : [UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Params] = []
                        for v in value {
                            if v != nil {
                                var model = UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig.Params()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.params = tmp
                    }
                    if let value = dict["PathParamsEnable"] as? Bool {
                        self.pathParamsEnable = value
                    }
                    if let value = dict["SocketTimeout"] as? Int32 {
                        self.socketTimeout = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public class SearchSourceResponseConfig : Tea.TeaModel {
                public class JqNodes : Tea.TeaModel {
                    public class JqNodes : Tea.TeaModel {
                        public class JqNodes : Tea.TeaModel {
                            public var key: String?

                            public var path: String?

                            public var type: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.key != nil {
                                    map["Key"] = self.key!
                                }
                                if self.path != nil {
                                    map["Path"] = self.path!
                                }
                                if self.type != nil {
                                    map["Type"] = self.type!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["Key"] as? String {
                                    self.key = value
                                }
                                if let value = dict["Path"] as? String {
                                    self.path = value
                                }
                                if let value = dict["Type"] as? String {
                                    self.type = value
                                }
                            }
                        }
                        public var jqNodes: [UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes.JqNodes]?

                        public var key: String?

                        public var path: String?

                        public var type: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.jqNodes != nil {
                                var tmp : [Any] = []
                                for k in self.jqNodes! {
                                    tmp.append(k.toMap())
                                }
                                map["JqNodes"] = tmp
                            }
                            if self.key != nil {
                                map["Key"] = self.key!
                            }
                            if self.path != nil {
                                map["Path"] = self.path!
                            }
                            if self.type != nil {
                                map["Type"] = self.type!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["JqNodes"] as? [Any?] {
                                var tmp : [UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes.JqNodes] = []
                                for v in value {
                                    if v != nil {
                                        var model = UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes.JqNodes()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.jqNodes = tmp
                            }
                            if let value = dict["Key"] as? String {
                                self.key = value
                            }
                            if let value = dict["Path"] as? String {
                                self.path = value
                            }
                            if let value = dict["Type"] as? String {
                                self.type = value
                            }
                        }
                    }
                    public var jqNodes: [UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes]?

                    public var key: String?

                    public var path: String?

                    public var type: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.jqNodes != nil {
                            var tmp : [Any] = []
                            for k in self.jqNodes! {
                                tmp.append(k.toMap())
                            }
                            map["JqNodes"] = tmp
                        }
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.path != nil {
                            map["Path"] = self.path!
                        }
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["JqNodes"] as? [Any?] {
                            var tmp : [UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes] = []
                            for v in value {
                                if v != nil {
                                    var model = UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes.JqNodes()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.jqNodes = tmp
                        }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Path"] as? String {
                            self.path = value
                        }
                        if let value = dict["Type"] as? String {
                            self.type = value
                        }
                    }
                }
                public var jqNodes: [UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.jqNodes != nil {
                        var tmp : [Any] = []
                        for k in self.jqNodes! {
                            tmp.append(k.toMap())
                        }
                        map["JqNodes"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["JqNodes"] as? [Any?] {
                        var tmp : [UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes] = []
                        for v in value {
                            if v != nil {
                                var model = UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig.JqNodes()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.jqNodes = tmp
                    }
                }
            }
            public var demoQuery: String?

            public var searchSourceRequestConfig: UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig?

            public var searchSourceResponseConfig: UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig?

            public var size: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.searchSourceRequestConfig?.validate()
                try self.searchSourceResponseConfig?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.demoQuery != nil {
                    map["DemoQuery"] = self.demoQuery!
                }
                if self.searchSourceRequestConfig != nil {
                    map["SearchSourceRequestConfig"] = self.searchSourceRequestConfig?.toMap()
                }
                if self.searchSourceResponseConfig != nil {
                    map["SearchSourceResponseConfig"] = self.searchSourceResponseConfig?.toMap()
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DemoQuery"] as? String {
                    self.demoQuery = value
                }
                if let value = dict["SearchSourceRequestConfig"] as? [String: Any?] {
                    var model = UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceRequestConfig()
                    model.fromMap(value)
                    self.searchSourceRequestConfig = model
                }
                if let value = dict["SearchSourceResponseConfig"] as? [String: Any?] {
                    var model = UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs.SearchSourceResponseConfig()
                    model.fromMap(value)
                    self.searchSourceResponseConfig = model
                }
                if let value = dict["Size"] as? Int32 {
                    self.size = value
                }
            }
        }
        public var searchSourceConfigs: [UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.searchSourceConfigs != nil {
                var tmp : [Any] = []
                for k in self.searchSourceConfigs! {
                    tmp.append(k.toMap())
                }
                map["SearchSourceConfigs"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SearchSourceConfigs"] as? [Any?] {
                var tmp : [UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs] = []
                for v in value {
                    if v != nil {
                        var model = UpdateDatasetRequest.DatasetConfig.SearchSourceConfigs()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.searchSourceConfigs = tmp
            }
        }
    }
    public var datasetConfig: UpdateDatasetRequest.DatasetConfig?

    public var datasetDescription: String?

    public var datasetId: Int64?

    public var searchDatasetEnable: Int32?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.datasetConfig?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetConfig != nil {
            map["DatasetConfig"] = self.datasetConfig?.toMap()
        }
        if self.datasetDescription != nil {
            map["DatasetDescription"] = self.datasetDescription!
        }
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.searchDatasetEnable != nil {
            map["SearchDatasetEnable"] = self.searchDatasetEnable!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetConfig"] as? [String: Any?] {
            var model = UpdateDatasetRequest.DatasetConfig()
            model.fromMap(value)
            self.datasetConfig = model
        }
        if let value = dict["DatasetDescription"] as? String {
            self.datasetDescription = value
        }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["SearchDatasetEnable"] as? Int32 {
            self.searchDatasetEnable = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class UpdateDatasetShrinkRequest : Tea.TeaModel {
    public var datasetConfigShrink: String?

    public var datasetDescription: String?

    public var datasetId: Int64?

    public var searchDatasetEnable: Int32?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetConfigShrink != nil {
            map["DatasetConfig"] = self.datasetConfigShrink!
        }
        if self.datasetDescription != nil {
            map["DatasetDescription"] = self.datasetDescription!
        }
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.searchDatasetEnable != nil {
            map["SearchDatasetEnable"] = self.searchDatasetEnable!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetConfig"] as? String {
            self.datasetConfigShrink = value
        }
        if let value = dict["DatasetDescription"] as? String {
            self.datasetDescription = value
        }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["SearchDatasetEnable"] as? Int32 {
            self.searchDatasetEnable = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class UpdateDatasetResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class NewsArticleResults : Tea.TeaModel {
            public class Data : Tea.TeaModel {
                public var content: String?

                public var pubTime: String?

                public var source: String?

                public var summary: String?

                public var title: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.pubTime != nil {
                        map["PubTime"] = self.pubTime!
                    }
                    if self.source != nil {
                        map["Source"] = self.source!
                    }
                    if self.summary != nil {
                        map["Summary"] = self.summary!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["PubTime"] as? String {
                        self.pubTime = value
                    }
                    if let value = dict["Source"] as? String {
                        self.source = value
                    }
                    if let value = dict["Summary"] as? String {
                        self.summary = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var code: String?

            public var current: Int32?

            public var data: [UpdateDatasetResponseBody.Data.NewsArticleResults.Data]?

            public var message: String?

            public var size: Int32?

            public var total: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.current != nil {
                    map["Current"] = self.current!
                }
                if self.data != nil {
                    var tmp : [Any] = []
                    for k in self.data! {
                        tmp.append(k.toMap())
                    }
                    map["Data"] = tmp
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                if self.total != nil {
                    map["Total"] = self.total!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Code"] as? String {
                    self.code = value
                }
                if let value = dict["Current"] as? Int32 {
                    self.current = value
                }
                if let value = dict["Data"] as? [Any?] {
                    var tmp : [UpdateDatasetResponseBody.Data.NewsArticleResults.Data] = []
                    for v in value {
                        if v != nil {
                            var model = UpdateDatasetResponseBody.Data.NewsArticleResults.Data()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.data = tmp
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
                if let value = dict["Size"] as? Int32 {
                    self.size = value
                }
                if let value = dict["Total"] as? Int32 {
                    self.total = value
                }
            }
        }
        public var createTime: String?

        public var createUser: String?

        public var datasetDescription: String?

        public var datasetId: Int64?

        public var datasetName: String?

        public var datasetType: String?

        public var newsArticleResults: [UpdateDatasetResponseBody.Data.NewsArticleResults]?

        public var searchDatasetEnable: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.createUser != nil {
                map["CreateUser"] = self.createUser!
            }
            if self.datasetDescription != nil {
                map["DatasetDescription"] = self.datasetDescription!
            }
            if self.datasetId != nil {
                map["DatasetId"] = self.datasetId!
            }
            if self.datasetName != nil {
                map["DatasetName"] = self.datasetName!
            }
            if self.datasetType != nil {
                map["DatasetType"] = self.datasetType!
            }
            if self.newsArticleResults != nil {
                var tmp : [Any] = []
                for k in self.newsArticleResults! {
                    tmp.append(k.toMap())
                }
                map["NewsArticleResults"] = tmp
            }
            if self.searchDatasetEnable != nil {
                map["SearchDatasetEnable"] = self.searchDatasetEnable!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreateUser"] as? String {
                self.createUser = value
            }
            if let value = dict["DatasetDescription"] as? String {
                self.datasetDescription = value
            }
            if let value = dict["DatasetId"] as? Int64 {
                self.datasetId = value
            }
            if let value = dict["DatasetName"] as? String {
                self.datasetName = value
            }
            if let value = dict["DatasetType"] as? String {
                self.datasetType = value
            }
            if let value = dict["NewsArticleResults"] as? [Any?] {
                var tmp : [UpdateDatasetResponseBody.Data.NewsArticleResults] = []
                for v in value {
                    if v != nil {
                        var model = UpdateDatasetResponseBody.Data.NewsArticleResults()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.newsArticleResults = tmp
            }
            if let value = dict["SearchDatasetEnable"] as? Int32 {
                self.searchDatasetEnable = value
            }
        }
    }
    public var code: String?

    public var data: UpdateDatasetResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UpdateDatasetResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateDatasetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateDatasetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateDatasetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateDatasetDocumentRequest : Tea.TeaModel {
    public class Document : Tea.TeaModel {
        public var docId: String?

        public var docUuid: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.docId != nil {
                map["DocId"] = self.docId!
            }
            if self.docUuid != nil {
                map["DocUuid"] = self.docUuid!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DocId"] as? String {
                self.docId = value
            }
            if let value = dict["DocUuid"] as? String {
                self.docUuid = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var datasetId: Int64?

    public var datasetName: String?

    public var document: UpdateDatasetDocumentRequest.Document?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.document?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.document != nil {
            map["Document"] = self.document?.toMap()
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["Document"] as? [String: Any?] {
            var model = UpdateDatasetDocumentRequest.Document()
            model.fromMap(value)
            self.document = model
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class UpdateDatasetDocumentShrinkRequest : Tea.TeaModel {
    public var datasetId: Int64?

    public var datasetName: String?

    public var documentShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.documentShrink != nil {
            map["Document"] = self.documentShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? Int64 {
            self.datasetId = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["Document"] as? String {
            self.documentShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class UpdateDatasetDocumentResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var docId: String?

        public var docUuid: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.docId != nil {
                map["DocId"] = self.docId!
            }
            if self.docUuid != nil {
                map["DocUuid"] = self.docUuid!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DocId"] as? String {
                self.docId = value
            }
            if let value = dict["DocUuid"] as? String {
                self.docUuid = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var code: String?

    public var data: UpdateDatasetDocumentResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UpdateDatasetDocumentResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateDatasetDocumentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateDatasetDocumentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateDatasetDocumentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateGeneratedContentRequest : Tea.TeaModel {
    public var agentKey: String?

    public var content: String?

    public var contentText: String?

    public var id: Int64?

    public var keywords: [String]?

    public var prompt: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.contentText != nil {
            map["ContentText"] = self.contentText!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.keywords != nil {
            map["Keywords"] = self.keywords!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["ContentText"] as? String {
            self.contentText = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Keywords"] as? [String] {
            self.keywords = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class UpdateGeneratedContentShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var content: String?

    public var contentText: String?

    public var id: Int64?

    public var keywordsShrink: String?

    public var prompt: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.contentText != nil {
            map["ContentText"] = self.contentText!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.keywordsShrink != nil {
            map["Keywords"] = self.keywordsShrink!
        }
        if self.prompt != nil {
            map["Prompt"] = self.prompt!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["ContentText"] as? String {
            self.contentText = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Keywords"] as? String {
            self.keywordsShrink = value
        }
        if let value = dict["Prompt"] as? String {
            self.prompt = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class UpdateGeneratedContentResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateGeneratedContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateGeneratedContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateGeneratedContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateMaterialDocumentRequest : Tea.TeaModel {
    public var agentKey: String?

    public var author: String?

    public var docKeywords: [String]?

    public var docType: String?

    public var externalUrl: String?

    public var htmlContent: String?

    public var id: Int64?

    public var pubTime: String?

    public var regionId: String?

    public var shareAttr: Int32?

    public var srcFrom: String?

    public var summary: String?

    public var textContent: String?

    public var title: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.author != nil {
            map["Author"] = self.author!
        }
        if self.docKeywords != nil {
            map["DocKeywords"] = self.docKeywords!
        }
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.externalUrl != nil {
            map["ExternalUrl"] = self.externalUrl!
        }
        if self.htmlContent != nil {
            map["HtmlContent"] = self.htmlContent!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.pubTime != nil {
            map["PubTime"] = self.pubTime!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.shareAttr != nil {
            map["ShareAttr"] = self.shareAttr!
        }
        if self.srcFrom != nil {
            map["SrcFrom"] = self.srcFrom!
        }
        if self.summary != nil {
            map["Summary"] = self.summary!
        }
        if self.textContent != nil {
            map["TextContent"] = self.textContent!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Author"] as? String {
            self.author = value
        }
        if let value = dict["DocKeywords"] as? [String] {
            self.docKeywords = value
        }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["ExternalUrl"] as? String {
            self.externalUrl = value
        }
        if let value = dict["HtmlContent"] as? String {
            self.htmlContent = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["PubTime"] as? String {
            self.pubTime = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ShareAttr"] as? Int32 {
            self.shareAttr = value
        }
        if let value = dict["SrcFrom"] as? String {
            self.srcFrom = value
        }
        if let value = dict["Summary"] as? String {
            self.summary = value
        }
        if let value = dict["TextContent"] as? String {
            self.textContent = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class UpdateMaterialDocumentShrinkRequest : Tea.TeaModel {
    public var agentKey: String?

    public var author: String?

    public var docKeywordsShrink: String?

    public var docType: String?

    public var externalUrl: String?

    public var htmlContent: String?

    public var id: Int64?

    public var pubTime: String?

    public var regionId: String?

    public var shareAttr: Int32?

    public var srcFrom: String?

    public var summary: String?

    public var textContent: String?

    public var title: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentKey != nil {
            map["AgentKey"] = self.agentKey!
        }
        if self.author != nil {
            map["Author"] = self.author!
        }
        if self.docKeywordsShrink != nil {
            map["DocKeywords"] = self.docKeywordsShrink!
        }
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.externalUrl != nil {
            map["ExternalUrl"] = self.externalUrl!
        }
        if self.htmlContent != nil {
            map["HtmlContent"] = self.htmlContent!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.pubTime != nil {
            map["PubTime"] = self.pubTime!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.shareAttr != nil {
            map["ShareAttr"] = self.shareAttr!
        }
        if self.srcFrom != nil {
            map["SrcFrom"] = self.srcFrom!
        }
        if self.summary != nil {
            map["Summary"] = self.summary!
        }
        if self.textContent != nil {
            map["TextContent"] = self.textContent!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AgentKey"] as? String {
            self.agentKey = value
        }
        if let value = dict["Author"] as? String {
            self.author = value
        }
        if let value = dict["DocKeywords"] as? String {
            self.docKeywordsShrink = value
        }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["ExternalUrl"] as? String {
            self.externalUrl = value
        }
        if let value = dict["HtmlContent"] as? String {
            self.htmlContent = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["PubTime"] as? String {
            self.pubTime = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ShareAttr"] as? Int32 {
            self.shareAttr = value
        }
        if let value = dict["SrcFrom"] as? String {
            self.srcFrom = value
        }
        if let value = dict["Summary"] as? String {
            self.summary = value
        }
        if let value = dict["TextContent"] as? String {
            self.textContent = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class UpdateMaterialDocumentResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateMaterialDocumentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateMaterialDocumentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateMaterialDocumentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadBookRequest : Tea.TeaModel {
    public class Docs : Tea.TeaModel {
        public var docName: String?

        public var fileUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.docName != nil {
                map["DocName"] = self.docName!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DocName"] as? String {
                self.docName = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
        }
    }
    public var categoryId: String?

    public var docs: [UploadBookRequest.Docs]?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categoryId != nil {
            map["CategoryId"] = self.categoryId!
        }
        if self.docs != nil {
            var tmp : [Any] = []
            for k in self.docs! {
                tmp.append(k.toMap())
            }
            map["Docs"] = tmp
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CategoryId"] as? String {
            self.categoryId = value
        }
        if let value = dict["Docs"] as? [Any?] {
            var tmp : [UploadBookRequest.Docs] = []
            for v in value {
                if v != nil {
                    var model = UploadBookRequest.Docs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.docs = tmp
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class UploadBookShrinkRequest : Tea.TeaModel {
    public var categoryId: String?

    public var docsShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categoryId != nil {
            map["CategoryId"] = self.categoryId!
        }
        if self.docsShrink != nil {
            map["Docs"] = self.docsShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CategoryId"] as? String {
            self.categoryId = value
        }
        if let value = dict["Docs"] as? String {
            self.docsShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class UploadBookResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var docIds: [String]?

        public var existedIds: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.docIds != nil {
                map["DocIds"] = self.docIds!
            }
            if self.existedIds != nil {
                map["ExistedIds"] = self.existedIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DocIds"] as? [String] {
                self.docIds = value
            }
            if let value = dict["ExistedIds"] as? [String] {
                self.existedIds = value
            }
        }
    }
    public var code: String?

    public var data: UploadBookResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UploadBookResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UploadBookResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadBookResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadBookResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadDocRequest : Tea.TeaModel {
    public class Docs : Tea.TeaModel {
        public var docName: String?

        public var fileUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.docName != nil {
                map["DocName"] = self.docName!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DocName"] as? String {
                self.docName = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
        }
    }
    public var categoryId: String?

    public var docs: [UploadDocRequest.Docs]?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categoryId != nil {
            map["CategoryId"] = self.categoryId!
        }
        if self.docs != nil {
            var tmp : [Any] = []
            for k in self.docs! {
                tmp.append(k.toMap())
            }
            map["Docs"] = tmp
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CategoryId"] as? String {
            self.categoryId = value
        }
        if let value = dict["Docs"] as? [Any?] {
            var tmp : [UploadDocRequest.Docs] = []
            for v in value {
                if v != nil {
                    var model = UploadDocRequest.Docs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.docs = tmp
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class UploadDocShrinkRequest : Tea.TeaModel {
    public var categoryId: String?

    public var docsShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.categoryId != nil {
            map["CategoryId"] = self.categoryId!
        }
        if self.docsShrink != nil {
            map["Docs"] = self.docsShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CategoryId"] as? String {
            self.categoryId = value
        }
        if let value = dict["Docs"] as? String {
            self.docsShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class UploadDocResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var docIds: [String]?

        public var existedIds: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.docIds != nil {
                map["DocIds"] = self.docIds!
            }
            if self.existedIds != nil {
                map["ExistedIds"] = self.existedIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DocIds"] as? [String] {
                self.docIds = value
            }
            if let value = dict["ExistedIds"] as? [String] {
                self.existedIds = value
            }
        }
    }
    public var code: String?

    public var data: UploadDocResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UploadDocResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UploadDocResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadDocResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadDocResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ValidateUploadTemplateRequest : Tea.TeaModel {
    public var fileKey: String?

    public var taskType: String?

    public var templateType: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileKey != nil {
            map["FileKey"] = self.fileKey!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.templateType != nil {
            map["TemplateType"] = self.templateType!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileKey"] as? String {
            self.fileKey = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
        if let value = dict["TemplateType"] as? String {
            self.templateType = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ValidateUploadTemplateResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var commentCount: Int32?

        public var dialogueCount: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commentCount != nil {
                map["CommentCount"] = self.commentCount!
            }
            if self.dialogueCount != nil {
                map["DialogueCount"] = self.dialogueCount!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommentCount"] as? Int32 {
                self.commentCount = value
            }
            if let value = dict["DialogueCount"] as? Int32 {
                self.dialogueCount = value
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: ValidateUploadTemplateResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ValidateUploadTemplateResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ValidateUploadTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ValidateUploadTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ValidateUploadTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
