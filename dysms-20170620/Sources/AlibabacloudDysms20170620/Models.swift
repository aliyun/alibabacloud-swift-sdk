import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class AddDomainRequest : Tea.TeaModel {
    public var domain: String?

    public var ownerId: Int64?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class AddDomainResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddDomainNewRequest : Tea.TeaModel {
    public var domain: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class AddDomainNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class AddDomainNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddDomainNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddDomainNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ApplyExportSmsSendRecordNewRequest : Tea.TeaModel {
    public var bizType: Int64?

    public var endDate: String?

    public var errorCode: String?

    public var ownerId: Int64?

    public var phoneNum: String?

    public var prodCode: String?

    public var realTimeDataFlag: Int32?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sendDate: String?

    public var sendStatus: Int64?

    public var signName: String?

    public var startDate: String?

    public var templateCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.endDate != nil {
            map["EndDate"] = self.endDate!
        }
        if self.errorCode != nil {
            map["ErrorCode"] = self.errorCode!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.phoneNum != nil {
            map["PhoneNum"] = self.phoneNum!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.realTimeDataFlag != nil {
            map["RealTimeDataFlag"] = self.realTimeDataFlag!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sendDate != nil {
            map["SendDate"] = self.sendDate!
        }
        if self.sendStatus != nil {
            map["SendStatus"] = self.sendStatus!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.startDate != nil {
            map["StartDate"] = self.startDate!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? Int64 {
            self.bizType = value
        }
        if let value = dict["EndDate"] as? String {
            self.endDate = value
        }
        if let value = dict["ErrorCode"] as? String {
            self.errorCode = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PhoneNum"] as? String {
            self.phoneNum = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RealTimeDataFlag"] as? Int32 {
            self.realTimeDataFlag = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SendDate"] as? String {
            self.sendDate = value
        }
        if let value = dict["SendStatus"] as? Int64 {
            self.sendStatus = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["StartDate"] as? String {
            self.startDate = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
    }
}

public class ApplyExportSmsSendRecordNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class ApplyExportSmsSendRecordNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyExportSmsSendRecordNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ApplyExportSmsSendRecordNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchCreateSmsSignRequest : Tea.TeaModel {
    public class ColumnIndexMappingRule : Tea.TeaModel {
        public var adminIdentifiedNumber: Int32?

        public var adminName: Int32?

        public var companyName: Int32?

        public var legalPersonIdentifiedNumber: Int32?

        public var legalPersonName: Int32?

        public var organizationCode: Int32?

        public var remark: Int32?

        public var sceneDescription: Int32?

        public var signatureName: Int32?

        public var signatureSource: Int32?

        public var templateContent: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.adminIdentifiedNumber != nil {
                map["AdminIdentifiedNumber"] = self.adminIdentifiedNumber!
            }
            if self.adminName != nil {
                map["AdminName"] = self.adminName!
            }
            if self.companyName != nil {
                map["CompanyName"] = self.companyName!
            }
            if self.legalPersonIdentifiedNumber != nil {
                map["LegalPersonIdentifiedNumber"] = self.legalPersonIdentifiedNumber!
            }
            if self.legalPersonName != nil {
                map["LegalPersonName"] = self.legalPersonName!
            }
            if self.organizationCode != nil {
                map["OrganizationCode"] = self.organizationCode!
            }
            if self.remark != nil {
                map["Remark"] = self.remark!
            }
            if self.sceneDescription != nil {
                map["SceneDescription"] = self.sceneDescription!
            }
            if self.signatureName != nil {
                map["SignatureName"] = self.signatureName!
            }
            if self.signatureSource != nil {
                map["SignatureSource"] = self.signatureSource!
            }
            if self.templateContent != nil {
                map["TemplateContent"] = self.templateContent!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AdminIdentifiedNumber"] as? Int32 {
                self.adminIdentifiedNumber = value
            }
            if let value = dict["AdminName"] as? Int32 {
                self.adminName = value
            }
            if let value = dict["CompanyName"] as? Int32 {
                self.companyName = value
            }
            if let value = dict["LegalPersonIdentifiedNumber"] as? Int32 {
                self.legalPersonIdentifiedNumber = value
            }
            if let value = dict["LegalPersonName"] as? Int32 {
                self.legalPersonName = value
            }
            if let value = dict["OrganizationCode"] as? Int32 {
                self.organizationCode = value
            }
            if let value = dict["Remark"] as? Int32 {
                self.remark = value
            }
            if let value = dict["SceneDescription"] as? Int32 {
                self.sceneDescription = value
            }
            if let value = dict["SignatureName"] as? Int32 {
                self.signatureName = value
            }
            if let value = dict["SignatureSource"] as? Int32 {
                self.signatureSource = value
            }
            if let value = dict["TemplateContent"] as? Int32 {
                self.templateContent = value
            }
        }
    }
    public var columnIndexMappingRule: BatchCreateSmsSignRequest.ColumnIndexMappingRule?

    public var extendMessage: String?

    public var fileName: String?

    public var moreData: [String]?

    public var operationType: Int32?

    public var ossKeys: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var remark: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sceneType: Int32?

    public var serviceType: Int32?

    public var signOssKey: String?

    public var userViewFileName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.columnIndexMappingRule?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.columnIndexMappingRule != nil {
            map["ColumnIndexMappingRule"] = self.columnIndexMappingRule?.toMap()
        }
        if self.extendMessage != nil {
            map["ExtendMessage"] = self.extendMessage!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.moreData != nil {
            map["MoreData"] = self.moreData!
        }
        if self.operationType != nil {
            map["OperationType"] = self.operationType!
        }
        if self.ossKeys != nil {
            map["OssKeys"] = self.ossKeys!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sceneType != nil {
            map["SceneType"] = self.sceneType!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        if self.signOssKey != nil {
            map["SignOssKey"] = self.signOssKey!
        }
        if self.userViewFileName != nil {
            map["UserViewFileName"] = self.userViewFileName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ColumnIndexMappingRule"] as? [String: Any?] {
            var model = BatchCreateSmsSignRequest.ColumnIndexMappingRule()
            model.fromMap(value)
            self.columnIndexMappingRule = model
        }
        if let value = dict["ExtendMessage"] as? String {
            self.extendMessage = value
        }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["MoreData"] as? [String] {
            self.moreData = value
        }
        if let value = dict["OperationType"] as? Int32 {
            self.operationType = value
        }
        if let value = dict["OssKeys"] as? String {
            self.ossKeys = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SceneType"] as? Int32 {
            self.sceneType = value
        }
        if let value = dict["ServiceType"] as? Int32 {
            self.serviceType = value
        }
        if let value = dict["SignOssKey"] as? String {
            self.signOssKey = value
        }
        if let value = dict["UserViewFileName"] as? String {
            self.userViewFileName = value
        }
    }
}

public class BatchCreateSmsSignShrinkRequest : Tea.TeaModel {
    public var columnIndexMappingRuleShrink: String?

    public var extendMessage: String?

    public var fileName: String?

    public var moreDataShrink: String?

    public var operationType: Int32?

    public var ossKeys: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var remark: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sceneType: Int32?

    public var serviceType: Int32?

    public var signOssKey: String?

    public var userViewFileName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.columnIndexMappingRuleShrink != nil {
            map["ColumnIndexMappingRule"] = self.columnIndexMappingRuleShrink!
        }
        if self.extendMessage != nil {
            map["ExtendMessage"] = self.extendMessage!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.moreDataShrink != nil {
            map["MoreData"] = self.moreDataShrink!
        }
        if self.operationType != nil {
            map["OperationType"] = self.operationType!
        }
        if self.ossKeys != nil {
            map["OssKeys"] = self.ossKeys!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sceneType != nil {
            map["SceneType"] = self.sceneType!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        if self.signOssKey != nil {
            map["SignOssKey"] = self.signOssKey!
        }
        if self.userViewFileName != nil {
            map["UserViewFileName"] = self.userViewFileName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ColumnIndexMappingRule"] as? String {
            self.columnIndexMappingRuleShrink = value
        }
        if let value = dict["ExtendMessage"] as? String {
            self.extendMessage = value
        }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["MoreData"] as? String {
            self.moreDataShrink = value
        }
        if let value = dict["OperationType"] as? Int32 {
            self.operationType = value
        }
        if let value = dict["OssKeys"] as? String {
            self.ossKeys = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SceneType"] as? Int32 {
            self.sceneType = value
        }
        if let value = dict["ServiceType"] as? Int32 {
            self.serviceType = value
        }
        if let value = dict["SignOssKey"] as? String {
            self.signOssKey = value
        }
        if let value = dict["UserViewFileName"] as? String {
            self.userViewFileName = value
        }
    }
}

public class BatchCreateSmsSignResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var appliedNum: Int32?

        public var availableNum: Int32?

        public var batchCreateSmsSignResult: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appliedNum != nil {
                map["AppliedNum"] = self.appliedNum!
            }
            if self.availableNum != nil {
                map["AvailableNum"] = self.availableNum!
            }
            if self.batchCreateSmsSignResult != nil {
                map["BatchCreateSmsSignResult"] = self.batchCreateSmsSignResult!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppliedNum"] as? Int32 {
                self.appliedNum = value
            }
            if let value = dict["AvailableNum"] as? Int32 {
                self.availableNum = value
            }
            if let value = dict["BatchCreateSmsSignResult"] as? String {
                self.batchCreateSmsSignResult = value
            }
        }
    }
    public var code: String?

    public var data: BatchCreateSmsSignResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = BatchCreateSmsSignResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class BatchCreateSmsSignResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchCreateSmsSignResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchCreateSmsSignResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchDeleteExportSendRecordNewRequest : Tea.TeaModel {
    public var ids: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ids != nil {
            map["Ids"] = self.ids!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ids"] as? String {
            self.ids = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class BatchDeleteExportSendRecordNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class BatchDeleteExportSendRecordNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchDeleteExportSendRecordNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchDeleteExportSendRecordNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchDeleteTaskNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var taskIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.taskIds != nil {
            map["TaskIds"] = self.taskIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TaskIds"] as? String {
            self.taskIds = value
        }
    }
}

public class BatchDeleteTaskNewResponseBody : Tea.TeaModel {
    public var failList: [String]?

    public var requestId: String?

    public var successList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failList != nil {
            map["FailList"] = self.failList!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.successList != nil {
            map["SuccessList"] = self.successList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FailList"] as? [String] {
            self.failList = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SuccessList"] as? [String] {
            self.successList = value
        }
    }
}

public class BatchDeleteTaskNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchDeleteTaskNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchDeleteTaskNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CalculateSmsLengthNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var smsContent: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.smsContent != nil {
            map["SmsContent"] = self.smsContent!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SmsContent"] as? String {
            self.smsContent = value
        }
    }
}

public class CalculateSmsLengthNewResponseBody : Tea.TeaModel {
    public var length: Int32?

    public var number: Int32?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.number != nil {
            map["Number"] = self.number!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Length"] as? Int32 {
            self.length = value
        }
        if let value = dict["Number"] as? Int32 {
            self.number = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CalculateSmsLengthNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CalculateSmsLengthNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CalculateSmsLengthNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CancelSmsSignRequest : Tea.TeaModel {
    public var orderId: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var qualificationId: Int64?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var signatureCode: String?

    public var signatureId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.qualificationId != nil {
            map["QualificationId"] = self.qualificationId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.signatureCode != nil {
            map["SignatureCode"] = self.signatureCode!
        }
        if self.signatureId != nil {
            map["SignatureId"] = self.signatureId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["QualificationId"] as? Int64 {
            self.qualificationId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SignatureCode"] as? String {
            self.signatureCode = value
        }
        if let value = dict["SignatureId"] as? Int64 {
            self.signatureId = value
        }
    }
}

public class CancelSmsSignResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class CancelSmsSignResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CancelSmsSignResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CancelSmsSignResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CancelSmsTemplateRequest : Tea.TeaModel {
    public var orderId: Int64?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? Int64 {
            self.orderId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
    }
}

public class CancelSmsTemplateResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CancelSmsTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CancelSmsTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CancelSmsTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CancelSmsTemplateNewRequest : Tea.TeaModel {
    public var intelligentApproval: Bool?

    public var orderId: Int64?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.intelligentApproval != nil {
            map["IntelligentApproval"] = self.intelligentApproval!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IntelligentApproval"] as? Bool {
            self.intelligentApproval = value
        }
        if let value = dict["OrderId"] as? Int64 {
            self.orderId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
    }
}

public class CancelSmsTemplateNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class CancelSmsTemplateNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CancelSmsTemplateNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CancelSmsTemplateNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckSmsSignNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CheckSmsSignNewResponseBody : Tea.TeaModel {
    public var common: Bool?

    public var requestId: String?

    public var verification: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.common != nil {
            map["Common"] = self.common!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.verification != nil {
            map["Verification"] = self.verification!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Common"] as? Bool {
            self.common = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Verification"] as? Bool {
            self.verification = value
        }
    }
}

public class CheckSmsSignNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckSmsSignNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckSmsSignNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAlicomProductRequest : Tea.TeaModel {
    public var busOffer: Int64?

    public var busOffers: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.busOffer != nil {
            map["BusOffer"] = self.busOffer!
        }
        if self.busOffers != nil {
            map["BusOffers"] = self.busOffers!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusOffer"] as? Int64 {
            self.busOffer = value
        }
        if let value = dict["BusOffers"] as? String {
            self.busOffers = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateAlicomProductResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class CreateAlicomProductResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAlicomProductResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAlicomProductResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAuthorizationRequest : Tea.TeaModel {
    public var authorizeCode: String?

    public var ownerId: Int64?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authorizeCode != nil {
            map["AuthorizeCode"] = self.authorizeCode!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthorizeCode"] as? String {
            self.authorizeCode = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateAuthorizationResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class CreateAuthorizationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAuthorizationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAuthorizationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCardMessageCallbackRequest : Tea.TeaModel {
    public var bizType: String?

    public var callbackUrl: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.callbackUrl != nil {
            map["CallbackUrl"] = self.callbackUrl!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["CallbackUrl"] as? String {
            self.callbackUrl = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateCardMessageCallbackResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var testFailCode: String?

    public var testResponse: String?

    public var testSuccess: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.testFailCode != nil {
            map["TestFailCode"] = self.testFailCode!
        }
        if self.testResponse != nil {
            map["TestResponse"] = self.testResponse!
        }
        if self.testSuccess != nil {
            map["TestSuccess"] = self.testSuccess!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TestFailCode"] as? String {
            self.testFailCode = value
        }
        if let value = dict["TestResponse"] as? String {
            self.testResponse = value
        }
        if let value = dict["TestSuccess"] as? Bool {
            self.testSuccess = value
        }
    }
}

public class CreateCardMessageCallbackResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCardMessageCallbackResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCardMessageCallbackResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCardMessageQueueRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var queueType: String?

    public var region: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.queueType != nil {
            map["QueueType"] = self.queueType!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["QueueType"] as? String {
            self.queueType = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateCardMessageQueueResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class CreateCardMessageQueueResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCardMessageQueueResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCardMessageQueueResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDigitalSmsTemplateNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var contentOssKeys: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var remark: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateContent: String?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.contentOssKeys != nil {
            map["ContentOssKeys"] = self.contentOssKeys!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateContent != nil {
            map["TemplateContent"] = self.templateContent!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["ContentOssKeys"] as? String {
            self.contentOssKeys = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateContent"] as? String {
            self.templateContent = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class CreateDigitalSmsTemplateNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class CreateDigitalSmsTemplateNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDigitalSmsTemplateNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDigitalSmsTemplateNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateFileByBizRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateFileByBizResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class CreateFileByBizResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateFileByBizResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateFileByBizResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateFlowLimitRequest : Tea.TeaModel {
    public var dailyLimit: String?

    public var hourLimit: String?

    public var minuteLimit: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dailyLimit != nil {
            map["DailyLimit"] = self.dailyLimit!
        }
        if self.hourLimit != nil {
            map["HourLimit"] = self.hourLimit!
        }
        if self.minuteLimit != nil {
            map["MinuteLimit"] = self.minuteLimit!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DailyLimit"] as? String {
            self.dailyLimit = value
        }
        if let value = dict["HourLimit"] as? String {
            self.hourLimit = value
        }
        if let value = dict["MinuteLimit"] as? String {
            self.minuteLimit = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateFlowLimitResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class CreateFlowLimitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateFlowLimitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateFlowLimitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateFlowLimitNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var dailyLimit: String?

    public var hourLimit: String?

    public var minuteLimit: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.dailyLimit != nil {
            map["DailyLimit"] = self.dailyLimit!
        }
        if self.hourLimit != nil {
            map["HourLimit"] = self.hourLimit!
        }
        if self.minuteLimit != nil {
            map["MinuteLimit"] = self.minuteLimit!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["DailyLimit"] as? String {
            self.dailyLimit = value
        }
        if let value = dict["HourLimit"] as? String {
            self.hourLimit = value
        }
        if let value = dict["MinuteLimit"] as? String {
            self.minuteLimit = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateFlowLimitNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class CreateFlowLimitNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateFlowLimitNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateFlowLimitNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMessageCallbackNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var callbackUrl: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.callbackUrl != nil {
            map["CallbackUrl"] = self.callbackUrl!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["CallbackUrl"] as? String {
            self.callbackUrl = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateMessageCallbackNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var testFailCode: String?

    public var testResponse: String?

    public var testSuccess: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.testFailCode != nil {
            map["TestFailCode"] = self.testFailCode!
        }
        if self.testResponse != nil {
            map["TestResponse"] = self.testResponse!
        }
        if self.testSuccess != nil {
            map["TestSuccess"] = self.testSuccess!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TestFailCode"] as? String {
            self.testFailCode = value
        }
        if let value = dict["TestResponse"] as? String {
            self.testResponse = value
        }
        if let value = dict["TestSuccess"] as? Bool {
            self.testSuccess = value
        }
    }
}

public class CreateMessageCallbackNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMessageCallbackNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMessageCallbackNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMessageCallbackTestNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var content: String?

    public var method: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.method != nil {
            map["Method"] = self.method!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["Method"] as? String {
            self.method = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class CreateMessageCallbackTestNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var testFailCode: String?

    public var testResponse: String?

    public var testSuccess: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.testFailCode != nil {
            map["TestFailCode"] = self.testFailCode!
        }
        if self.testResponse != nil {
            map["TestResponse"] = self.testResponse!
        }
        if self.testSuccess != nil {
            map["TestSuccess"] = self.testSuccess!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TestFailCode"] as? String {
            self.testFailCode = value
        }
        if let value = dict["TestResponse"] as? String {
            self.testResponse = value
        }
        if let value = dict["TestSuccess"] as? Bool {
            self.testSuccess = value
        }
    }
}

public class CreateMessageCallbackTestNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMessageCallbackTestNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMessageCallbackTestNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMessageQueueNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var queueType: String?

    public var region: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.queueType != nil {
            map["QueueType"] = self.queueType!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["QueueType"] as? String {
            self.queueType = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateMessageQueueNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class CreateMessageQueueNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMessageQueueNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMessageQueueNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePhoneWhiteListRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var phoneNumbers: String?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.phoneNumbers != nil {
            map["PhoneNumbers"] = self.phoneNumbers!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PhoneNumbers"] as? String {
            self.phoneNumbers = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreatePhoneWhiteListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class CreatePhoneWhiteListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePhoneWhiteListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePhoneWhiteListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePhoneWhiteListNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var phoneNumbers: String?

    public var prodCode: String?

    public var remarks: [String]?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.phoneNumbers != nil {
            map["PhoneNumbers"] = self.phoneNumbers!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.remarks != nil {
            map["Remarks"] = self.remarks!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PhoneNumbers"] as? String {
            self.phoneNumbers = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["Remarks"] as? [String] {
            self.remarks = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreatePhoneWhiteListNewShrinkRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var phoneNumbers: String?

    public var prodCode: String?

    public var remarksShrink: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.phoneNumbers != nil {
            map["PhoneNumbers"] = self.phoneNumbers!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.remarksShrink != nil {
            map["Remarks"] = self.remarksShrink!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PhoneNumbers"] as? String {
            self.phoneNumbers = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["Remarks"] as? String {
            self.remarksShrink = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreatePhoneWhiteListNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class CreatePhoneWhiteListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePhoneWhiteListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePhoneWhiteListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePkgThresholdRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var packageWarningLimit: String?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.packageWarningLimit != nil {
            map["PackageWarningLimit"] = self.packageWarningLimit!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PackageWarningLimit"] as? String {
            self.packageWarningLimit = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreatePkgThresholdResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class CreatePkgThresholdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePkgThresholdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePkgThresholdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePkgThresholdNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var packageWarningLimit: String?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.packageWarningLimit != nil {
            map["PackageWarningLimit"] = self.packageWarningLimit!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PackageWarningLimit"] as? String {
            self.packageWarningLimit = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreatePkgThresholdNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class CreatePkgThresholdNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePkgThresholdNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePkgThresholdNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePrevLimitNewRequest : Tea.TeaModel {
    public var hourLimit: Int64?

    public var increaseRate: Int32?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var successRate: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hourLimit != nil {
            map["HourLimit"] = self.hourLimit!
        }
        if self.increaseRate != nil {
            map["IncreaseRate"] = self.increaseRate!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.successRate != nil {
            map["SuccessRate"] = self.successRate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["HourLimit"] as? Int64 {
            self.hourLimit = value
        }
        if let value = dict["IncreaseRate"] as? Int32 {
            self.increaseRate = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SuccessRate"] as? Int32 {
            self.successRate = value
        }
    }
}

public class CreatePrevLimitNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class CreatePrevLimitNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePrevLimitNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePrevLimitNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateProductRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateProductResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
    }
}

public class CreateProductResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateProductResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateProductResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateProductNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateProductNewResponseBody : Tea.TeaModel {
    public var openResult: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openResult != nil {
            map["OpenResult"] = self.openResult!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenResult"] as? Bool {
            self.openResult = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateProductNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateProductNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateProductNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateShortUrlNewRequest : Tea.TeaModel {
    public var effectDay: Int32?

    public var eventName: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sourceUrl: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.effectDay != nil {
            map["EffectDay"] = self.effectDay!
        }
        if self.eventName != nil {
            map["EventName"] = self.eventName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sourceUrl != nil {
            map["SourceUrl"] = self.sourceUrl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EffectDay"] as? Int32 {
            self.effectDay = value
        }
        if let value = dict["EventName"] as? String {
            self.eventName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SourceUrl"] as? String {
            self.sourceUrl = value
        }
    }
}

public class CreateShortUrlNewResponseBody : Tea.TeaModel {
    public var eventName: String?

    public var gmtCreateTime: String?

    public var gmtInvalidTime: String?

    public var id: String?

    public var requestId: String?

    public var shortUrl: String?

    public var sourceUrl: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventName != nil {
            map["EventName"] = self.eventName!
        }
        if self.gmtCreateTime != nil {
            map["GmtCreateTime"] = self.gmtCreateTime!
        }
        if self.gmtInvalidTime != nil {
            map["GmtInvalidTime"] = self.gmtInvalidTime!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.shortUrl != nil {
            map["ShortUrl"] = self.shortUrl!
        }
        if self.sourceUrl != nil {
            map["SourceUrl"] = self.sourceUrl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventName"] as? String {
            self.eventName = value
        }
        if let value = dict["GmtCreateTime"] as? String {
            self.gmtCreateTime = value
        }
        if let value = dict["GmtInvalidTime"] as? String {
            self.gmtInvalidTime = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ShortUrl"] as? String {
            self.shortUrl = value
        }
        if let value = dict["SourceUrl"] as? String {
            self.sourceUrl = value
        }
    }
}

public class CreateShortUrlNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateShortUrlNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateShortUrlNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSmsDetectTaskNewRequest : Tea.TeaModel {
    public var check: Bool?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var signName: String?

    public var smsContent: String?

    public var templateCode: String?

    public var templateParam: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.check != nil {
            map["Check"] = self.check!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.smsContent != nil {
            map["SmsContent"] = self.smsContent!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        if self.templateParam != nil {
            map["TemplateParam"] = self.templateParam!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Check"] as? Bool {
            self.check = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["SmsContent"] as? String {
            self.smsContent = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["TemplateParam"] as? String {
            self.templateParam = value
        }
    }
}

public class CreateSmsDetectTaskNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class CreateSmsDetectTaskNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSmsDetectTaskNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSmsDetectTaskNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSmsInternalApplyRequest : Tea.TeaModel {
    public var appDownloadLink: String?

    public var country: String?

    public var industry: String?

    public var ownerId: Int64?

    public var pageLink: String?

    public var prodCode: String?

    public var remark: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appDownloadLink != nil {
            map["AppDownloadLink"] = self.appDownloadLink!
        }
        if self.country != nil {
            map["Country"] = self.country!
        }
        if self.industry != nil {
            map["Industry"] = self.industry!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageLink != nil {
            map["PageLink"] = self.pageLink!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppDownloadLink"] as? String {
            self.appDownloadLink = value
        }
        if let value = dict["Country"] as? String {
            self.country = value
        }
        if let value = dict["Industry"] as? String {
            self.industry = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageLink"] as? String {
            self.pageLink = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class CreateSmsInternalApplyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class CreateSmsInternalApplyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSmsInternalApplyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSmsInternalApplyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSmsProductForChannelCustRequest : Tea.TeaModel {
    public var channelId: Int32?

    public var onlyCheckOpened: Bool?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.channelId != nil {
            map["ChannelId"] = self.channelId!
        }
        if self.onlyCheckOpened != nil {
            map["OnlyCheckOpened"] = self.onlyCheckOpened!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ChannelId"] as? Int32 {
            self.channelId = value
        }
        if let value = dict["OnlyCheckOpened"] as? Bool {
            self.onlyCheckOpened = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateSmsProductForChannelCustResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class CreateSmsProductForChannelCustResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSmsProductForChannelCustResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSmsProductForChannelCustResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSmsSaasTaskRequest : Tea.TeaModel {
    public var bizType: String?

    public var clientIp: String?

    public var dataType: String?

    public var orderTime: String?

    public var ossFileName: String?

    public var ownerId: Int64?

    public var phoneList: String?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var scheduleType: String?

    public var signName: String?

    public var smsContent: String?

    public var smsTemplateCode: String?

    public var taskName: String?

    public var validCount: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.clientIp != nil {
            map["ClientIp"] = self.clientIp!
        }
        if self.dataType != nil {
            map["DataType"] = self.dataType!
        }
        if self.orderTime != nil {
            map["OrderTime"] = self.orderTime!
        }
        if self.ossFileName != nil {
            map["OssFileName"] = self.ossFileName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.phoneList != nil {
            map["PhoneList"] = self.phoneList!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.scheduleType != nil {
            map["ScheduleType"] = self.scheduleType!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.smsContent != nil {
            map["SmsContent"] = self.smsContent!
        }
        if self.smsTemplateCode != nil {
            map["SmsTemplateCode"] = self.smsTemplateCode!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.validCount != nil {
            map["ValidCount"] = self.validCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["ClientIp"] as? String {
            self.clientIp = value
        }
        if let value = dict["DataType"] as? String {
            self.dataType = value
        }
        if let value = dict["OrderTime"] as? String {
            self.orderTime = value
        }
        if let value = dict["OssFileName"] as? String {
            self.ossFileName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PhoneList"] as? String {
            self.phoneList = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ScheduleType"] as? String {
            self.scheduleType = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["SmsContent"] as? String {
            self.smsContent = value
        }
        if let value = dict["SmsTemplateCode"] as? String {
            self.smsTemplateCode = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["ValidCount"] as? String {
            self.validCount = value
        }
    }
}

public class CreateSmsSaasTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class CreateSmsSaasTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSmsSaasTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSmsSaasTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSmsSaasTaskNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var dataAbilityTaskId: String?

    public var dataType: String?

    public var orderTime: String?

    public var ossFileName: String?

    public var ownerId: Int64?

    public var phoneList: String?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var scheduleType: String?

    public var signName: String?

    public var smsContent: String?

    public var smsTemplateCode: String?

    public var taskName: String?

    public var validCount: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.dataAbilityTaskId != nil {
            map["DataAbilityTaskId"] = self.dataAbilityTaskId!
        }
        if self.dataType != nil {
            map["DataType"] = self.dataType!
        }
        if self.orderTime != nil {
            map["OrderTime"] = self.orderTime!
        }
        if self.ossFileName != nil {
            map["OssFileName"] = self.ossFileName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.phoneList != nil {
            map["PhoneList"] = self.phoneList!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.scheduleType != nil {
            map["ScheduleType"] = self.scheduleType!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.smsContent != nil {
            map["SmsContent"] = self.smsContent!
        }
        if self.smsTemplateCode != nil {
            map["SmsTemplateCode"] = self.smsTemplateCode!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.validCount != nil {
            map["ValidCount"] = self.validCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["DataAbilityTaskId"] as? String {
            self.dataAbilityTaskId = value
        }
        if let value = dict["DataType"] as? String {
            self.dataType = value
        }
        if let value = dict["OrderTime"] as? String {
            self.orderTime = value
        }
        if let value = dict["OssFileName"] as? String {
            self.ossFileName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PhoneList"] as? String {
            self.phoneList = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ScheduleType"] as? String {
            self.scheduleType = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["SmsContent"] as? String {
            self.smsContent = value
        }
        if let value = dict["SmsTemplateCode"] as? String {
            self.smsTemplateCode = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["ValidCount"] as? String {
            self.validCount = value
        }
    }
}

public class CreateSmsSaasTaskNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSmsSaasTaskNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSmsSaasTaskNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSmsSaasTaskNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSmsSendFailDetailsDownloadRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sendDate: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sendDate != nil {
            map["SendDate"] = self.sendDate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SendDate"] as? String {
            self.sendDate = value
        }
    }
}

public class CreateSmsSendFailDetailsDownloadResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class CreateSmsSendFailDetailsDownloadResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSmsSendFailDetailsDownloadResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSmsSendFailDetailsDownloadResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSmsSignRequest : Tea.TeaModel {
    public var extendMessage: String?

    public var fileIds: String?

    public var orderId: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var remark: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sceneType: Int32?

    public var serviceType: Int32?

    public var signName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.extendMessage != nil {
            map["ExtendMessage"] = self.extendMessage!
        }
        if self.fileIds != nil {
            map["FileIds"] = self.fileIds!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sceneType != nil {
            map["SceneType"] = self.sceneType!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExtendMessage"] as? String {
            self.extendMessage = value
        }
        if let value = dict["FileIds"] as? String {
            self.fileIds = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SceneType"] as? Int32 {
            self.sceneType = value
        }
        if let value = dict["ServiceType"] as? Int32 {
            self.serviceType = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
    }
}

public class CreateSmsSignResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class CreateSmsSignResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSmsSignResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSmsSignResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSmsSignNewRequest : Tea.TeaModel {
    public var applicationSceneId: Int64?

    public var applySource: String?

    public var authorization: String?

    public var authorizationEffTime: String?

    public var authorizationLetter: String?

    public var authorizationLetterAuditPass: Bool?

    public var authorizationLetterId: Int64?

    public var authorizationLetterName: String?

    public var authorizationSignScope: String?

    public var createSignGray: Bool?

    public var enableAuthorizationLetter: Bool?

    public var extendMessage: String?

    public var fileIds: String?

    public var isAuthorizationLetterOCRComplete: Bool?

    public var isAuthorizationLetterOCRDiff: Bool?

    public var isSignScopeOCRDiff: Bool?

    public var moreData: [String]?

    public var orderId: String?

    public var organizationCode: String?

    public var ossKeys: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var proxyAuthorization: String?

    public var qualificationId: Int64?

    public var qualificationType: Int64?

    public var qualificationVersion: Int64?

    public var remark: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sceneType: Int32?

    public var serviceType: Int32?

    public var signCode: String?

    public var signId: String?

    public var signName: String?

    public var signScopeOCR: String?

    public var signUpgrade: Bool?

    public var thirdParty: Bool?

    public var userViewFileName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationSceneId != nil {
            map["ApplicationSceneId"] = self.applicationSceneId!
        }
        if self.applySource != nil {
            map["ApplySource"] = self.applySource!
        }
        if self.authorization != nil {
            map["Authorization"] = self.authorization!
        }
        if self.authorizationEffTime != nil {
            map["AuthorizationEffTime"] = self.authorizationEffTime!
        }
        if self.authorizationLetter != nil {
            map["AuthorizationLetter"] = self.authorizationLetter!
        }
        if self.authorizationLetterAuditPass != nil {
            map["AuthorizationLetterAuditPass"] = self.authorizationLetterAuditPass!
        }
        if self.authorizationLetterId != nil {
            map["AuthorizationLetterId"] = self.authorizationLetterId!
        }
        if self.authorizationLetterName != nil {
            map["AuthorizationLetterName"] = self.authorizationLetterName!
        }
        if self.authorizationSignScope != nil {
            map["AuthorizationSignScope"] = self.authorizationSignScope!
        }
        if self.createSignGray != nil {
            map["CreateSignGray"] = self.createSignGray!
        }
        if self.enableAuthorizationLetter != nil {
            map["EnableAuthorizationLetter"] = self.enableAuthorizationLetter!
        }
        if self.extendMessage != nil {
            map["ExtendMessage"] = self.extendMessage!
        }
        if self.fileIds != nil {
            map["FileIds"] = self.fileIds!
        }
        if self.isAuthorizationLetterOCRComplete != nil {
            map["IsAuthorizationLetterOCRComplete"] = self.isAuthorizationLetterOCRComplete!
        }
        if self.isAuthorizationLetterOCRDiff != nil {
            map["IsAuthorizationLetterOCRDiff"] = self.isAuthorizationLetterOCRDiff!
        }
        if self.isSignScopeOCRDiff != nil {
            map["IsSignScopeOCRDiff"] = self.isSignScopeOCRDiff!
        }
        if self.moreData != nil {
            map["MoreData"] = self.moreData!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.organizationCode != nil {
            map["OrganizationCode"] = self.organizationCode!
        }
        if self.ossKeys != nil {
            map["OssKeys"] = self.ossKeys!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.proxyAuthorization != nil {
            map["ProxyAuthorization"] = self.proxyAuthorization!
        }
        if self.qualificationId != nil {
            map["QualificationId"] = self.qualificationId!
        }
        if self.qualificationType != nil {
            map["QualificationType"] = self.qualificationType!
        }
        if self.qualificationVersion != nil {
            map["QualificationVersion"] = self.qualificationVersion!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sceneType != nil {
            map["SceneType"] = self.sceneType!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        if self.signCode != nil {
            map["SignCode"] = self.signCode!
        }
        if self.signId != nil {
            map["SignId"] = self.signId!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.signScopeOCR != nil {
            map["SignScopeOCR"] = self.signScopeOCR!
        }
        if self.signUpgrade != nil {
            map["SignUpgrade"] = self.signUpgrade!
        }
        if self.thirdParty != nil {
            map["ThirdParty"] = self.thirdParty!
        }
        if self.userViewFileName != nil {
            map["UserViewFileName"] = self.userViewFileName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationSceneId"] as? Int64 {
            self.applicationSceneId = value
        }
        if let value = dict["ApplySource"] as? String {
            self.applySource = value
        }
        if let value = dict["Authorization"] as? String {
            self.authorization = value
        }
        if let value = dict["AuthorizationEffTime"] as? String {
            self.authorizationEffTime = value
        }
        if let value = dict["AuthorizationLetter"] as? String {
            self.authorizationLetter = value
        }
        if let value = dict["AuthorizationLetterAuditPass"] as? Bool {
            self.authorizationLetterAuditPass = value
        }
        if let value = dict["AuthorizationLetterId"] as? Int64 {
            self.authorizationLetterId = value
        }
        if let value = dict["AuthorizationLetterName"] as? String {
            self.authorizationLetterName = value
        }
        if let value = dict["AuthorizationSignScope"] as? String {
            self.authorizationSignScope = value
        }
        if let value = dict["CreateSignGray"] as? Bool {
            self.createSignGray = value
        }
        if let value = dict["EnableAuthorizationLetter"] as? Bool {
            self.enableAuthorizationLetter = value
        }
        if let value = dict["ExtendMessage"] as? String {
            self.extendMessage = value
        }
        if let value = dict["FileIds"] as? String {
            self.fileIds = value
        }
        if let value = dict["IsAuthorizationLetterOCRComplete"] as? Bool {
            self.isAuthorizationLetterOCRComplete = value
        }
        if let value = dict["IsAuthorizationLetterOCRDiff"] as? Bool {
            self.isAuthorizationLetterOCRDiff = value
        }
        if let value = dict["IsSignScopeOCRDiff"] as? Bool {
            self.isSignScopeOCRDiff = value
        }
        if let value = dict["MoreData"] as? [String] {
            self.moreData = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["OrganizationCode"] as? String {
            self.organizationCode = value
        }
        if let value = dict["OssKeys"] as? String {
            self.ossKeys = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProxyAuthorization"] as? String {
            self.proxyAuthorization = value
        }
        if let value = dict["QualificationId"] as? Int64 {
            self.qualificationId = value
        }
        if let value = dict["QualificationType"] as? Int64 {
            self.qualificationType = value
        }
        if let value = dict["QualificationVersion"] as? Int64 {
            self.qualificationVersion = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SceneType"] as? Int32 {
            self.sceneType = value
        }
        if let value = dict["ServiceType"] as? Int32 {
            self.serviceType = value
        }
        if let value = dict["SignCode"] as? String {
            self.signCode = value
        }
        if let value = dict["SignId"] as? String {
            self.signId = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["SignScopeOCR"] as? String {
            self.signScopeOCR = value
        }
        if let value = dict["SignUpgrade"] as? Bool {
            self.signUpgrade = value
        }
        if let value = dict["ThirdParty"] as? Bool {
            self.thirdParty = value
        }
        if let value = dict["UserViewFileName"] as? String {
            self.userViewFileName = value
        }
    }
}

public class CreateSmsSignNewShrinkRequest : Tea.TeaModel {
    public var applicationSceneId: Int64?

    public var applySource: String?

    public var authorization: String?

    public var authorizationEffTime: String?

    public var authorizationLetter: String?

    public var authorizationLetterAuditPass: Bool?

    public var authorizationLetterId: Int64?

    public var authorizationLetterName: String?

    public var authorizationSignScope: String?

    public var createSignGray: Bool?

    public var enableAuthorizationLetter: Bool?

    public var extendMessage: String?

    public var fileIds: String?

    public var isAuthorizationLetterOCRComplete: Bool?

    public var isAuthorizationLetterOCRDiff: Bool?

    public var isSignScopeOCRDiff: Bool?

    public var moreDataShrink: String?

    public var orderId: String?

    public var organizationCode: String?

    public var ossKeys: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var proxyAuthorization: String?

    public var qualificationId: Int64?

    public var qualificationType: Int64?

    public var qualificationVersion: Int64?

    public var remark: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sceneType: Int32?

    public var serviceType: Int32?

    public var signCode: String?

    public var signId: String?

    public var signName: String?

    public var signScopeOCR: String?

    public var signUpgrade: Bool?

    public var thirdParty: Bool?

    public var userViewFileName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applicationSceneId != nil {
            map["ApplicationSceneId"] = self.applicationSceneId!
        }
        if self.applySource != nil {
            map["ApplySource"] = self.applySource!
        }
        if self.authorization != nil {
            map["Authorization"] = self.authorization!
        }
        if self.authorizationEffTime != nil {
            map["AuthorizationEffTime"] = self.authorizationEffTime!
        }
        if self.authorizationLetter != nil {
            map["AuthorizationLetter"] = self.authorizationLetter!
        }
        if self.authorizationLetterAuditPass != nil {
            map["AuthorizationLetterAuditPass"] = self.authorizationLetterAuditPass!
        }
        if self.authorizationLetterId != nil {
            map["AuthorizationLetterId"] = self.authorizationLetterId!
        }
        if self.authorizationLetterName != nil {
            map["AuthorizationLetterName"] = self.authorizationLetterName!
        }
        if self.authorizationSignScope != nil {
            map["AuthorizationSignScope"] = self.authorizationSignScope!
        }
        if self.createSignGray != nil {
            map["CreateSignGray"] = self.createSignGray!
        }
        if self.enableAuthorizationLetter != nil {
            map["EnableAuthorizationLetter"] = self.enableAuthorizationLetter!
        }
        if self.extendMessage != nil {
            map["ExtendMessage"] = self.extendMessage!
        }
        if self.fileIds != nil {
            map["FileIds"] = self.fileIds!
        }
        if self.isAuthorizationLetterOCRComplete != nil {
            map["IsAuthorizationLetterOCRComplete"] = self.isAuthorizationLetterOCRComplete!
        }
        if self.isAuthorizationLetterOCRDiff != nil {
            map["IsAuthorizationLetterOCRDiff"] = self.isAuthorizationLetterOCRDiff!
        }
        if self.isSignScopeOCRDiff != nil {
            map["IsSignScopeOCRDiff"] = self.isSignScopeOCRDiff!
        }
        if self.moreDataShrink != nil {
            map["MoreData"] = self.moreDataShrink!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.organizationCode != nil {
            map["OrganizationCode"] = self.organizationCode!
        }
        if self.ossKeys != nil {
            map["OssKeys"] = self.ossKeys!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.proxyAuthorization != nil {
            map["ProxyAuthorization"] = self.proxyAuthorization!
        }
        if self.qualificationId != nil {
            map["QualificationId"] = self.qualificationId!
        }
        if self.qualificationType != nil {
            map["QualificationType"] = self.qualificationType!
        }
        if self.qualificationVersion != nil {
            map["QualificationVersion"] = self.qualificationVersion!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sceneType != nil {
            map["SceneType"] = self.sceneType!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        if self.signCode != nil {
            map["SignCode"] = self.signCode!
        }
        if self.signId != nil {
            map["SignId"] = self.signId!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.signScopeOCR != nil {
            map["SignScopeOCR"] = self.signScopeOCR!
        }
        if self.signUpgrade != nil {
            map["SignUpgrade"] = self.signUpgrade!
        }
        if self.thirdParty != nil {
            map["ThirdParty"] = self.thirdParty!
        }
        if self.userViewFileName != nil {
            map["UserViewFileName"] = self.userViewFileName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplicationSceneId"] as? Int64 {
            self.applicationSceneId = value
        }
        if let value = dict["ApplySource"] as? String {
            self.applySource = value
        }
        if let value = dict["Authorization"] as? String {
            self.authorization = value
        }
        if let value = dict["AuthorizationEffTime"] as? String {
            self.authorizationEffTime = value
        }
        if let value = dict["AuthorizationLetter"] as? String {
            self.authorizationLetter = value
        }
        if let value = dict["AuthorizationLetterAuditPass"] as? Bool {
            self.authorizationLetterAuditPass = value
        }
        if let value = dict["AuthorizationLetterId"] as? Int64 {
            self.authorizationLetterId = value
        }
        if let value = dict["AuthorizationLetterName"] as? String {
            self.authorizationLetterName = value
        }
        if let value = dict["AuthorizationSignScope"] as? String {
            self.authorizationSignScope = value
        }
        if let value = dict["CreateSignGray"] as? Bool {
            self.createSignGray = value
        }
        if let value = dict["EnableAuthorizationLetter"] as? Bool {
            self.enableAuthorizationLetter = value
        }
        if let value = dict["ExtendMessage"] as? String {
            self.extendMessage = value
        }
        if let value = dict["FileIds"] as? String {
            self.fileIds = value
        }
        if let value = dict["IsAuthorizationLetterOCRComplete"] as? Bool {
            self.isAuthorizationLetterOCRComplete = value
        }
        if let value = dict["IsAuthorizationLetterOCRDiff"] as? Bool {
            self.isAuthorizationLetterOCRDiff = value
        }
        if let value = dict["IsSignScopeOCRDiff"] as? Bool {
            self.isSignScopeOCRDiff = value
        }
        if let value = dict["MoreData"] as? String {
            self.moreDataShrink = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["OrganizationCode"] as? String {
            self.organizationCode = value
        }
        if let value = dict["OssKeys"] as? String {
            self.ossKeys = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProxyAuthorization"] as? String {
            self.proxyAuthorization = value
        }
        if let value = dict["QualificationId"] as? Int64 {
            self.qualificationId = value
        }
        if let value = dict["QualificationType"] as? Int64 {
            self.qualificationType = value
        }
        if let value = dict["QualificationVersion"] as? Int64 {
            self.qualificationVersion = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SceneType"] as? Int32 {
            self.sceneType = value
        }
        if let value = dict["ServiceType"] as? Int32 {
            self.serviceType = value
        }
        if let value = dict["SignCode"] as? String {
            self.signCode = value
        }
        if let value = dict["SignId"] as? String {
            self.signId = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["SignScopeOCR"] as? String {
            self.signScopeOCR = value
        }
        if let value = dict["SignUpgrade"] as? Bool {
            self.signUpgrade = value
        }
        if let value = dict["ThirdParty"] as? Bool {
            self.thirdParty = value
        }
        if let value = dict["UserViewFileName"] as? String {
            self.userViewFileName = value
        }
    }
}

public class CreateSmsSignNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class CreateSmsSignNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSmsSignNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSmsSignNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSmsTemplateNewRequest : Tea.TeaModel {
    public var aiTemplate: Int64?

    public var aiTemplateUuid: String?

    public var applicationSceneId: Int64?

    public var applySource: String?

    public var bizType: String?

    public var intlType: Int32?

    public var moreData: [String]?

    public var orderId: String?

    public var ossKeys: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var productUrl: String?

    public var relatedSignName: String?

    public var relatedSignOrderId: String?

    public var relatedSignUsageName: String?

    public var remark: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var rmdTemplateId: Int64?

    public var templateCode: String?

    public var templateContent: String?

    public var templateName: String?

    public var templateRule: String?

    public var userViewFileName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aiTemplate != nil {
            map["AiTemplate"] = self.aiTemplate!
        }
        if self.aiTemplateUuid != nil {
            map["AiTemplateUuid"] = self.aiTemplateUuid!
        }
        if self.applicationSceneId != nil {
            map["ApplicationSceneId"] = self.applicationSceneId!
        }
        if self.applySource != nil {
            map["ApplySource"] = self.applySource!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.intlType != nil {
            map["IntlType"] = self.intlType!
        }
        if self.moreData != nil {
            map["MoreData"] = self.moreData!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.ossKeys != nil {
            map["OssKeys"] = self.ossKeys!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.productUrl != nil {
            map["ProductUrl"] = self.productUrl!
        }
        if self.relatedSignName != nil {
            map["RelatedSignName"] = self.relatedSignName!
        }
        if self.relatedSignOrderId != nil {
            map["RelatedSignOrderId"] = self.relatedSignOrderId!
        }
        if self.relatedSignUsageName != nil {
            map["RelatedSignUsageName"] = self.relatedSignUsageName!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.rmdTemplateId != nil {
            map["RmdTemplateId"] = self.rmdTemplateId!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        if self.templateContent != nil {
            map["TemplateContent"] = self.templateContent!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.templateRule != nil {
            map["TemplateRule"] = self.templateRule!
        }
        if self.userViewFileName != nil {
            map["UserViewFileName"] = self.userViewFileName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AiTemplate"] as? Int64 {
            self.aiTemplate = value
        }
        if let value = dict["AiTemplateUuid"] as? String {
            self.aiTemplateUuid = value
        }
        if let value = dict["ApplicationSceneId"] as? Int64 {
            self.applicationSceneId = value
        }
        if let value = dict["ApplySource"] as? String {
            self.applySource = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["IntlType"] as? Int32 {
            self.intlType = value
        }
        if let value = dict["MoreData"] as? [String] {
            self.moreData = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["OssKeys"] as? String {
            self.ossKeys = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProductUrl"] as? String {
            self.productUrl = value
        }
        if let value = dict["RelatedSignName"] as? String {
            self.relatedSignName = value
        }
        if let value = dict["RelatedSignOrderId"] as? String {
            self.relatedSignOrderId = value
        }
        if let value = dict["RelatedSignUsageName"] as? String {
            self.relatedSignUsageName = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["RmdTemplateId"] as? Int64 {
            self.rmdTemplateId = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["TemplateContent"] as? String {
            self.templateContent = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TemplateRule"] as? String {
            self.templateRule = value
        }
        if let value = dict["UserViewFileName"] as? String {
            self.userViewFileName = value
        }
    }
}

public class CreateSmsTemplateNewShrinkRequest : Tea.TeaModel {
    public var aiTemplate: Int64?

    public var aiTemplateUuid: String?

    public var applicationSceneId: Int64?

    public var applySource: String?

    public var bizType: String?

    public var intlType: Int32?

    public var moreDataShrink: String?

    public var orderId: String?

    public var ossKeys: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var productUrl: String?

    public var relatedSignName: String?

    public var relatedSignOrderId: String?

    public var relatedSignUsageName: String?

    public var remark: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var rmdTemplateId: Int64?

    public var templateCode: String?

    public var templateContent: String?

    public var templateName: String?

    public var templateRule: String?

    public var userViewFileName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aiTemplate != nil {
            map["AiTemplate"] = self.aiTemplate!
        }
        if self.aiTemplateUuid != nil {
            map["AiTemplateUuid"] = self.aiTemplateUuid!
        }
        if self.applicationSceneId != nil {
            map["ApplicationSceneId"] = self.applicationSceneId!
        }
        if self.applySource != nil {
            map["ApplySource"] = self.applySource!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.intlType != nil {
            map["IntlType"] = self.intlType!
        }
        if self.moreDataShrink != nil {
            map["MoreData"] = self.moreDataShrink!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.ossKeys != nil {
            map["OssKeys"] = self.ossKeys!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.productUrl != nil {
            map["ProductUrl"] = self.productUrl!
        }
        if self.relatedSignName != nil {
            map["RelatedSignName"] = self.relatedSignName!
        }
        if self.relatedSignOrderId != nil {
            map["RelatedSignOrderId"] = self.relatedSignOrderId!
        }
        if self.relatedSignUsageName != nil {
            map["RelatedSignUsageName"] = self.relatedSignUsageName!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.rmdTemplateId != nil {
            map["RmdTemplateId"] = self.rmdTemplateId!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        if self.templateContent != nil {
            map["TemplateContent"] = self.templateContent!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.templateRule != nil {
            map["TemplateRule"] = self.templateRule!
        }
        if self.userViewFileName != nil {
            map["UserViewFileName"] = self.userViewFileName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AiTemplate"] as? Int64 {
            self.aiTemplate = value
        }
        if let value = dict["AiTemplateUuid"] as? String {
            self.aiTemplateUuid = value
        }
        if let value = dict["ApplicationSceneId"] as? Int64 {
            self.applicationSceneId = value
        }
        if let value = dict["ApplySource"] as? String {
            self.applySource = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["IntlType"] as? Int32 {
            self.intlType = value
        }
        if let value = dict["MoreData"] as? String {
            self.moreDataShrink = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["OssKeys"] as? String {
            self.ossKeys = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProductUrl"] as? String {
            self.productUrl = value
        }
        if let value = dict["RelatedSignName"] as? String {
            self.relatedSignName = value
        }
        if let value = dict["RelatedSignOrderId"] as? String {
            self.relatedSignOrderId = value
        }
        if let value = dict["RelatedSignUsageName"] as? String {
            self.relatedSignUsageName = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["RmdTemplateId"] as? Int64 {
            self.rmdTemplateId = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["TemplateContent"] as? String {
            self.templateContent = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TemplateRule"] as? String {
            self.templateRule = value
        }
        if let value = dict["UserViewFileName"] as? String {
            self.userViewFileName = value
        }
    }
}

public class CreateSmsTemplateNewResponseBody : Tea.TeaModel {
    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSmsTemplateNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSmsTemplateNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSmsTemplateNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWarningThresholdRequest : Tea.TeaModel {
    public var bizType: String?

    public var dailyHaltLimit: Int32?

    public var dailyWarningLimit: Int32?

    public var monthlyHaltLimit: Int32?

    public var monthlyWarningLimit: Int32?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.dailyHaltLimit != nil {
            map["DailyHaltLimit"] = self.dailyHaltLimit!
        }
        if self.dailyWarningLimit != nil {
            map["DailyWarningLimit"] = self.dailyWarningLimit!
        }
        if self.monthlyHaltLimit != nil {
            map["MonthlyHaltLimit"] = self.monthlyHaltLimit!
        }
        if self.monthlyWarningLimit != nil {
            map["MonthlyWarningLimit"] = self.monthlyWarningLimit!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["DailyHaltLimit"] as? Int32 {
            self.dailyHaltLimit = value
        }
        if let value = dict["DailyWarningLimit"] as? Int32 {
            self.dailyWarningLimit = value
        }
        if let value = dict["MonthlyHaltLimit"] as? Int32 {
            self.monthlyHaltLimit = value
        }
        if let value = dict["MonthlyWarningLimit"] as? Int32 {
            self.monthlyWarningLimit = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateWarningThresholdResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class CreateWarningThresholdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWarningThresholdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWarningThresholdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWarningThresholdNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var dailyHaltLimit: Int32?

    public var dailyWarningLimit: Int32?

    public var monthlyHaltLimit: Int32?

    public var monthlyWarningLimit: Int32?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.dailyHaltLimit != nil {
            map["DailyHaltLimit"] = self.dailyHaltLimit!
        }
        if self.dailyWarningLimit != nil {
            map["DailyWarningLimit"] = self.dailyWarningLimit!
        }
        if self.monthlyHaltLimit != nil {
            map["MonthlyHaltLimit"] = self.monthlyHaltLimit!
        }
        if self.monthlyWarningLimit != nil {
            map["MonthlyWarningLimit"] = self.monthlyWarningLimit!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["DailyHaltLimit"] as? Int32 {
            self.dailyHaltLimit = value
        }
        if let value = dict["DailyWarningLimit"] as? Int32 {
            self.dailyWarningLimit = value
        }
        if let value = dict["MonthlyHaltLimit"] as? Int32 {
            self.monthlyHaltLimit = value
        }
        if let value = dict["MonthlyWarningLimit"] as? Int32 {
            self.monthlyWarningLimit = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class CreateWarningThresholdNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class CreateWarningThresholdNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWarningThresholdNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWarningThresholdNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DelCardSendExportInfoRequest : Tea.TeaModel {
    public var ids: [Int64]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ids != nil {
            map["Ids"] = self.ids!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ids"] as? [Int64] {
            self.ids = value
        }
    }
}

public class DelCardSendExportInfoResponseBody : Tea.TeaModel {
    public var code: String?

    public var model: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            map["Model"] = self.model!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? String {
            self.model = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DelCardSendExportInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DelCardSendExportInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DelCardSendExportInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCardMessageCallbackRequest : Tea.TeaModel {
    public var bizType: String?

    public var callbackUrl: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.callbackUrl != nil {
            map["CallbackUrl"] = self.callbackUrl!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["CallbackUrl"] as? String {
            self.callbackUrl = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class DeleteCardMessageCallbackResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class DeleteCardMessageCallbackResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCardMessageCallbackResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCardMessageCallbackResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCardMessageQueueRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var queueType: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.queueType != nil {
            map["QueueType"] = self.queueType!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["QueueType"] as? String {
            self.queueType = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class DeleteCardMessageQueueResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class DeleteCardMessageQueueResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCardMessageQueueResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCardMessageQueueResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteContactsRequest : Tea.TeaModel {
    public var ids: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ids != nil {
            map["Ids"] = self.ids!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ids"] as? String {
            self.ids = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class DeleteContactsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class DeleteContactsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteContactsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteContactsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteContactsNewRequest : Tea.TeaModel {
    public var ids: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ids != nil {
            map["Ids"] = self.ids!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ids"] as? String {
            self.ids = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class DeleteContactsNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class DeleteContactsNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteContactsNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteContactsNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDigitalTemplateNewRequest : Tea.TeaModel {
    public var auditState: String?

    public var bizType: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateCode: String?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class DeleteDigitalTemplateNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class DeleteDigitalTemplateNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDigitalTemplateNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDigitalTemplateNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMessageCallbackNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class DeleteMessageCallbackNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class DeleteMessageCallbackNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMessageCallbackNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMessageCallbackNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMessageQueueNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var queueType: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.queueType != nil {
            map["QueueType"] = self.queueType!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["QueueType"] as? String {
            self.queueType = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class DeleteMessageQueueNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class DeleteMessageQueueNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMessageQueueNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMessageQueueNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteOrCanceleTaskRequest : Tea.TeaModel {
    public var isDeleted: Int32?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var status: String?

    public var taskId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isDeleted != nil {
            map["IsDeleted"] = self.isDeleted!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsDeleted"] as? Int32 {
            self.isDeleted = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
    }
}

public class DeleteOrCanceleTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class DeleteOrCanceleTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteOrCanceleTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteOrCanceleTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteOrCanceleTaskNewRequest : Tea.TeaModel {
    public var isDeleted: Int32?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var status: String?

    public var taskId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isDeleted != nil {
            map["IsDeleted"] = self.isDeleted!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsDeleted"] as? Int32 {
            self.isDeleted = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
    }
}

public class DeleteOrCanceleTaskNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Int64 {
            self.result = value
        }
    }
}

public class DeleteOrCanceleTaskNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteOrCanceleTaskNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteOrCanceleTaskNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePhoneWhiteListRequest : Tea.TeaModel {
    public var ids: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ids != nil {
            map["Ids"] = self.ids!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ids"] as? String {
            self.ids = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class DeletePhoneWhiteListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class DeletePhoneWhiteListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePhoneWhiteListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePhoneWhiteListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePhoneWhiteListNewRequest : Tea.TeaModel {
    public var ids: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ids != nil {
            map["Ids"] = self.ids!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ids"] as? String {
            self.ids = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class DeletePhoneWhiteListNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class DeletePhoneWhiteListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePhoneWhiteListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePhoneWhiteListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteShortUrlNewRequest : Tea.TeaModel {
    public var ids: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ids != nil {
            map["Ids"] = self.ids!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ids"] as? String {
            self.ids = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class DeleteShortUrlNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class DeleteShortUrlNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteShortUrlNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteShortUrlNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSmsTemplateNewRequest : Tea.TeaModel {
    public var isSmsSign: Bool?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var smsTemplateIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isSmsSign != nil {
            map["IsSmsSign"] = self.isSmsSign!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.smsTemplateIds != nil {
            map["SmsTemplateIds"] = self.smsTemplateIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsSmsSign"] as? Bool {
            self.isSmsSign = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SmsTemplateIds"] as? String {
            self.smsTemplateIds = value
        }
    }
}

public class DeleteSmsTemplateNewResponseBody : Tea.TeaModel {
    public class FailList : Tea.TeaModel {
        public var fail: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fail != nil {
                map["Fail"] = self.fail!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Fail"] as? [String] {
                self.fail = value
            }
        }
    }
    public class SuccessList : Tea.TeaModel {
        public var succes: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.succes != nil {
                map["Succes"] = self.succes!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Succes"] as? [String] {
                self.succes = value
            }
        }
    }
    public var failList: DeleteSmsTemplateNewResponseBody.FailList?

    public var requestId: String?

    public var successList: DeleteSmsTemplateNewResponseBody.SuccessList?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.failList?.validate()
        try self.successList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failList != nil {
            map["FailList"] = self.failList?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.successList != nil {
            map["SuccessList"] = self.successList?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FailList"] as? [String: Any?] {
            var model = DeleteSmsTemplateNewResponseBody.FailList()
            model.fromMap(value)
            self.failList = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SuccessList"] as? [String: Any?] {
            var model = DeleteSmsTemplateNewResponseBody.SuccessList()
            model.fromMap(value)
            self.successList = model
        }
    }
}

public class DeleteSmsTemplateNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSmsTemplateNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSmsTemplateNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportCardSmsHistoryRequest : Tea.TeaModel {
    public var apiSend: Int64?

    public var cardTemplateType: String?

    public var gmtCreate: String?

    public var receiveState: Int64?

    public var receiver: String?

    public var renderState: Int64?

    public var signName: String?

    public var tmpCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiSend != nil {
            map["ApiSend"] = self.apiSend!
        }
        if self.cardTemplateType != nil {
            map["CardTemplateType"] = self.cardTemplateType!
        }
        if self.gmtCreate != nil {
            map["GmtCreate"] = self.gmtCreate!
        }
        if self.receiveState != nil {
            map["ReceiveState"] = self.receiveState!
        }
        if self.receiver != nil {
            map["Receiver"] = self.receiver!
        }
        if self.renderState != nil {
            map["RenderState"] = self.renderState!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.tmpCode != nil {
            map["TmpCode"] = self.tmpCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiSend"] as? Int64 {
            self.apiSend = value
        }
        if let value = dict["CardTemplateType"] as? String {
            self.cardTemplateType = value
        }
        if let value = dict["GmtCreate"] as? String {
            self.gmtCreate = value
        }
        if let value = dict["ReceiveState"] as? Int64 {
            self.receiveState = value
        }
        if let value = dict["Receiver"] as? String {
            self.receiver = value
        }
        if let value = dict["RenderState"] as? Int64 {
            self.renderState = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["TmpCode"] as? String {
            self.tmpCode = value
        }
    }
}

public class ExportCardSmsHistoryResponseBody : Tea.TeaModel {
    public class Model : Tea.TeaModel {
        public class Records : Tea.TeaModel {
            public var acceptDate: Int64?

            public var apiSend: Int64?

            public var cardTemplateType: String?

            public var customTmpCode: String?

            public var description_: String?

            public var fuuId: String?

            public var gmtCreate: Int64?

            public var gmtModified: Int64?

            public var id: Int64?

            public var isSupport: Int64?

            public var outId: String?

            public var pid: Int64?

            public var receiveState: Int64?

            public var receiver: String?

            public var renderDate: Int64?

            public var renderState: Int64?

            public var shortUrl: String?

            public var signName: String?

            public var smsContent: String?

            public var suggestion: String?

            public var tmpCode: String?

            public var tmpId: String?

            public var tmpType: Int64?

            public var tmpTypeName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.acceptDate != nil {
                    map["AcceptDate"] = self.acceptDate!
                }
                if self.apiSend != nil {
                    map["ApiSend"] = self.apiSend!
                }
                if self.cardTemplateType != nil {
                    map["CardTemplateType"] = self.cardTemplateType!
                }
                if self.customTmpCode != nil {
                    map["CustomTmpCode"] = self.customTmpCode!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.fuuId != nil {
                    map["FuuId"] = self.fuuId!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.isSupport != nil {
                    map["IsSupport"] = self.isSupport!
                }
                if self.outId != nil {
                    map["OutId"] = self.outId!
                }
                if self.pid != nil {
                    map["Pid"] = self.pid!
                }
                if self.receiveState != nil {
                    map["ReceiveState"] = self.receiveState!
                }
                if self.receiver != nil {
                    map["Receiver"] = self.receiver!
                }
                if self.renderDate != nil {
                    map["RenderDate"] = self.renderDate!
                }
                if self.renderState != nil {
                    map["RenderState"] = self.renderState!
                }
                if self.shortUrl != nil {
                    map["ShortUrl"] = self.shortUrl!
                }
                if self.signName != nil {
                    map["SignName"] = self.signName!
                }
                if self.smsContent != nil {
                    map["SmsContent"] = self.smsContent!
                }
                if self.suggestion != nil {
                    map["Suggestion"] = self.suggestion!
                }
                if self.tmpCode != nil {
                    map["TmpCode"] = self.tmpCode!
                }
                if self.tmpId != nil {
                    map["TmpId"] = self.tmpId!
                }
                if self.tmpType != nil {
                    map["TmpType"] = self.tmpType!
                }
                if self.tmpTypeName != nil {
                    map["TmpTypeName"] = self.tmpTypeName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AcceptDate"] as? Int64 {
                    self.acceptDate = value
                }
                if let value = dict["ApiSend"] as? Int64 {
                    self.apiSend = value
                }
                if let value = dict["CardTemplateType"] as? String {
                    self.cardTemplateType = value
                }
                if let value = dict["CustomTmpCode"] as? String {
                    self.customTmpCode = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["FuuId"] as? String {
                    self.fuuId = value
                }
                if let value = dict["GmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? Int64 {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["IsSupport"] as? Int64 {
                    self.isSupport = value
                }
                if let value = dict["OutId"] as? String {
                    self.outId = value
                }
                if let value = dict["Pid"] as? Int64 {
                    self.pid = value
                }
                if let value = dict["ReceiveState"] as? Int64 {
                    self.receiveState = value
                }
                if let value = dict["Receiver"] as? String {
                    self.receiver = value
                }
                if let value = dict["RenderDate"] as? Int64 {
                    self.renderDate = value
                }
                if let value = dict["RenderState"] as? Int64 {
                    self.renderState = value
                }
                if let value = dict["ShortUrl"] as? String {
                    self.shortUrl = value
                }
                if let value = dict["SignName"] as? String {
                    self.signName = value
                }
                if let value = dict["SmsContent"] as? String {
                    self.smsContent = value
                }
                if let value = dict["Suggestion"] as? String {
                    self.suggestion = value
                }
                if let value = dict["TmpCode"] as? String {
                    self.tmpCode = value
                }
                if let value = dict["TmpId"] as? String {
                    self.tmpId = value
                }
                if let value = dict["TmpType"] as? Int64 {
                    self.tmpType = value
                }
                if let value = dict["TmpTypeName"] as? String {
                    self.tmpTypeName = value
                }
            }
        }
        public var pageNo: Int64?

        public var pageSize: Int64?

        public var records: [ExportCardSmsHistoryResponseBody.Model.Records]?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.records != nil {
                var tmp : [Any] = []
                for k in self.records! {
                    tmp.append(k.toMap())
                }
                map["Records"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PageNo"] as? Int64 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["Records"] as? [Any?] {
                var tmp : [ExportCardSmsHistoryResponseBody.Model.Records] = []
                for v in value {
                    if v != nil {
                        var model = ExportCardSmsHistoryResponseBody.Model.Records()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.records = tmp
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var model: ExportCardSmsHistoryResponseBody.Model?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.model?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            map["Model"] = self.model?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? [String: Any?] {
            var model = ExportCardSmsHistoryResponseBody.Model()
            model.fromMap(value)
            self.model = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ExportCardSmsHistoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportCardSmsHistoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportCardSmsHistoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportCardSmsStatisticsRequest : Tea.TeaModel {
    public var customTmpCode: String?

    public var sendDateEnd: String?

    public var sendDateStart: String?

    public var signName: String?

    public var tmpCode: String?

    public var tmpName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customTmpCode != nil {
            map["CustomTmpCode"] = self.customTmpCode!
        }
        if self.sendDateEnd != nil {
            map["SendDateEnd"] = self.sendDateEnd!
        }
        if self.sendDateStart != nil {
            map["SendDateStart"] = self.sendDateStart!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.tmpCode != nil {
            map["TmpCode"] = self.tmpCode!
        }
        if self.tmpName != nil {
            map["TmpName"] = self.tmpName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomTmpCode"] as? String {
            self.customTmpCode = value
        }
        if let value = dict["SendDateEnd"] as? String {
            self.sendDateEnd = value
        }
        if let value = dict["SendDateStart"] as? String {
            self.sendDateStart = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["TmpCode"] as? String {
            self.tmpCode = value
        }
        if let value = dict["TmpName"] as? String {
            self.tmpName = value
        }
    }
}

public class ExportCardSmsStatisticsResponseBody : Tea.TeaModel {
    public var code: String?

    public var model: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            map["Model"] = self.model!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? String {
            self.model = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ExportCardSmsStatisticsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportCardSmsStatisticsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportCardSmsStatisticsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportCardSmsStatisticsSendRequest : Tea.TeaModel {
    public var customTmpCode: String?

    public var sendDateEnd: String?

    public var sendDateStart: String?

    public var signName: String?

    public var tmpCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customTmpCode != nil {
            map["CustomTmpCode"] = self.customTmpCode!
        }
        if self.sendDateEnd != nil {
            map["SendDateEnd"] = self.sendDateEnd!
        }
        if self.sendDateStart != nil {
            map["SendDateStart"] = self.sendDateStart!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.tmpCode != nil {
            map["TmpCode"] = self.tmpCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomTmpCode"] as? String {
            self.customTmpCode = value
        }
        if let value = dict["SendDateEnd"] as? String {
            self.sendDateEnd = value
        }
        if let value = dict["SendDateStart"] as? String {
            self.sendDateStart = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["TmpCode"] as? String {
            self.tmpCode = value
        }
    }
}

public class ExportCardSmsStatisticsSendResponseBody : Tea.TeaModel {
    public var code: String?

    public var model: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            map["Model"] = self.model!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? String {
            self.model = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ExportCardSmsStatisticsSendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportCardSmsStatisticsSendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportCardSmsStatisticsSendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportTmpEffectReportDataRequest : Tea.TeaModel {
    public var endDate: String?

    public var startDate: String?

    public var tmpCode: String?

    public var tmpName: String?

    public var vendorCode: String?

    public var vendorName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endDate != nil {
            map["EndDate"] = self.endDate!
        }
        if self.startDate != nil {
            map["StartDate"] = self.startDate!
        }
        if self.tmpCode != nil {
            map["TmpCode"] = self.tmpCode!
        }
        if self.tmpName != nil {
            map["TmpName"] = self.tmpName!
        }
        if self.vendorCode != nil {
            map["VendorCode"] = self.vendorCode!
        }
        if self.vendorName != nil {
            map["VendorName"] = self.vendorName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndDate"] as? String {
            self.endDate = value
        }
        if let value = dict["StartDate"] as? String {
            self.startDate = value
        }
        if let value = dict["TmpCode"] as? String {
            self.tmpCode = value
        }
        if let value = dict["TmpName"] as? String {
            self.tmpName = value
        }
        if let value = dict["VendorCode"] as? String {
            self.vendorCode = value
        }
        if let value = dict["VendorName"] as? String {
            self.vendorName = value
        }
    }
}

public class ExportTmpEffectReportDataResponseBody : Tea.TeaModel {
    public var code: String?

    public var model: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            map["Model"] = self.model!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? String {
            self.model = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ExportTmpEffectReportDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportTmpEffectReportDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportTmpEffectReportDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetLetterOfAuthorizationRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var signName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
    }
}

public class GetLetterOfAuthorizationResponseBody : Tea.TeaModel {
    public var code: String?

    public var fileUrl: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class GetLetterOfAuthorizationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetLetterOfAuthorizationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetLetterOfAuthorizationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPushMsgRequest : Tea.TeaModel {
    public var id: String?

    public var msgType: String?

    public var name: String?

    public var ownerId: Int64?

    public var pushTime: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.msgType != nil {
            map["MsgType"] = self.msgType!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pushTime != nil {
            map["PushTime"] = self.pushTime!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["MsgType"] as? String {
            self.msgType = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PushTime"] as? String {
            self.pushTime = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class ListPushMsgResponseBody : Tea.TeaModel {
    public class Model : Tea.TeaModel {
        public var createdDate: String?

        public var createdDateStr: String?

        public var id: String?

        public var pushTime: String?

        public var pushTimeStr: String?

        public var spec: String?

        public var status: String?

        public var statusStr: String?

        public var title: String?

        public var userNum: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createdDate != nil {
                map["CreatedDate"] = self.createdDate!
            }
            if self.createdDateStr != nil {
                map["CreatedDateStr"] = self.createdDateStr!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.pushTime != nil {
                map["PushTime"] = self.pushTime!
            }
            if self.pushTimeStr != nil {
                map["PushTimeStr"] = self.pushTimeStr!
            }
            if self.spec != nil {
                map["Spec"] = self.spec!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.statusStr != nil {
                map["StatusStr"] = self.statusStr!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.userNum != nil {
                map["UserNum"] = self.userNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreatedDate"] as? String {
                self.createdDate = value
            }
            if let value = dict["CreatedDateStr"] as? String {
                self.createdDateStr = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["PushTime"] as? String {
                self.pushTime = value
            }
            if let value = dict["PushTimeStr"] as? String {
                self.pushTimeStr = value
            }
            if let value = dict["Spec"] as? String {
                self.spec = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StatusStr"] as? String {
                self.statusStr = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UserNum"] as? Int64 {
                self.userNum = value
            }
        }
    }
    public var code: String?

    public var message: String?

    public var model: ListPushMsgResponseBody.Model?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.model?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.model != nil {
            map["Model"] = self.model?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Model"] as? [String: Any?] {
            var model = ListPushMsgResponseBody.Model()
            model.fromMap(value)
            self.model = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListPushMsgResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPushMsgResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPushMsgResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTagResourcesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var category: String?

    public var nextToken: String?

    public var ownerId: Int64?

    public var pageSize: Int32?

    public var prodCode: String?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var resourceType: String?

    public var scope: String?

    public var tag: [ListTagResourcesRequest.Tag]?

    public var tagOwnerUid: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.tagOwnerUid != nil {
            map["TagOwnerUid"] = self.tagOwnerUid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [ListTagResourcesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = ListTagResourcesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["TagOwnerUid"] as? Int64 {
            self.tagOwnerUid = value
        }
    }
}

public class ListTagResourcesResponseBody : Tea.TeaModel {
    public class TagResources : Tea.TeaModel {
        public class TagResource : Tea.TeaModel {
            public var resourceId: String?

            public var resourceType: String?

            public var tagKey: String?

            public var tagValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.resourceId != nil {
                    map["ResourceId"] = self.resourceId!
                }
                if self.resourceType != nil {
                    map["ResourceType"] = self.resourceType!
                }
                if self.tagKey != nil {
                    map["TagKey"] = self.tagKey!
                }
                if self.tagValue != nil {
                    map["TagValue"] = self.tagValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ResourceId"] as? String {
                    self.resourceId = value
                }
                if let value = dict["ResourceType"] as? String {
                    self.resourceType = value
                }
                if let value = dict["TagKey"] as? String {
                    self.tagKey = value
                }
                if let value = dict["TagValue"] as? String {
                    self.tagValue = value
                }
            }
        }
        public var tagResource: [ListTagResourcesResponseBody.TagResources.TagResource]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagResource != nil {
                var tmp : [Any] = []
                for k in self.tagResource! {
                    tmp.append(k.toMap())
                }
                map["TagResource"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TagResource"] as? [Any?] {
                var tmp : [ListTagResourcesResponseBody.TagResources.TagResource] = []
                for v in value {
                    if v != nil {
                        var model = ListTagResourcesResponseBody.TagResources.TagResource()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tagResource = tmp
            }
        }
    }
    public var code: String?

    public var nextToken: String?

    public var requestId: String?

    public var tagResources: ListTagResourcesResponseBody.TagResources?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tagResources?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tagResources != nil {
            map["TagResources"] = self.tagResources?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TagResources"] as? [String: Any?] {
            var model = ListTagResourcesResponseBody.TagResources()
            model.fromMap(value)
            self.tagResources = model
        }
    }
}

public class ListTagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OpenShortUrlProductRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class OpenShortUrlProductResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class OpenShortUrlProductResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OpenShortUrlProductResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OpenShortUrlProductResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OpenShortUrlProductNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class OpenShortUrlProductNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var rusult: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rusult != nil {
            map["Rusult"] = self.rusult!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rusult"] as? Bool {
            self.rusult = value
        }
    }
}

public class OpenShortUrlProductNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OpenShortUrlProductNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OpenShortUrlProductNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OpencPrevFlagNewRequest : Tea.TeaModel {
    public var isOpen: Int32?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isOpen != nil {
            map["IsOpen"] = self.isOpen!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsOpen"] as? Int32 {
            self.isOpen = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class OpencPrevFlagNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class OpencPrevFlagNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OpencPrevFlagNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OpencPrevFlagNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryAnyParamTemplateUserRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryAnyParamTemplateUserResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryAnyParamTemplateUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryAnyParamTemplateUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryAnyParamTemplateUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryAuthorizationRequest : Tea.TeaModel {
    public var authorizeCode: String?

    public var ownerId: Int64?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authorizeCode != nil {
            map["AuthorizeCode"] = self.authorizeCode!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthorizeCode"] as? String {
            self.authorizeCode = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryAuthorizationResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var aliyunUid: Int64?

        public var authorizeCode: String?

        public var authorizeStatus: Bool?

        public var authorizeTime: String?

        public var productCode: String?

        public var unAuthorizeTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliyunUid != nil {
                map["AliyunUid"] = self.aliyunUid!
            }
            if self.authorizeCode != nil {
                map["AuthorizeCode"] = self.authorizeCode!
            }
            if self.authorizeStatus != nil {
                map["AuthorizeStatus"] = self.authorizeStatus!
            }
            if self.authorizeTime != nil {
                map["AuthorizeTime"] = self.authorizeTime!
            }
            if self.productCode != nil {
                map["ProductCode"] = self.productCode!
            }
            if self.unAuthorizeTime != nil {
                map["UnAuthorizeTime"] = self.unAuthorizeTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AliyunUid"] as? Int64 {
                self.aliyunUid = value
            }
            if let value = dict["AuthorizeCode"] as? String {
                self.authorizeCode = value
            }
            if let value = dict["AuthorizeStatus"] as? Bool {
                self.authorizeStatus = value
            }
            if let value = dict["AuthorizeTime"] as? String {
                self.authorizeTime = value
            }
            if let value = dict["ProductCode"] as? String {
                self.productCode = value
            }
            if let value = dict["UnAuthorizeTime"] as? String {
                self.unAuthorizeTime = value
            }
        }
    }
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var result: [QueryAuthorizationResponseBody.Result]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["Result"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [Any?] {
            var tmp : [QueryAuthorizationResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = QueryAuthorizationResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
    }
}

public class QueryAuthorizationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryAuthorizationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryAuthorizationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryBillingStatisticsRequest : Tea.TeaModel {
    public var billCycle: String?

    public var itemName: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billCycle != nil {
            map["BillCycle"] = self.billCycle!
        }
        if self.itemName != nil {
            map["ItemName"] = self.itemName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillCycle"] as? String {
            self.billCycle = value
        }
        if let value = dict["ItemName"] as? String {
            self.itemName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryBillingStatisticsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryBillingStatisticsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryBillingStatisticsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryBillingStatisticsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCardMessageQueueRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var queueTypes: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.queueTypes != nil {
            map["QueueTypes"] = self.queueTypes!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["QueueTypes"] as? String {
            self.queueTypes = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryCardMessageQueueResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public var isCreated: Bool?

        public var queueName: String?

        public var queueType: String?

        public var region: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.isCreated != nil {
                map["IsCreated"] = self.isCreated!
            }
            if self.queueName != nil {
                map["QueueName"] = self.queueName!
            }
            if self.queueType != nil {
                map["QueueType"] = self.queueType!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IsCreated"] as? Bool {
                self.isCreated = value
            }
            if let value = dict["QueueName"] as? String {
                self.queueName = value
            }
            if let value = dict["QueueType"] as? String {
                self.queueType = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
        }
    }
    public var list: [QueryCardMessageQueueResponseBody.List]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            var tmp : [Any] = []
            for k in self.list! {
                tmp.append(k.toMap())
            }
            map["List"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [Any?] {
            var tmp : [QueryCardMessageQueueResponseBody.List] = []
            for v in value {
                if v != nil {
                    var model = QueryCardMessageQueueResponseBody.List()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.list = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryCardMessageQueueResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCardMessageQueueResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCardMessageQueueResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCardSendExportInfoRequest : Tea.TeaModel {
    public var pageNo: Int64?

    public var pageSize: Int64?

    public var status: Int64?

    public var type: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["Status"] as? Int64 {
            self.status = value
        }
        if let value = dict["Type"] as? Int64 {
            self.type = value
        }
    }
}

public class QueryCardSendExportInfoResponseBody : Tea.TeaModel {
    public class Model : Tea.TeaModel {
        public class Records : Tea.TeaModel {
            public var ext: String?

            public var fileName: String?

            public var gmtCreate: Int64?

            public var gmtModified: Int64?

            public var id: Int64?

            public var ossUrl: String?

            public var pid: Int64?

            public var status: Int64?

            public var type: Int64?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ext != nil {
                    map["Ext"] = self.ext!
                }
                if self.fileName != nil {
                    map["FileName"] = self.fileName!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.ossUrl != nil {
                    map["OssUrl"] = self.ossUrl!
                }
                if self.pid != nil {
                    map["Pid"] = self.pid!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Ext"] as? String {
                    self.ext = value
                }
                if let value = dict["FileName"] as? String {
                    self.fileName = value
                }
                if let value = dict["GmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? Int64 {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["OssUrl"] as? String {
                    self.ossUrl = value
                }
                if let value = dict["Pid"] as? Int64 {
                    self.pid = value
                }
                if let value = dict["Status"] as? Int64 {
                    self.status = value
                }
                if let value = dict["Type"] as? Int64 {
                    self.type = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var pageNo: Int64?

        public var pageSize: Int64?

        public var records: [QueryCardSendExportInfoResponseBody.Model.Records]?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.records != nil {
                var tmp : [Any] = []
                for k in self.records! {
                    tmp.append(k.toMap())
                }
                map["Records"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PageNo"] as? Int64 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["Records"] as? [Any?] {
                var tmp : [QueryCardSendExportInfoResponseBody.Model.Records] = []
                for v in value {
                    if v != nil {
                        var model = QueryCardSendExportInfoResponseBody.Model.Records()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.records = tmp
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var model: QueryCardSendExportInfoResponseBody.Model?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.model?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            map["Model"] = self.model?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? [String: Any?] {
            var model = QueryCardSendExportInfoResponseBody.Model()
            model.fromMap(value)
            self.model = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryCardSendExportInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCardSendExportInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCardSendExportInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCardSmsHistoryRequest : Tea.TeaModel {
    public var apiSend: Int64?

    public var cardTemplateType: String?

    public var gmtCreate: String?

    public var maxId: Int64?

    public var minId: Int64?

    public var pageNo: Int64?

    public var pageSize: Int64?

    public var receiveState: Int64?

    public var receiver: String?

    public var renderState: Int64?

    public var signName: String?

    public var tmpCode: String?

    public var type: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiSend != nil {
            map["ApiSend"] = self.apiSend!
        }
        if self.cardTemplateType != nil {
            map["CardTemplateType"] = self.cardTemplateType!
        }
        if self.gmtCreate != nil {
            map["GmtCreate"] = self.gmtCreate!
        }
        if self.maxId != nil {
            map["MaxId"] = self.maxId!
        }
        if self.minId != nil {
            map["MinId"] = self.minId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.receiveState != nil {
            map["ReceiveState"] = self.receiveState!
        }
        if self.receiver != nil {
            map["Receiver"] = self.receiver!
        }
        if self.renderState != nil {
            map["RenderState"] = self.renderState!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.tmpCode != nil {
            map["TmpCode"] = self.tmpCode!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiSend"] as? Int64 {
            self.apiSend = value
        }
        if let value = dict["CardTemplateType"] as? String {
            self.cardTemplateType = value
        }
        if let value = dict["GmtCreate"] as? String {
            self.gmtCreate = value
        }
        if let value = dict["MaxId"] as? Int64 {
            self.maxId = value
        }
        if let value = dict["MinId"] as? Int64 {
            self.minId = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["ReceiveState"] as? Int64 {
            self.receiveState = value
        }
        if let value = dict["Receiver"] as? String {
            self.receiver = value
        }
        if let value = dict["RenderState"] as? Int64 {
            self.renderState = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["TmpCode"] as? String {
            self.tmpCode = value
        }
        if let value = dict["Type"] as? Int64 {
            self.type = value
        }
    }
}

public class QueryCardSmsHistoryResponseBody : Tea.TeaModel {
    public class Model : Tea.TeaModel {
        public class Records : Tea.TeaModel {
            public var acceptDate: Int64?

            public var apiSend: Int64?

            public var cardTemplateType: String?

            public var customTmpCode: String?

            public var description_: String?

            public var fuuId: String?

            public var gmtCreate: Int64?

            public var gmtModified: Int64?

            public var id: Int64?

            public var isSupport: Int64?

            public var outId: String?

            public var pid: Int64?

            public var receiveState: Int64?

            public var receiver: String?

            public var renderDate: Int64?

            public var renderState: Int64?

            public var shortUrl: String?

            public var signName: String?

            public var smsContent: String?

            public var suggestion: String?

            public var tmpCode: String?

            public var tmpId: String?

            public var tmpType: Int64?

            public var tmpTypeName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.acceptDate != nil {
                    map["AcceptDate"] = self.acceptDate!
                }
                if self.apiSend != nil {
                    map["ApiSend"] = self.apiSend!
                }
                if self.cardTemplateType != nil {
                    map["CardTemplateType"] = self.cardTemplateType!
                }
                if self.customTmpCode != nil {
                    map["CustomTmpCode"] = self.customTmpCode!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.fuuId != nil {
                    map["FuuId"] = self.fuuId!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.isSupport != nil {
                    map["IsSupport"] = self.isSupport!
                }
                if self.outId != nil {
                    map["OutId"] = self.outId!
                }
                if self.pid != nil {
                    map["Pid"] = self.pid!
                }
                if self.receiveState != nil {
                    map["ReceiveState"] = self.receiveState!
                }
                if self.receiver != nil {
                    map["Receiver"] = self.receiver!
                }
                if self.renderDate != nil {
                    map["RenderDate"] = self.renderDate!
                }
                if self.renderState != nil {
                    map["RenderState"] = self.renderState!
                }
                if self.shortUrl != nil {
                    map["ShortUrl"] = self.shortUrl!
                }
                if self.signName != nil {
                    map["SignName"] = self.signName!
                }
                if self.smsContent != nil {
                    map["SmsContent"] = self.smsContent!
                }
                if self.suggestion != nil {
                    map["Suggestion"] = self.suggestion!
                }
                if self.tmpCode != nil {
                    map["TmpCode"] = self.tmpCode!
                }
                if self.tmpId != nil {
                    map["TmpId"] = self.tmpId!
                }
                if self.tmpType != nil {
                    map["TmpType"] = self.tmpType!
                }
                if self.tmpTypeName != nil {
                    map["TmpTypeName"] = self.tmpTypeName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AcceptDate"] as? Int64 {
                    self.acceptDate = value
                }
                if let value = dict["ApiSend"] as? Int64 {
                    self.apiSend = value
                }
                if let value = dict["CardTemplateType"] as? String {
                    self.cardTemplateType = value
                }
                if let value = dict["CustomTmpCode"] as? String {
                    self.customTmpCode = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["FuuId"] as? String {
                    self.fuuId = value
                }
                if let value = dict["GmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? Int64 {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["IsSupport"] as? Int64 {
                    self.isSupport = value
                }
                if let value = dict["OutId"] as? String {
                    self.outId = value
                }
                if let value = dict["Pid"] as? Int64 {
                    self.pid = value
                }
                if let value = dict["ReceiveState"] as? Int64 {
                    self.receiveState = value
                }
                if let value = dict["Receiver"] as? String {
                    self.receiver = value
                }
                if let value = dict["RenderDate"] as? Int64 {
                    self.renderDate = value
                }
                if let value = dict["RenderState"] as? Int64 {
                    self.renderState = value
                }
                if let value = dict["ShortUrl"] as? String {
                    self.shortUrl = value
                }
                if let value = dict["SignName"] as? String {
                    self.signName = value
                }
                if let value = dict["SmsContent"] as? String {
                    self.smsContent = value
                }
                if let value = dict["Suggestion"] as? String {
                    self.suggestion = value
                }
                if let value = dict["TmpCode"] as? String {
                    self.tmpCode = value
                }
                if let value = dict["TmpId"] as? String {
                    self.tmpId = value
                }
                if let value = dict["TmpType"] as? Int64 {
                    self.tmpType = value
                }
                if let value = dict["TmpTypeName"] as? String {
                    self.tmpTypeName = value
                }
            }
        }
        public var pageNo: Int64?

        public var pageSize: Int64?

        public var records: [QueryCardSmsHistoryResponseBody.Model.Records]?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.records != nil {
                var tmp : [Any] = []
                for k in self.records! {
                    tmp.append(k.toMap())
                }
                map["Records"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PageNo"] as? Int64 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["Records"] as? [Any?] {
                var tmp : [QueryCardSmsHistoryResponseBody.Model.Records] = []
                for v in value {
                    if v != nil {
                        var model = QueryCardSmsHistoryResponseBody.Model.Records()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.records = tmp
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var model: QueryCardSmsHistoryResponseBody.Model?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.model?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            map["Model"] = self.model?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? [String: Any?] {
            var model = QueryCardSmsHistoryResponseBody.Model()
            model.fromMap(value)
            self.model = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryCardSmsHistoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCardSmsHistoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCardSmsHistoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCardSmsHistoryDetailRequest : Tea.TeaModel {
    public var gmtCreate: String?

    public var id: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.gmtCreate != nil {
            map["GmtCreate"] = self.gmtCreate!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GmtCreate"] as? String {
            self.gmtCreate = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
    }
}

public class QueryCardSmsHistoryDetailResponseBody : Tea.TeaModel {
    public var code: String?

    public var model: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            map["Model"] = self.model!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? String {
            self.model = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryCardSmsHistoryDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCardSmsHistoryDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCardSmsHistoryDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCardSmsStatisticsRequest : Tea.TeaModel {
    public var customTmpCode: String?

    public var pageNo: Int64?

    public var pageSize: Int64?

    public var sendDateEnd: String?

    public var sendDateStart: String?

    public var signName: String?

    public var tmpCode: String?

    public var tmpName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customTmpCode != nil {
            map["CustomTmpCode"] = self.customTmpCode!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.sendDateEnd != nil {
            map["SendDateEnd"] = self.sendDateEnd!
        }
        if self.sendDateStart != nil {
            map["SendDateStart"] = self.sendDateStart!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.tmpCode != nil {
            map["TmpCode"] = self.tmpCode!
        }
        if self.tmpName != nil {
            map["TmpName"] = self.tmpName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomTmpCode"] as? String {
            self.customTmpCode = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SendDateEnd"] as? String {
            self.sendDateEnd = value
        }
        if let value = dict["SendDateStart"] as? String {
            self.sendDateStart = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["TmpCode"] as? String {
            self.tmpCode = value
        }
        if let value = dict["TmpName"] as? String {
            self.tmpName = value
        }
    }
}

public class QueryCardSmsStatisticsResponseBody : Tea.TeaModel {
    public class Model : Tea.TeaModel {
        public class Records : Tea.TeaModel {
            public var renderSuccessTotal: Int64?

            public var sendDate: String?

            public var signName: String?

            public var tmpCode: String?

            public var tmpName: String?

            public var urlGenerateTotal: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.renderSuccessTotal != nil {
                    map["RenderSuccessTotal"] = self.renderSuccessTotal!
                }
                if self.sendDate != nil {
                    map["SendDate"] = self.sendDate!
                }
                if self.signName != nil {
                    map["SignName"] = self.signName!
                }
                if self.tmpCode != nil {
                    map["TmpCode"] = self.tmpCode!
                }
                if self.tmpName != nil {
                    map["TmpName"] = self.tmpName!
                }
                if self.urlGenerateTotal != nil {
                    map["UrlGenerateTotal"] = self.urlGenerateTotal!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RenderSuccessTotal"] as? Int64 {
                    self.renderSuccessTotal = value
                }
                if let value = dict["SendDate"] as? String {
                    self.sendDate = value
                }
                if let value = dict["SignName"] as? String {
                    self.signName = value
                }
                if let value = dict["TmpCode"] as? String {
                    self.tmpCode = value
                }
                if let value = dict["TmpName"] as? String {
                    self.tmpName = value
                }
                if let value = dict["UrlGenerateTotal"] as? Int64 {
                    self.urlGenerateTotal = value
                }
            }
        }
        public var pageNo: Int64?

        public var pageSize: Int64?

        public var records: [QueryCardSmsStatisticsResponseBody.Model.Records]?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.records != nil {
                var tmp : [Any] = []
                for k in self.records! {
                    tmp.append(k.toMap())
                }
                map["Records"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PageNo"] as? Int64 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["Records"] as? [Any?] {
                var tmp : [QueryCardSmsStatisticsResponseBody.Model.Records] = []
                for v in value {
                    if v != nil {
                        var model = QueryCardSmsStatisticsResponseBody.Model.Records()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.records = tmp
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var model: QueryCardSmsStatisticsResponseBody.Model?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.model?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            map["Model"] = self.model?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? [String: Any?] {
            var model = QueryCardSmsStatisticsResponseBody.Model()
            model.fromMap(value)
            self.model = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryCardSmsStatisticsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCardSmsStatisticsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCardSmsStatisticsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCardSmsStatisticsListRequest : Tea.TeaModel {
    public var customTmpCode: String?

    public var sendDateEnd: String?

    public var sendDateStart: String?

    public var signName: String?

    public var tmpCode: String?

    public var tmpName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customTmpCode != nil {
            map["CustomTmpCode"] = self.customTmpCode!
        }
        if self.sendDateEnd != nil {
            map["SendDateEnd"] = self.sendDateEnd!
        }
        if self.sendDateStart != nil {
            map["SendDateStart"] = self.sendDateStart!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.tmpCode != nil {
            map["TmpCode"] = self.tmpCode!
        }
        if self.tmpName != nil {
            map["TmpName"] = self.tmpName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomTmpCode"] as? String {
            self.customTmpCode = value
        }
        if let value = dict["SendDateEnd"] as? String {
            self.sendDateEnd = value
        }
        if let value = dict["SendDateStart"] as? String {
            self.sendDateStart = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["TmpCode"] as? String {
            self.tmpCode = value
        }
        if let value = dict["TmpName"] as? String {
            self.tmpName = value
        }
    }
}

public class QueryCardSmsStatisticsListResponseBody : Tea.TeaModel {
    public class Model : Tea.TeaModel {
        public var renderSuccessTotal: Int64?

        public var sendDate: String?

        public var urlGenerateTotal: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.renderSuccessTotal != nil {
                map["RenderSuccessTotal"] = self.renderSuccessTotal!
            }
            if self.sendDate != nil {
                map["SendDate"] = self.sendDate!
            }
            if self.urlGenerateTotal != nil {
                map["UrlGenerateTotal"] = self.urlGenerateTotal!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RenderSuccessTotal"] as? Int64 {
                self.renderSuccessTotal = value
            }
            if let value = dict["SendDate"] as? String {
                self.sendDate = value
            }
            if let value = dict["UrlGenerateTotal"] as? Int64 {
                self.urlGenerateTotal = value
            }
        }
    }
    public var code: String?

    public var model: [QueryCardSmsStatisticsListResponseBody.Model]?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            var tmp : [Any] = []
            for k in self.model! {
                tmp.append(k.toMap())
            }
            map["Model"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? [Any?] {
            var tmp : [QueryCardSmsStatisticsListResponseBody.Model] = []
            for v in value {
                if v != nil {
                    var model = QueryCardSmsStatisticsListResponseBody.Model()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.model = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryCardSmsStatisticsListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCardSmsStatisticsListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCardSmsStatisticsListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCardSmsStatisticsSendRequest : Tea.TeaModel {
    public var customTmpCode: String?

    public var pageNo: Int64?

    public var pageSize: Int64?

    public var sendDateEnd: String?

    public var sendDateStart: String?

    public var signName: String?

    public var tmpCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customTmpCode != nil {
            map["CustomTmpCode"] = self.customTmpCode!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.sendDateEnd != nil {
            map["SendDateEnd"] = self.sendDateEnd!
        }
        if self.sendDateStart != nil {
            map["SendDateStart"] = self.sendDateStart!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.tmpCode != nil {
            map["TmpCode"] = self.tmpCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomTmpCode"] as? String {
            self.customTmpCode = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SendDateEnd"] as? String {
            self.sendDateEnd = value
        }
        if let value = dict["SendDateStart"] as? String {
            self.sendDateStart = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["TmpCode"] as? String {
            self.tmpCode = value
        }
    }
}

public class QueryCardSmsStatisticsSendResponseBody : Tea.TeaModel {
    public class Model : Tea.TeaModel {
        public class Records : Tea.TeaModel {
            public var customTmpCode: String?

            public var renderSuccessRate: Double?

            public var renderSuccessTotal: Int64?

            public var sendDate: String?

            public var sendFailTotal: Int64?

            public var sendProcessTotal: Int64?

            public var sendSuccessRate: Double?

            public var sendSuccessTotal: Int64?

            public var sendTotal: Int64?

            public var signName: String?

            public var supportRate: Double?

            public var supportTotal: Int64?

            public var tmpCode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.customTmpCode != nil {
                    map["CustomTmpCode"] = self.customTmpCode!
                }
                if self.renderSuccessRate != nil {
                    map["RenderSuccessRate"] = self.renderSuccessRate!
                }
                if self.renderSuccessTotal != nil {
                    map["RenderSuccessTotal"] = self.renderSuccessTotal!
                }
                if self.sendDate != nil {
                    map["SendDate"] = self.sendDate!
                }
                if self.sendFailTotal != nil {
                    map["SendFailTotal"] = self.sendFailTotal!
                }
                if self.sendProcessTotal != nil {
                    map["SendProcessTotal"] = self.sendProcessTotal!
                }
                if self.sendSuccessRate != nil {
                    map["SendSuccessRate"] = self.sendSuccessRate!
                }
                if self.sendSuccessTotal != nil {
                    map["SendSuccessTotal"] = self.sendSuccessTotal!
                }
                if self.sendTotal != nil {
                    map["SendTotal"] = self.sendTotal!
                }
                if self.signName != nil {
                    map["SignName"] = self.signName!
                }
                if self.supportRate != nil {
                    map["SupportRate"] = self.supportRate!
                }
                if self.supportTotal != nil {
                    map["SupportTotal"] = self.supportTotal!
                }
                if self.tmpCode != nil {
                    map["TmpCode"] = self.tmpCode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CustomTmpCode"] as? String {
                    self.customTmpCode = value
                }
                if let value = dict["RenderSuccessRate"] as? Double {
                    self.renderSuccessRate = value
                }
                if let value = dict["RenderSuccessTotal"] as? Int64 {
                    self.renderSuccessTotal = value
                }
                if let value = dict["SendDate"] as? String {
                    self.sendDate = value
                }
                if let value = dict["SendFailTotal"] as? Int64 {
                    self.sendFailTotal = value
                }
                if let value = dict["SendProcessTotal"] as? Int64 {
                    self.sendProcessTotal = value
                }
                if let value = dict["SendSuccessRate"] as? Double {
                    self.sendSuccessRate = value
                }
                if let value = dict["SendSuccessTotal"] as? Int64 {
                    self.sendSuccessTotal = value
                }
                if let value = dict["SendTotal"] as? Int64 {
                    self.sendTotal = value
                }
                if let value = dict["SignName"] as? String {
                    self.signName = value
                }
                if let value = dict["SupportRate"] as? Double {
                    self.supportRate = value
                }
                if let value = dict["SupportTotal"] as? Int64 {
                    self.supportTotal = value
                }
                if let value = dict["TmpCode"] as? String {
                    self.tmpCode = value
                }
            }
        }
        public var pageNo: Int64?

        public var pageSize: Int64?

        public var records: [QueryCardSmsStatisticsSendResponseBody.Model.Records]?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.records != nil {
                var tmp : [Any] = []
                for k in self.records! {
                    tmp.append(k.toMap())
                }
                map["Records"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PageNo"] as? Int64 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["Records"] as? [Any?] {
                var tmp : [QueryCardSmsStatisticsSendResponseBody.Model.Records] = []
                for v in value {
                    if v != nil {
                        var model = QueryCardSmsStatisticsSendResponseBody.Model.Records()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.records = tmp
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var model: QueryCardSmsStatisticsSendResponseBody.Model?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.model?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            map["Model"] = self.model?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? [String: Any?] {
            var model = QueryCardSmsStatisticsSendResponseBody.Model()
            model.fromMap(value)
            self.model = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryCardSmsStatisticsSendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCardSmsStatisticsSendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCardSmsStatisticsSendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCardSmsStatisticsSendListRequest : Tea.TeaModel {
    public var customTmpCode: String?

    public var sendDateEnd: String?

    public var sendDateStart: String?

    public var signName: String?

    public var tmpCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customTmpCode != nil {
            map["CustomTmpCode"] = self.customTmpCode!
        }
        if self.sendDateEnd != nil {
            map["SendDateEnd"] = self.sendDateEnd!
        }
        if self.sendDateStart != nil {
            map["SendDateStart"] = self.sendDateStart!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.tmpCode != nil {
            map["TmpCode"] = self.tmpCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomTmpCode"] as? String {
            self.customTmpCode = value
        }
        if let value = dict["SendDateEnd"] as? String {
            self.sendDateEnd = value
        }
        if let value = dict["SendDateStart"] as? String {
            self.sendDateStart = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["TmpCode"] as? String {
            self.tmpCode = value
        }
    }
}

public class QueryCardSmsStatisticsSendListResponseBody : Tea.TeaModel {
    public class Model : Tea.TeaModel {
        public var renderSuccessRate: Double?

        public var renderSuccessTotal: Int64?

        public var sendDate: String?

        public var sendFailTotal: Int64?

        public var sendProcessTotal: Int64?

        public var sendSuccessRate: Double?

        public var sendSuccessTotal: Int64?

        public var sendTotal: Int64?

        public var supportRate: Double?

        public var supportTotal: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.renderSuccessRate != nil {
                map["RenderSuccessRate"] = self.renderSuccessRate!
            }
            if self.renderSuccessTotal != nil {
                map["RenderSuccessTotal"] = self.renderSuccessTotal!
            }
            if self.sendDate != nil {
                map["SendDate"] = self.sendDate!
            }
            if self.sendFailTotal != nil {
                map["SendFailTotal"] = self.sendFailTotal!
            }
            if self.sendProcessTotal != nil {
                map["SendProcessTotal"] = self.sendProcessTotal!
            }
            if self.sendSuccessRate != nil {
                map["SendSuccessRate"] = self.sendSuccessRate!
            }
            if self.sendSuccessTotal != nil {
                map["SendSuccessTotal"] = self.sendSuccessTotal!
            }
            if self.sendTotal != nil {
                map["SendTotal"] = self.sendTotal!
            }
            if self.supportRate != nil {
                map["SupportRate"] = self.supportRate!
            }
            if self.supportTotal != nil {
                map["SupportTotal"] = self.supportTotal!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RenderSuccessRate"] as? Double {
                self.renderSuccessRate = value
            }
            if let value = dict["RenderSuccessTotal"] as? Int64 {
                self.renderSuccessTotal = value
            }
            if let value = dict["SendDate"] as? String {
                self.sendDate = value
            }
            if let value = dict["SendFailTotal"] as? Int64 {
                self.sendFailTotal = value
            }
            if let value = dict["SendProcessTotal"] as? Int64 {
                self.sendProcessTotal = value
            }
            if let value = dict["SendSuccessRate"] as? Double {
                self.sendSuccessRate = value
            }
            if let value = dict["SendSuccessTotal"] as? Int64 {
                self.sendSuccessTotal = value
            }
            if let value = dict["SendTotal"] as? Int64 {
                self.sendTotal = value
            }
            if let value = dict["SupportRate"] as? Double {
                self.supportRate = value
            }
            if let value = dict["SupportTotal"] as? Int64 {
                self.supportTotal = value
            }
        }
    }
    public var code: String?

    public var model: [QueryCardSmsStatisticsSendListResponseBody.Model]?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            var tmp : [Any] = []
            for k in self.model! {
                tmp.append(k.toMap())
            }
            map["Model"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? [Any?] {
            var tmp : [QueryCardSmsStatisticsSendListResponseBody.Model] = []
            for v in value {
                if v != nil {
                    var model = QueryCardSmsStatisticsSendListResponseBody.Model()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.model = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryCardSmsStatisticsSendListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCardSmsStatisticsSendListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCardSmsStatisticsSendListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCommonCustInfoRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryCommonCustInfoResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryCommonCustInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCommonCustInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCommonCustInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryContactsListRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryContactsListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryContactsListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryContactsListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryContactsListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryContactsListNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryContactsListNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public var email: String?

        public var id: Int64?

        public var name: String?

        public var openPkgWarning: Int32?

        public var openPreventBrushWarning: Int32?

        public var openSendWarning: Int32?

        public var phone: String?

        public var receiveSignTemplateAuditResult: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.email != nil {
                map["Email"] = self.email!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.openPkgWarning != nil {
                map["OpenPkgWarning"] = self.openPkgWarning!
            }
            if self.openPreventBrushWarning != nil {
                map["OpenPreventBrushWarning"] = self.openPreventBrushWarning!
            }
            if self.openSendWarning != nil {
                map["OpenSendWarning"] = self.openSendWarning!
            }
            if self.phone != nil {
                map["Phone"] = self.phone!
            }
            if self.receiveSignTemplateAuditResult != nil {
                map["ReceiveSignTemplateAuditResult"] = self.receiveSignTemplateAuditResult!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Email"] as? String {
                self.email = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OpenPkgWarning"] as? Int32 {
                self.openPkgWarning = value
            }
            if let value = dict["OpenPreventBrushWarning"] as? Int32 {
                self.openPreventBrushWarning = value
            }
            if let value = dict["OpenSendWarning"] as? Int32 {
                self.openSendWarning = value
            }
            if let value = dict["Phone"] as? String {
                self.phone = value
            }
            if let value = dict["ReceiveSignTemplateAuditResult"] as? Int32 {
                self.receiveSignTemplateAuditResult = value
            }
        }
    }
    public var list: [QueryContactsListNewResponseBody.List]?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            var tmp : [Any] = []
            for k in self.list! {
                tmp.append(k.toMap())
            }
            map["List"] = tmp
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [Any?] {
            var tmp : [QueryContactsListNewResponseBody.List] = []
            for v in value {
                if v != nil {
                    var model = QueryContactsListNewResponseBody.List()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.list = tmp
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QueryContactsListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryContactsListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryContactsListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryDailyBillInfoLeafNewRequest : Tea.TeaModel {
    public var billCycle: String?

    public var itemId: String?

    public var itemName: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var subjectItemId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billCycle != nil {
            map["BillCycle"] = self.billCycle!
        }
        if self.itemId != nil {
            map["ItemId"] = self.itemId!
        }
        if self.itemName != nil {
            map["ItemName"] = self.itemName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.subjectItemId != nil {
            map["SubjectItemId"] = self.subjectItemId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillCycle"] as? String {
            self.billCycle = value
        }
        if let value = dict["ItemId"] as? String {
            self.itemId = value
        }
        if let value = dict["ItemName"] as? String {
            self.itemName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SubjectItemId"] as? String {
            self.subjectItemId = value
        }
    }
}

public class QueryDailyBillInfoLeafNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class DailyBillDetailInfoDTO : Tea.TeaModel {
            public var addCount: Int64?

            public var addDate: String?

            public var addUnit: String?

            public var billAmount: String?

            public var detailItemName: String?

            public var singlePrice: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.addCount != nil {
                    map["AddCount"] = self.addCount!
                }
                if self.addDate != nil {
                    map["AddDate"] = self.addDate!
                }
                if self.addUnit != nil {
                    map["AddUnit"] = self.addUnit!
                }
                if self.billAmount != nil {
                    map["BillAmount"] = self.billAmount!
                }
                if self.detailItemName != nil {
                    map["DetailItemName"] = self.detailItemName!
                }
                if self.singlePrice != nil {
                    map["SinglePrice"] = self.singlePrice!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AddCount"] as? Int64 {
                    self.addCount = value
                }
                if let value = dict["AddDate"] as? String {
                    self.addDate = value
                }
                if let value = dict["AddUnit"] as? String {
                    self.addUnit = value
                }
                if let value = dict["BillAmount"] as? String {
                    self.billAmount = value
                }
                if let value = dict["DetailItemName"] as? String {
                    self.detailItemName = value
                }
                if let value = dict["SinglePrice"] as? String {
                    self.singlePrice = value
                }
            }
        }
        public var dailyBillDetailInfoDTO: [QueryDailyBillInfoLeafNewResponseBody.List.DailyBillDetailInfoDTO]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dailyBillDetailInfoDTO != nil {
                var tmp : [Any] = []
                for k in self.dailyBillDetailInfoDTO! {
                    tmp.append(k.toMap())
                }
                map["DailyBillDetailInfoDTO"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DailyBillDetailInfoDTO"] as? [Any?] {
                var tmp : [QueryDailyBillInfoLeafNewResponseBody.List.DailyBillDetailInfoDTO] = []
                for v in value {
                    if v != nil {
                        var model = QueryDailyBillInfoLeafNewResponseBody.List.DailyBillDetailInfoDTO()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dailyBillDetailInfoDTO = tmp
            }
        }
    }
    public var list: QueryDailyBillInfoLeafNewResponseBody.List?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QueryDailyBillInfoLeafNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryDailyBillInfoLeafNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryDailyBillInfoLeafNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryDailyBillInfoLeafNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryDigitalTemplateDetailRequest : Tea.TeaModel {
    public var auditState: String?

    public var bizType: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateCode: String?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class QueryDigitalTemplateDetailResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryDigitalTemplateDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryDigitalTemplateDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryDigitalTemplateDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryDigitalTemplateDetailNewRequest : Tea.TeaModel {
    public var auditState: String?

    public var bizType: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateCode: String?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class QueryDigitalTemplateDetailNewResponseBody : Tea.TeaModel {
    public class OssKeys : Tea.TeaModel {
        public var ossKey: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ossKey != nil {
                map["OssKey"] = self.ossKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OssKey"] as? [String] {
                self.ossKey = value
            }
        }
    }
    public class Tags : Tea.TeaModel {
        public class Tag : Tea.TeaModel {
            public var resourceId: String?

            public var resourceType: String?

            public var tagKey: String?

            public var tagValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.resourceId != nil {
                    map["ResourceId"] = self.resourceId!
                }
                if self.resourceType != nil {
                    map["ResourceType"] = self.resourceType!
                }
                if self.tagKey != nil {
                    map["TagKey"] = self.tagKey!
                }
                if self.tagValue != nil {
                    map["TagValue"] = self.tagValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ResourceId"] as? String {
                    self.resourceId = value
                }
                if let value = dict["ResourceType"] as? String {
                    self.resourceType = value
                }
                if let value = dict["TagKey"] as? String {
                    self.tagKey = value
                }
                if let value = dict["TagValue"] as? String {
                    self.tagValue = value
                }
            }
        }
        public var tag: [QueryDigitalTemplateDetailNewResponseBody.Tags.Tag]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tag != nil {
                var tmp : [Any] = []
                for k in self.tag! {
                    tmp.append(k.toMap())
                }
                map["Tag"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Tag"] as? [Any?] {
                var tmp : [QueryDigitalTemplateDetailNewResponseBody.Tags.Tag] = []
                for v in value {
                    if v != nil {
                        var model = QueryDigitalTemplateDetailNewResponseBody.Tags.Tag()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tag = tmp
            }
        }
    }
    public var auditInfo: String?

    public var auditRemarkInfo: String?

    public var auditState: String?

    public var bizType: String?

    public var expireDateStr: String?

    public var gmtCreateStr: String?

    public var id: String?

    public var isAnyParam: Bool?

    public var isDefaultTemplate: Bool?

    public var isRecently: Bool?

    public var orderId: String?

    public var ossKeys: QueryDigitalTemplateDetailNewResponseBody.OssKeys?

    public var passErrType: String?

    public var remark: String?

    public var requestId: String?

    public var signType: Int32?

    public var smsContent: String?

    public var supportVendor: String?

    public var tags: QueryDigitalTemplateDetailNewResponseBody.Tags?

    public var templateCode: String?

    public var templateContent: String?

    public var templateName: String?

    public var templateRule: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.ossKeys?.validate()
        try self.tags?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auditInfo != nil {
            map["AuditInfo"] = self.auditInfo!
        }
        if self.auditRemarkInfo != nil {
            map["AuditRemarkInfo"] = self.auditRemarkInfo!
        }
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.expireDateStr != nil {
            map["ExpireDateStr"] = self.expireDateStr!
        }
        if self.gmtCreateStr != nil {
            map["GmtCreateStr"] = self.gmtCreateStr!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.isAnyParam != nil {
            map["IsAnyParam"] = self.isAnyParam!
        }
        if self.isDefaultTemplate != nil {
            map["IsDefaultTemplate"] = self.isDefaultTemplate!
        }
        if self.isRecently != nil {
            map["IsRecently"] = self.isRecently!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.ossKeys != nil {
            map["OssKeys"] = self.ossKeys?.toMap()
        }
        if self.passErrType != nil {
            map["PassErrType"] = self.passErrType!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signType != nil {
            map["SignType"] = self.signType!
        }
        if self.smsContent != nil {
            map["SmsContent"] = self.smsContent!
        }
        if self.supportVendor != nil {
            map["SupportVendor"] = self.supportVendor!
        }
        if self.tags != nil {
            map["Tags"] = self.tags?.toMap()
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        if self.templateContent != nil {
            map["TemplateContent"] = self.templateContent!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.templateRule != nil {
            map["TemplateRule"] = self.templateRule!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuditInfo"] as? String {
            self.auditInfo = value
        }
        if let value = dict["AuditRemarkInfo"] as? String {
            self.auditRemarkInfo = value
        }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["ExpireDateStr"] as? String {
            self.expireDateStr = value
        }
        if let value = dict["GmtCreateStr"] as? String {
            self.gmtCreateStr = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["IsAnyParam"] as? Bool {
            self.isAnyParam = value
        }
        if let value = dict["IsDefaultTemplate"] as? Bool {
            self.isDefaultTemplate = value
        }
        if let value = dict["IsRecently"] as? Bool {
            self.isRecently = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["OssKeys"] as? [String: Any?] {
            var model = QueryDigitalTemplateDetailNewResponseBody.OssKeys()
            model.fromMap(value)
            self.ossKeys = model
        }
        if let value = dict["PassErrType"] as? String {
            self.passErrType = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SignType"] as? Int32 {
            self.signType = value
        }
        if let value = dict["SmsContent"] as? String {
            self.smsContent = value
        }
        if let value = dict["SupportVendor"] as? String {
            self.supportVendor = value
        }
        if let value = dict["Tags"] as? [String: Any?] {
            var model = QueryDigitalTemplateDetailNewResponseBody.Tags()
            model.fromMap(value)
            self.tags = model
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["TemplateContent"] as? String {
            self.templateContent = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TemplateRule"] as? String {
            self.templateRule = value
        }
    }
}

public class QueryDigitalTemplateDetailNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryDigitalTemplateDetailNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryDigitalTemplateDetailNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryDigitalTemplateLastRangeRequest : Tea.TeaModel {
    public var bizType: String?

    public var limit: Int32?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["Limit"] as? Int32 {
            self.limit = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class QueryDigitalTemplateLastRangeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryDigitalTemplateLastRangeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryDigitalTemplateLastRangeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryDigitalTemplateLastRangeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryDigitalTemplateLastRangeNewRequest : Tea.TeaModel {
    public var auditState: String?

    public var bizType: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var prodType: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodType != nil {
            map["ProdType"] = self.prodType!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdType"] as? String {
            self.prodType = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class QueryDigitalTemplateLastRangeNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class SmsTemplate : Tea.TeaModel {
            public var auditInfo: String?

            public var auditRemarkInfo: String?

            public var auditState: String?

            public var bizType: String?

            public var expireDateStr: String?

            public var gmtCreateStr: String?

            public var id: String?

            public var isAnyParam: Bool?

            public var isDefaultTemplate: Bool?

            public var isRecently: Bool?

            public var orderId: String?

            public var passErrType: String?

            public var remark: String?

            public var signType: Int32?

            public var smsContent: String?

            public var supportVendor: String?

            public var templateCode: String?

            public var templateContent: String?

            public var templateName: String?

            public var templateRule: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.auditInfo != nil {
                    map["AuditInfo"] = self.auditInfo!
                }
                if self.auditRemarkInfo != nil {
                    map["AuditRemarkInfo"] = self.auditRemarkInfo!
                }
                if self.auditState != nil {
                    map["AuditState"] = self.auditState!
                }
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.expireDateStr != nil {
                    map["ExpireDateStr"] = self.expireDateStr!
                }
                if self.gmtCreateStr != nil {
                    map["GmtCreateStr"] = self.gmtCreateStr!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.isAnyParam != nil {
                    map["IsAnyParam"] = self.isAnyParam!
                }
                if self.isDefaultTemplate != nil {
                    map["IsDefaultTemplate"] = self.isDefaultTemplate!
                }
                if self.isRecently != nil {
                    map["IsRecently"] = self.isRecently!
                }
                if self.orderId != nil {
                    map["OrderId"] = self.orderId!
                }
                if self.passErrType != nil {
                    map["PassErrType"] = self.passErrType!
                }
                if self.remark != nil {
                    map["Remark"] = self.remark!
                }
                if self.signType != nil {
                    map["SignType"] = self.signType!
                }
                if self.smsContent != nil {
                    map["SmsContent"] = self.smsContent!
                }
                if self.supportVendor != nil {
                    map["SupportVendor"] = self.supportVendor!
                }
                if self.templateCode != nil {
                    map["TemplateCode"] = self.templateCode!
                }
                if self.templateContent != nil {
                    map["TemplateContent"] = self.templateContent!
                }
                if self.templateName != nil {
                    map["TemplateName"] = self.templateName!
                }
                if self.templateRule != nil {
                    map["TemplateRule"] = self.templateRule!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuditInfo"] as? String {
                    self.auditInfo = value
                }
                if let value = dict["AuditRemarkInfo"] as? String {
                    self.auditRemarkInfo = value
                }
                if let value = dict["AuditState"] as? String {
                    self.auditState = value
                }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["ExpireDateStr"] as? String {
                    self.expireDateStr = value
                }
                if let value = dict["GmtCreateStr"] as? String {
                    self.gmtCreateStr = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["IsAnyParam"] as? Bool {
                    self.isAnyParam = value
                }
                if let value = dict["IsDefaultTemplate"] as? Bool {
                    self.isDefaultTemplate = value
                }
                if let value = dict["IsRecently"] as? Bool {
                    self.isRecently = value
                }
                if let value = dict["OrderId"] as? String {
                    self.orderId = value
                }
                if let value = dict["PassErrType"] as? String {
                    self.passErrType = value
                }
                if let value = dict["Remark"] as? String {
                    self.remark = value
                }
                if let value = dict["SignType"] as? Int32 {
                    self.signType = value
                }
                if let value = dict["SmsContent"] as? String {
                    self.smsContent = value
                }
                if let value = dict["SupportVendor"] as? String {
                    self.supportVendor = value
                }
                if let value = dict["TemplateCode"] as? String {
                    self.templateCode = value
                }
                if let value = dict["TemplateContent"] as? String {
                    self.templateContent = value
                }
                if let value = dict["TemplateName"] as? String {
                    self.templateName = value
                }
                if let value = dict["TemplateRule"] as? String {
                    self.templateRule = value
                }
            }
        }
        public var smsTemplate: [QueryDigitalTemplateLastRangeNewResponseBody.List.SmsTemplate]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.smsTemplate != nil {
                var tmp : [Any] = []
                for k in self.smsTemplate! {
                    tmp.append(k.toMap())
                }
                map["SmsTemplate"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SmsTemplate"] as? [Any?] {
                var tmp : [QueryDigitalTemplateLastRangeNewResponseBody.List.SmsTemplate] = []
                for v in value {
                    if v != nil {
                        var model = QueryDigitalTemplateLastRangeNewResponseBody.List.SmsTemplate()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.smsTemplate = tmp
            }
        }
    }
    public class Tags : Tea.TeaModel {
        public class Tag : Tea.TeaModel {
            public var resourceId: String?

            public var resourceType: String?

            public var tagKey: String?

            public var tagValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.resourceId != nil {
                    map["ResourceId"] = self.resourceId!
                }
                if self.resourceType != nil {
                    map["ResourceType"] = self.resourceType!
                }
                if self.tagKey != nil {
                    map["TagKey"] = self.tagKey!
                }
                if self.tagValue != nil {
                    map["TagValue"] = self.tagValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ResourceId"] as? String {
                    self.resourceId = value
                }
                if let value = dict["ResourceType"] as? String {
                    self.resourceType = value
                }
                if let value = dict["TagKey"] as? String {
                    self.tagKey = value
                }
                if let value = dict["TagValue"] as? String {
                    self.tagValue = value
                }
            }
        }
        public var tag: [QueryDigitalTemplateLastRangeNewResponseBody.Tags.Tag]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tag != nil {
                var tmp : [Any] = []
                for k in self.tag! {
                    tmp.append(k.toMap())
                }
                map["Tag"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Tag"] as? [Any?] {
                var tmp : [QueryDigitalTemplateLastRangeNewResponseBody.Tags.Tag] = []
                for v in value {
                    if v != nil {
                        var model = QueryDigitalTemplateLastRangeNewResponseBody.Tags.Tag()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tag = tmp
            }
        }
    }
    public var list: QueryDigitalTemplateLastRangeNewResponseBody.List?

    public var requestId: String?

    public var tags: QueryDigitalTemplateLastRangeNewResponseBody.Tags?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
        try self.tags?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tags != nil {
            map["Tags"] = self.tags?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QueryDigitalTemplateLastRangeNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Tags"] as? [String: Any?] {
            var model = QueryDigitalTemplateLastRangeNewResponseBody.Tags()
            model.fromMap(value)
            self.tags = model
        }
    }
}

public class QueryDigitalTemplateLastRangeNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryDigitalTemplateLastRangeNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryDigitalTemplateLastRangeNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryDigitalTemplatePageListRequest : Tea.TeaModel {
    public var auditState: String?

    public var bizType: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateCode: String?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class QueryDigitalTemplatePageListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryDigitalTemplatePageListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryDigitalTemplatePageListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryDigitalTemplatePageListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryDigitalTemplatePageListNewRequest : Tea.TeaModel {
    public var auditState: String?

    public var bizType: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateCode: String?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class QueryDigitalTemplatePageListNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class SmsTemplate : Tea.TeaModel {
            public class Tags : Tea.TeaModel {
                public class Tag : Tea.TeaModel {
                    public var resourceId: String?

                    public var resourceType: String?

                    public var tagKey: String?

                    public var tagValue: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.resourceId != nil {
                            map["ResourceId"] = self.resourceId!
                        }
                        if self.resourceType != nil {
                            map["ResourceType"] = self.resourceType!
                        }
                        if self.tagKey != nil {
                            map["TagKey"] = self.tagKey!
                        }
                        if self.tagValue != nil {
                            map["TagValue"] = self.tagValue!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ResourceId"] as? String {
                            self.resourceId = value
                        }
                        if let value = dict["ResourceType"] as? String {
                            self.resourceType = value
                        }
                        if let value = dict["TagKey"] as? String {
                            self.tagKey = value
                        }
                        if let value = dict["TagValue"] as? String {
                            self.tagValue = value
                        }
                    }
                }
                public var tag: [QueryDigitalTemplatePageListNewResponseBody.List.SmsTemplate.Tags.Tag]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tag != nil {
                        var tmp : [Any] = []
                        for k in self.tag! {
                            tmp.append(k.toMap())
                        }
                        map["Tag"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Tag"] as? [Any?] {
                        var tmp : [QueryDigitalTemplatePageListNewResponseBody.List.SmsTemplate.Tags.Tag] = []
                        for v in value {
                            if v != nil {
                                var model = QueryDigitalTemplatePageListNewResponseBody.List.SmsTemplate.Tags.Tag()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tag = tmp
                    }
                }
            }
            public var auditInfo: String?

            public var auditRemarkInfo: String?

            public var auditState: String?

            public var bizType: String?

            public var expireDateStr: String?

            public var gmtCreateStr: String?

            public var id: String?

            public var isAnyParam: Bool?

            public var isDefaultTemplate: Bool?

            public var isRecently: Bool?

            public var orderId: String?

            public var passErrType: String?

            public var remark: String?

            public var signType: Int32?

            public var smsContent: String?

            public var supportVendor: String?

            public var tags: QueryDigitalTemplatePageListNewResponseBody.List.SmsTemplate.Tags?

            public var templateCode: String?

            public var templateContent: String?

            public var templateName: String?

            public var templateRule: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.tags?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.auditInfo != nil {
                    map["AuditInfo"] = self.auditInfo!
                }
                if self.auditRemarkInfo != nil {
                    map["AuditRemarkInfo"] = self.auditRemarkInfo!
                }
                if self.auditState != nil {
                    map["AuditState"] = self.auditState!
                }
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.expireDateStr != nil {
                    map["ExpireDateStr"] = self.expireDateStr!
                }
                if self.gmtCreateStr != nil {
                    map["GmtCreateStr"] = self.gmtCreateStr!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.isAnyParam != nil {
                    map["IsAnyParam"] = self.isAnyParam!
                }
                if self.isDefaultTemplate != nil {
                    map["IsDefaultTemplate"] = self.isDefaultTemplate!
                }
                if self.isRecently != nil {
                    map["IsRecently"] = self.isRecently!
                }
                if self.orderId != nil {
                    map["OrderId"] = self.orderId!
                }
                if self.passErrType != nil {
                    map["PassErrType"] = self.passErrType!
                }
                if self.remark != nil {
                    map["Remark"] = self.remark!
                }
                if self.signType != nil {
                    map["SignType"] = self.signType!
                }
                if self.smsContent != nil {
                    map["SmsContent"] = self.smsContent!
                }
                if self.supportVendor != nil {
                    map["SupportVendor"] = self.supportVendor!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags?.toMap()
                }
                if self.templateCode != nil {
                    map["TemplateCode"] = self.templateCode!
                }
                if self.templateContent != nil {
                    map["TemplateContent"] = self.templateContent!
                }
                if self.templateName != nil {
                    map["TemplateName"] = self.templateName!
                }
                if self.templateRule != nil {
                    map["TemplateRule"] = self.templateRule!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuditInfo"] as? String {
                    self.auditInfo = value
                }
                if let value = dict["AuditRemarkInfo"] as? String {
                    self.auditRemarkInfo = value
                }
                if let value = dict["AuditState"] as? String {
                    self.auditState = value
                }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["ExpireDateStr"] as? String {
                    self.expireDateStr = value
                }
                if let value = dict["GmtCreateStr"] as? String {
                    self.gmtCreateStr = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["IsAnyParam"] as? Bool {
                    self.isAnyParam = value
                }
                if let value = dict["IsDefaultTemplate"] as? Bool {
                    self.isDefaultTemplate = value
                }
                if let value = dict["IsRecently"] as? Bool {
                    self.isRecently = value
                }
                if let value = dict["OrderId"] as? String {
                    self.orderId = value
                }
                if let value = dict["PassErrType"] as? String {
                    self.passErrType = value
                }
                if let value = dict["Remark"] as? String {
                    self.remark = value
                }
                if let value = dict["SignType"] as? Int32 {
                    self.signType = value
                }
                if let value = dict["SmsContent"] as? String {
                    self.smsContent = value
                }
                if let value = dict["SupportVendor"] as? String {
                    self.supportVendor = value
                }
                if let value = dict["Tags"] as? [String: Any?] {
                    var model = QueryDigitalTemplatePageListNewResponseBody.List.SmsTemplate.Tags()
                    model.fromMap(value)
                    self.tags = model
                }
                if let value = dict["TemplateCode"] as? String {
                    self.templateCode = value
                }
                if let value = dict["TemplateContent"] as? String {
                    self.templateContent = value
                }
                if let value = dict["TemplateName"] as? String {
                    self.templateName = value
                }
                if let value = dict["TemplateRule"] as? String {
                    self.templateRule = value
                }
            }
        }
        public var smsTemplate: [QueryDigitalTemplatePageListNewResponseBody.List.SmsTemplate]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.smsTemplate != nil {
                var tmp : [Any] = []
                for k in self.smsTemplate! {
                    tmp.append(k.toMap())
                }
                map["SmsTemplate"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SmsTemplate"] as? [Any?] {
                var tmp : [QueryDigitalTemplatePageListNewResponseBody.List.SmsTemplate] = []
                for v in value {
                    if v != nil {
                        var model = QueryDigitalTemplatePageListNewResponseBody.List.SmsTemplate()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.smsTemplate = tmp
            }
        }
    }
    public var list: QueryDigitalTemplatePageListNewResponseBody.List?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QueryDigitalTemplatePageListNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QueryDigitalTemplatePageListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryDigitalTemplatePageListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryDigitalTemplatePageListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryDomainListRequest : Tea.TeaModel {
    public var domain: String?

    public var ownerId: Int64?

    public var pageNo: Int64?

    public var pageSize: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryDomainListResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryDomainListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryDomainListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryDomainListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryDomainListNewRequest : Tea.TeaModel {
    public var domain: String?

    public var ownerId: Int64?

    public var pageNo: Int64?

    public var pageSize: String?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domain != nil {
            map["Domain"] = self.domain!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Domain"] as? String {
            self.domain = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryDomainListNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public var auditStatus: Int32?

        public var domain: String?

        public var gmtCreate: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.auditStatus != nil {
                map["AuditStatus"] = self.auditStatus!
            }
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuditStatus"] as? Int32 {
                self.auditStatus = value
            }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
        }
    }
    public var list: [QueryDomainListNewResponseBody.List]?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            var tmp : [Any] = []
            for k in self.list! {
                tmp.append(k.toMap())
            }
            map["List"] = tmp
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [Any?] {
            var tmp : [QueryDomainListNewResponseBody.List] = []
            for v in value {
                if v != nil {
                    var model = QueryDomainListNewResponseBody.List()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.list = tmp
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QueryDomainListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryDomainListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryDomainListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryExportSendRecordListNewRequest : Tea.TeaModel {
    public var applyStatus: Int32?

    public var bizType: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyStatus != nil {
            map["ApplyStatus"] = self.applyStatus!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplyStatus"] as? Int32 {
            self.applyStatus = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryExportSendRecordListNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class FcFileUpInsResponse : Tea.TeaModel {
            public var fileFeature: String?

            public var fileUrl: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var handlerStatus: Int32?

            public var id: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileFeature != nil {
                    map["FileFeature"] = self.fileFeature!
                }
                if self.fileUrl != nil {
                    map["FileUrl"] = self.fileUrl!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.handlerStatus != nil {
                    map["HandlerStatus"] = self.handlerStatus!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FileFeature"] as? String {
                    self.fileFeature = value
                }
                if let value = dict["FileUrl"] as? String {
                    self.fileUrl = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["HandlerStatus"] as? Int32 {
                    self.handlerStatus = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
            }
        }
        public var fcFileUpInsResponse: [QueryExportSendRecordListNewResponseBody.List.FcFileUpInsResponse]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fcFileUpInsResponse != nil {
                var tmp : [Any] = []
                for k in self.fcFileUpInsResponse! {
                    tmp.append(k.toMap())
                }
                map["FcFileUpInsResponse"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FcFileUpInsResponse"] as? [Any?] {
                var tmp : [QueryExportSendRecordListNewResponseBody.List.FcFileUpInsResponse] = []
                for v in value {
                    if v != nil {
                        var model = QueryExportSendRecordListNewResponseBody.List.FcFileUpInsResponse()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.fcFileUpInsResponse = tmp
            }
        }
    }
    public var list: QueryExportSendRecordListNewResponseBody.List?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QueryExportSendRecordListNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QueryExportSendRecordListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryExportSendRecordListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryExportSendRecordListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryFailDetailDownloadRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var status: String?

    public var taskId: Int64?

    public var taskInstanceId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskInstanceId != nil {
            map["TaskInstanceId"] = self.taskInstanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
        if let value = dict["TaskInstanceId"] as? Int64 {
            self.taskInstanceId = value
        }
    }
}

public class QueryFailDetailDownloadResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryFailDetailDownloadResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryFailDetailDownloadResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryFailDetailDownloadResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryFailDetailDownloadNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var status: String?

    public var taskId: Int64?

    public var taskInstanceId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskInstanceId != nil {
            map["TaskInstanceId"] = self.taskInstanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
        if let value = dict["TaskInstanceId"] as? Int64 {
            self.taskInstanceId = value
        }
    }
}

public class QueryFailDetailDownloadNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class QueryFailDetailDownloadNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryFailDetailDownloadNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryFailDetailDownloadNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryFlowLimitRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryFlowLimitResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryFlowLimitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryFlowLimitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryFlowLimitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryFlowLimitNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryFlowLimitNewResponseBody : Tea.TeaModel {
    public var dailyLimit: Int64?

    public var hourLimit: Int64?

    public var minuteLimit: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dailyLimit != nil {
            map["DailyLimit"] = self.dailyLimit!
        }
        if self.hourLimit != nil {
            map["HourLimit"] = self.hourLimit!
        }
        if self.minuteLimit != nil {
            map["MinuteLimit"] = self.minuteLimit!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DailyLimit"] as? Int64 {
            self.dailyLimit = value
        }
        if let value = dict["HourLimit"] as? Int64 {
            self.hourLimit = value
        }
        if let value = dict["MinuteLimit"] as? Int64 {
            self.minuteLimit = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryFlowLimitNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryFlowLimitNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryFlowLimitNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryIndexColRecordRequest : Tea.TeaModel {
    public var bizType: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var status: String?

    public var taskId: Int64?

    public var taskInstanceId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskInstanceId != nil {
            map["TaskInstanceId"] = self.taskInstanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
        if let value = dict["TaskInstanceId"] as? Int64 {
            self.taskInstanceId = value
        }
    }
}

public class QueryIndexColRecordResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryIndexColRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryIndexColRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryIndexColRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryLearningStatusNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class QueryLearningStatusNewResponseBody : Tea.TeaModel {
    public var learningStatus: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.learningStatus != nil {
            map["LearningStatus"] = self.learningStatus!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LearningStatus"] as? String {
            self.learningStatus = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryLearningStatusNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryLearningStatusNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryLearningStatusNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMarketingAssistantStatusRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryMarketingAssistantStatusResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryMarketingAssistantStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMarketingAssistantStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMarketingAssistantStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMessageCallbackNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var callbackUrl: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.callbackUrl != nil {
            map["CallbackUrl"] = self.callbackUrl!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["CallbackUrl"] as? String {
            self.callbackUrl = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryMessageCallbackNewResponseBody : Tea.TeaModel {
    public var aiccsCallMidRecordCallbackUrl: String?

    public var aiccsCallRecordCallbackUrl: String?

    public var aiccsSentRecordCallbackUrl: String?

    public var artcCdrReportCallBackUrl: String?

    public var artcTempStatusReportCallBackUrl: String?

    public var cardDyncResCallbackUrl: String?

    public var cardTemplateCallBackUrl: String?

    public var cardVerderCallBackUrl: String?

    public var dcdpCallbackUrl: String?

    public var digitSmsTemplateCallBackUrl: String?

    public var globeSmsReportCallback: Bool?

    public var globeSmsReportCallbackUrl: String?

    public var isAiccsCallMidRecord: Bool?

    public var isAiccsCallRecord: Bool?

    public var isAiccsSentRecord: Bool?

    public var isArtcCdrReportCallBack: Bool?

    public var isArtcTempStatusReportCallBack: Bool?

    public var isDcdpCallback: Bool?

    public var isDigitSmsTemplateCallBack: Bool?

    public var isGlobeSmsReportCallback: Bool?

    public var isOpened: Bool?

    public var isSecretReportMessageCallback: Bool?

    public var isSecretSmsMessageCallback: Bool?

    public var isSignReportCallback: Bool?

    public var isSmartCallAsrCallBack: Bool?

    public var isSmsReportMessageCallback: Bool?

    public var isSmsUpMessageCallback: Bool?

    public var isTemplateReportCallback: Bool?

    public var isVoiceAsrCallBack: Bool?

    public var isVoiceCallMidStateCallBack: Bool?

    public var isVoiceCallRecordCallBack: Bool?

    public var isVoiceRecordingCallBack: Bool?

    public var reportCallbackUrl: String?

    public var requestId: String?

    public var secretCallbackUrl: String?

    public var secretSmsCallbackUrl: String?

    public var shortLinkCallBackUrl: String?

    public var signReportCallbackUrl: String?

    public var smartCallAsrCallBackUrl: String?

    public var templateReportCallbackUrl: String?

    public var upCallbackUrl: String?

    public var voiceAsrCallBackUrl: String?

    public var voiceCallMidStateCallBackUrl: String?

    public var voiceCallRecordCallBackUrl: String?

    public var voiceRecordingCallBackUrl: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aiccsCallMidRecordCallbackUrl != nil {
            map["AiccsCallMidRecordCallbackUrl"] = self.aiccsCallMidRecordCallbackUrl!
        }
        if self.aiccsCallRecordCallbackUrl != nil {
            map["AiccsCallRecordCallbackUrl"] = self.aiccsCallRecordCallbackUrl!
        }
        if self.aiccsSentRecordCallbackUrl != nil {
            map["AiccsSentRecordCallbackUrl"] = self.aiccsSentRecordCallbackUrl!
        }
        if self.artcCdrReportCallBackUrl != nil {
            map["ArtcCdrReportCallBackUrl"] = self.artcCdrReportCallBackUrl!
        }
        if self.artcTempStatusReportCallBackUrl != nil {
            map["ArtcTempStatusReportCallBackUrl"] = self.artcTempStatusReportCallBackUrl!
        }
        if self.cardDyncResCallbackUrl != nil {
            map["CardDyncResCallbackUrl"] = self.cardDyncResCallbackUrl!
        }
        if self.cardTemplateCallBackUrl != nil {
            map["CardTemplateCallBackUrl"] = self.cardTemplateCallBackUrl!
        }
        if self.cardVerderCallBackUrl != nil {
            map["CardVerderCallBackUrl"] = self.cardVerderCallBackUrl!
        }
        if self.dcdpCallbackUrl != nil {
            map["DcdpCallbackUrl"] = self.dcdpCallbackUrl!
        }
        if self.digitSmsTemplateCallBackUrl != nil {
            map["DigitSmsTemplateCallBackUrl"] = self.digitSmsTemplateCallBackUrl!
        }
        if self.globeSmsReportCallback != nil {
            map["GlobeSmsReportCallback"] = self.globeSmsReportCallback!
        }
        if self.globeSmsReportCallbackUrl != nil {
            map["GlobeSmsReportCallbackUrl"] = self.globeSmsReportCallbackUrl!
        }
        if self.isAiccsCallMidRecord != nil {
            map["IsAiccsCallMidRecord"] = self.isAiccsCallMidRecord!
        }
        if self.isAiccsCallRecord != nil {
            map["IsAiccsCallRecord"] = self.isAiccsCallRecord!
        }
        if self.isAiccsSentRecord != nil {
            map["IsAiccsSentRecord"] = self.isAiccsSentRecord!
        }
        if self.isArtcCdrReportCallBack != nil {
            map["IsArtcCdrReportCallBack"] = self.isArtcCdrReportCallBack!
        }
        if self.isArtcTempStatusReportCallBack != nil {
            map["IsArtcTempStatusReportCallBack"] = self.isArtcTempStatusReportCallBack!
        }
        if self.isDcdpCallback != nil {
            map["IsDcdpCallback"] = self.isDcdpCallback!
        }
        if self.isDigitSmsTemplateCallBack != nil {
            map["IsDigitSmsTemplateCallBack"] = self.isDigitSmsTemplateCallBack!
        }
        if self.isGlobeSmsReportCallback != nil {
            map["IsGlobeSmsReportCallback"] = self.isGlobeSmsReportCallback!
        }
        if self.isOpened != nil {
            map["IsOpened"] = self.isOpened!
        }
        if self.isSecretReportMessageCallback != nil {
            map["IsSecretReportMessageCallback"] = self.isSecretReportMessageCallback!
        }
        if self.isSecretSmsMessageCallback != nil {
            map["IsSecretSmsMessageCallback"] = self.isSecretSmsMessageCallback!
        }
        if self.isSignReportCallback != nil {
            map["IsSignReportCallback"] = self.isSignReportCallback!
        }
        if self.isSmartCallAsrCallBack != nil {
            map["IsSmartCallAsrCallBack"] = self.isSmartCallAsrCallBack!
        }
        if self.isSmsReportMessageCallback != nil {
            map["IsSmsReportMessageCallback"] = self.isSmsReportMessageCallback!
        }
        if self.isSmsUpMessageCallback != nil {
            map["IsSmsUpMessageCallback"] = self.isSmsUpMessageCallback!
        }
        if self.isTemplateReportCallback != nil {
            map["IsTemplateReportCallback"] = self.isTemplateReportCallback!
        }
        if self.isVoiceAsrCallBack != nil {
            map["IsVoiceAsrCallBack"] = self.isVoiceAsrCallBack!
        }
        if self.isVoiceCallMidStateCallBack != nil {
            map["IsVoiceCallMidStateCallBack"] = self.isVoiceCallMidStateCallBack!
        }
        if self.isVoiceCallRecordCallBack != nil {
            map["IsVoiceCallRecordCallBack"] = self.isVoiceCallRecordCallBack!
        }
        if self.isVoiceRecordingCallBack != nil {
            map["IsVoiceRecordingCallBack"] = self.isVoiceRecordingCallBack!
        }
        if self.reportCallbackUrl != nil {
            map["ReportCallbackUrl"] = self.reportCallbackUrl!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.secretCallbackUrl != nil {
            map["SecretCallbackUrl"] = self.secretCallbackUrl!
        }
        if self.secretSmsCallbackUrl != nil {
            map["SecretSmsCallbackUrl"] = self.secretSmsCallbackUrl!
        }
        if self.shortLinkCallBackUrl != nil {
            map["ShortLinkCallBackUrl"] = self.shortLinkCallBackUrl!
        }
        if self.signReportCallbackUrl != nil {
            map["SignReportCallbackUrl"] = self.signReportCallbackUrl!
        }
        if self.smartCallAsrCallBackUrl != nil {
            map["SmartCallAsrCallBackUrl"] = self.smartCallAsrCallBackUrl!
        }
        if self.templateReportCallbackUrl != nil {
            map["TemplateReportCallbackUrl"] = self.templateReportCallbackUrl!
        }
        if self.upCallbackUrl != nil {
            map["UpCallbackUrl"] = self.upCallbackUrl!
        }
        if self.voiceAsrCallBackUrl != nil {
            map["VoiceAsrCallBackUrl"] = self.voiceAsrCallBackUrl!
        }
        if self.voiceCallMidStateCallBackUrl != nil {
            map["VoiceCallMidStateCallBackUrl"] = self.voiceCallMidStateCallBackUrl!
        }
        if self.voiceCallRecordCallBackUrl != nil {
            map["VoiceCallRecordCallBackUrl"] = self.voiceCallRecordCallBackUrl!
        }
        if self.voiceRecordingCallBackUrl != nil {
            map["VoiceRecordingCallBackUrl"] = self.voiceRecordingCallBackUrl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AiccsCallMidRecordCallbackUrl"] as? String {
            self.aiccsCallMidRecordCallbackUrl = value
        }
        if let value = dict["AiccsCallRecordCallbackUrl"] as? String {
            self.aiccsCallRecordCallbackUrl = value
        }
        if let value = dict["AiccsSentRecordCallbackUrl"] as? String {
            self.aiccsSentRecordCallbackUrl = value
        }
        if let value = dict["ArtcCdrReportCallBackUrl"] as? String {
            self.artcCdrReportCallBackUrl = value
        }
        if let value = dict["ArtcTempStatusReportCallBackUrl"] as? String {
            self.artcTempStatusReportCallBackUrl = value
        }
        if let value = dict["CardDyncResCallbackUrl"] as? String {
            self.cardDyncResCallbackUrl = value
        }
        if let value = dict["CardTemplateCallBackUrl"] as? String {
            self.cardTemplateCallBackUrl = value
        }
        if let value = dict["CardVerderCallBackUrl"] as? String {
            self.cardVerderCallBackUrl = value
        }
        if let value = dict["DcdpCallbackUrl"] as? String {
            self.dcdpCallbackUrl = value
        }
        if let value = dict["DigitSmsTemplateCallBackUrl"] as? String {
            self.digitSmsTemplateCallBackUrl = value
        }
        if let value = dict["GlobeSmsReportCallback"] as? Bool {
            self.globeSmsReportCallback = value
        }
        if let value = dict["GlobeSmsReportCallbackUrl"] as? String {
            self.globeSmsReportCallbackUrl = value
        }
        if let value = dict["IsAiccsCallMidRecord"] as? Bool {
            self.isAiccsCallMidRecord = value
        }
        if let value = dict["IsAiccsCallRecord"] as? Bool {
            self.isAiccsCallRecord = value
        }
        if let value = dict["IsAiccsSentRecord"] as? Bool {
            self.isAiccsSentRecord = value
        }
        if let value = dict["IsArtcCdrReportCallBack"] as? Bool {
            self.isArtcCdrReportCallBack = value
        }
        if let value = dict["IsArtcTempStatusReportCallBack"] as? Bool {
            self.isArtcTempStatusReportCallBack = value
        }
        if let value = dict["IsDcdpCallback"] as? Bool {
            self.isDcdpCallback = value
        }
        if let value = dict["IsDigitSmsTemplateCallBack"] as? Bool {
            self.isDigitSmsTemplateCallBack = value
        }
        if let value = dict["IsGlobeSmsReportCallback"] as? Bool {
            self.isGlobeSmsReportCallback = value
        }
        if let value = dict["IsOpened"] as? Bool {
            self.isOpened = value
        }
        if let value = dict["IsSecretReportMessageCallback"] as? Bool {
            self.isSecretReportMessageCallback = value
        }
        if let value = dict["IsSecretSmsMessageCallback"] as? Bool {
            self.isSecretSmsMessageCallback = value
        }
        if let value = dict["IsSignReportCallback"] as? Bool {
            self.isSignReportCallback = value
        }
        if let value = dict["IsSmartCallAsrCallBack"] as? Bool {
            self.isSmartCallAsrCallBack = value
        }
        if let value = dict["IsSmsReportMessageCallback"] as? Bool {
            self.isSmsReportMessageCallback = value
        }
        if let value = dict["IsSmsUpMessageCallback"] as? Bool {
            self.isSmsUpMessageCallback = value
        }
        if let value = dict["IsTemplateReportCallback"] as? Bool {
            self.isTemplateReportCallback = value
        }
        if let value = dict["IsVoiceAsrCallBack"] as? Bool {
            self.isVoiceAsrCallBack = value
        }
        if let value = dict["IsVoiceCallMidStateCallBack"] as? Bool {
            self.isVoiceCallMidStateCallBack = value
        }
        if let value = dict["IsVoiceCallRecordCallBack"] as? Bool {
            self.isVoiceCallRecordCallBack = value
        }
        if let value = dict["IsVoiceRecordingCallBack"] as? Bool {
            self.isVoiceRecordingCallBack = value
        }
        if let value = dict["ReportCallbackUrl"] as? String {
            self.reportCallbackUrl = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SecretCallbackUrl"] as? String {
            self.secretCallbackUrl = value
        }
        if let value = dict["SecretSmsCallbackUrl"] as? String {
            self.secretSmsCallbackUrl = value
        }
        if let value = dict["ShortLinkCallBackUrl"] as? String {
            self.shortLinkCallBackUrl = value
        }
        if let value = dict["SignReportCallbackUrl"] as? String {
            self.signReportCallbackUrl = value
        }
        if let value = dict["SmartCallAsrCallBackUrl"] as? String {
            self.smartCallAsrCallBackUrl = value
        }
        if let value = dict["TemplateReportCallbackUrl"] as? String {
            self.templateReportCallbackUrl = value
        }
        if let value = dict["UpCallbackUrl"] as? String {
            self.upCallbackUrl = value
        }
        if let value = dict["VoiceAsrCallBackUrl"] as? String {
            self.voiceAsrCallBackUrl = value
        }
        if let value = dict["VoiceCallMidStateCallBackUrl"] as? String {
            self.voiceCallMidStateCallBackUrl = value
        }
        if let value = dict["VoiceCallRecordCallBackUrl"] as? String {
            self.voiceCallRecordCallBackUrl = value
        }
        if let value = dict["VoiceRecordingCallBackUrl"] as? String {
            self.voiceRecordingCallBackUrl = value
        }
    }
}

public class QueryMessageCallbackNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMessageCallbackNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMessageCallbackNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMessageQueueNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var queueTypes: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.queueTypes != nil {
            map["QueueTypes"] = self.queueTypes!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["QueueTypes"] as? String {
            self.queueTypes = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryMessageQueueNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public var isCreated: Bool?

        public var queueName: String?

        public var queueType: String?

        public var region: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.isCreated != nil {
                map["IsCreated"] = self.isCreated!
            }
            if self.queueName != nil {
                map["QueueName"] = self.queueName!
            }
            if self.queueType != nil {
                map["QueueType"] = self.queueType!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IsCreated"] as? Bool {
                self.isCreated = value
            }
            if let value = dict["QueueName"] as? String {
                self.queueName = value
            }
            if let value = dict["QueueType"] as? String {
                self.queueType = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
        }
    }
    public var list: [QueryMessageQueueNewResponseBody.List]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            var tmp : [Any] = []
            for k in self.list! {
                tmp.append(k.toMap())
            }
            map["List"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [Any?] {
            var tmp : [QueryMessageQueueNewResponseBody.List] = []
            for v in value {
                if v != nil {
                    var model = QueryMessageQueueNewResponseBody.List()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.list = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryMessageQueueNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMessageQueueNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMessageQueueNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMonthlyBillInfoLeafNewRequest : Tea.TeaModel {
    public var billCycle: String?

    public var itemId: String?

    public var itemName: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var subjectItemId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billCycle != nil {
            map["BillCycle"] = self.billCycle!
        }
        if self.itemId != nil {
            map["ItemId"] = self.itemId!
        }
        if self.itemName != nil {
            map["ItemName"] = self.itemName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.subjectItemId != nil {
            map["SubjectItemId"] = self.subjectItemId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillCycle"] as? String {
            self.billCycle = value
        }
        if let value = dict["ItemId"] as? String {
            self.itemId = value
        }
        if let value = dict["ItemName"] as? String {
            self.itemName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SubjectItemId"] as? String {
            self.subjectItemId = value
        }
    }
}

public class QueryMonthlyBillInfoLeafNewResponseBody : Tea.TeaModel {
    public class LayeredBillDOList : Tea.TeaModel {
        public class SubjectDetailList : Tea.TeaModel {
            public var addCount: Int64?

            public var addUnit: String?

            public var billAmount: String?

            public var itemId: String?

            public var itemName: String?

            public var operator_: String?

            public var packageBill: String?

            public var singlePrice: String?

            public var subjectItemId: String?

            public var subjectName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.addCount != nil {
                    map["AddCount"] = self.addCount!
                }
                if self.addUnit != nil {
                    map["AddUnit"] = self.addUnit!
                }
                if self.billAmount != nil {
                    map["BillAmount"] = self.billAmount!
                }
                if self.itemId != nil {
                    map["ItemId"] = self.itemId!
                }
                if self.itemName != nil {
                    map["ItemName"] = self.itemName!
                }
                if self.operator_ != nil {
                    map["Operator"] = self.operator_!
                }
                if self.packageBill != nil {
                    map["PackageBill"] = self.packageBill!
                }
                if self.singlePrice != nil {
                    map["SinglePrice"] = self.singlePrice!
                }
                if self.subjectItemId != nil {
                    map["SubjectItemId"] = self.subjectItemId!
                }
                if self.subjectName != nil {
                    map["SubjectName"] = self.subjectName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AddCount"] as? Int64 {
                    self.addCount = value
                }
                if let value = dict["AddUnit"] as? String {
                    self.addUnit = value
                }
                if let value = dict["BillAmount"] as? String {
                    self.billAmount = value
                }
                if let value = dict["ItemId"] as? String {
                    self.itemId = value
                }
                if let value = dict["ItemName"] as? String {
                    self.itemName = value
                }
                if let value = dict["Operator"] as? String {
                    self.operator_ = value
                }
                if let value = dict["PackageBill"] as? String {
                    self.packageBill = value
                }
                if let value = dict["SinglePrice"] as? String {
                    self.singlePrice = value
                }
                if let value = dict["SubjectItemId"] as? String {
                    self.subjectItemId = value
                }
                if let value = dict["SubjectName"] as? String {
                    self.subjectName = value
                }
            }
        }
        public var addCount: Int64?

        public var addUnit: String?

        public var billAmount: String?

        public var itemId: String?

        public var itemName: String?

        public var operator_: String?

        public var packageBill: String?

        public var singlePrice: String?

        public var subjectDetailList: [QueryMonthlyBillInfoLeafNewResponseBody.LayeredBillDOList.SubjectDetailList]?

        public var subjectItemId: String?

        public var subjectName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addCount != nil {
                map["AddCount"] = self.addCount!
            }
            if self.addUnit != nil {
                map["AddUnit"] = self.addUnit!
            }
            if self.billAmount != nil {
                map["BillAmount"] = self.billAmount!
            }
            if self.itemId != nil {
                map["ItemId"] = self.itemId!
            }
            if self.itemName != nil {
                map["ItemName"] = self.itemName!
            }
            if self.operator_ != nil {
                map["Operator"] = self.operator_!
            }
            if self.packageBill != nil {
                map["PackageBill"] = self.packageBill!
            }
            if self.singlePrice != nil {
                map["SinglePrice"] = self.singlePrice!
            }
            if self.subjectDetailList != nil {
                var tmp : [Any] = []
                for k in self.subjectDetailList! {
                    tmp.append(k.toMap())
                }
                map["SubjectDetailList"] = tmp
            }
            if self.subjectItemId != nil {
                map["SubjectItemId"] = self.subjectItemId!
            }
            if self.subjectName != nil {
                map["SubjectName"] = self.subjectName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AddCount"] as? Int64 {
                self.addCount = value
            }
            if let value = dict["AddUnit"] as? String {
                self.addUnit = value
            }
            if let value = dict["BillAmount"] as? String {
                self.billAmount = value
            }
            if let value = dict["ItemId"] as? String {
                self.itemId = value
            }
            if let value = dict["ItemName"] as? String {
                self.itemName = value
            }
            if let value = dict["Operator"] as? String {
                self.operator_ = value
            }
            if let value = dict["PackageBill"] as? String {
                self.packageBill = value
            }
            if let value = dict["SinglePrice"] as? String {
                self.singlePrice = value
            }
            if let value = dict["SubjectDetailList"] as? [Any?] {
                var tmp : [QueryMonthlyBillInfoLeafNewResponseBody.LayeredBillDOList.SubjectDetailList] = []
                for v in value {
                    if v != nil {
                        var model = QueryMonthlyBillInfoLeafNewResponseBody.LayeredBillDOList.SubjectDetailList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.subjectDetailList = tmp
            }
            if let value = dict["SubjectItemId"] as? String {
                self.subjectItemId = value
            }
            if let value = dict["SubjectName"] as? String {
                self.subjectName = value
            }
        }
    }
    public var couponPayment: String?

    public var isSeparatedPrice: Bool?

    public var layeredBillDOList: [QueryMonthlyBillInfoLeafNewResponseBody.LayeredBillDOList]?

    public var packageAmount: String?

    public var realPayment: String?

    public var requestId: String?

    public var totalPayment: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.couponPayment != nil {
            map["CouponPayment"] = self.couponPayment!
        }
        if self.isSeparatedPrice != nil {
            map["IsSeparatedPrice"] = self.isSeparatedPrice!
        }
        if self.layeredBillDOList != nil {
            var tmp : [Any] = []
            for k in self.layeredBillDOList! {
                tmp.append(k.toMap())
            }
            map["LayeredBillDOList"] = tmp
        }
        if self.packageAmount != nil {
            map["PackageAmount"] = self.packageAmount!
        }
        if self.realPayment != nil {
            map["RealPayment"] = self.realPayment!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalPayment != nil {
            map["TotalPayment"] = self.totalPayment!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CouponPayment"] as? String {
            self.couponPayment = value
        }
        if let value = dict["IsSeparatedPrice"] as? Bool {
            self.isSeparatedPrice = value
        }
        if let value = dict["LayeredBillDOList"] as? [Any?] {
            var tmp : [QueryMonthlyBillInfoLeafNewResponseBody.LayeredBillDOList] = []
            for v in value {
                if v != nil {
                    var model = QueryMonthlyBillInfoLeafNewResponseBody.LayeredBillDOList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.layeredBillDOList = tmp
        }
        if let value = dict["PackageAmount"] as? String {
            self.packageAmount = value
        }
        if let value = dict["RealPayment"] as? String {
            self.realPayment = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalPayment"] as? String {
            self.totalPayment = value
        }
    }
}

public class QueryMonthlyBillInfoLeafNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMonthlyBillInfoLeafNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMonthlyBillInfoLeafNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMonthlyBillRentalRequest : Tea.TeaModel {
    public var billCycle: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billCycle != nil {
            map["BillCycle"] = self.billCycle!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillCycle"] as? String {
            self.billCycle = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryMonthlyBillRentalResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Records : Tea.TeaModel {
            public var billTime: Int64?

            public var itemId: String?

            public var itemName: String?

            public var offerTime: Int64?

            public var rental: String?

            public var subItemId: String?

            public var subItemName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.billTime != nil {
                    map["billTime"] = self.billTime!
                }
                if self.itemId != nil {
                    map["itemId"] = self.itemId!
                }
                if self.itemName != nil {
                    map["itemName"] = self.itemName!
                }
                if self.offerTime != nil {
                    map["offerTime"] = self.offerTime!
                }
                if self.rental != nil {
                    map["rental"] = self.rental!
                }
                if self.subItemId != nil {
                    map["subItemId"] = self.subItemId!
                }
                if self.subItemName != nil {
                    map["subItemName"] = self.subItemName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["billTime"] as? Int64 {
                    self.billTime = value
                }
                if let value = dict["itemId"] as? String {
                    self.itemId = value
                }
                if let value = dict["itemName"] as? String {
                    self.itemName = value
                }
                if let value = dict["offerTime"] as? Int64 {
                    self.offerTime = value
                }
                if let value = dict["rental"] as? String {
                    self.rental = value
                }
                if let value = dict["subItemId"] as? String {
                    self.subItemId = value
                }
                if let value = dict["subItemName"] as? String {
                    self.subItemName = value
                }
            }
        }
        public var pageNo: Int32?

        public var pageSize: Int32?

        public var records: [QueryMonthlyBillRentalResponseBody.Data.Records]?

        public var rentalSum: String?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageNo != nil {
                map["pageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["pageSize"] = self.pageSize!
            }
            if self.records != nil {
                var tmp : [Any] = []
                for k in self.records! {
                    tmp.append(k.toMap())
                }
                map["records"] = tmp
            }
            if self.rentalSum != nil {
                map["rentalSum"] = self.rentalSum!
            }
            if self.total != nil {
                map["total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["pageNo"] as? Int32 {
                self.pageNo = value
            }
            if let value = dict["pageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["records"] as? [Any?] {
                var tmp : [QueryMonthlyBillRentalResponseBody.Data.Records] = []
                for v in value {
                    if v != nil {
                        var model = QueryMonthlyBillRentalResponseBody.Data.Records()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.records = tmp
            }
            if let value = dict["rentalSum"] as? String {
                self.rentalSum = value
            }
            if let value = dict["total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var code: String?

    public var data: QueryMonthlyBillRentalResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryMonthlyBillRentalResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryMonthlyBillRentalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMonthlyBillRentalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMonthlyBillRentalResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMonthlyBillRentalNewRequest : Tea.TeaModel {
    public var billCycle: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billCycle != nil {
            map["BillCycle"] = self.billCycle!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillCycle"] as? String {
            self.billCycle = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryMonthlyBillRentalNewResponseBody : Tea.TeaModel {
    public class Records : Tea.TeaModel {
        public var billTime: Int64?

        public var itemId: String?

        public var itemName: String?

        public var offerTime: Int64?

        public var rental: String?

        public var subItemId: String?

        public var subItemName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.billTime != nil {
                map["BillTime"] = self.billTime!
            }
            if self.itemId != nil {
                map["ItemId"] = self.itemId!
            }
            if self.itemName != nil {
                map["ItemName"] = self.itemName!
            }
            if self.offerTime != nil {
                map["OfferTime"] = self.offerTime!
            }
            if self.rental != nil {
                map["Rental"] = self.rental!
            }
            if self.subItemId != nil {
                map["SubItemId"] = self.subItemId!
            }
            if self.subItemName != nil {
                map["SubItemName"] = self.subItemName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BillTime"] as? Int64 {
                self.billTime = value
            }
            if let value = dict["ItemId"] as? String {
                self.itemId = value
            }
            if let value = dict["ItemName"] as? String {
                self.itemName = value
            }
            if let value = dict["OfferTime"] as? Int64 {
                self.offerTime = value
            }
            if let value = dict["Rental"] as? String {
                self.rental = value
            }
            if let value = dict["SubItemId"] as? String {
                self.subItemId = value
            }
            if let value = dict["SubItemName"] as? String {
                self.subItemName = value
            }
        }
    }
    public var pageNo: Int32?

    public var pageSize: Int32?

    public var records: [QueryMonthlyBillRentalNewResponseBody.Records]?

    public var rentalSum: String?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.records != nil {
            var tmp : [Any] = []
            for k in self.records! {
                tmp.append(k.toMap())
            }
            map["Records"] = tmp
        }
        if self.rentalSum != nil {
            map["RentalSum"] = self.rentalSum!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Records"] as? [Any?] {
            var tmp : [QueryMonthlyBillRentalNewResponseBody.Records] = []
            for v in value {
                if v != nil {
                    var model = QueryMonthlyBillRentalNewResponseBody.Records()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.records = tmp
        }
        if let value = dict["RentalSum"] as? String {
            self.rentalSum = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QueryMonthlyBillRentalNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMonthlyBillRentalNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMonthlyBillRentalNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMsgCountRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryMsgCountResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryMsgCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMsgCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMsgCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryOpenStatusRequest : Tea.TeaModel {
    public var busOffer: Int64?

    public var ownerId: Int64?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.busOffer != nil {
            map["BusOffer"] = self.busOffer!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusOffer"] as? Int64 {
            self.busOffer = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryOpenStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
    }
}

public class QueryOpenStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryOpenStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryOpenStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryOpencFlagNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryOpencFlagNewResponseBody : Tea.TeaModel {
    public var isOpen: Int32?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isOpen != nil {
            map["IsOpen"] = self.isOpen!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsOpen"] as? Int32 {
            self.isOpen = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryOpencFlagNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryOpencFlagNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryOpencFlagNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryPhoneWhiteListRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var phoneNumber: String?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.phoneNumber != nil {
            map["PhoneNumber"] = self.phoneNumber!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PhoneNumber"] as? String {
            self.phoneNumber = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryPhoneWhiteListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryPhoneWhiteListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryPhoneWhiteListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryPhoneWhiteListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryPhoneWhiteListNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var phoneNumber: String?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.phoneNumber != nil {
            map["PhoneNumber"] = self.phoneNumber!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PhoneNumber"] as? String {
            self.phoneNumber = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryPhoneWhiteListNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public var id: Int64?

        public var phoneNumber: String?

        public var remark: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.phoneNumber != nil {
                map["PhoneNumber"] = self.phoneNumber!
            }
            if self.remark != nil {
                map["Remark"] = self.remark!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["PhoneNumber"] as? String {
                self.phoneNumber = value
            }
            if let value = dict["Remark"] as? String {
                self.remark = value
            }
        }
    }
    public var list: [QueryPhoneWhiteListNewResponseBody.List]?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public var totalWithoutFilter: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            var tmp : [Any] = []
            for k in self.list! {
                tmp.append(k.toMap())
            }
            map["List"] = tmp
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        if self.totalWithoutFilter != nil {
            map["TotalWithoutFilter"] = self.totalWithoutFilter!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [Any?] {
            var tmp : [QueryPhoneWhiteListNewResponseBody.List] = []
            for v in value {
                if v != nil {
                    var model = QueryPhoneWhiteListNewResponseBody.List()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.list = tmp
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
        if let value = dict["TotalWithoutFilter"] as? Int64 {
            self.totalWithoutFilter = value
        }
    }
}

public class QueryPhoneWhiteListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryPhoneWhiteListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryPhoneWhiteListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryPkgThresholdRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryPkgThresholdResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryPkgThresholdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryPkgThresholdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryPkgThresholdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryPkgThresholdNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryPkgThresholdNewResponseBody : Tea.TeaModel {
    public var packageWarningLimit: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.packageWarningLimit != nil {
            map["PackageWarningLimit"] = self.packageWarningLimit!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PackageWarningLimit"] as? Int64 {
            self.packageWarningLimit = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryPkgThresholdNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryPkgThresholdNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryPkgThresholdNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryPrevLimitNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryPrevLimitNewResponseBody : Tea.TeaModel {
    public var hourLimit: Int64?

    public var increaseRate: Int32?

    public var requestId: String?

    public var successRate: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hourLimit != nil {
            map["HourLimit"] = self.hourLimit!
        }
        if self.increaseRate != nil {
            map["IncreaseRate"] = self.increaseRate!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.successRate != nil {
            map["SuccessRate"] = self.successRate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["HourLimit"] as? Int64 {
            self.hourLimit = value
        }
        if let value = dict["IncreaseRate"] as? Int32 {
            self.increaseRate = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SuccessRate"] as? Int32 {
            self.successRate = value
        }
    }
}

public class QueryPrevLimitNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryPrevLimitNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryPrevLimitNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySaasRecordRequest : Tea.TeaModel {
    public var bizType: String?

    public var indexCol: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var result: Int64?

    public var taskId: Int64?

    public var taskInstanceId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.indexCol != nil {
            map["IndexCol"] = self.indexCol!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskInstanceId != nil {
            map["TaskInstanceId"] = self.taskInstanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["IndexCol"] as? String {
            self.indexCol = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Result"] as? Int64 {
            self.result = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
        if let value = dict["TaskInstanceId"] as? Int64 {
            self.taskInstanceId = value
        }
    }
}

public class QuerySaasRecordResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySaasRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySaasRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySaasRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySaasRecordNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var indexCol: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var result: Int64?

    public var taskId: Int64?

    public var taskInstanceId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.indexCol != nil {
            map["IndexCol"] = self.indexCol!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskInstanceId != nil {
            map["TaskInstanceId"] = self.taskInstanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["IndexCol"] as? String {
            self.indexCol = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Result"] as? Int64 {
            self.result = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
        if let value = dict["TaskInstanceId"] as? Int64 {
            self.taskInstanceId = value
        }
    }
}

public class QuerySaasRecordNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class SaasRecord : Tea.TeaModel {
            public var bizType: String?

            public var detailPkId: Int64?

            public var indexCol: String?

            public var lastDealDate: String?

            public var recordBizExpireDate: String?

            public var result: String?

            public var resultDesc: String?

            public var saasContent: String?

            public var suggestion: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.detailPkId != nil {
                    map["DetailPkId"] = self.detailPkId!
                }
                if self.indexCol != nil {
                    map["IndexCol"] = self.indexCol!
                }
                if self.lastDealDate != nil {
                    map["LastDealDate"] = self.lastDealDate!
                }
                if self.recordBizExpireDate != nil {
                    map["RecordBizExpireDate"] = self.recordBizExpireDate!
                }
                if self.result != nil {
                    map["Result"] = self.result!
                }
                if self.resultDesc != nil {
                    map["ResultDesc"] = self.resultDesc!
                }
                if self.saasContent != nil {
                    map["SaasContent"] = self.saasContent!
                }
                if self.suggestion != nil {
                    map["Suggestion"] = self.suggestion!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["DetailPkId"] as? Int64 {
                    self.detailPkId = value
                }
                if let value = dict["IndexCol"] as? String {
                    self.indexCol = value
                }
                if let value = dict["LastDealDate"] as? String {
                    self.lastDealDate = value
                }
                if let value = dict["RecordBizExpireDate"] as? String {
                    self.recordBizExpireDate = value
                }
                if let value = dict["Result"] as? String {
                    self.result = value
                }
                if let value = dict["ResultDesc"] as? String {
                    self.resultDesc = value
                }
                if let value = dict["SaasContent"] as? String {
                    self.saasContent = value
                }
                if let value = dict["Suggestion"] as? String {
                    self.suggestion = value
                }
            }
        }
        public var saasRecord: [QuerySaasRecordNewResponseBody.List.SaasRecord]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.saasRecord != nil {
                var tmp : [Any] = []
                for k in self.saasRecord! {
                    tmp.append(k.toMap())
                }
                map["SaasRecord"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SaasRecord"] as? [Any?] {
                var tmp : [QuerySaasRecordNewResponseBody.List.SaasRecord] = []
                for v in value {
                    if v != nil {
                        var model = QuerySaasRecordNewResponseBody.List.SaasRecord()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.saasRecord = tmp
            }
        }
    }
    public var list: QuerySaasRecordNewResponseBody.List?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QuerySaasRecordNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QuerySaasRecordNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySaasRecordNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySaasRecordNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySendDetailsByPhoneNumRequest : Tea.TeaModel {
    public var bizType: Int64?

    public var errorCode: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var phoneNum: String?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sendDate: String?

    public var sendStatus: Int64?

    public var signName: String?

    public var templateCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.errorCode != nil {
            map["ErrorCode"] = self.errorCode!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.phoneNum != nil {
            map["PhoneNum"] = self.phoneNum!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sendDate != nil {
            map["SendDate"] = self.sendDate!
        }
        if self.sendStatus != nil {
            map["SendStatus"] = self.sendStatus!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? Int64 {
            self.bizType = value
        }
        if let value = dict["ErrorCode"] as? String {
            self.errorCode = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PhoneNum"] as? String {
            self.phoneNum = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SendDate"] as? String {
            self.sendDate = value
        }
        if let value = dict["SendStatus"] as? Int64 {
            self.sendStatus = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
    }
}

public class QuerySendDetailsByPhoneNumResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySendDetailsByPhoneNumResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySendDetailsByPhoneNumResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySendDetailsByPhoneNumResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySendDetailsByPhoneNumNewRequest : Tea.TeaModel {
    public var bizId: String?

    public var bizType: Int64?

    public var errorCode: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var phoneNum: String?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sendDate: String?

    public var sendStatus: Int64?

    public var signName: String?

    public var statisticsStatus: Int32?

    public var templateCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizId != nil {
            map["BizId"] = self.bizId!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.errorCode != nil {
            map["ErrorCode"] = self.errorCode!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.phoneNum != nil {
            map["PhoneNum"] = self.phoneNum!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sendDate != nil {
            map["SendDate"] = self.sendDate!
        }
        if self.sendStatus != nil {
            map["SendStatus"] = self.sendStatus!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.statisticsStatus != nil {
            map["StatisticsStatus"] = self.statisticsStatus!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizId"] as? String {
            self.bizId = value
        }
        if let value = dict["BizType"] as? Int64 {
            self.bizType = value
        }
        if let value = dict["ErrorCode"] as? String {
            self.errorCode = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PhoneNum"] as? String {
            self.phoneNum = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SendDate"] as? String {
            self.sendDate = value
        }
        if let value = dict["SendStatus"] as? Int64 {
            self.sendStatus = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["StatisticsStatus"] as? Int32 {
            self.statisticsStatus = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
    }
}

public class QuerySendDetailsByPhoneNumNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class SmsSendDetailResponse : Tea.TeaModel {
            public var applyDateStr: String?

            public var billCount: Int64?

            public var bizId: String?

            public var bizType: Int64?

            public var blackListStatus: Int32?

            public var content: String?

            public var errCode: String?

            public var errCodeDesc: String?

            public var innerErrCode: String?

            public var outId: String?

            public var phoneNum: String?

            public var receiveDateStr: String?

            public var sendDateStr: String?

            public var sendStatus: Int64?

            public var smsLength: Int64?

            public var statisticsStatus: Int32?

            public var suggestion: String?

            public var templateCode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.applyDateStr != nil {
                    map["ApplyDateStr"] = self.applyDateStr!
                }
                if self.billCount != nil {
                    map["BillCount"] = self.billCount!
                }
                if self.bizId != nil {
                    map["BizId"] = self.bizId!
                }
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.blackListStatus != nil {
                    map["BlackListStatus"] = self.blackListStatus!
                }
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.errCode != nil {
                    map["ErrCode"] = self.errCode!
                }
                if self.errCodeDesc != nil {
                    map["ErrCodeDesc"] = self.errCodeDesc!
                }
                if self.innerErrCode != nil {
                    map["InnerErrCode"] = self.innerErrCode!
                }
                if self.outId != nil {
                    map["OutId"] = self.outId!
                }
                if self.phoneNum != nil {
                    map["PhoneNum"] = self.phoneNum!
                }
                if self.receiveDateStr != nil {
                    map["ReceiveDateStr"] = self.receiveDateStr!
                }
                if self.sendDateStr != nil {
                    map["SendDateStr"] = self.sendDateStr!
                }
                if self.sendStatus != nil {
                    map["SendStatus"] = self.sendStatus!
                }
                if self.smsLength != nil {
                    map["SmsLength"] = self.smsLength!
                }
                if self.statisticsStatus != nil {
                    map["StatisticsStatus"] = self.statisticsStatus!
                }
                if self.suggestion != nil {
                    map["Suggestion"] = self.suggestion!
                }
                if self.templateCode != nil {
                    map["TemplateCode"] = self.templateCode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApplyDateStr"] as? String {
                    self.applyDateStr = value
                }
                if let value = dict["BillCount"] as? Int64 {
                    self.billCount = value
                }
                if let value = dict["BizId"] as? String {
                    self.bizId = value
                }
                if let value = dict["BizType"] as? Int64 {
                    self.bizType = value
                }
                if let value = dict["BlackListStatus"] as? Int32 {
                    self.blackListStatus = value
                }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["ErrCode"] as? String {
                    self.errCode = value
                }
                if let value = dict["ErrCodeDesc"] as? String {
                    self.errCodeDesc = value
                }
                if let value = dict["InnerErrCode"] as? String {
                    self.innerErrCode = value
                }
                if let value = dict["OutId"] as? String {
                    self.outId = value
                }
                if let value = dict["PhoneNum"] as? String {
                    self.phoneNum = value
                }
                if let value = dict["ReceiveDateStr"] as? String {
                    self.receiveDateStr = value
                }
                if let value = dict["SendDateStr"] as? String {
                    self.sendDateStr = value
                }
                if let value = dict["SendStatus"] as? Int64 {
                    self.sendStatus = value
                }
                if let value = dict["SmsLength"] as? Int64 {
                    self.smsLength = value
                }
                if let value = dict["StatisticsStatus"] as? Int32 {
                    self.statisticsStatus = value
                }
                if let value = dict["Suggestion"] as? String {
                    self.suggestion = value
                }
                if let value = dict["TemplateCode"] as? String {
                    self.templateCode = value
                }
            }
        }
        public var smsSendDetailResponse: [QuerySendDetailsByPhoneNumNewResponseBody.List.SmsSendDetailResponse]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.smsSendDetailResponse != nil {
                var tmp : [Any] = []
                for k in self.smsSendDetailResponse! {
                    tmp.append(k.toMap())
                }
                map["SmsSendDetailResponse"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SmsSendDetailResponse"] as? [Any?] {
                var tmp : [QuerySendDetailsByPhoneNumNewResponseBody.List.SmsSendDetailResponse] = []
                for v in value {
                    if v != nil {
                        var model = QuerySendDetailsByPhoneNumNewResponseBody.List.SmsSendDetailResponse()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.smsSendDetailResponse = tmp
            }
        }
    }
    public var list: QuerySendDetailsByPhoneNumNewResponseBody.List?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QuerySendDetailsByPhoneNumNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QuerySendDetailsByPhoneNumNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySendDetailsByPhoneNumNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySendDetailsByPhoneNumNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySendFailDetailsRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sendDate: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sendDate != nil {
            map["SendDate"] = self.sendDate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SendDate"] as? String {
            self.sendDate = value
        }
    }
}

public class QuerySendFailDetailsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySendFailDetailsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySendFailDetailsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySendFailDetailsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySendFailDetailsNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sendDate: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sendDate != nil {
            map["SendDate"] = self.sendDate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SendDate"] as? String {
            self.sendDate = value
        }
    }
}

public class QuerySendFailDetailsNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class SmsSendDetailResponse : Tea.TeaModel {
            public var blackListStatus: Int32?

            public var content: String?

            public var errCode: String?

            public var errCodeDesc: String?

            public var outId: String?

            public var phoneNum: String?

            public var receiveDateStr: String?

            public var sendDateStr: String?

            public var sendStatus: Int64?

            public var suggestion: String?

            public var templateCode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.blackListStatus != nil {
                    map["BlackListStatus"] = self.blackListStatus!
                }
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.errCode != nil {
                    map["ErrCode"] = self.errCode!
                }
                if self.errCodeDesc != nil {
                    map["ErrCodeDesc"] = self.errCodeDesc!
                }
                if self.outId != nil {
                    map["OutId"] = self.outId!
                }
                if self.phoneNum != nil {
                    map["PhoneNum"] = self.phoneNum!
                }
                if self.receiveDateStr != nil {
                    map["ReceiveDateStr"] = self.receiveDateStr!
                }
                if self.sendDateStr != nil {
                    map["SendDateStr"] = self.sendDateStr!
                }
                if self.sendStatus != nil {
                    map["SendStatus"] = self.sendStatus!
                }
                if self.suggestion != nil {
                    map["Suggestion"] = self.suggestion!
                }
                if self.templateCode != nil {
                    map["TemplateCode"] = self.templateCode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BlackListStatus"] as? Int32 {
                    self.blackListStatus = value
                }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["ErrCode"] as? String {
                    self.errCode = value
                }
                if let value = dict["ErrCodeDesc"] as? String {
                    self.errCodeDesc = value
                }
                if let value = dict["OutId"] as? String {
                    self.outId = value
                }
                if let value = dict["PhoneNum"] as? String {
                    self.phoneNum = value
                }
                if let value = dict["ReceiveDateStr"] as? String {
                    self.receiveDateStr = value
                }
                if let value = dict["SendDateStr"] as? String {
                    self.sendDateStr = value
                }
                if let value = dict["SendStatus"] as? Int64 {
                    self.sendStatus = value
                }
                if let value = dict["Suggestion"] as? String {
                    self.suggestion = value
                }
                if let value = dict["TemplateCode"] as? String {
                    self.templateCode = value
                }
            }
        }
        public var smsSendDetailResponse: [QuerySendFailDetailsNewResponseBody.List.SmsSendDetailResponse]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.smsSendDetailResponse != nil {
                var tmp : [Any] = []
                for k in self.smsSendDetailResponse! {
                    tmp.append(k.toMap())
                }
                map["SmsSendDetailResponse"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SmsSendDetailResponse"] as? [Any?] {
                var tmp : [QuerySendFailDetailsNewResponseBody.List.SmsSendDetailResponse] = []
                for v in value {
                    if v != nil {
                        var model = QuerySendFailDetailsNewResponseBody.List.SmsSendDetailResponse()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.smsSendDetailResponse = tmp
            }
        }
    }
    public var applyDateStr: String?

    public var billCount: Int64?

    public var bizType: Int64?

    public var innerErrCode: String?

    public var list: QuerySendFailDetailsNewResponseBody.List?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var smsLength: Int64?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyDateStr != nil {
            map["ApplyDateStr"] = self.applyDateStr!
        }
        if self.billCount != nil {
            map["BillCount"] = self.billCount!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.innerErrCode != nil {
            map["InnerErrCode"] = self.innerErrCode!
        }
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.smsLength != nil {
            map["SmsLength"] = self.smsLength!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplyDateStr"] as? String {
            self.applyDateStr = value
        }
        if let value = dict["BillCount"] as? Int64 {
            self.billCount = value
        }
        if let value = dict["BizType"] as? Int64 {
            self.bizType = value
        }
        if let value = dict["InnerErrCode"] as? String {
            self.innerErrCode = value
        }
        if let value = dict["List"] as? [String: Any?] {
            var model = QuerySendFailDetailsNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SmsLength"] as? Int64 {
            self.smsLength = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QuerySendFailDetailsNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySendFailDetailsNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySendFailDetailsNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySendToGlobeStatusRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySendToGlobeStatusResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QuerySendToGlobeStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySendToGlobeStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySendToGlobeStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryShortUrlDetailNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var shortUrlId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.shortUrlId != nil {
            map["ShortUrlId"] = self.shortUrlId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ShortUrlId"] as? String {
            self.shortUrlId = value
        }
    }
}

public class QueryShortUrlDetailNewResponseBody : Tea.TeaModel {
    public class Record : Tea.TeaModel {
        public var eventName: String?

        public var gmtCreateTime: String?

        public var gmtInvalidTime: String?

        public var id: String?

        public var shortUrl: String?

        public var sourceUrl: String?

        public var status: Int32?

        public var totalPv: String?

        public var totalUv: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventName != nil {
                map["EventName"] = self.eventName!
            }
            if self.gmtCreateTime != nil {
                map["GmtCreateTime"] = self.gmtCreateTime!
            }
            if self.gmtInvalidTime != nil {
                map["GmtInvalidTime"] = self.gmtInvalidTime!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.shortUrl != nil {
                map["ShortUrl"] = self.shortUrl!
            }
            if self.sourceUrl != nil {
                map["SourceUrl"] = self.sourceUrl!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.totalPv != nil {
                map["TotalPv"] = self.totalPv!
            }
            if self.totalUv != nil {
                map["TotalUv"] = self.totalUv!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventName"] as? String {
                self.eventName = value
            }
            if let value = dict["GmtCreateTime"] as? String {
                self.gmtCreateTime = value
            }
            if let value = dict["GmtInvalidTime"] as? String {
                self.gmtInvalidTime = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["ShortUrl"] as? String {
                self.shortUrl = value
            }
            if let value = dict["SourceUrl"] as? String {
                self.sourceUrl = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["TotalPv"] as? String {
                self.totalPv = value
            }
            if let value = dict["TotalUv"] as? String {
                self.totalUv = value
            }
        }
    }
    public var eventName: String?

    public var gmtCreateTime: String?

    public var gmtInvalidTime: String?

    public var id: String?

    public var record: [QueryShortUrlDetailNewResponseBody.Record]?

    public var requestId: String?

    public var shortUrl: String?

    public var sourceUrl: String?

    public var status: Int32?

    public var totalPv: String?

    public var totalUv: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventName != nil {
            map["EventName"] = self.eventName!
        }
        if self.gmtCreateTime != nil {
            map["GmtCreateTime"] = self.gmtCreateTime!
        }
        if self.gmtInvalidTime != nil {
            map["GmtInvalidTime"] = self.gmtInvalidTime!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.record != nil {
            var tmp : [Any] = []
            for k in self.record! {
                tmp.append(k.toMap())
            }
            map["Record"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.shortUrl != nil {
            map["ShortUrl"] = self.shortUrl!
        }
        if self.sourceUrl != nil {
            map["SourceUrl"] = self.sourceUrl!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.totalPv != nil {
            map["TotalPv"] = self.totalPv!
        }
        if self.totalUv != nil {
            map["TotalUv"] = self.totalUv!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventName"] as? String {
            self.eventName = value
        }
        if let value = dict["GmtCreateTime"] as? String {
            self.gmtCreateTime = value
        }
        if let value = dict["GmtInvalidTime"] as? String {
            self.gmtInvalidTime = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Record"] as? [Any?] {
            var tmp : [QueryShortUrlDetailNewResponseBody.Record] = []
            for v in value {
                if v != nil {
                    var model = QueryShortUrlDetailNewResponseBody.Record()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.record = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ShortUrl"] as? String {
            self.shortUrl = value
        }
        if let value = dict["SourceUrl"] as? String {
            self.sourceUrl = value
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
        if let value = dict["TotalPv"] as? String {
            self.totalPv = value
        }
        if let value = dict["TotalUv"] as? String {
            self.totalUv = value
        }
    }
}

public class QueryShortUrlDetailNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryShortUrlDetailNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryShortUrlDetailNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryShortUrlListNewRequest : Tea.TeaModel {
    public var eventName: String?

    public var keyWord: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var shortUrl: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventName != nil {
            map["EventName"] = self.eventName!
        }
        if self.keyWord != nil {
            map["KeyWord"] = self.keyWord!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.shortUrl != nil {
            map["ShortUrl"] = self.shortUrl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventName"] as? String {
            self.eventName = value
        }
        if let value = dict["KeyWord"] as? String {
            self.keyWord = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ShortUrl"] as? String {
            self.shortUrl = value
        }
    }
}

public class QueryShortUrlListNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class Record : Tea.TeaModel {
            public var eventName: String?

            public var gmtCreateTime: String?

            public var gmtInvalidTime: String?

            public var id: String?

            public var reason: String?

            public var shortUrl: String?

            public var sourceUrl: String?

            public var status: Int32?

            public var totalPv: String?

            public var totalUv: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventName != nil {
                    map["EventName"] = self.eventName!
                }
                if self.gmtCreateTime != nil {
                    map["GmtCreateTime"] = self.gmtCreateTime!
                }
                if self.gmtInvalidTime != nil {
                    map["GmtInvalidTime"] = self.gmtInvalidTime!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.reason != nil {
                    map["Reason"] = self.reason!
                }
                if self.shortUrl != nil {
                    map["ShortUrl"] = self.shortUrl!
                }
                if self.sourceUrl != nil {
                    map["SourceUrl"] = self.sourceUrl!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.totalPv != nil {
                    map["TotalPv"] = self.totalPv!
                }
                if self.totalUv != nil {
                    map["TotalUv"] = self.totalUv!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventName"] as? String {
                    self.eventName = value
                }
                if let value = dict["GmtCreateTime"] as? String {
                    self.gmtCreateTime = value
                }
                if let value = dict["GmtInvalidTime"] as? String {
                    self.gmtInvalidTime = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Reason"] as? String {
                    self.reason = value
                }
                if let value = dict["ShortUrl"] as? String {
                    self.shortUrl = value
                }
                if let value = dict["SourceUrl"] as? String {
                    self.sourceUrl = value
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["TotalPv"] as? String {
                    self.totalPv = value
                }
                if let value = dict["TotalUv"] as? String {
                    self.totalUv = value
                }
            }
        }
        public var eventName: String?

        public var gmtCreateTime: String?

        public var gmtInvalidTime: String?

        public var id: String?

        public var reason: String?

        public var record: [QueryShortUrlListNewResponseBody.List.Record]?

        public var shortUrl: String?

        public var sourceUrl: String?

        public var status: Int32?

        public var totalPv: String?

        public var totalUv: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventName != nil {
                map["EventName"] = self.eventName!
            }
            if self.gmtCreateTime != nil {
                map["GmtCreateTime"] = self.gmtCreateTime!
            }
            if self.gmtInvalidTime != nil {
                map["GmtInvalidTime"] = self.gmtInvalidTime!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            if self.record != nil {
                var tmp : [Any] = []
                for k in self.record! {
                    tmp.append(k.toMap())
                }
                map["Record"] = tmp
            }
            if self.shortUrl != nil {
                map["ShortUrl"] = self.shortUrl!
            }
            if self.sourceUrl != nil {
                map["SourceUrl"] = self.sourceUrl!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.totalPv != nil {
                map["TotalPv"] = self.totalPv!
            }
            if self.totalUv != nil {
                map["TotalUv"] = self.totalUv!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventName"] as? String {
                self.eventName = value
            }
            if let value = dict["GmtCreateTime"] as? String {
                self.gmtCreateTime = value
            }
            if let value = dict["GmtInvalidTime"] as? String {
                self.gmtInvalidTime = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
            if let value = dict["Record"] as? [Any?] {
                var tmp : [QueryShortUrlListNewResponseBody.List.Record] = []
                for v in value {
                    if v != nil {
                        var model = QueryShortUrlListNewResponseBody.List.Record()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.record = tmp
            }
            if let value = dict["ShortUrl"] as? String {
                self.shortUrl = value
            }
            if let value = dict["SourceUrl"] as? String {
                self.sourceUrl = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["TotalPv"] as? String {
                self.totalPv = value
            }
            if let value = dict["TotalUv"] as? String {
                self.totalUv = value
            }
        }
    }
    public var list: [QueryShortUrlListNewResponseBody.List]?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            var tmp : [Any] = []
            for k in self.list! {
                tmp.append(k.toMap())
            }
            map["List"] = tmp
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [Any?] {
            var tmp : [QueryShortUrlListNewResponseBody.List] = []
            for v in value {
                if v != nil {
                    var model = QueryShortUrlListNewResponseBody.List()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.list = tmp
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QueryShortUrlListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryShortUrlListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryShortUrlListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryShortUrlStatusRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryShortUrlStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryShortUrlStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryShortUrlStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryShortUrlStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySlsStatusNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySlsStatusNewResponseBody : Tea.TeaModel {
    public var authorizeStatus: Bool?

    public var openStatus: Bool?

    public var prodCode: String?

    public var requestId: String?

    public var saveTime: Int32?

    public var uid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authorizeStatus != nil {
            map["AuthorizeStatus"] = self.authorizeStatus!
        }
        if self.openStatus != nil {
            map["OpenStatus"] = self.openStatus!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.saveTime != nil {
            map["SaveTime"] = self.saveTime!
        }
        if self.uid != nil {
            map["Uid"] = self.uid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthorizeStatus"] as? Bool {
            self.authorizeStatus = value
        }
        if let value = dict["OpenStatus"] as? Bool {
            self.openStatus = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SaveTime"] as? Int32 {
            self.saveTime = value
        }
        if let value = dict["Uid"] as? String {
            self.uid = value
        }
    }
}

public class QuerySlsStatusNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySlsStatusNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySlsStatusNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsBaseScreenNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySmsBaseScreenNewResponseBody : Tea.TeaModel {
    public var accountBalance: String?

    public var cardAbilityMark: String?

    public var cardCustomerMark: String?

    public var certifyType: String?

    public var channelType: String?

    public var childAccountAuth: String?

    public var creditValue: String?

    public var currentLocale: String?

    public var custFrom: Int32?

    public var custName: String?

    public var dataAbilityMark: String?

    public var dayuMigrateStatus: Int32?

    public var invoiceBalance: String?

    public var ipSmsAbilityMark: String?

    public var isAccountMerged: Bool?

    public var isAliInnerUser: Bool?

    public var isChineseUser: Bool?

    public var isDayuCustomer: Bool?

    public var isDayuTopCust: Bool?

    public var isMnsForceMigratingCustomer: Bool?

    public var isMnsMigratingCustomer: Bool?

    public var isNeedAuth: Bool?

    public var isOldFisCust: Bool?

    public var isOldSms: Bool?

    public var isOpened: Bool?

    public var isRemainMnsPackage: Bool?

    public var isSendSmsToGlobeUser: Bool?

    public var isShortUrlNormalUse: Bool?

    public var isShortUrlOpened: Bool?

    public var isSilentCust: Bool?

    public var osStatus: Int32?

    public var prodCode: String?

    public var requestId: String?

    public var shortUrlServeTag: Bool?

    public var smsMarketingAssistantTag: Bool?

    public var textAbilityMark: String?

    public var voucherNum: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accountBalance != nil {
            map["AccountBalance"] = self.accountBalance!
        }
        if self.cardAbilityMark != nil {
            map["CardAbilityMark"] = self.cardAbilityMark!
        }
        if self.cardCustomerMark != nil {
            map["CardCustomerMark"] = self.cardCustomerMark!
        }
        if self.certifyType != nil {
            map["CertifyType"] = self.certifyType!
        }
        if self.channelType != nil {
            map["ChannelType"] = self.channelType!
        }
        if self.childAccountAuth != nil {
            map["ChildAccountAuth"] = self.childAccountAuth!
        }
        if self.creditValue != nil {
            map["CreditValue"] = self.creditValue!
        }
        if self.currentLocale != nil {
            map["CurrentLocale"] = self.currentLocale!
        }
        if self.custFrom != nil {
            map["CustFrom"] = self.custFrom!
        }
        if self.custName != nil {
            map["CustName"] = self.custName!
        }
        if self.dataAbilityMark != nil {
            map["DataAbilityMark"] = self.dataAbilityMark!
        }
        if self.dayuMigrateStatus != nil {
            map["DayuMigrateStatus"] = self.dayuMigrateStatus!
        }
        if self.invoiceBalance != nil {
            map["InvoiceBalance"] = self.invoiceBalance!
        }
        if self.ipSmsAbilityMark != nil {
            map["IpSmsAbilityMark"] = self.ipSmsAbilityMark!
        }
        if self.isAccountMerged != nil {
            map["IsAccountMerged"] = self.isAccountMerged!
        }
        if self.isAliInnerUser != nil {
            map["IsAliInnerUser"] = self.isAliInnerUser!
        }
        if self.isChineseUser != nil {
            map["IsChineseUser"] = self.isChineseUser!
        }
        if self.isDayuCustomer != nil {
            map["IsDayuCustomer"] = self.isDayuCustomer!
        }
        if self.isDayuTopCust != nil {
            map["IsDayuTopCust"] = self.isDayuTopCust!
        }
        if self.isMnsForceMigratingCustomer != nil {
            map["IsMnsForceMigratingCustomer"] = self.isMnsForceMigratingCustomer!
        }
        if self.isMnsMigratingCustomer != nil {
            map["IsMnsMigratingCustomer"] = self.isMnsMigratingCustomer!
        }
        if self.isNeedAuth != nil {
            map["IsNeedAuth"] = self.isNeedAuth!
        }
        if self.isOldFisCust != nil {
            map["IsOldFisCust"] = self.isOldFisCust!
        }
        if self.isOldSms != nil {
            map["IsOldSms"] = self.isOldSms!
        }
        if self.isOpened != nil {
            map["IsOpened"] = self.isOpened!
        }
        if self.isRemainMnsPackage != nil {
            map["IsRemainMnsPackage"] = self.isRemainMnsPackage!
        }
        if self.isSendSmsToGlobeUser != nil {
            map["IsSendSmsToGlobeUser"] = self.isSendSmsToGlobeUser!
        }
        if self.isShortUrlNormalUse != nil {
            map["IsShortUrlNormalUse"] = self.isShortUrlNormalUse!
        }
        if self.isShortUrlOpened != nil {
            map["IsShortUrlOpened"] = self.isShortUrlOpened!
        }
        if self.isSilentCust != nil {
            map["IsSilentCust"] = self.isSilentCust!
        }
        if self.osStatus != nil {
            map["OsStatus"] = self.osStatus!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.shortUrlServeTag != nil {
            map["ShortUrlServeTag"] = self.shortUrlServeTag!
        }
        if self.smsMarketingAssistantTag != nil {
            map["SmsMarketingAssistantTag"] = self.smsMarketingAssistantTag!
        }
        if self.textAbilityMark != nil {
            map["TextAbilityMark"] = self.textAbilityMark!
        }
        if self.voucherNum != nil {
            map["VoucherNum"] = self.voucherNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccountBalance"] as? String {
            self.accountBalance = value
        }
        if let value = dict["CardAbilityMark"] as? String {
            self.cardAbilityMark = value
        }
        if let value = dict["CardCustomerMark"] as? String {
            self.cardCustomerMark = value
        }
        if let value = dict["CertifyType"] as? String {
            self.certifyType = value
        }
        if let value = dict["ChannelType"] as? String {
            self.channelType = value
        }
        if let value = dict["ChildAccountAuth"] as? String {
            self.childAccountAuth = value
        }
        if let value = dict["CreditValue"] as? String {
            self.creditValue = value
        }
        if let value = dict["CurrentLocale"] as? String {
            self.currentLocale = value
        }
        if let value = dict["CustFrom"] as? Int32 {
            self.custFrom = value
        }
        if let value = dict["CustName"] as? String {
            self.custName = value
        }
        if let value = dict["DataAbilityMark"] as? String {
            self.dataAbilityMark = value
        }
        if let value = dict["DayuMigrateStatus"] as? Int32 {
            self.dayuMigrateStatus = value
        }
        if let value = dict["InvoiceBalance"] as? String {
            self.invoiceBalance = value
        }
        if let value = dict["IpSmsAbilityMark"] as? String {
            self.ipSmsAbilityMark = value
        }
        if let value = dict["IsAccountMerged"] as? Bool {
            self.isAccountMerged = value
        }
        if let value = dict["IsAliInnerUser"] as? Bool {
            self.isAliInnerUser = value
        }
        if let value = dict["IsChineseUser"] as? Bool {
            self.isChineseUser = value
        }
        if let value = dict["IsDayuCustomer"] as? Bool {
            self.isDayuCustomer = value
        }
        if let value = dict["IsDayuTopCust"] as? Bool {
            self.isDayuTopCust = value
        }
        if let value = dict["IsMnsForceMigratingCustomer"] as? Bool {
            self.isMnsForceMigratingCustomer = value
        }
        if let value = dict["IsMnsMigratingCustomer"] as? Bool {
            self.isMnsMigratingCustomer = value
        }
        if let value = dict["IsNeedAuth"] as? Bool {
            self.isNeedAuth = value
        }
        if let value = dict["IsOldFisCust"] as? Bool {
            self.isOldFisCust = value
        }
        if let value = dict["IsOldSms"] as? Bool {
            self.isOldSms = value
        }
        if let value = dict["IsOpened"] as? Bool {
            self.isOpened = value
        }
        if let value = dict["IsRemainMnsPackage"] as? Bool {
            self.isRemainMnsPackage = value
        }
        if let value = dict["IsSendSmsToGlobeUser"] as? Bool {
            self.isSendSmsToGlobeUser = value
        }
        if let value = dict["IsShortUrlNormalUse"] as? Bool {
            self.isShortUrlNormalUse = value
        }
        if let value = dict["IsShortUrlOpened"] as? Bool {
            self.isShortUrlOpened = value
        }
        if let value = dict["IsSilentCust"] as? Bool {
            self.isSilentCust = value
        }
        if let value = dict["OsStatus"] as? Int32 {
            self.osStatus = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ShortUrlServeTag"] as? Bool {
            self.shortUrlServeTag = value
        }
        if let value = dict["SmsMarketingAssistantTag"] as? Bool {
            self.smsMarketingAssistantTag = value
        }
        if let value = dict["TextAbilityMark"] as? String {
            self.textAbilityMark = value
        }
        if let value = dict["VoucherNum"] as? Int32 {
            self.voucherNum = value
        }
    }
}

public class QuerySmsBaseScreenNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsBaseScreenNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsBaseScreenNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsDetectCountsRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySmsDetectCountsResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QuerySmsDetectCountsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsDetectCountsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsDetectCountsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsDetectCountsNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySmsDetectCountsNewResponseBody : Tea.TeaModel {
    public var detectedTimes: Int32?

    public var leftTimes: Int32?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.detectedTimes != nil {
            map["DetectedTimes"] = self.detectedTimes!
        }
        if self.leftTimes != nil {
            map["LeftTimes"] = self.leftTimes!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DetectedTimes"] as? Int32 {
            self.detectedTimes = value
        }
        if let value = dict["LeftTimes"] as? Int32 {
            self.leftTimes = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QuerySmsDetectCountsNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsDetectCountsNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsDetectCountsNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsDetectListRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySmsDetectListResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QuerySmsDetectListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsDetectListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsDetectListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsDetectListNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySmsDetectListNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public var detectContent: String?

        public var detectSignName: String?

        public var detectTime: String?

        public var status: Int32?

        public var successRate: String?

        public var templateCode: String?

        public var templateParam: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.detectContent != nil {
                map["DetectContent"] = self.detectContent!
            }
            if self.detectSignName != nil {
                map["DetectSignName"] = self.detectSignName!
            }
            if self.detectTime != nil {
                map["DetectTime"] = self.detectTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.successRate != nil {
                map["SuccessRate"] = self.successRate!
            }
            if self.templateCode != nil {
                map["TemplateCode"] = self.templateCode!
            }
            if self.templateParam != nil {
                map["TemplateParam"] = self.templateParam!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DetectContent"] as? String {
                self.detectContent = value
            }
            if let value = dict["DetectSignName"] as? String {
                self.detectSignName = value
            }
            if let value = dict["DetectTime"] as? String {
                self.detectTime = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["SuccessRate"] as? String {
                self.successRate = value
            }
            if let value = dict["TemplateCode"] as? String {
                self.templateCode = value
            }
            if let value = dict["TemplateParam"] as? String {
                self.templateParam = value
            }
        }
    }
    public var list: [QuerySmsDetectListNewResponseBody.List]?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            var tmp : [Any] = []
            for k in self.list! {
                tmp.append(k.toMap())
            }
            map["List"] = tmp
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [Any?] {
            var tmp : [QuerySmsDetectListNewResponseBody.List] = []
            for v in value {
                if v != nil {
                    var model = QuerySmsDetectListNewResponseBody.List()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.list = tmp
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QuerySmsDetectListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsDetectListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsDetectListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsPackageDetailRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var packageType: String?

    public var pageNo: Int64?

    public var pageSize: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var status: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.packageType != nil {
            map["PackageType"] = self.packageType!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PackageType"] as? String {
            self.packageType = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
    }
}

public class QuerySmsPackageDetailResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsPackageDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsPackageDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsPackageDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsPackageDetailNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var packageType: String?

    public var pageNo: Int64?

    public var pageSize: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var status: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.packageType != nil {
            map["PackageType"] = self.packageType!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PackageType"] as? String {
            self.packageType = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Status"] as? Int32 {
            self.status = value
        }
    }
}

public class QuerySmsPackageDetailNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class SmsPackageDetailDTO : Tea.TeaModel {
            public var invalidTime: Int64?

            public var orderTime: Int64?

            public var packageType: String?

            public var remainCount: Int64?

            public var status: Int32?

            public var totalCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.invalidTime != nil {
                    map["InvalidTime"] = self.invalidTime!
                }
                if self.orderTime != nil {
                    map["OrderTime"] = self.orderTime!
                }
                if self.packageType != nil {
                    map["PackageType"] = self.packageType!
                }
                if self.remainCount != nil {
                    map["RemainCount"] = self.remainCount!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.totalCount != nil {
                    map["TotalCount"] = self.totalCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InvalidTime"] as? Int64 {
                    self.invalidTime = value
                }
                if let value = dict["OrderTime"] as? Int64 {
                    self.orderTime = value
                }
                if let value = dict["PackageType"] as? String {
                    self.packageType = value
                }
                if let value = dict["RemainCount"] as? Int64 {
                    self.remainCount = value
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["TotalCount"] as? Int64 {
                    self.totalCount = value
                }
            }
        }
        public var smsPackageDetailDTO: [QuerySmsPackageDetailNewResponseBody.List.SmsPackageDetailDTO]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.smsPackageDetailDTO != nil {
                var tmp : [Any] = []
                for k in self.smsPackageDetailDTO! {
                    tmp.append(k.toMap())
                }
                map["SmsPackageDetailDTO"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SmsPackageDetailDTO"] as? [Any?] {
                var tmp : [QuerySmsPackageDetailNewResponseBody.List.SmsPackageDetailDTO] = []
                for v in value {
                    if v != nil {
                        var model = QuerySmsPackageDetailNewResponseBody.List.SmsPackageDetailDTO()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.smsPackageDetailDTO = tmp
            }
        }
    }
    public var list: QuerySmsPackageDetailNewResponseBody.List?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var remainSmsCount: Int64?

    public var requestId: String?

    public var total: Int64?

    public var totalSmsCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.remainSmsCount != nil {
            map["RemainSmsCount"] = self.remainSmsCount!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        if self.totalSmsCount != nil {
            map["TotalSmsCount"] = self.totalSmsCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QuerySmsPackageDetailNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RemainSmsCount"] as? Int64 {
            self.remainSmsCount = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
        if let value = dict["TotalSmsCount"] as? Int64 {
            self.totalSmsCount = value
        }
    }
}

public class QuerySmsPackageDetailNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsPackageDetailNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsPackageDetailNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsPackageNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var packageType: String?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var productName: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var state: Int32?

    public var time: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.packageType != nil {
            map["PackageType"] = self.packageType!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.productName != nil {
            map["ProductName"] = self.productName!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        if self.time != nil {
            map["Time"] = self.time!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PackageType"] as? String {
            self.packageType = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProductName"] as? String {
            self.productName = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["State"] as? Int32 {
            self.state = value
        }
        if let value = dict["Time"] as? String {
            self.time = value
        }
    }
}

public class QuerySmsPackageNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class SmsPackageInfo : Tea.TeaModel {
            public var buyTime: String?

            public var detailOrderId: String?

            public var effTime: String?

            public var expTime: String?

            public var orderId: String?

            public var packageName: String?

            public var packageType: String?

            public var payPrice: Double?

            public var pkgId: Int64?

            public var refundStatus: Int32?

            public var state: Int32?

            public var total: Int64?

            public var usage: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.buyTime != nil {
                    map["BuyTime"] = self.buyTime!
                }
                if self.detailOrderId != nil {
                    map["DetailOrderId"] = self.detailOrderId!
                }
                if self.effTime != nil {
                    map["EffTime"] = self.effTime!
                }
                if self.expTime != nil {
                    map["ExpTime"] = self.expTime!
                }
                if self.orderId != nil {
                    map["OrderId"] = self.orderId!
                }
                if self.packageName != nil {
                    map["PackageName"] = self.packageName!
                }
                if self.packageType != nil {
                    map["PackageType"] = self.packageType!
                }
                if self.payPrice != nil {
                    map["PayPrice"] = self.payPrice!
                }
                if self.pkgId != nil {
                    map["PkgId"] = self.pkgId!
                }
                if self.refundStatus != nil {
                    map["RefundStatus"] = self.refundStatus!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.total != nil {
                    map["Total"] = self.total!
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BuyTime"] as? String {
                    self.buyTime = value
                }
                if let value = dict["DetailOrderId"] as? String {
                    self.detailOrderId = value
                }
                if let value = dict["EffTime"] as? String {
                    self.effTime = value
                }
                if let value = dict["ExpTime"] as? String {
                    self.expTime = value
                }
                if let value = dict["OrderId"] as? String {
                    self.orderId = value
                }
                if let value = dict["PackageName"] as? String {
                    self.packageName = value
                }
                if let value = dict["PackageType"] as? String {
                    self.packageType = value
                }
                if let value = dict["PayPrice"] as? Double {
                    self.payPrice = value
                }
                if let value = dict["PkgId"] as? Int64 {
                    self.pkgId = value
                }
                if let value = dict["RefundStatus"] as? Int32 {
                    self.refundStatus = value
                }
                if let value = dict["State"] as? Int32 {
                    self.state = value
                }
                if let value = dict["Total"] as? Int64 {
                    self.total = value
                }
                if let value = dict["Usage"] as? Int64 {
                    self.usage = value
                }
            }
        }
        public var smsPackageInfo: [QuerySmsPackageNewResponseBody.List.SmsPackageInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.smsPackageInfo != nil {
                var tmp : [Any] = []
                for k in self.smsPackageInfo! {
                    tmp.append(k.toMap())
                }
                map["SmsPackageInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SmsPackageInfo"] as? [Any?] {
                var tmp : [QuerySmsPackageNewResponseBody.List.SmsPackageInfo] = []
                for v in value {
                    if v != nil {
                        var model = QuerySmsPackageNewResponseBody.List.SmsPackageInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.smsPackageInfo = tmp
            }
        }
    }
    public var list: QuerySmsPackageNewResponseBody.List?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QuerySmsPackageNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QuerySmsPackageNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsPackageNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsPackageNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsPackageOrderListRequest : Tea.TeaModel {
    public var billCycle: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billCycle != nil {
            map["BillCycle"] = self.billCycle!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillCycle"] as? String {
            self.billCycle = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySmsPackageOrderListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsPackageOrderListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsPackageOrderListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsPackageOrderListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsPackageOrderListNewRequest : Tea.TeaModel {
    public var billCycle: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billCycle != nil {
            map["BillCycle"] = self.billCycle!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillCycle"] as? String {
            self.billCycle = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySmsPackageOrderListNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class SmsPackageOrderResponse : Tea.TeaModel {
            public var effectDate: String?

            public var expireDate: String?

            public var name: String?

            public var payPrice: String?

            public var state: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.effectDate != nil {
                    map["EffectDate"] = self.effectDate!
                }
                if self.expireDate != nil {
                    map["ExpireDate"] = self.expireDate!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.payPrice != nil {
                    map["PayPrice"] = self.payPrice!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EffectDate"] as? String {
                    self.effectDate = value
                }
                if let value = dict["ExpireDate"] as? String {
                    self.expireDate = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PayPrice"] as? String {
                    self.payPrice = value
                }
                if let value = dict["State"] as? Int32 {
                    self.state = value
                }
            }
        }
        public var smsPackageOrderResponse: [QuerySmsPackageOrderListNewResponseBody.List.SmsPackageOrderResponse]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.smsPackageOrderResponse != nil {
                var tmp : [Any] = []
                for k in self.smsPackageOrderResponse! {
                    tmp.append(k.toMap())
                }
                map["SmsPackageOrderResponse"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SmsPackageOrderResponse"] as? [Any?] {
                var tmp : [QuerySmsPackageOrderListNewResponseBody.List.SmsPackageOrderResponse] = []
                for v in value {
                    if v != nil {
                        var model = QuerySmsPackageOrderListNewResponseBody.List.SmsPackageOrderResponse()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.smsPackageOrderResponse = tmp
            }
        }
    }
    public var list: QuerySmsPackageOrderListNewResponseBody.List?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QuerySmsPackageOrderListNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QuerySmsPackageOrderListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsPackageOrderListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsPackageOrderListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsPackageSummaryRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySmsPackageSummaryResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsPackageSummaryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsPackageSummaryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsPackageSummaryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsPackageSummaryNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySmsPackageSummaryNewResponseBody : Tea.TeaModel {
    public var certifyType: Int32?

    public var interPackageCount: Int64?

    public var interPackageSum: Int64?

    public var mktPackageCount: Int64?

    public var mktPackageSum: Int64?

    public var requestId: String?

    public var smsPackageCount: Int64?

    public var smsPackageSum: Int64?

    public var sysPackageCount: Int64?

    public var sysPackageSum: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certifyType != nil {
            map["CertifyType"] = self.certifyType!
        }
        if self.interPackageCount != nil {
            map["InterPackageCount"] = self.interPackageCount!
        }
        if self.interPackageSum != nil {
            map["InterPackageSum"] = self.interPackageSum!
        }
        if self.mktPackageCount != nil {
            map["MktPackageCount"] = self.mktPackageCount!
        }
        if self.mktPackageSum != nil {
            map["MktPackageSum"] = self.mktPackageSum!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.smsPackageCount != nil {
            map["SmsPackageCount"] = self.smsPackageCount!
        }
        if self.smsPackageSum != nil {
            map["SmsPackageSum"] = self.smsPackageSum!
        }
        if self.sysPackageCount != nil {
            map["SysPackageCount"] = self.sysPackageCount!
        }
        if self.sysPackageSum != nil {
            map["SysPackageSum"] = self.sysPackageSum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertifyType"] as? Int32 {
            self.certifyType = value
        }
        if let value = dict["InterPackageCount"] as? Int64 {
            self.interPackageCount = value
        }
        if let value = dict["InterPackageSum"] as? Int64 {
            self.interPackageSum = value
        }
        if let value = dict["MktPackageCount"] as? Int64 {
            self.mktPackageCount = value
        }
        if let value = dict["MktPackageSum"] as? Int64 {
            self.mktPackageSum = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SmsPackageCount"] as? Int64 {
            self.smsPackageCount = value
        }
        if let value = dict["SmsPackageSum"] as? Int64 {
            self.smsPackageSum = value
        }
        if let value = dict["SysPackageCount"] as? Int64 {
            self.sysPackageCount = value
        }
        if let value = dict["SysPackageSum"] as? Int64 {
            self.sysPackageSum = value
        }
    }
}

public class QuerySmsPackageSummaryNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsPackageSummaryNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsPackageSummaryNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsSaasTaskDetailRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var taskId: Int64?

    public var taskInstanceId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskInstanceId != nil {
            map["TaskInstanceId"] = self.taskInstanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
        if let value = dict["TaskInstanceId"] as? Int64 {
            self.taskInstanceId = value
        }
    }
}

public class QuerySmsSaasTaskDetailResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsSaasTaskDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsSaasTaskDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsSaasTaskDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsSaasTaskDetailNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var taskId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
    }
}

public class QuerySmsSaasTaskDetailNewResponseBody : Tea.TeaModel {
    public class PhoneList : Tea.TeaModel {
        public var phoneNum: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.phoneNum != nil {
                map["phoneNum"] = self.phoneNum!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["phoneNum"] as? [String] {
                self.phoneNum = value
            }
        }
    }
    public class SaasBaseCommParam : Tea.TeaModel {
        public class ParamList : Tea.TeaModel {
            public var param: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.param != nil {
                    map["Param"] = self.param!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Param"] as? [String] {
                    self.param = value
                }
            }
        }
        public var aliyunUid: Int64?

        public var billCount: Int32?

        public var byteCount: Int32?

        public var clientIp: String?

        public var custId: Int64?

        public var cycleNum: Int32?

        public var paramList: QuerySmsSaasTaskDetailNewResponseBody.SaasBaseCommParam.ParamList?

        public var partnerId: Int64?

        public var signature: String?

        public var smsContent: String?

        public var smsTemplateCode: String?

        public var taskErrorCase: String?

        public var taskErrorSuggestion: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.paramList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliyunUid != nil {
                map["AliyunUid"] = self.aliyunUid!
            }
            if self.billCount != nil {
                map["BillCount"] = self.billCount!
            }
            if self.byteCount != nil {
                map["ByteCount"] = self.byteCount!
            }
            if self.clientIp != nil {
                map["ClientIp"] = self.clientIp!
            }
            if self.custId != nil {
                map["CustId"] = self.custId!
            }
            if self.cycleNum != nil {
                map["CycleNum"] = self.cycleNum!
            }
            if self.paramList != nil {
                map["ParamList"] = self.paramList?.toMap()
            }
            if self.partnerId != nil {
                map["PartnerId"] = self.partnerId!
            }
            if self.signature != nil {
                map["Signature"] = self.signature!
            }
            if self.smsContent != nil {
                map["SmsContent"] = self.smsContent!
            }
            if self.smsTemplateCode != nil {
                map["SmsTemplateCode"] = self.smsTemplateCode!
            }
            if self.taskErrorCase != nil {
                map["TaskErrorCase"] = self.taskErrorCase!
            }
            if self.taskErrorSuggestion != nil {
                map["TaskErrorSuggestion"] = self.taskErrorSuggestion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AliyunUid"] as? Int64 {
                self.aliyunUid = value
            }
            if let value = dict["BillCount"] as? Int32 {
                self.billCount = value
            }
            if let value = dict["ByteCount"] as? Int32 {
                self.byteCount = value
            }
            if let value = dict["ClientIp"] as? String {
                self.clientIp = value
            }
            if let value = dict["CustId"] as? Int64 {
                self.custId = value
            }
            if let value = dict["CycleNum"] as? Int32 {
                self.cycleNum = value
            }
            if let value = dict["ParamList"] as? [String: Any?] {
                var model = QuerySmsSaasTaskDetailNewResponseBody.SaasBaseCommParam.ParamList()
                model.fromMap(value)
                self.paramList = model
            }
            if let value = dict["PartnerId"] as? Int64 {
                self.partnerId = value
            }
            if let value = dict["Signature"] as? String {
                self.signature = value
            }
            if let value = dict["SmsContent"] as? String {
                self.smsContent = value
            }
            if let value = dict["SmsTemplateCode"] as? String {
                self.smsTemplateCode = value
            }
            if let value = dict["TaskErrorCase"] as? String {
                self.taskErrorCase = value
            }
            if let value = dict["TaskErrorSuggestion"] as? String {
                self.taskErrorSuggestion = value
            }
        }
    }
    public var bizType: String?

    public var detailDownloadUrl: String?

    public var detailDownloadUrlForSuccess: String?

    public var extParams: String?

    public var failCount: Int32?

    public var fireTime: String?

    public var gmtCreate: String?

    public var isDeleted: Bool?

    public var isPermitOrder: Bool?

    public var isPermitOrderForSuccess: Bool?

    public var ossFilePath: String?

    public var phoneList: QuerySmsSaasTaskDetailNewResponseBody.PhoneList?

    public var requestId: String?

    public var saasBaseCommParam: QuerySmsSaasTaskDetailNewResponseBody.SaasBaseCommParam?

    public var saasFileUrl: String?

    public var scheduleType: String?

    public var status: String?

    public var successCount: Int32?

    public var taskId: Int64?

    public var taskInstanceId: Int64?

    public var taskName: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.phoneList?.validate()
        try self.saasBaseCommParam?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.detailDownloadUrl != nil {
            map["DetailDownloadUrl"] = self.detailDownloadUrl!
        }
        if self.detailDownloadUrlForSuccess != nil {
            map["DetailDownloadUrlForSuccess"] = self.detailDownloadUrlForSuccess!
        }
        if self.extParams != nil {
            map["ExtParams"] = self.extParams!
        }
        if self.failCount != nil {
            map["FailCount"] = self.failCount!
        }
        if self.fireTime != nil {
            map["FireTime"] = self.fireTime!
        }
        if self.gmtCreate != nil {
            map["GmtCreate"] = self.gmtCreate!
        }
        if self.isDeleted != nil {
            map["IsDeleted"] = self.isDeleted!
        }
        if self.isPermitOrder != nil {
            map["IsPermitOrder"] = self.isPermitOrder!
        }
        if self.isPermitOrderForSuccess != nil {
            map["IsPermitOrderForSuccess"] = self.isPermitOrderForSuccess!
        }
        if self.ossFilePath != nil {
            map["OssFilePath"] = self.ossFilePath!
        }
        if self.phoneList != nil {
            map["PhoneList"] = self.phoneList?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.saasBaseCommParam != nil {
            map["SaasBaseCommParam"] = self.saasBaseCommParam?.toMap()
        }
        if self.saasFileUrl != nil {
            map["SaasFileUrl"] = self.saasFileUrl!
        }
        if self.scheduleType != nil {
            map["ScheduleType"] = self.scheduleType!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.successCount != nil {
            map["SuccessCount"] = self.successCount!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.taskInstanceId != nil {
            map["TaskInstanceId"] = self.taskInstanceId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["DetailDownloadUrl"] as? String {
            self.detailDownloadUrl = value
        }
        if let value = dict["DetailDownloadUrlForSuccess"] as? String {
            self.detailDownloadUrlForSuccess = value
        }
        if let value = dict["ExtParams"] as? String {
            self.extParams = value
        }
        if let value = dict["FailCount"] as? Int32 {
            self.failCount = value
        }
        if let value = dict["FireTime"] as? String {
            self.fireTime = value
        }
        if let value = dict["GmtCreate"] as? String {
            self.gmtCreate = value
        }
        if let value = dict["IsDeleted"] as? Bool {
            self.isDeleted = value
        }
        if let value = dict["IsPermitOrder"] as? Bool {
            self.isPermitOrder = value
        }
        if let value = dict["IsPermitOrderForSuccess"] as? Bool {
            self.isPermitOrderForSuccess = value
        }
        if let value = dict["OssFilePath"] as? String {
            self.ossFilePath = value
        }
        if let value = dict["PhoneList"] as? [String: Any?] {
            var model = QuerySmsSaasTaskDetailNewResponseBody.PhoneList()
            model.fromMap(value)
            self.phoneList = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SaasBaseCommParam"] as? [String: Any?] {
            var model = QuerySmsSaasTaskDetailNewResponseBody.SaasBaseCommParam()
            model.fromMap(value)
            self.saasBaseCommParam = model
        }
        if let value = dict["SaasFileUrl"] as? String {
            self.saasFileUrl = value
        }
        if let value = dict["ScheduleType"] as? String {
            self.scheduleType = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["SuccessCount"] as? Int32 {
            self.successCount = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
        if let value = dict["TaskInstanceId"] as? Int64 {
            self.taskInstanceId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class QuerySmsSaasTaskDetailNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsSaasTaskDetailNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsSaasTaskDetailNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsSaasTaskListRequest : Tea.TeaModel {
    public var bizType: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var serviceType: String?

    public var status: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ServiceType"] as? String {
            self.serviceType = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class QuerySmsSaasTaskListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsSaasTaskListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsSaasTaskListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsSaasTaskListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsSaasTaskListNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var status: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class QuerySmsSaasTaskListNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class FcSaasTaskDTO : Tea.TeaModel {
            public class CommParams : Tea.TeaModel {
                public var aliyunUid: Int64?

                public var custId: Int64?

                public var cycleNum: Int32?

                public var partnerId: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.aliyunUid != nil {
                        map["AliyunUid"] = self.aliyunUid!
                    }
                    if self.custId != nil {
                        map["CustId"] = self.custId!
                    }
                    if self.cycleNum != nil {
                        map["CycleNum"] = self.cycleNum!
                    }
                    if self.partnerId != nil {
                        map["PartnerId"] = self.partnerId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AliyunUid"] as? Int64 {
                        self.aliyunUid = value
                    }
                    if let value = dict["CustId"] as? Int64 {
                        self.custId = value
                    }
                    if let value = dict["CycleNum"] as? Int32 {
                        self.cycleNum = value
                    }
                    if let value = dict["PartnerId"] as? Int64 {
                        self.partnerId = value
                    }
                }
            }
            public var bizType: String?

            public var commParams: QuerySmsSaasTaskListNewResponseBody.List.FcSaasTaskDTO.CommParams?

            public var detailDownloadUrl: String?

            public var detailDownloadUrlForSuccess: String?

            public var extParams: String?

            public var failCount: Int32?

            public var fireTime: String?

            public var gmtCreate: String?

            public var isDeleted: Bool?

            public var isPermitOrder: Bool?

            public var isPermitOrderForSuccess: Bool?

            public var ossFilePath: String?

            public var scheduleType: String?

            public var status: String?

            public var successCount: Int32?

            public var taskId: Int64?

            public var taskInstanceId: Int64?

            public var taskName: String?

            public var totalCount: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.commParams?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.commParams != nil {
                    map["CommParams"] = self.commParams?.toMap()
                }
                if self.detailDownloadUrl != nil {
                    map["DetailDownloadUrl"] = self.detailDownloadUrl!
                }
                if self.detailDownloadUrlForSuccess != nil {
                    map["DetailDownloadUrlForSuccess"] = self.detailDownloadUrlForSuccess!
                }
                if self.extParams != nil {
                    map["ExtParams"] = self.extParams!
                }
                if self.failCount != nil {
                    map["FailCount"] = self.failCount!
                }
                if self.fireTime != nil {
                    map["FireTime"] = self.fireTime!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.isDeleted != nil {
                    map["IsDeleted"] = self.isDeleted!
                }
                if self.isPermitOrder != nil {
                    map["IsPermitOrder"] = self.isPermitOrder!
                }
                if self.isPermitOrderForSuccess != nil {
                    map["IsPermitOrderForSuccess"] = self.isPermitOrderForSuccess!
                }
                if self.ossFilePath != nil {
                    map["OssFilePath"] = self.ossFilePath!
                }
                if self.scheduleType != nil {
                    map["ScheduleType"] = self.scheduleType!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.successCount != nil {
                    map["SuccessCount"] = self.successCount!
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.taskInstanceId != nil {
                    map["TaskInstanceId"] = self.taskInstanceId!
                }
                if self.taskName != nil {
                    map["TaskName"] = self.taskName!
                }
                if self.totalCount != nil {
                    map["TotalCount"] = self.totalCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["CommParams"] as? [String: Any?] {
                    var model = QuerySmsSaasTaskListNewResponseBody.List.FcSaasTaskDTO.CommParams()
                    model.fromMap(value)
                    self.commParams = model
                }
                if let value = dict["DetailDownloadUrl"] as? String {
                    self.detailDownloadUrl = value
                }
                if let value = dict["DetailDownloadUrlForSuccess"] as? String {
                    self.detailDownloadUrlForSuccess = value
                }
                if let value = dict["ExtParams"] as? String {
                    self.extParams = value
                }
                if let value = dict["FailCount"] as? Int32 {
                    self.failCount = value
                }
                if let value = dict["FireTime"] as? String {
                    self.fireTime = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["IsDeleted"] as? Bool {
                    self.isDeleted = value
                }
                if let value = dict["IsPermitOrder"] as? Bool {
                    self.isPermitOrder = value
                }
                if let value = dict["IsPermitOrderForSuccess"] as? Bool {
                    self.isPermitOrderForSuccess = value
                }
                if let value = dict["OssFilePath"] as? String {
                    self.ossFilePath = value
                }
                if let value = dict["ScheduleType"] as? String {
                    self.scheduleType = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["SuccessCount"] as? Int32 {
                    self.successCount = value
                }
                if let value = dict["TaskId"] as? Int64 {
                    self.taskId = value
                }
                if let value = dict["TaskInstanceId"] as? Int64 {
                    self.taskInstanceId = value
                }
                if let value = dict["TaskName"] as? String {
                    self.taskName = value
                }
                if let value = dict["TotalCount"] as? Int32 {
                    self.totalCount = value
                }
            }
        }
        public var fcSaasTaskDTO: [QuerySmsSaasTaskListNewResponseBody.List.FcSaasTaskDTO]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fcSaasTaskDTO != nil {
                var tmp : [Any] = []
                for k in self.fcSaasTaskDTO! {
                    tmp.append(k.toMap())
                }
                map["FcSaasTaskDTO"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FcSaasTaskDTO"] as? [Any?] {
                var tmp : [QuerySmsSaasTaskListNewResponseBody.List.FcSaasTaskDTO] = []
                for v in value {
                    if v != nil {
                        var model = QuerySmsSaasTaskListNewResponseBody.List.FcSaasTaskDTO()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.fcSaasTaskDTO = tmp
            }
        }
    }
    public var list: QuerySmsSaasTaskListNewResponseBody.List?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QuerySmsSaasTaskListNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QuerySmsSaasTaskListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsSaasTaskListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsSaasTaskListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsSendFailDetailsUrlRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sendDate: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sendDate != nil {
            map["SendDate"] = self.sendDate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SendDate"] as? String {
            self.sendDate = value
        }
    }
}

public class QuerySmsSendFailDetailsUrlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsSendFailDetailsUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsSendFailDetailsUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsSendFailDetailsUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsSendFailDetailsUrlNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sendDate: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sendDate != nil {
            map["SendDate"] = self.sendDate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SendDate"] as? String {
            self.sendDate = value
        }
    }
}

public class QuerySmsSendFailDetailsUrlNewResponseBody : Tea.TeaModel {
    public var downloadUrl: String?

    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.downloadUrl != nil {
            map["DownloadUrl"] = self.downloadUrl!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DownloadUrl"] as? String {
            self.downloadUrl = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class QuerySmsSendFailDetailsUrlNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsSendFailDetailsUrlNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsSendFailDetailsUrlNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsSignDetailBySignIdNewRequest : Tea.TeaModel {
    public var id: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var signGray: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.signGray != nil {
            map["SignGray"] = self.signGray!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SignGray"] as? Bool {
            self.signGray = value
        }
    }
}

public class QuerySmsSignDetailBySignIdNewResponseBody : Tea.TeaModel {
    public class ApplicationScene : Tea.TeaModel {
        public var content: String?

        public var id: Int64?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public class List : Tea.TeaModel {
        public var auditState: String?

        public var sceneType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.auditState != nil {
                map["AuditState"] = self.auditState!
            }
            if self.sceneType != nil {
                map["SceneType"] = self.sceneType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuditState"] as? String {
                self.auditState = value
            }
            if let value = dict["SceneType"] as? Int32 {
                self.sceneType = value
            }
        }
    }
    public var accessToken: String?

    public var applicationScene: QuerySmsSignDetailBySignIdNewResponseBody.ApplicationScene?

    public var auditInfo: String?

    public var auditRemarkInfo: String?

    public var auditState: String?

    public var authorization: String?

    public var authorizationEffTime: String?

    public var authorizationLetter: String?

    public var authorizationLetterAuditPass: Bool?

    public var authorizationLetterId: String?

    public var authorizationLetterName: String?

    public var authorizationLetterState: String?

    public var authorizationLetterStatus: String?

    public var authorizationSignScope: String?

    public var effectSceneType: Int32?

    public var enableAuthorizationLetter: Bool?

    public var extendMessage: String?

    public var fileIds: [Int64]?

    public var fileUrlList: [String]?

    public var from: String?

    public var gmtCreateStr: String?

    public var id: String?

    public var isAuthorizationLetterOCRComplete: Bool?

    public var isAuthorizationLetterOCRDiff: Bool?

    public var isSignScopeOCRDiff: Bool?

    public var list: [QuerySmsSignDetailBySignIdNewResponseBody.List]?

    public var needAuthorized: Bool?

    public var openTag: Bool?

    public var orderId: String?

    public var organizationCode: String?

    public var ossKeys: [String]?

    public var proxyAuthorization: String?

    public var remark: String?

    public var requestId: String?

    public var sceneType: Int32?

    public var serviceType: Int32?

    public var signCode: String?

    public var signName: String?

    public var signScopeOCR: String?

    public var signUpgrade: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.applicationScene?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessToken != nil {
            map["AccessToken"] = self.accessToken!
        }
        if self.applicationScene != nil {
            map["ApplicationScene"] = self.applicationScene?.toMap()
        }
        if self.auditInfo != nil {
            map["AuditInfo"] = self.auditInfo!
        }
        if self.auditRemarkInfo != nil {
            map["AuditRemarkInfo"] = self.auditRemarkInfo!
        }
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.authorization != nil {
            map["Authorization"] = self.authorization!
        }
        if self.authorizationEffTime != nil {
            map["AuthorizationEffTime"] = self.authorizationEffTime!
        }
        if self.authorizationLetter != nil {
            map["AuthorizationLetter"] = self.authorizationLetter!
        }
        if self.authorizationLetterAuditPass != nil {
            map["AuthorizationLetterAuditPass"] = self.authorizationLetterAuditPass!
        }
        if self.authorizationLetterId != nil {
            map["AuthorizationLetterId"] = self.authorizationLetterId!
        }
        if self.authorizationLetterName != nil {
            map["AuthorizationLetterName"] = self.authorizationLetterName!
        }
        if self.authorizationLetterState != nil {
            map["AuthorizationLetterState"] = self.authorizationLetterState!
        }
        if self.authorizationLetterStatus != nil {
            map["AuthorizationLetterStatus"] = self.authorizationLetterStatus!
        }
        if self.authorizationSignScope != nil {
            map["AuthorizationSignScope"] = self.authorizationSignScope!
        }
        if self.effectSceneType != nil {
            map["EffectSceneType"] = self.effectSceneType!
        }
        if self.enableAuthorizationLetter != nil {
            map["EnableAuthorizationLetter"] = self.enableAuthorizationLetter!
        }
        if self.extendMessage != nil {
            map["ExtendMessage"] = self.extendMessage!
        }
        if self.fileIds != nil {
            map["FileIds"] = self.fileIds!
        }
        if self.fileUrlList != nil {
            map["FileUrlList"] = self.fileUrlList!
        }
        if self.from != nil {
            map["From"] = self.from!
        }
        if self.gmtCreateStr != nil {
            map["GmtCreateStr"] = self.gmtCreateStr!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.isAuthorizationLetterOCRComplete != nil {
            map["IsAuthorizationLetterOCRComplete"] = self.isAuthorizationLetterOCRComplete!
        }
        if self.isAuthorizationLetterOCRDiff != nil {
            map["IsAuthorizationLetterOCRDiff"] = self.isAuthorizationLetterOCRDiff!
        }
        if self.isSignScopeOCRDiff != nil {
            map["IsSignScopeOCRDiff"] = self.isSignScopeOCRDiff!
        }
        if self.list != nil {
            var tmp : [Any] = []
            for k in self.list! {
                tmp.append(k.toMap())
            }
            map["List"] = tmp
        }
        if self.needAuthorized != nil {
            map["NeedAuthorized"] = self.needAuthorized!
        }
        if self.openTag != nil {
            map["OpenTag"] = self.openTag!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.organizationCode != nil {
            map["OrganizationCode"] = self.organizationCode!
        }
        if self.ossKeys != nil {
            map["OssKeys"] = self.ossKeys!
        }
        if self.proxyAuthorization != nil {
            map["ProxyAuthorization"] = self.proxyAuthorization!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sceneType != nil {
            map["SceneType"] = self.sceneType!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        if self.signCode != nil {
            map["SignCode"] = self.signCode!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.signScopeOCR != nil {
            map["SignScopeOCR"] = self.signScopeOCR!
        }
        if self.signUpgrade != nil {
            map["SignUpgrade"] = self.signUpgrade!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessToken"] as? String {
            self.accessToken = value
        }
        if let value = dict["ApplicationScene"] as? [String: Any?] {
            var model = QuerySmsSignDetailBySignIdNewResponseBody.ApplicationScene()
            model.fromMap(value)
            self.applicationScene = model
        }
        if let value = dict["AuditInfo"] as? String {
            self.auditInfo = value
        }
        if let value = dict["AuditRemarkInfo"] as? String {
            self.auditRemarkInfo = value
        }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["Authorization"] as? String {
            self.authorization = value
        }
        if let value = dict["AuthorizationEffTime"] as? String {
            self.authorizationEffTime = value
        }
        if let value = dict["AuthorizationLetter"] as? String {
            self.authorizationLetter = value
        }
        if let value = dict["AuthorizationLetterAuditPass"] as? Bool {
            self.authorizationLetterAuditPass = value
        }
        if let value = dict["AuthorizationLetterId"] as? String {
            self.authorizationLetterId = value
        }
        if let value = dict["AuthorizationLetterName"] as? String {
            self.authorizationLetterName = value
        }
        if let value = dict["AuthorizationLetterState"] as? String {
            self.authorizationLetterState = value
        }
        if let value = dict["AuthorizationLetterStatus"] as? String {
            self.authorizationLetterStatus = value
        }
        if let value = dict["AuthorizationSignScope"] as? String {
            self.authorizationSignScope = value
        }
        if let value = dict["EffectSceneType"] as? Int32 {
            self.effectSceneType = value
        }
        if let value = dict["EnableAuthorizationLetter"] as? Bool {
            self.enableAuthorizationLetter = value
        }
        if let value = dict["ExtendMessage"] as? String {
            self.extendMessage = value
        }
        if let value = dict["FileIds"] as? [Int64] {
            self.fileIds = value
        }
        if let value = dict["FileUrlList"] as? [String] {
            self.fileUrlList = value
        }
        if let value = dict["From"] as? String {
            self.from = value
        }
        if let value = dict["GmtCreateStr"] as? String {
            self.gmtCreateStr = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["IsAuthorizationLetterOCRComplete"] as? Bool {
            self.isAuthorizationLetterOCRComplete = value
        }
        if let value = dict["IsAuthorizationLetterOCRDiff"] as? Bool {
            self.isAuthorizationLetterOCRDiff = value
        }
        if let value = dict["IsSignScopeOCRDiff"] as? Bool {
            self.isSignScopeOCRDiff = value
        }
        if let value = dict["List"] as? [Any?] {
            var tmp : [QuerySmsSignDetailBySignIdNewResponseBody.List] = []
            for v in value {
                if v != nil {
                    var model = QuerySmsSignDetailBySignIdNewResponseBody.List()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.list = tmp
        }
        if let value = dict["NeedAuthorized"] as? Bool {
            self.needAuthorized = value
        }
        if let value = dict["OpenTag"] as? Bool {
            self.openTag = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["OrganizationCode"] as? String {
            self.organizationCode = value
        }
        if let value = dict["OssKeys"] as? [String] {
            self.ossKeys = value
        }
        if let value = dict["ProxyAuthorization"] as? String {
            self.proxyAuthorization = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SceneType"] as? Int32 {
            self.sceneType = value
        }
        if let value = dict["ServiceType"] as? Int32 {
            self.serviceType = value
        }
        if let value = dict["SignCode"] as? String {
            self.signCode = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["SignScopeOCR"] as? String {
            self.signScopeOCR = value
        }
        if let value = dict["SignUpgrade"] as? String {
            self.signUpgrade = value
        }
    }
}

public class QuerySmsSignDetailBySignIdNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsSignDetailBySignIdNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsSignDetailBySignIdNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsSignLastRangeRequest : Tea.TeaModel {
    public var auditState: String?

    public var bizType: String?

    public var isGlobeSign: Int32?

    public var limit: Int32?

    public var needDefaultSign: Bool?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var signName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.isGlobeSign != nil {
            map["IsGlobeSign"] = self.isGlobeSign!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.needDefaultSign != nil {
            map["NeedDefaultSign"] = self.needDefaultSign!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["IsGlobeSign"] as? Int32 {
            self.isGlobeSign = value
        }
        if let value = dict["Limit"] as? Int32 {
            self.limit = value
        }
        if let value = dict["NeedDefaultSign"] as? Bool {
            self.needDefaultSign = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
    }
}

public class QuerySmsSignLastRangeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsSignLastRangeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsSignLastRangeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsSignLastRangeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsSignLastRangeNewRequest : Tea.TeaModel {
    public var auditState: String?

    public var isGlobeSign: Int32?

    public var limit: Int32?

    public var needDefaultSign: Bool?

    public var ownerId: Int64?

    public var pageIndex: Int32?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sceneType: Int32?

    public var signName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.isGlobeSign != nil {
            map["IsGlobeSign"] = self.isGlobeSign!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.needDefaultSign != nil {
            map["NeedDefaultSign"] = self.needDefaultSign!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageIndex != nil {
            map["PageIndex"] = self.pageIndex!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sceneType != nil {
            map["SceneType"] = self.sceneType!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["IsGlobeSign"] as? Int32 {
            self.isGlobeSign = value
        }
        if let value = dict["Limit"] as? Int32 {
            self.limit = value
        }
        if let value = dict["NeedDefaultSign"] as? Bool {
            self.needDefaultSign = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageIndex"] as? Int32 {
            self.pageIndex = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SceneType"] as? Int32 {
            self.sceneType = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
    }
}

public class QuerySmsSignLastRangeNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class SmsSign : Tea.TeaModel {
            public class FileIds : Tea.TeaModel {
                public var fileId: [Int64]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.fileId != nil {
                        map["FileId"] = self.fileId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["FileId"] as? [Int64] {
                        self.fileId = value
                    }
                }
            }
            public class FileUrlList : Tea.TeaModel {
                public var fileUrl: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.fileUrl != nil {
                        map["FileUrl"] = self.fileUrl!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["FileUrl"] as? [String] {
                        self.fileUrl = value
                    }
                }
            }
            public class SignSceneDetailList : Tea.TeaModel {
                public class SignSceneDetail : Tea.TeaModel {
                    public var auditState: String?

                    public var sceneType: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.auditState != nil {
                            map["AuditState"] = self.auditState!
                        }
                        if self.sceneType != nil {
                            map["SceneType"] = self.sceneType!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AuditState"] as? String {
                            self.auditState = value
                        }
                        if let value = dict["SceneType"] as? Int32 {
                            self.sceneType = value
                        }
                    }
                }
                public var signSceneDetail: [QuerySmsSignLastRangeNewResponseBody.List.SmsSign.SignSceneDetailList.SignSceneDetail]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.signSceneDetail != nil {
                        var tmp : [Any] = []
                        for k in self.signSceneDetail! {
                            tmp.append(k.toMap())
                        }
                        map["SignSceneDetail"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SignSceneDetail"] as? [Any?] {
                        var tmp : [QuerySmsSignLastRangeNewResponseBody.List.SmsSign.SignSceneDetailList.SignSceneDetail] = []
                        for v in value {
                            if v != nil {
                                var model = QuerySmsSignLastRangeNewResponseBody.List.SmsSign.SignSceneDetailList.SignSceneDetail()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.signSceneDetail = tmp
                    }
                }
            }
            public var auditInfo: String?

            public var auditRemarkInfo: String?

            public var auditState: String?

            public var extendMessage: String?

            public var fileIds: QuerySmsSignLastRangeNewResponseBody.List.SmsSign.FileIds?

            public var fileUrlList: QuerySmsSignLastRangeNewResponseBody.List.SmsSign.FileUrlList?

            public var gmtCreateStr: String?

            public var id: String?

            public var isDefaultSign: Bool?

            public var operateDateStr: String?

            public var orderId: String?

            public var remark: String?

            public var sceneType: Int32?

            public var serviceType: Int32?

            public var signName: String?

            public var signSceneDetailList: QuerySmsSignLastRangeNewResponseBody.List.SmsSign.SignSceneDetailList?

            public var signType: Int32?

            public var signUsageName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.fileIds?.validate()
                try self.fileUrlList?.validate()
                try self.signSceneDetailList?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.auditInfo != nil {
                    map["AuditInfo"] = self.auditInfo!
                }
                if self.auditRemarkInfo != nil {
                    map["AuditRemarkInfo"] = self.auditRemarkInfo!
                }
                if self.auditState != nil {
                    map["AuditState"] = self.auditState!
                }
                if self.extendMessage != nil {
                    map["ExtendMessage"] = self.extendMessage!
                }
                if self.fileIds != nil {
                    map["FileIds"] = self.fileIds?.toMap()
                }
                if self.fileUrlList != nil {
                    map["FileUrlList"] = self.fileUrlList?.toMap()
                }
                if self.gmtCreateStr != nil {
                    map["GmtCreateStr"] = self.gmtCreateStr!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.isDefaultSign != nil {
                    map["IsDefaultSign"] = self.isDefaultSign!
                }
                if self.operateDateStr != nil {
                    map["OperateDateStr"] = self.operateDateStr!
                }
                if self.orderId != nil {
                    map["OrderId"] = self.orderId!
                }
                if self.remark != nil {
                    map["Remark"] = self.remark!
                }
                if self.sceneType != nil {
                    map["SceneType"] = self.sceneType!
                }
                if self.serviceType != nil {
                    map["ServiceType"] = self.serviceType!
                }
                if self.signName != nil {
                    map["SignName"] = self.signName!
                }
                if self.signSceneDetailList != nil {
                    map["SignSceneDetailList"] = self.signSceneDetailList?.toMap()
                }
                if self.signType != nil {
                    map["SignType"] = self.signType!
                }
                if self.signUsageName != nil {
                    map["SignUsageName"] = self.signUsageName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuditInfo"] as? String {
                    self.auditInfo = value
                }
                if let value = dict["AuditRemarkInfo"] as? String {
                    self.auditRemarkInfo = value
                }
                if let value = dict["AuditState"] as? String {
                    self.auditState = value
                }
                if let value = dict["ExtendMessage"] as? String {
                    self.extendMessage = value
                }
                if let value = dict["FileIds"] as? [String: Any?] {
                    var model = QuerySmsSignLastRangeNewResponseBody.List.SmsSign.FileIds()
                    model.fromMap(value)
                    self.fileIds = model
                }
                if let value = dict["FileUrlList"] as? [String: Any?] {
                    var model = QuerySmsSignLastRangeNewResponseBody.List.SmsSign.FileUrlList()
                    model.fromMap(value)
                    self.fileUrlList = model
                }
                if let value = dict["GmtCreateStr"] as? String {
                    self.gmtCreateStr = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["IsDefaultSign"] as? Bool {
                    self.isDefaultSign = value
                }
                if let value = dict["OperateDateStr"] as? String {
                    self.operateDateStr = value
                }
                if let value = dict["OrderId"] as? String {
                    self.orderId = value
                }
                if let value = dict["Remark"] as? String {
                    self.remark = value
                }
                if let value = dict["SceneType"] as? Int32 {
                    self.sceneType = value
                }
                if let value = dict["ServiceType"] as? Int32 {
                    self.serviceType = value
                }
                if let value = dict["SignName"] as? String {
                    self.signName = value
                }
                if let value = dict["SignSceneDetailList"] as? [String: Any?] {
                    var model = QuerySmsSignLastRangeNewResponseBody.List.SmsSign.SignSceneDetailList()
                    model.fromMap(value)
                    self.signSceneDetailList = model
                }
                if let value = dict["SignType"] as? Int32 {
                    self.signType = value
                }
                if let value = dict["SignUsageName"] as? String {
                    self.signUsageName = value
                }
            }
        }
        public var smsSign: [QuerySmsSignLastRangeNewResponseBody.List.SmsSign]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.smsSign != nil {
                var tmp : [Any] = []
                for k in self.smsSign! {
                    tmp.append(k.toMap())
                }
                map["SmsSign"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SmsSign"] as? [Any?] {
                var tmp : [QuerySmsSignLastRangeNewResponseBody.List.SmsSign] = []
                for v in value {
                    if v != nil {
                        var model = QuerySmsSignLastRangeNewResponseBody.List.SmsSign()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.smsSign = tmp
            }
        }
    }
    public var list: QuerySmsSignLastRangeNewResponseBody.List?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QuerySmsSignLastRangeNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QuerySmsSignLastRangeNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsSignLastRangeNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsSignLastRangeNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsSignListRequest : Tea.TeaModel {
    public var auditState: String?

    public var bizType: String?

    public var isGlobeSign: Int32?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var serviceType: String?

    public var signName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.isGlobeSign != nil {
            map["IsGlobeSign"] = self.isGlobeSign!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["IsGlobeSign"] as? Int32 {
            self.isGlobeSign = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ServiceType"] as? String {
            self.serviceType = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
    }
}

public class QuerySmsSignListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsSignListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsSignListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsSignListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsSignListNewRequest : Tea.TeaModel {
    public var aggregatedRegisterStatus: Int32?

    public var auditState: String?

    public var bizType: String?

    public var isGlobeSign: Int32?

    public var operatorCodes: [String]?

    public var operatorRegisterStatus: Int32?

    public var ownerId: Int64?

    public var pageNo: Int64?

    public var pageSize: Int64?

    public var prodCode: String?

    public var qualificationName: String?

    public var registerResult: Int32?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var serviceType: String?

    public var signName: String?

    public var signSource: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aggregatedRegisterStatus != nil {
            map["AggregatedRegisterStatus"] = self.aggregatedRegisterStatus!
        }
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.isGlobeSign != nil {
            map["IsGlobeSign"] = self.isGlobeSign!
        }
        if self.operatorCodes != nil {
            map["OperatorCodes"] = self.operatorCodes!
        }
        if self.operatorRegisterStatus != nil {
            map["OperatorRegisterStatus"] = self.operatorRegisterStatus!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.qualificationName != nil {
            map["QualificationName"] = self.qualificationName!
        }
        if self.registerResult != nil {
            map["RegisterResult"] = self.registerResult!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.signSource != nil {
            map["SignSource"] = self.signSource!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AggregatedRegisterStatus"] as? Int32 {
            self.aggregatedRegisterStatus = value
        }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["IsGlobeSign"] as? Int32 {
            self.isGlobeSign = value
        }
        if let value = dict["OperatorCodes"] as? [String] {
            self.operatorCodes = value
        }
        if let value = dict["OperatorRegisterStatus"] as? Int32 {
            self.operatorRegisterStatus = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["QualificationName"] as? String {
            self.qualificationName = value
        }
        if let value = dict["RegisterResult"] as? Int32 {
            self.registerResult = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ServiceType"] as? String {
            self.serviceType = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["SignSource"] as? String {
            self.signSource = value
        }
    }
}

public class QuerySmsSignListNewShrinkRequest : Tea.TeaModel {
    public var aggregatedRegisterStatus: Int32?

    public var auditState: String?

    public var bizType: String?

    public var isGlobeSign: Int32?

    public var operatorCodesShrink: String?

    public var operatorRegisterStatus: Int32?

    public var ownerId: Int64?

    public var pageNo: Int64?

    public var pageSize: Int64?

    public var prodCode: String?

    public var qualificationName: String?

    public var registerResult: Int32?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var serviceType: String?

    public var signName: String?

    public var signSource: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aggregatedRegisterStatus != nil {
            map["AggregatedRegisterStatus"] = self.aggregatedRegisterStatus!
        }
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.isGlobeSign != nil {
            map["IsGlobeSign"] = self.isGlobeSign!
        }
        if self.operatorCodesShrink != nil {
            map["OperatorCodes"] = self.operatorCodesShrink!
        }
        if self.operatorRegisterStatus != nil {
            map["OperatorRegisterStatus"] = self.operatorRegisterStatus!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.qualificationName != nil {
            map["QualificationName"] = self.qualificationName!
        }
        if self.registerResult != nil {
            map["RegisterResult"] = self.registerResult!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.signSource != nil {
            map["SignSource"] = self.signSource!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AggregatedRegisterStatus"] as? Int32 {
            self.aggregatedRegisterStatus = value
        }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["IsGlobeSign"] as? Int32 {
            self.isGlobeSign = value
        }
        if let value = dict["OperatorCodes"] as? String {
            self.operatorCodesShrink = value
        }
        if let value = dict["OperatorRegisterStatus"] as? Int32 {
            self.operatorRegisterStatus = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["QualificationName"] as? String {
            self.qualificationName = value
        }
        if let value = dict["RegisterResult"] as? Int32 {
            self.registerResult = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ServiceType"] as? String {
            self.serviceType = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["SignSource"] as? String {
            self.signSource = value
        }
    }
}

public class QuerySmsSignListNewResponseBody : Tea.TeaModel {
    public class SmsSign : Tea.TeaModel {
        public class SmsSign : Tea.TeaModel {
            public class FileIds : Tea.TeaModel {
                public var fileId: [Int64]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.fileId != nil {
                        map["FileId"] = self.fileId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["FileId"] as? [Int64] {
                        self.fileId = value
                    }
                }
            }
            public class FileUrlList : Tea.TeaModel {
                public var fileUrl: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.fileUrl != nil {
                        map["FileUrl"] = self.fileUrl!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["FileUrl"] as? [String] {
                        self.fileUrl = value
                    }
                }
            }
            public class SignSceneDetailList : Tea.TeaModel {
                public class SignSceneDetail : Tea.TeaModel {
                    public var auditState: String?

                    public var sceneType: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.auditState != nil {
                            map["AuditState"] = self.auditState!
                        }
                        if self.sceneType != nil {
                            map["SceneType"] = self.sceneType!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AuditState"] as? String {
                            self.auditState = value
                        }
                        if let value = dict["SceneType"] as? Int32 {
                            self.sceneType = value
                        }
                    }
                }
                public var signSceneDetail: [QuerySmsSignListNewResponseBody.SmsSign.SmsSign.SignSceneDetailList.SignSceneDetail]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.signSceneDetail != nil {
                        var tmp : [Any] = []
                        for k in self.signSceneDetail! {
                            tmp.append(k.toMap())
                        }
                        map["SignSceneDetail"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SignSceneDetail"] as? [Any?] {
                        var tmp : [QuerySmsSignListNewResponseBody.SmsSign.SmsSign.SignSceneDetailList.SignSceneDetail] = []
                        for v in value {
                            if v != nil {
                                var model = QuerySmsSignListNewResponseBody.SmsSign.SmsSign.SignSceneDetailList.SignSceneDetail()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.signSceneDetail = tmp
                    }
                }
            }
            public var aggregatedRegisterStatus: Int32?

            public var applySource: String?

            public var auditInfo: String?

            public var auditRemarkInfo: String?

            public var auditState: String?

            public var authorization: String?

            public var authorizationEffTime: String?

            public var authorizationLetter: String?

            public var authorizationLetterAuditPass: Bool?

            public var authorizationLetterId: Int64?

            public var authorizationLetterName: String?

            public var authorizationLetterStatus: String?

            public var authorizationSignScope: String?

            public var canRegister: Bool?

            public var enableAuthorizationLetter: Bool?

            public var extendMessage: String?

            public var fileIds: QuerySmsSignListNewResponseBody.SmsSign.SmsSign.FileIds?

            public var fileUrlList: QuerySmsSignListNewResponseBody.SmsSign.SmsSign.FileUrlList?

            public var gmtCreateStr: String?

            public var id: String?

            public var isAuthorizationLetterOCRComplete: Bool?

            public var isAuthorizationLetterOCRDiff: Bool?

            public var isDefaultSign: Bool?

            public var isSignScopeOCRDiff: Bool?

            public var mobileRegisterStatus: Int32?

            public var operateDateStr: String?

            public var orderCount: Int64?

            public var orderId: String?

            public var organizationCode: String?

            public var proxyAuthorization: String?

            public var qualificationId: Int64?

            public var qualificationName: String?

            public var qualificationState: String?

            public var qualificationVersion: Int64?

            public var qualificationWorkOrderId: Int64?

            public var registerResult: Int32?

            public var registerTime: Int64?

            public var remark: String?

            public var resultReason: String?

            public var sceneType: Int32?

            public var serviceType: Int32?

            public var signCode: String?

            public var signName: String?

            public var signSceneDetailList: QuerySmsSignListNewResponseBody.SmsSign.SmsSign.SignSceneDetailList?

            public var signScopeOCR: String?

            public var signSource: String?

            public var signType: Int32?

            public var telecomRegisterStatus: Int32?

            public var unicomRegisterStatus: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.fileIds?.validate()
                try self.fileUrlList?.validate()
                try self.signSceneDetailList?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.aggregatedRegisterStatus != nil {
                    map["AggregatedRegisterStatus"] = self.aggregatedRegisterStatus!
                }
                if self.applySource != nil {
                    map["ApplySource"] = self.applySource!
                }
                if self.auditInfo != nil {
                    map["AuditInfo"] = self.auditInfo!
                }
                if self.auditRemarkInfo != nil {
                    map["AuditRemarkInfo"] = self.auditRemarkInfo!
                }
                if self.auditState != nil {
                    map["AuditState"] = self.auditState!
                }
                if self.authorization != nil {
                    map["Authorization"] = self.authorization!
                }
                if self.authorizationEffTime != nil {
                    map["AuthorizationEffTime"] = self.authorizationEffTime!
                }
                if self.authorizationLetter != nil {
                    map["AuthorizationLetter"] = self.authorizationLetter!
                }
                if self.authorizationLetterAuditPass != nil {
                    map["AuthorizationLetterAuditPass"] = self.authorizationLetterAuditPass!
                }
                if self.authorizationLetterId != nil {
                    map["AuthorizationLetterId"] = self.authorizationLetterId!
                }
                if self.authorizationLetterName != nil {
                    map["AuthorizationLetterName"] = self.authorizationLetterName!
                }
                if self.authorizationLetterStatus != nil {
                    map["AuthorizationLetterStatus"] = self.authorizationLetterStatus!
                }
                if self.authorizationSignScope != nil {
                    map["AuthorizationSignScope"] = self.authorizationSignScope!
                }
                if self.canRegister != nil {
                    map["CanRegister"] = self.canRegister!
                }
                if self.enableAuthorizationLetter != nil {
                    map["EnableAuthorizationLetter"] = self.enableAuthorizationLetter!
                }
                if self.extendMessage != nil {
                    map["ExtendMessage"] = self.extendMessage!
                }
                if self.fileIds != nil {
                    map["FileIds"] = self.fileIds?.toMap()
                }
                if self.fileUrlList != nil {
                    map["FileUrlList"] = self.fileUrlList?.toMap()
                }
                if self.gmtCreateStr != nil {
                    map["GmtCreateStr"] = self.gmtCreateStr!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.isAuthorizationLetterOCRComplete != nil {
                    map["IsAuthorizationLetterOCRComplete"] = self.isAuthorizationLetterOCRComplete!
                }
                if self.isAuthorizationLetterOCRDiff != nil {
                    map["IsAuthorizationLetterOCRDiff"] = self.isAuthorizationLetterOCRDiff!
                }
                if self.isDefaultSign != nil {
                    map["IsDefaultSign"] = self.isDefaultSign!
                }
                if self.isSignScopeOCRDiff != nil {
                    map["IsSignScopeOCRDiff"] = self.isSignScopeOCRDiff!
                }
                if self.mobileRegisterStatus != nil {
                    map["MobileRegisterStatus"] = self.mobileRegisterStatus!
                }
                if self.operateDateStr != nil {
                    map["OperateDateStr"] = self.operateDateStr!
                }
                if self.orderCount != nil {
                    map["OrderCount"] = self.orderCount!
                }
                if self.orderId != nil {
                    map["OrderId"] = self.orderId!
                }
                if self.organizationCode != nil {
                    map["OrganizationCode"] = self.organizationCode!
                }
                if self.proxyAuthorization != nil {
                    map["ProxyAuthorization"] = self.proxyAuthorization!
                }
                if self.qualificationId != nil {
                    map["QualificationId"] = self.qualificationId!
                }
                if self.qualificationName != nil {
                    map["QualificationName"] = self.qualificationName!
                }
                if self.qualificationState != nil {
                    map["QualificationState"] = self.qualificationState!
                }
                if self.qualificationVersion != nil {
                    map["QualificationVersion"] = self.qualificationVersion!
                }
                if self.qualificationWorkOrderId != nil {
                    map["QualificationWorkOrderId"] = self.qualificationWorkOrderId!
                }
                if self.registerResult != nil {
                    map["RegisterResult"] = self.registerResult!
                }
                if self.registerTime != nil {
                    map["RegisterTime"] = self.registerTime!
                }
                if self.remark != nil {
                    map["Remark"] = self.remark!
                }
                if self.resultReason != nil {
                    map["ResultReason"] = self.resultReason!
                }
                if self.sceneType != nil {
                    map["SceneType"] = self.sceneType!
                }
                if self.serviceType != nil {
                    map["ServiceType"] = self.serviceType!
                }
                if self.signCode != nil {
                    map["SignCode"] = self.signCode!
                }
                if self.signName != nil {
                    map["SignName"] = self.signName!
                }
                if self.signSceneDetailList != nil {
                    map["SignSceneDetailList"] = self.signSceneDetailList?.toMap()
                }
                if self.signScopeOCR != nil {
                    map["SignScopeOCR"] = self.signScopeOCR!
                }
                if self.signSource != nil {
                    map["SignSource"] = self.signSource!
                }
                if self.signType != nil {
                    map["SignType"] = self.signType!
                }
                if self.telecomRegisterStatus != nil {
                    map["TelecomRegisterStatus"] = self.telecomRegisterStatus!
                }
                if self.unicomRegisterStatus != nil {
                    map["UnicomRegisterStatus"] = self.unicomRegisterStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AggregatedRegisterStatus"] as? Int32 {
                    self.aggregatedRegisterStatus = value
                }
                if let value = dict["ApplySource"] as? String {
                    self.applySource = value
                }
                if let value = dict["AuditInfo"] as? String {
                    self.auditInfo = value
                }
                if let value = dict["AuditRemarkInfo"] as? String {
                    self.auditRemarkInfo = value
                }
                if let value = dict["AuditState"] as? String {
                    self.auditState = value
                }
                if let value = dict["Authorization"] as? String {
                    self.authorization = value
                }
                if let value = dict["AuthorizationEffTime"] as? String {
                    self.authorizationEffTime = value
                }
                if let value = dict["AuthorizationLetter"] as? String {
                    self.authorizationLetter = value
                }
                if let value = dict["AuthorizationLetterAuditPass"] as? Bool {
                    self.authorizationLetterAuditPass = value
                }
                if let value = dict["AuthorizationLetterId"] as? Int64 {
                    self.authorizationLetterId = value
                }
                if let value = dict["AuthorizationLetterName"] as? String {
                    self.authorizationLetterName = value
                }
                if let value = dict["AuthorizationLetterStatus"] as? String {
                    self.authorizationLetterStatus = value
                }
                if let value = dict["AuthorizationSignScope"] as? String {
                    self.authorizationSignScope = value
                }
                if let value = dict["CanRegister"] as? Bool {
                    self.canRegister = value
                }
                if let value = dict["EnableAuthorizationLetter"] as? Bool {
                    self.enableAuthorizationLetter = value
                }
                if let value = dict["ExtendMessage"] as? String {
                    self.extendMessage = value
                }
                if let value = dict["FileIds"] as? [String: Any?] {
                    var model = QuerySmsSignListNewResponseBody.SmsSign.SmsSign.FileIds()
                    model.fromMap(value)
                    self.fileIds = model
                }
                if let value = dict["FileUrlList"] as? [String: Any?] {
                    var model = QuerySmsSignListNewResponseBody.SmsSign.SmsSign.FileUrlList()
                    model.fromMap(value)
                    self.fileUrlList = model
                }
                if let value = dict["GmtCreateStr"] as? String {
                    self.gmtCreateStr = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["IsAuthorizationLetterOCRComplete"] as? Bool {
                    self.isAuthorizationLetterOCRComplete = value
                }
                if let value = dict["IsAuthorizationLetterOCRDiff"] as? Bool {
                    self.isAuthorizationLetterOCRDiff = value
                }
                if let value = dict["IsDefaultSign"] as? Bool {
                    self.isDefaultSign = value
                }
                if let value = dict["IsSignScopeOCRDiff"] as? Bool {
                    self.isSignScopeOCRDiff = value
                }
                if let value = dict["MobileRegisterStatus"] as? Int32 {
                    self.mobileRegisterStatus = value
                }
                if let value = dict["OperateDateStr"] as? String {
                    self.operateDateStr = value
                }
                if let value = dict["OrderCount"] as? Int64 {
                    self.orderCount = value
                }
                if let value = dict["OrderId"] as? String {
                    self.orderId = value
                }
                if let value = dict["OrganizationCode"] as? String {
                    self.organizationCode = value
                }
                if let value = dict["ProxyAuthorization"] as? String {
                    self.proxyAuthorization = value
                }
                if let value = dict["QualificationId"] as? Int64 {
                    self.qualificationId = value
                }
                if let value = dict["QualificationName"] as? String {
                    self.qualificationName = value
                }
                if let value = dict["QualificationState"] as? String {
                    self.qualificationState = value
                }
                if let value = dict["QualificationVersion"] as? Int64 {
                    self.qualificationVersion = value
                }
                if let value = dict["QualificationWorkOrderId"] as? Int64 {
                    self.qualificationWorkOrderId = value
                }
                if let value = dict["RegisterResult"] as? Int32 {
                    self.registerResult = value
                }
                if let value = dict["RegisterTime"] as? Int64 {
                    self.registerTime = value
                }
                if let value = dict["Remark"] as? String {
                    self.remark = value
                }
                if let value = dict["ResultReason"] as? String {
                    self.resultReason = value
                }
                if let value = dict["SceneType"] as? Int32 {
                    self.sceneType = value
                }
                if let value = dict["ServiceType"] as? Int32 {
                    self.serviceType = value
                }
                if let value = dict["SignCode"] as? String {
                    self.signCode = value
                }
                if let value = dict["SignName"] as? String {
                    self.signName = value
                }
                if let value = dict["SignSceneDetailList"] as? [String: Any?] {
                    var model = QuerySmsSignListNewResponseBody.SmsSign.SmsSign.SignSceneDetailList()
                    model.fromMap(value)
                    self.signSceneDetailList = model
                }
                if let value = dict["SignScopeOCR"] as? String {
                    self.signScopeOCR = value
                }
                if let value = dict["SignSource"] as? String {
                    self.signSource = value
                }
                if let value = dict["SignType"] as? Int32 {
                    self.signType = value
                }
                if let value = dict["TelecomRegisterStatus"] as? Int32 {
                    self.telecomRegisterStatus = value
                }
                if let value = dict["UnicomRegisterStatus"] as? Int32 {
                    self.unicomRegisterStatus = value
                }
            }
        }
        public var smsSign: [QuerySmsSignListNewResponseBody.SmsSign.SmsSign]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.smsSign != nil {
                var tmp : [Any] = []
                for k in self.smsSign! {
                    tmp.append(k.toMap())
                }
                map["SmsSign"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SmsSign"] as? [Any?] {
                var tmp : [QuerySmsSignListNewResponseBody.SmsSign.SmsSign] = []
                for v in value {
                    if v != nil {
                        var model = QuerySmsSignListNewResponseBody.SmsSign.SmsSign()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.smsSign = tmp
            }
        }
    }
    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var smsSign: QuerySmsSignListNewResponseBody.SmsSign?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.smsSign?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.smsSign != nil {
            map["SmsSign"] = self.smsSign?.toMap()
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SmsSign"] as? [String: Any?] {
            var model = QuerySmsSignListNewResponseBody.SmsSign()
            model.fromMap(value)
            self.smsSign = model
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QuerySmsSignListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsSignListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsSignListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsSignValidRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var serviceType: Int32?

    public var signName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ServiceType"] as? Int32 {
            self.serviceType = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
    }
}

public class QuerySmsSignValidResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsSignValidResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsSignValidResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsSignValidResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsSignValidNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var serviceType: Int32?

    public var signName: String?

    public var signUpgrade: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.signUpgrade != nil {
            map["SignUpgrade"] = self.signUpgrade!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ServiceType"] as? Int32 {
            self.serviceType = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["SignUpgrade"] as? Bool {
            self.signUpgrade = value
        }
    }
}

public class QuerySmsSignValidNewResponseBody : Tea.TeaModel {
    public var code: String?

    public var msg: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.msg != nil {
            map["Msg"] = self.msg!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Msg"] as? String {
            self.msg = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QuerySmsSignValidNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsSignValidNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsSignValidNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsStatisticsRequest : Tea.TeaModel {
    public var endDate: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var signName: String?

    public var startDate: String?

    public var template: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endDate != nil {
            map["EndDate"] = self.endDate!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.startDate != nil {
            map["StartDate"] = self.startDate!
        }
        if self.template != nil {
            map["Template"] = self.template!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndDate"] as? String {
            self.endDate = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["StartDate"] as? String {
            self.startDate = value
        }
        if let value = dict["Template"] as? String {
            self.template = value
        }
    }
}

public class QuerySmsStatisticsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsStatisticsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsStatisticsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsStatisticsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsStatisticsByTemplateRequest : Tea.TeaModel {
    public var endDate: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var startDate: String?

    public var template: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endDate != nil {
            map["EndDate"] = self.endDate!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.startDate != nil {
            map["StartDate"] = self.startDate!
        }
        if self.template != nil {
            map["Template"] = self.template!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndDate"] as? String {
            self.endDate = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["StartDate"] as? String {
            self.startDate = value
        }
        if let value = dict["Template"] as? String {
            self.template = value
        }
    }
}

public class QuerySmsStatisticsByTemplateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsStatisticsByTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsStatisticsByTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsStatisticsByTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsStatisticsByTemplateNewRequest : Tea.TeaModel {
    public var endDate: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var startDate: String?

    public var template: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endDate != nil {
            map["EndDate"] = self.endDate!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.startDate != nil {
            map["StartDate"] = self.startDate!
        }
        if self.template != nil {
            map["Template"] = self.template!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndDate"] as? String {
            self.endDate = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["StartDate"] as? String {
            self.startDate = value
        }
        if let value = dict["Template"] as? String {
            self.template = value
        }
    }
}

public class QuerySmsStatisticsByTemplateNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class SmsStatisticsResponse : Tea.TeaModel {
            public var detailStsDate: String?

            public var downloadUrl: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var id: Int64?

            public var sendSuccessRate: String?

            public var sendTotal: Int64?

            public var sendTotalFail: Int64?

            public var sendTotalSuccess: Int64?

            public var sendTotalUnknown: Int64?

            public var status: String?

            public var templateCode: String?

            public var templateName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.detailStsDate != nil {
                    map["DetailStsDate"] = self.detailStsDate!
                }
                if self.downloadUrl != nil {
                    map["DownloadUrl"] = self.downloadUrl!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.sendSuccessRate != nil {
                    map["SendSuccessRate"] = self.sendSuccessRate!
                }
                if self.sendTotal != nil {
                    map["SendTotal"] = self.sendTotal!
                }
                if self.sendTotalFail != nil {
                    map["SendTotalFail"] = self.sendTotalFail!
                }
                if self.sendTotalSuccess != nil {
                    map["SendTotalSuccess"] = self.sendTotalSuccess!
                }
                if self.sendTotalUnknown != nil {
                    map["SendTotalUnknown"] = self.sendTotalUnknown!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.templateCode != nil {
                    map["TemplateCode"] = self.templateCode!
                }
                if self.templateName != nil {
                    map["TemplateName"] = self.templateName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DetailStsDate"] as? String {
                    self.detailStsDate = value
                }
                if let value = dict["DownloadUrl"] as? String {
                    self.downloadUrl = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["SendSuccessRate"] as? String {
                    self.sendSuccessRate = value
                }
                if let value = dict["SendTotal"] as? Int64 {
                    self.sendTotal = value
                }
                if let value = dict["SendTotalFail"] as? Int64 {
                    self.sendTotalFail = value
                }
                if let value = dict["SendTotalSuccess"] as? Int64 {
                    self.sendTotalSuccess = value
                }
                if let value = dict["SendTotalUnknown"] as? Int64 {
                    self.sendTotalUnknown = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["TemplateCode"] as? String {
                    self.templateCode = value
                }
                if let value = dict["TemplateName"] as? String {
                    self.templateName = value
                }
            }
        }
        public var smsStatisticsResponse: [QuerySmsStatisticsByTemplateNewResponseBody.List.SmsStatisticsResponse]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.smsStatisticsResponse != nil {
                var tmp : [Any] = []
                for k in self.smsStatisticsResponse! {
                    tmp.append(k.toMap())
                }
                map["SmsStatisticsResponse"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SmsStatisticsResponse"] as? [Any?] {
                var tmp : [QuerySmsStatisticsByTemplateNewResponseBody.List.SmsStatisticsResponse] = []
                for v in value {
                    if v != nil {
                        var model = QuerySmsStatisticsByTemplateNewResponseBody.List.SmsStatisticsResponse()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.smsStatisticsResponse = tmp
            }
        }
    }
    public var list: QuerySmsStatisticsByTemplateNewResponseBody.List?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QuerySmsStatisticsByTemplateNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QuerySmsStatisticsByTemplateNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsStatisticsByTemplateNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsStatisticsByTemplateNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsStatisticsNewRequest : Tea.TeaModel {
    public var endDate: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var prodId: Int64?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var signName: String?

    public var startDate: String?

    public var template: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endDate != nil {
            map["EndDate"] = self.endDate!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.startDate != nil {
            map["StartDate"] = self.startDate!
        }
        if self.template != nil {
            map["Template"] = self.template!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndDate"] as? String {
            self.endDate = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? Int64 {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["StartDate"] as? String {
            self.startDate = value
        }
        if let value = dict["Template"] as? String {
            self.template = value
        }
    }
}

public class QuerySmsStatisticsNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public var bizType: Int32?

        public var detailStsDate: String?

        public var downloadUrl: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var sendSuccessRate: String?

        public var sendTotal: Int64?

        public var sendTotalFail: Int64?

        public var sendTotalSuccess: Int64?

        public var sendTotalUnknown: Int64?

        public var signName: String?

        public var status: String?

        public var templateCode: String?

        public var templateName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizType != nil {
                map["BizType"] = self.bizType!
            }
            if self.detailStsDate != nil {
                map["DetailStsDate"] = self.detailStsDate!
            }
            if self.downloadUrl != nil {
                map["DownloadUrl"] = self.downloadUrl!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.sendSuccessRate != nil {
                map["SendSuccessRate"] = self.sendSuccessRate!
            }
            if self.sendTotal != nil {
                map["SendTotal"] = self.sendTotal!
            }
            if self.sendTotalFail != nil {
                map["SendTotalFail"] = self.sendTotalFail!
            }
            if self.sendTotalSuccess != nil {
                map["SendTotalSuccess"] = self.sendTotalSuccess!
            }
            if self.sendTotalUnknown != nil {
                map["SendTotalUnknown"] = self.sendTotalUnknown!
            }
            if self.signName != nil {
                map["SignName"] = self.signName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.templateCode != nil {
                map["TemplateCode"] = self.templateCode!
            }
            if self.templateName != nil {
                map["TemplateName"] = self.templateName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizType"] as? Int32 {
                self.bizType = value
            }
            if let value = dict["DetailStsDate"] as? String {
                self.detailStsDate = value
            }
            if let value = dict["DownloadUrl"] as? String {
                self.downloadUrl = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["SendSuccessRate"] as? String {
                self.sendSuccessRate = value
            }
            if let value = dict["SendTotal"] as? Int64 {
                self.sendTotal = value
            }
            if let value = dict["SendTotalFail"] as? Int64 {
                self.sendTotalFail = value
            }
            if let value = dict["SendTotalSuccess"] as? Int64 {
                self.sendTotalSuccess = value
            }
            if let value = dict["SendTotalUnknown"] as? Int64 {
                self.sendTotalUnknown = value
            }
            if let value = dict["SignName"] as? String {
                self.signName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TemplateCode"] as? String {
                self.templateCode = value
            }
            if let value = dict["TemplateName"] as? String {
                self.templateName = value
            }
        }
    }
    public var list: [QuerySmsStatisticsNewResponseBody.List]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            var tmp : [Any] = []
            for k in self.list! {
                tmp.append(k.toMap())
            }
            map["List"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [Any?] {
            var tmp : [QuerySmsStatisticsNewResponseBody.List] = []
            for v in value {
                if v != nil {
                    var model = QuerySmsStatisticsNewResponseBody.List()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.list = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QuerySmsStatisticsNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsStatisticsNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsStatisticsNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsStatisticsUrlRequest : Tea.TeaModel {
    public var endDate: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var signName: String?

    public var startDate: String?

    public var template: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endDate != nil {
            map["EndDate"] = self.endDate!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.startDate != nil {
            map["StartDate"] = self.startDate!
        }
        if self.template != nil {
            map["Template"] = self.template!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndDate"] as? String {
            self.endDate = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["StartDate"] as? String {
            self.startDate = value
        }
        if let value = dict["Template"] as? String {
            self.template = value
        }
    }
}

public class QuerySmsStatisticsUrlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsStatisticsUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsStatisticsUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsStatisticsUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsStatisticsUrlNewRequest : Tea.TeaModel {
    public var endDate: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var prodId: Int64?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var signName: String?

    public var startDate: String?

    public var template: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endDate != nil {
            map["EndDate"] = self.endDate!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.startDate != nil {
            map["StartDate"] = self.startDate!
        }
        if self.template != nil {
            map["Template"] = self.template!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndDate"] as? String {
            self.endDate = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? Int64 {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["StartDate"] as? String {
            self.startDate = value
        }
        if let value = dict["Template"] as? String {
            self.template = value
        }
    }
}

public class QuerySmsStatisticsUrlNewResponseBody : Tea.TeaModel {
    public var downloadUrl: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.downloadUrl != nil {
            map["DownloadUrl"] = self.downloadUrl!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DownloadUrl"] as? String {
            self.downloadUrl = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QuerySmsStatisticsUrlNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsStatisticsUrlNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsStatisticsUrlNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsStepRequest : Tea.TeaModel {
    public var billCycle: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.billCycle != nil {
            map["BillCycle"] = self.billCycle!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BillCycle"] as? String {
            self.billCycle = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySmsStepResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsStepResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsStepResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsStepResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsTemplateByCodeRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
    }
}

public class QuerySmsTemplateByCodeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsTemplateByCodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsTemplateByCodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsTemplateByCodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsTemplateByCodeNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
    }
}

public class QuerySmsTemplateByCodeNewResponseBody : Tea.TeaModel {
    public class ApplicationScene : Tea.TeaModel {
        public var content: String?

        public var id: Int64?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public class FileIds : Tea.TeaModel {
        public var fileId: [Int64]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileId"] as? [Int64] {
                self.fileId = value
            }
        }
    }
    public class FileUrlList : Tea.TeaModel {
        public var fileUrl: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileUrl"] as? [String] {
                self.fileUrl = value
            }
        }
    }
    public class MoreDataFileIds : Tea.TeaModel {
        public var moreDataFileId: [Int64]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.moreDataFileId != nil {
                map["MoreDataFileId"] = self.moreDataFileId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MoreDataFileId"] as? [Int64] {
                self.moreDataFileId = value
            }
        }
    }
    public class MoreDataFileUrls : Tea.TeaModel {
        public var moreDataFileUrl: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.moreDataFileUrl != nil {
                map["MoreDataFileUrl"] = self.moreDataFileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MoreDataFileUrl"] as? [String] {
                self.moreDataFileUrl = value
            }
        }
    }
    public class MoreDataOssKeys : Tea.TeaModel {
        public var moreDataOssKey: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.moreDataOssKey != nil {
                map["MoreDataOssKey"] = self.moreDataOssKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MoreDataOssKey"] as? [String] {
                self.moreDataOssKey = value
            }
        }
    }
    public class OssKeys : Tea.TeaModel {
        public var ossKey: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ossKey != nil {
                map["OssKey"] = self.ossKey!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OssKey"] as? [String] {
                self.ossKey = value
            }
        }
    }
    public class Tags : Tea.TeaModel {
        public class TagInfo : Tea.TeaModel {
            public var tagKey: String?

            public var tagValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.tagKey != nil {
                    map["TagKey"] = self.tagKey!
                }
                if self.tagValue != nil {
                    map["TagValue"] = self.tagValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["TagKey"] as? String {
                    self.tagKey = value
                }
                if let value = dict["TagValue"] as? String {
                    self.tagValue = value
                }
            }
        }
        public var tagInfo: [QuerySmsTemplateByCodeNewResponseBody.Tags.TagInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagInfo != nil {
                var tmp : [Any] = []
                for k in self.tagInfo! {
                    tmp.append(k.toMap())
                }
                map["TagInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TagInfo"] as? [Any?] {
                var tmp : [QuerySmsTemplateByCodeNewResponseBody.Tags.TagInfo] = []
                for v in value {
                    if v != nil {
                        var model = QuerySmsTemplateByCodeNewResponseBody.Tags.TagInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tagInfo = tmp
            }
        }
    }
    public var accessToken: String?

    public var applicationScene: QuerySmsTemplateByCodeNewResponseBody.ApplicationScene?

    public var auditInfo: String?

    public var auditRemarkInfo: String?

    public var bizType: String?

    public var fileIds: QuerySmsTemplateByCodeNewResponseBody.FileIds?

    public var fileUrlList: QuerySmsTemplateByCodeNewResponseBody.FileUrlList?

    public var from: String?

    public var gmtCreateStr: String?

    public var intlType: Int32?

    public var moreDataFileIds: QuerySmsTemplateByCodeNewResponseBody.MoreDataFileIds?

    public var moreDataFileUrls: QuerySmsTemplateByCodeNewResponseBody.MoreDataFileUrls?

    public var moreDataOssKeys: QuerySmsTemplateByCodeNewResponseBody.MoreDataOssKeys?

    public var needAuthorized: Bool?

    public var openTag: Bool?

    public var orderId: String?

    public var ossKeys: QuerySmsTemplateByCodeNewResponseBody.OssKeys?

    public var productUrl: String?

    public var relatedSignName: String?

    public var remark: String?

    public var requestId: String?

    public var rmdTemplateId: Int32?

    public var rmdTemplateVariableNum: Int32?

    public var signName: String?

    public var signType: Int32?

    public var smsContent: String?

    public var tags: QuerySmsTemplateByCodeNewResponseBody.Tags?

    public var templateCode: String?

    public var templateName: String?

    public var templateRule: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.applicationScene?.validate()
        try self.fileIds?.validate()
        try self.fileUrlList?.validate()
        try self.moreDataFileIds?.validate()
        try self.moreDataFileUrls?.validate()
        try self.moreDataOssKeys?.validate()
        try self.ossKeys?.validate()
        try self.tags?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessToken != nil {
            map["AccessToken"] = self.accessToken!
        }
        if self.applicationScene != nil {
            map["ApplicationScene"] = self.applicationScene?.toMap()
        }
        if self.auditInfo != nil {
            map["AuditInfo"] = self.auditInfo!
        }
        if self.auditRemarkInfo != nil {
            map["AuditRemarkInfo"] = self.auditRemarkInfo!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.fileIds != nil {
            map["FileIds"] = self.fileIds?.toMap()
        }
        if self.fileUrlList != nil {
            map["FileUrlList"] = self.fileUrlList?.toMap()
        }
        if self.from != nil {
            map["From"] = self.from!
        }
        if self.gmtCreateStr != nil {
            map["GmtCreateStr"] = self.gmtCreateStr!
        }
        if self.intlType != nil {
            map["IntlType"] = self.intlType!
        }
        if self.moreDataFileIds != nil {
            map["MoreDataFileIds"] = self.moreDataFileIds?.toMap()
        }
        if self.moreDataFileUrls != nil {
            map["MoreDataFileUrls"] = self.moreDataFileUrls?.toMap()
        }
        if self.moreDataOssKeys != nil {
            map["MoreDataOssKeys"] = self.moreDataOssKeys?.toMap()
        }
        if self.needAuthorized != nil {
            map["NeedAuthorized"] = self.needAuthorized!
        }
        if self.openTag != nil {
            map["OpenTag"] = self.openTag!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.ossKeys != nil {
            map["OssKeys"] = self.ossKeys?.toMap()
        }
        if self.productUrl != nil {
            map["ProductUrl"] = self.productUrl!
        }
        if self.relatedSignName != nil {
            map["RelatedSignName"] = self.relatedSignName!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rmdTemplateId != nil {
            map["RmdTemplateId"] = self.rmdTemplateId!
        }
        if self.rmdTemplateVariableNum != nil {
            map["RmdTemplateVariableNum"] = self.rmdTemplateVariableNum!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.signType != nil {
            map["SignType"] = self.signType!
        }
        if self.smsContent != nil {
            map["SmsContent"] = self.smsContent!
        }
        if self.tags != nil {
            map["Tags"] = self.tags?.toMap()
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.templateRule != nil {
            map["TemplateRule"] = self.templateRule!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessToken"] as? String {
            self.accessToken = value
        }
        if let value = dict["ApplicationScene"] as? [String: Any?] {
            var model = QuerySmsTemplateByCodeNewResponseBody.ApplicationScene()
            model.fromMap(value)
            self.applicationScene = model
        }
        if let value = dict["AuditInfo"] as? String {
            self.auditInfo = value
        }
        if let value = dict["AuditRemarkInfo"] as? String {
            self.auditRemarkInfo = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["FileIds"] as? [String: Any?] {
            var model = QuerySmsTemplateByCodeNewResponseBody.FileIds()
            model.fromMap(value)
            self.fileIds = model
        }
        if let value = dict["FileUrlList"] as? [String: Any?] {
            var model = QuerySmsTemplateByCodeNewResponseBody.FileUrlList()
            model.fromMap(value)
            self.fileUrlList = model
        }
        if let value = dict["From"] as? String {
            self.from = value
        }
        if let value = dict["GmtCreateStr"] as? String {
            self.gmtCreateStr = value
        }
        if let value = dict["IntlType"] as? Int32 {
            self.intlType = value
        }
        if let value = dict["MoreDataFileIds"] as? [String: Any?] {
            var model = QuerySmsTemplateByCodeNewResponseBody.MoreDataFileIds()
            model.fromMap(value)
            self.moreDataFileIds = model
        }
        if let value = dict["MoreDataFileUrls"] as? [String: Any?] {
            var model = QuerySmsTemplateByCodeNewResponseBody.MoreDataFileUrls()
            model.fromMap(value)
            self.moreDataFileUrls = model
        }
        if let value = dict["MoreDataOssKeys"] as? [String: Any?] {
            var model = QuerySmsTemplateByCodeNewResponseBody.MoreDataOssKeys()
            model.fromMap(value)
            self.moreDataOssKeys = model
        }
        if let value = dict["NeedAuthorized"] as? Bool {
            self.needAuthorized = value
        }
        if let value = dict["OpenTag"] as? Bool {
            self.openTag = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["OssKeys"] as? [String: Any?] {
            var model = QuerySmsTemplateByCodeNewResponseBody.OssKeys()
            model.fromMap(value)
            self.ossKeys = model
        }
        if let value = dict["ProductUrl"] as? String {
            self.productUrl = value
        }
        if let value = dict["RelatedSignName"] as? String {
            self.relatedSignName = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RmdTemplateId"] as? Int32 {
            self.rmdTemplateId = value
        }
        if let value = dict["RmdTemplateVariableNum"] as? Int32 {
            self.rmdTemplateVariableNum = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["SignType"] as? Int32 {
            self.signType = value
        }
        if let value = dict["SmsContent"] as? String {
            self.smsContent = value
        }
        if let value = dict["Tags"] as? [String: Any?] {
            var model = QuerySmsTemplateByCodeNewResponseBody.Tags()
            model.fromMap(value)
            self.tags = model
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TemplateRule"] as? String {
            self.templateRule = value
        }
    }
}

public class QuerySmsTemplateByCodeNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsTemplateByCodeNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsTemplateByCodeNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsTemplateLastRangeRequest : Tea.TeaModel {
    public var bizType: String?

    public var limit: Int32?

    public var needDefaultTemplate: Bool?

    public var ownerId: Int64?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.needDefaultTemplate != nil {
            map["NeedDefaultTemplate"] = self.needDefaultTemplate!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["Limit"] as? Int32 {
            self.limit = value
        }
        if let value = dict["NeedDefaultTemplate"] as? Bool {
            self.needDefaultTemplate = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class QuerySmsTemplateLastRangeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsTemplateLastRangeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsTemplateLastRangeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsTemplateLastRangeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsTemplateLastRangeNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var filterAnyParam: Bool?

    public var limit: Int32?

    public var needDefaultTemplate: Bool?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var prodId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.filterAnyParam != nil {
            map["FilterAnyParam"] = self.filterAnyParam!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.needDefaultTemplate != nil {
            map["NeedDefaultTemplate"] = self.needDefaultTemplate!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodId != nil {
            map["ProdId"] = self.prodId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["FilterAnyParam"] as? Bool {
            self.filterAnyParam = value
        }
        if let value = dict["Limit"] as? Int32 {
            self.limit = value
        }
        if let value = dict["NeedDefaultTemplate"] as? Bool {
            self.needDefaultTemplate = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdId"] as? String {
            self.prodId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class QuerySmsTemplateLastRangeNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class SmsTemplate : Tea.TeaModel {
            public class Tags : Tea.TeaModel {
                public class Tag : Tea.TeaModel {
                    public var resourceId: String?

                    public var resourceType: String?

                    public var tagKey: String?

                    public var tagValue: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.resourceId != nil {
                            map["ResourceId"] = self.resourceId!
                        }
                        if self.resourceType != nil {
                            map["ResourceType"] = self.resourceType!
                        }
                        if self.tagKey != nil {
                            map["TagKey"] = self.tagKey!
                        }
                        if self.tagValue != nil {
                            map["TagValue"] = self.tagValue!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ResourceId"] as? String {
                            self.resourceId = value
                        }
                        if let value = dict["ResourceType"] as? String {
                            self.resourceType = value
                        }
                        if let value = dict["TagKey"] as? String {
                            self.tagKey = value
                        }
                        if let value = dict["TagValue"] as? String {
                            self.tagValue = value
                        }
                    }
                }
                public var tag: [QuerySmsTemplateLastRangeNewResponseBody.List.SmsTemplate.Tags.Tag]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tag != nil {
                        var tmp : [Any] = []
                        for k in self.tag! {
                            tmp.append(k.toMap())
                        }
                        map["Tag"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Tag"] as? [Any?] {
                        var tmp : [QuerySmsTemplateLastRangeNewResponseBody.List.SmsTemplate.Tags.Tag] = []
                        for v in value {
                            if v != nil {
                                var model = QuerySmsTemplateLastRangeNewResponseBody.List.SmsTemplate.Tags.Tag()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tag = tmp
                    }
                }
            }
            public var auditInfo: String?

            public var auditRemarkInfo: String?

            public var auditState: String?

            public var bizType: String?

            public var expireDateStr: String?

            public var gmtCreateStr: String?

            public var id: String?

            public var isAnyParam: Bool?

            public var isDefaultTemplate: Bool?

            public var isRecently: Bool?

            public var orderId: String?

            public var passErrType: String?

            public var remark: String?

            public var signType: Int32?

            public var smsContent: String?

            public var supportVendor: String?

            public var tags: QuerySmsTemplateLastRangeNewResponseBody.List.SmsTemplate.Tags?

            public var templateCode: String?

            public var templateContent: String?

            public var templateName: String?

            public var templateRule: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.tags?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.auditInfo != nil {
                    map["AuditInfo"] = self.auditInfo!
                }
                if self.auditRemarkInfo != nil {
                    map["AuditRemarkInfo"] = self.auditRemarkInfo!
                }
                if self.auditState != nil {
                    map["AuditState"] = self.auditState!
                }
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.expireDateStr != nil {
                    map["ExpireDateStr"] = self.expireDateStr!
                }
                if self.gmtCreateStr != nil {
                    map["GmtCreateStr"] = self.gmtCreateStr!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.isAnyParam != nil {
                    map["IsAnyParam"] = self.isAnyParam!
                }
                if self.isDefaultTemplate != nil {
                    map["IsDefaultTemplate"] = self.isDefaultTemplate!
                }
                if self.isRecently != nil {
                    map["IsRecently"] = self.isRecently!
                }
                if self.orderId != nil {
                    map["OrderId"] = self.orderId!
                }
                if self.passErrType != nil {
                    map["PassErrType"] = self.passErrType!
                }
                if self.remark != nil {
                    map["Remark"] = self.remark!
                }
                if self.signType != nil {
                    map["SignType"] = self.signType!
                }
                if self.smsContent != nil {
                    map["SmsContent"] = self.smsContent!
                }
                if self.supportVendor != nil {
                    map["SupportVendor"] = self.supportVendor!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags?.toMap()
                }
                if self.templateCode != nil {
                    map["TemplateCode"] = self.templateCode!
                }
                if self.templateContent != nil {
                    map["TemplateContent"] = self.templateContent!
                }
                if self.templateName != nil {
                    map["TemplateName"] = self.templateName!
                }
                if self.templateRule != nil {
                    map["TemplateRule"] = self.templateRule!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuditInfo"] as? String {
                    self.auditInfo = value
                }
                if let value = dict["AuditRemarkInfo"] as? String {
                    self.auditRemarkInfo = value
                }
                if let value = dict["AuditState"] as? String {
                    self.auditState = value
                }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["ExpireDateStr"] as? String {
                    self.expireDateStr = value
                }
                if let value = dict["GmtCreateStr"] as? String {
                    self.gmtCreateStr = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["IsAnyParam"] as? Bool {
                    self.isAnyParam = value
                }
                if let value = dict["IsDefaultTemplate"] as? Bool {
                    self.isDefaultTemplate = value
                }
                if let value = dict["IsRecently"] as? Bool {
                    self.isRecently = value
                }
                if let value = dict["OrderId"] as? String {
                    self.orderId = value
                }
                if let value = dict["PassErrType"] as? String {
                    self.passErrType = value
                }
                if let value = dict["Remark"] as? String {
                    self.remark = value
                }
                if let value = dict["SignType"] as? Int32 {
                    self.signType = value
                }
                if let value = dict["SmsContent"] as? String {
                    self.smsContent = value
                }
                if let value = dict["SupportVendor"] as? String {
                    self.supportVendor = value
                }
                if let value = dict["Tags"] as? [String: Any?] {
                    var model = QuerySmsTemplateLastRangeNewResponseBody.List.SmsTemplate.Tags()
                    model.fromMap(value)
                    self.tags = model
                }
                if let value = dict["TemplateCode"] as? String {
                    self.templateCode = value
                }
                if let value = dict["TemplateContent"] as? String {
                    self.templateContent = value
                }
                if let value = dict["TemplateName"] as? String {
                    self.templateName = value
                }
                if let value = dict["TemplateRule"] as? String {
                    self.templateRule = value
                }
            }
        }
        public var smsTemplate: [QuerySmsTemplateLastRangeNewResponseBody.List.SmsTemplate]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.smsTemplate != nil {
                var tmp : [Any] = []
                for k in self.smsTemplate! {
                    tmp.append(k.toMap())
                }
                map["SmsTemplate"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SmsTemplate"] as? [Any?] {
                var tmp : [QuerySmsTemplateLastRangeNewResponseBody.List.SmsTemplate] = []
                for v in value {
                    if v != nil {
                        var model = QuerySmsTemplateLastRangeNewResponseBody.List.SmsTemplate()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.smsTemplate = tmp
            }
        }
    }
    public var list: QuerySmsTemplateLastRangeNewResponseBody.List?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QuerySmsTemplateLastRangeNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QuerySmsTemplateLastRangeNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsTemplateLastRangeNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsTemplateLastRangeNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsTemplateListRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var tagKey: String?

        public var tagValue: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagKey != nil {
                map["TagKey"] = self.tagKey!
            }
            if self.tagValue != nil {
                map["TagValue"] = self.tagValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TagKey"] as? String {
                self.tagKey = value
            }
            if let value = dict["TagValue"] as? String {
                self.tagValue = value
            }
        }
    }
    public var auditState: String?

    public var bizType: String?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var prodType: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var tags: [QuerySmsTemplateListRequest.Tags]?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodType != nil {
            map["ProdType"] = self.prodType!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdType"] as? String {
            self.prodType = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [QuerySmsTemplateListRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = QuerySmsTemplateListRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class QuerySmsTemplateListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsTemplateListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsTemplateListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsTemplateListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsTemplateListNewRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var tagKey: String?

        public var tagValue: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagKey != nil {
                map["TagKey"] = self.tagKey!
            }
            if self.tagValue != nil {
                map["TagValue"] = self.tagValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TagKey"] as? String {
                self.tagKey = value
            }
            if let value = dict["TagValue"] as? String {
                self.tagValue = value
            }
        }
    }
    public var auditState: String?

    public var bizType: String?

    public var intlType: Int32?

    public var ownerId: Int64?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var prodCode: String?

    public var prodType: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var tagListString: String?

    public var tags: [QuerySmsTemplateListNewRequest.Tags]?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auditState != nil {
            map["AuditState"] = self.auditState!
        }
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.intlType != nil {
            map["IntlType"] = self.intlType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.prodType != nil {
            map["ProdType"] = self.prodType!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.tagListString != nil {
            map["TagListString"] = self.tagListString!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuditState"] as? String {
            self.auditState = value
        }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["IntlType"] as? Int32 {
            self.intlType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProdType"] as? String {
            self.prodType = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TagListString"] as? String {
            self.tagListString = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [QuerySmsTemplateListNewRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = QuerySmsTemplateListNewRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class QuerySmsTemplateListNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class SmsTemplate : Tea.TeaModel {
            public class Tags : Tea.TeaModel {
                public class Tag : Tea.TeaModel {
                    public var resourceId: String?

                    public var resourceType: String?

                    public var tagKey: String?

                    public var tagValue: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.resourceId != nil {
                            map["ResourceId"] = self.resourceId!
                        }
                        if self.resourceType != nil {
                            map["ResourceType"] = self.resourceType!
                        }
                        if self.tagKey != nil {
                            map["TagKey"] = self.tagKey!
                        }
                        if self.tagValue != nil {
                            map["TagValue"] = self.tagValue!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ResourceId"] as? String {
                            self.resourceId = value
                        }
                        if let value = dict["ResourceType"] as? String {
                            self.resourceType = value
                        }
                        if let value = dict["TagKey"] as? String {
                            self.tagKey = value
                        }
                        if let value = dict["TagValue"] as? String {
                            self.tagValue = value
                        }
                    }
                }
                public var tag: [QuerySmsTemplateListNewResponseBody.List.SmsTemplate.Tags.Tag]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tag != nil {
                        var tmp : [Any] = []
                        for k in self.tag! {
                            tmp.append(k.toMap())
                        }
                        map["Tag"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Tag"] as? [Any?] {
                        var tmp : [QuerySmsTemplateListNewResponseBody.List.SmsTemplate.Tags.Tag] = []
                        for v in value {
                            if v != nil {
                                var model = QuerySmsTemplateListNewResponseBody.List.SmsTemplate.Tags.Tag()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tag = tmp
                    }
                }
            }
            public var auditInfo: String?

            public var auditRemarkInfo: String?

            public var auditState: String?

            public var bizType: String?

            public var expireDateStr: String?

            public var gmtCreateStr: String?

            public var id: String?

            public var intelligentApproval: Bool?

            public var intlType: Int32?

            public var isAnyParam: Bool?

            public var isDefaultTemplate: Bool?

            public var isRecently: Bool?

            public var orderCount: Int64?

            public var orderId: String?

            public var passErrType: String?

            public var productUrl: String?

            public var relatedSignName: String?

            public var remark: String?

            public var signType: Int32?

            public var smsContent: String?

            public var supportVendor: String?

            public var tags: QuerySmsTemplateListNewResponseBody.List.SmsTemplate.Tags?

            public var templateCode: String?

            public var templateContent: String?

            public var templateName: String?

            public var templateRule: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.tags?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.auditInfo != nil {
                    map["AuditInfo"] = self.auditInfo!
                }
                if self.auditRemarkInfo != nil {
                    map["AuditRemarkInfo"] = self.auditRemarkInfo!
                }
                if self.auditState != nil {
                    map["AuditState"] = self.auditState!
                }
                if self.bizType != nil {
                    map["BizType"] = self.bizType!
                }
                if self.expireDateStr != nil {
                    map["ExpireDateStr"] = self.expireDateStr!
                }
                if self.gmtCreateStr != nil {
                    map["GmtCreateStr"] = self.gmtCreateStr!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.intelligentApproval != nil {
                    map["IntelligentApproval"] = self.intelligentApproval!
                }
                if self.intlType != nil {
                    map["IntlType"] = self.intlType!
                }
                if self.isAnyParam != nil {
                    map["IsAnyParam"] = self.isAnyParam!
                }
                if self.isDefaultTemplate != nil {
                    map["IsDefaultTemplate"] = self.isDefaultTemplate!
                }
                if self.isRecently != nil {
                    map["IsRecently"] = self.isRecently!
                }
                if self.orderCount != nil {
                    map["OrderCount"] = self.orderCount!
                }
                if self.orderId != nil {
                    map["OrderId"] = self.orderId!
                }
                if self.passErrType != nil {
                    map["PassErrType"] = self.passErrType!
                }
                if self.productUrl != nil {
                    map["ProductUrl"] = self.productUrl!
                }
                if self.relatedSignName != nil {
                    map["RelatedSignName"] = self.relatedSignName!
                }
                if self.remark != nil {
                    map["Remark"] = self.remark!
                }
                if self.signType != nil {
                    map["SignType"] = self.signType!
                }
                if self.smsContent != nil {
                    map["SmsContent"] = self.smsContent!
                }
                if self.supportVendor != nil {
                    map["SupportVendor"] = self.supportVendor!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags?.toMap()
                }
                if self.templateCode != nil {
                    map["TemplateCode"] = self.templateCode!
                }
                if self.templateContent != nil {
                    map["TemplateContent"] = self.templateContent!
                }
                if self.templateName != nil {
                    map["TemplateName"] = self.templateName!
                }
                if self.templateRule != nil {
                    map["TemplateRule"] = self.templateRule!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuditInfo"] as? String {
                    self.auditInfo = value
                }
                if let value = dict["AuditRemarkInfo"] as? String {
                    self.auditRemarkInfo = value
                }
                if let value = dict["AuditState"] as? String {
                    self.auditState = value
                }
                if let value = dict["BizType"] as? String {
                    self.bizType = value
                }
                if let value = dict["ExpireDateStr"] as? String {
                    self.expireDateStr = value
                }
                if let value = dict["GmtCreateStr"] as? String {
                    self.gmtCreateStr = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["IntelligentApproval"] as? Bool {
                    self.intelligentApproval = value
                }
                if let value = dict["IntlType"] as? Int32 {
                    self.intlType = value
                }
                if let value = dict["IsAnyParam"] as? Bool {
                    self.isAnyParam = value
                }
                if let value = dict["IsDefaultTemplate"] as? Bool {
                    self.isDefaultTemplate = value
                }
                if let value = dict["IsRecently"] as? Bool {
                    self.isRecently = value
                }
                if let value = dict["OrderCount"] as? Int64 {
                    self.orderCount = value
                }
                if let value = dict["OrderId"] as? String {
                    self.orderId = value
                }
                if let value = dict["PassErrType"] as? String {
                    self.passErrType = value
                }
                if let value = dict["ProductUrl"] as? String {
                    self.productUrl = value
                }
                if let value = dict["RelatedSignName"] as? String {
                    self.relatedSignName = value
                }
                if let value = dict["Remark"] as? String {
                    self.remark = value
                }
                if let value = dict["SignType"] as? Int32 {
                    self.signType = value
                }
                if let value = dict["SmsContent"] as? String {
                    self.smsContent = value
                }
                if let value = dict["SupportVendor"] as? String {
                    self.supportVendor = value
                }
                if let value = dict["Tags"] as? [String: Any?] {
                    var model = QuerySmsTemplateListNewResponseBody.List.SmsTemplate.Tags()
                    model.fromMap(value)
                    self.tags = model
                }
                if let value = dict["TemplateCode"] as? String {
                    self.templateCode = value
                }
                if let value = dict["TemplateContent"] as? String {
                    self.templateContent = value
                }
                if let value = dict["TemplateName"] as? String {
                    self.templateName = value
                }
                if let value = dict["TemplateRule"] as? String {
                    self.templateRule = value
                }
            }
        }
        public var smsTemplate: [QuerySmsTemplateListNewResponseBody.List.SmsTemplate]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.smsTemplate != nil {
                var tmp : [Any] = []
                for k in self.smsTemplate! {
                    tmp.append(k.toMap())
                }
                map["SmsTemplate"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SmsTemplate"] as? [Any?] {
                var tmp : [QuerySmsTemplateListNewResponseBody.List.SmsTemplate] = []
                for v in value {
                    if v != nil {
                        var model = QuerySmsTemplateListNewResponseBody.List.SmsTemplate()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.smsTemplate = tmp
            }
        }
    }
    public var list: QuerySmsTemplateListNewResponseBody.List?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QuerySmsTemplateListNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QuerySmsTemplateListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsTemplateListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsTemplateListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsUserTagsRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySmsUserTagsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QuerySmsUserTagsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsUserTagsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsUserTagsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QuerySmsUserTagsNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QuerySmsUserTagsNewResponseBody : Tea.TeaModel {
    public var isAnyParamTemplateUser: Bool?

    public var isBatchCreateSmsSign: Bool?

    public var isInnerUser: Bool?

    public var isNewUser: Bool?

    public var isNoneStatusNoChargeCust: Bool?

    public var isOpenTemplateRule: Bool?

    public var isOpenedCard: Bool?

    public var isOpenedDigit: Bool?

    public var isOpenedInternationalSms: Bool?

    public var isOpenedMarket: Bool?

    public var isOpenedSaas: Bool?

    public var isOpenedSmppStandardProtocol: Bool?

    public var isOpenedStandardProtocol: Bool?

    public var isVirtualCust: Bool?

    public var requestId: Bool?

    public var signCheckCommon: Bool?

    public var signCheckVerification: Bool?

    public var smsInformationSupervision: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isAnyParamTemplateUser != nil {
            map["IsAnyParamTemplateUser"] = self.isAnyParamTemplateUser!
        }
        if self.isBatchCreateSmsSign != nil {
            map["IsBatchCreateSmsSign"] = self.isBatchCreateSmsSign!
        }
        if self.isInnerUser != nil {
            map["IsInnerUser"] = self.isInnerUser!
        }
        if self.isNewUser != nil {
            map["IsNewUser"] = self.isNewUser!
        }
        if self.isNoneStatusNoChargeCust != nil {
            map["IsNoneStatusNoChargeCust"] = self.isNoneStatusNoChargeCust!
        }
        if self.isOpenTemplateRule != nil {
            map["IsOpenTemplateRule"] = self.isOpenTemplateRule!
        }
        if self.isOpenedCard != nil {
            map["IsOpenedCard"] = self.isOpenedCard!
        }
        if self.isOpenedDigit != nil {
            map["IsOpenedDigit"] = self.isOpenedDigit!
        }
        if self.isOpenedInternationalSms != nil {
            map["IsOpenedInternationalSms"] = self.isOpenedInternationalSms!
        }
        if self.isOpenedMarket != nil {
            map["IsOpenedMarket"] = self.isOpenedMarket!
        }
        if self.isOpenedSaas != nil {
            map["IsOpenedSaas"] = self.isOpenedSaas!
        }
        if self.isOpenedSmppStandardProtocol != nil {
            map["IsOpenedSmppStandardProtocol"] = self.isOpenedSmppStandardProtocol!
        }
        if self.isOpenedStandardProtocol != nil {
            map["IsOpenedStandardProtocol"] = self.isOpenedStandardProtocol!
        }
        if self.isVirtualCust != nil {
            map["IsVirtualCust"] = self.isVirtualCust!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signCheckCommon != nil {
            map["SignCheckCommon"] = self.signCheckCommon!
        }
        if self.signCheckVerification != nil {
            map["SignCheckVerification"] = self.signCheckVerification!
        }
        if self.smsInformationSupervision != nil {
            map["SmsInformationSupervision"] = self.smsInformationSupervision!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IsAnyParamTemplateUser"] as? Bool {
            self.isAnyParamTemplateUser = value
        }
        if let value = dict["IsBatchCreateSmsSign"] as? Bool {
            self.isBatchCreateSmsSign = value
        }
        if let value = dict["IsInnerUser"] as? Bool {
            self.isInnerUser = value
        }
        if let value = dict["IsNewUser"] as? Bool {
            self.isNewUser = value
        }
        if let value = dict["IsNoneStatusNoChargeCust"] as? Bool {
            self.isNoneStatusNoChargeCust = value
        }
        if let value = dict["IsOpenTemplateRule"] as? Bool {
            self.isOpenTemplateRule = value
        }
        if let value = dict["IsOpenedCard"] as? Bool {
            self.isOpenedCard = value
        }
        if let value = dict["IsOpenedDigit"] as? Bool {
            self.isOpenedDigit = value
        }
        if let value = dict["IsOpenedInternationalSms"] as? Bool {
            self.isOpenedInternationalSms = value
        }
        if let value = dict["IsOpenedMarket"] as? Bool {
            self.isOpenedMarket = value
        }
        if let value = dict["IsOpenedSaas"] as? Bool {
            self.isOpenedSaas = value
        }
        if let value = dict["IsOpenedSmppStandardProtocol"] as? Bool {
            self.isOpenedSmppStandardProtocol = value
        }
        if let value = dict["IsOpenedStandardProtocol"] as? Bool {
            self.isOpenedStandardProtocol = value
        }
        if let value = dict["IsVirtualCust"] as? Bool {
            self.isVirtualCust = value
        }
        if let value = dict["RequestId"] as? Bool {
            self.requestId = value
        }
        if let value = dict["SignCheckCommon"] as? Bool {
            self.signCheckCommon = value
        }
        if let value = dict["SignCheckVerification"] as? Bool {
            self.signCheckVerification = value
        }
        if let value = dict["SmsInformationSupervision"] as? Bool {
            self.smsInformationSupervision = value
        }
    }
}

public class QuerySmsUserTagsNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QuerySmsUserTagsNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QuerySmsUserTagsNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryStandarTemplateCollectionsRequest : Tea.TeaModel {
    public var bizType: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateContent: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateContent != nil {
            map["TemplateContent"] = self.templateContent!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateContent"] as? String {
            self.templateContent = value
        }
    }
}

public class QueryStandarTemplateCollectionsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryStandarTemplateCollectionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryStandarTemplateCollectionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryStandarTemplateCollectionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryStandarTemplateCollectionsNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateContent: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateContent != nil {
            map["TemplateContent"] = self.templateContent!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateContent"] as? String {
            self.templateContent = value
        }
    }
}

public class QueryStandarTemplateCollectionsNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class FcPartnerTemplateDTO : Tea.TeaModel {
            public var businessType: Int32?

            public var fcTag: Int64?

            public var i18n: String?

            public var id: Int64?

            public var isDeleted: Int32?

            public var mcBusinessType: Int32?

            public var mcCategory: Int32?

            public var mcSignature: String?

            public var messageTypeId: Int64?

            public var opNick: String?

            public var partnerId: Int64?

            public var qualificationId: Int64?

            public var remark: String?

            public var signTemplateId: Int64?

            public var signType: Int32?

            public var sourceId: String?

            public var speedLevel: Int32?

            public var state: Int32?

            public var templateCode: String?

            public var templateContent: String?

            public var templateId: Int64?

            public var templateName: String?

            public var templateParamRule: String?

            public var templateSenderType: Int32?

            public var templateType: Int32?

            public var totalCountLimit: Int64?

            public var voiceType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.businessType != nil {
                    map["BusinessType"] = self.businessType!
                }
                if self.fcTag != nil {
                    map["FcTag"] = self.fcTag!
                }
                if self.i18n != nil {
                    map["I18n"] = self.i18n!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.isDeleted != nil {
                    map["IsDeleted"] = self.isDeleted!
                }
                if self.mcBusinessType != nil {
                    map["McBusinessType"] = self.mcBusinessType!
                }
                if self.mcCategory != nil {
                    map["McCategory"] = self.mcCategory!
                }
                if self.mcSignature != nil {
                    map["McSignature"] = self.mcSignature!
                }
                if self.messageTypeId != nil {
                    map["MessageTypeId"] = self.messageTypeId!
                }
                if self.opNick != nil {
                    map["OpNick"] = self.opNick!
                }
                if self.partnerId != nil {
                    map["PartnerId"] = self.partnerId!
                }
                if self.qualificationId != nil {
                    map["QualificationId"] = self.qualificationId!
                }
                if self.remark != nil {
                    map["Remark"] = self.remark!
                }
                if self.signTemplateId != nil {
                    map["SignTemplateId"] = self.signTemplateId!
                }
                if self.signType != nil {
                    map["SignType"] = self.signType!
                }
                if self.sourceId != nil {
                    map["SourceId"] = self.sourceId!
                }
                if self.speedLevel != nil {
                    map["SpeedLevel"] = self.speedLevel!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.templateCode != nil {
                    map["TemplateCode"] = self.templateCode!
                }
                if self.templateContent != nil {
                    map["TemplateContent"] = self.templateContent!
                }
                if self.templateId != nil {
                    map["TemplateId"] = self.templateId!
                }
                if self.templateName != nil {
                    map["TemplateName"] = self.templateName!
                }
                if self.templateParamRule != nil {
                    map["TemplateParamRule"] = self.templateParamRule!
                }
                if self.templateSenderType != nil {
                    map["TemplateSenderType"] = self.templateSenderType!
                }
                if self.templateType != nil {
                    map["TemplateType"] = self.templateType!
                }
                if self.totalCountLimit != nil {
                    map["TotalCountLimit"] = self.totalCountLimit!
                }
                if self.voiceType != nil {
                    map["VoiceType"] = self.voiceType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BusinessType"] as? Int32 {
                    self.businessType = value
                }
                if let value = dict["FcTag"] as? Int64 {
                    self.fcTag = value
                }
                if let value = dict["I18n"] as? String {
                    self.i18n = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["IsDeleted"] as? Int32 {
                    self.isDeleted = value
                }
                if let value = dict["McBusinessType"] as? Int32 {
                    self.mcBusinessType = value
                }
                if let value = dict["McCategory"] as? Int32 {
                    self.mcCategory = value
                }
                if let value = dict["McSignature"] as? String {
                    self.mcSignature = value
                }
                if let value = dict["MessageTypeId"] as? Int64 {
                    self.messageTypeId = value
                }
                if let value = dict["OpNick"] as? String {
                    self.opNick = value
                }
                if let value = dict["PartnerId"] as? Int64 {
                    self.partnerId = value
                }
                if let value = dict["QualificationId"] as? Int64 {
                    self.qualificationId = value
                }
                if let value = dict["Remark"] as? String {
                    self.remark = value
                }
                if let value = dict["SignTemplateId"] as? Int64 {
                    self.signTemplateId = value
                }
                if let value = dict["SignType"] as? Int32 {
                    self.signType = value
                }
                if let value = dict["SourceId"] as? String {
                    self.sourceId = value
                }
                if let value = dict["SpeedLevel"] as? Int32 {
                    self.speedLevel = value
                }
                if let value = dict["State"] as? Int32 {
                    self.state = value
                }
                if let value = dict["TemplateCode"] as? String {
                    self.templateCode = value
                }
                if let value = dict["TemplateContent"] as? String {
                    self.templateContent = value
                }
                if let value = dict["TemplateId"] as? Int64 {
                    self.templateId = value
                }
                if let value = dict["TemplateName"] as? String {
                    self.templateName = value
                }
                if let value = dict["TemplateParamRule"] as? String {
                    self.templateParamRule = value
                }
                if let value = dict["TemplateSenderType"] as? Int32 {
                    self.templateSenderType = value
                }
                if let value = dict["TemplateType"] as? Int32 {
                    self.templateType = value
                }
                if let value = dict["TotalCountLimit"] as? Int64 {
                    self.totalCountLimit = value
                }
                if let value = dict["VoiceType"] as? Int32 {
                    self.voiceType = value
                }
            }
        }
        public var fcPartnerTemplateDTO: [QueryStandarTemplateCollectionsNewResponseBody.List.FcPartnerTemplateDTO]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fcPartnerTemplateDTO != nil {
                var tmp : [Any] = []
                for k in self.fcPartnerTemplateDTO! {
                    tmp.append(k.toMap())
                }
                map["FcPartnerTemplateDTO"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FcPartnerTemplateDTO"] as? [Any?] {
                var tmp : [QueryStandarTemplateCollectionsNewResponseBody.List.FcPartnerTemplateDTO] = []
                for v in value {
                    if v != nil {
                        var model = QueryStandarTemplateCollectionsNewResponseBody.List.FcPartnerTemplateDTO()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.fcPartnerTemplateDTO = tmp
            }
        }
    }
    public var list: QueryStandarTemplateCollectionsNewResponseBody.List?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.list?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            map["List"] = self.list?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [String: Any?] {
            var model = QueryStandarTemplateCollectionsNewResponseBody.List()
            model.fromMap(value)
            self.list = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryStandarTemplateCollectionsNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryStandarTemplateCollectionsNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryStandarTemplateCollectionsNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryStandardProtocolRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var protocolType: Int32?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.protocolType != nil {
            map["ProtocolType"] = self.protocolType!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProtocolType"] as? Int32 {
            self.protocolType = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryStandardProtocolResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryStandardProtocolResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryStandardProtocolResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryStandardProtocolResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryStandardProtocolListNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var protocolType: Int32?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.protocolType != nil {
            map["ProtocolType"] = self.protocolType!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ProtocolType"] as? Int32 {
            self.protocolType = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryStandardProtocolListNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public var auditOrderId: String?

        public var corpCode: String?

        public var effIpWhiteList: String?

        public var featureCode: Int32?

        public var ip: String?

        public var ipAuditStatus: Int32?

        public var ipWhiteList: String?

        public var partnerId: Int64?

        public var port: String?

        public var profileId: Int64?

        public var protocolType: Int32?

        public var protocolTypeStr: String?

        public var realNameInsId: Int64?

        public var resCode: String?

        public var smsSign: String?

        public var smsType: String?

        public var spCode: String?

        public var status: String?

        public var templateCode: String?

        public var userLimit: Int32?

        public var userMaxChannel: Int32?

        public var userName: String?

        public var userPwd: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.auditOrderId != nil {
                map["AuditOrderId"] = self.auditOrderId!
            }
            if self.corpCode != nil {
                map["CorpCode"] = self.corpCode!
            }
            if self.effIpWhiteList != nil {
                map["EffIpWhiteList"] = self.effIpWhiteList!
            }
            if self.featureCode != nil {
                map["FeatureCode"] = self.featureCode!
            }
            if self.ip != nil {
                map["Ip"] = self.ip!
            }
            if self.ipAuditStatus != nil {
                map["IpAuditStatus"] = self.ipAuditStatus!
            }
            if self.ipWhiteList != nil {
                map["IpWhiteList"] = self.ipWhiteList!
            }
            if self.partnerId != nil {
                map["PartnerId"] = self.partnerId!
            }
            if self.port != nil {
                map["Port"] = self.port!
            }
            if self.profileId != nil {
                map["ProfileId"] = self.profileId!
            }
            if self.protocolType != nil {
                map["ProtocolType"] = self.protocolType!
            }
            if self.protocolTypeStr != nil {
                map["ProtocolTypeStr"] = self.protocolTypeStr!
            }
            if self.realNameInsId != nil {
                map["RealNameInsId"] = self.realNameInsId!
            }
            if self.resCode != nil {
                map["ResCode"] = self.resCode!
            }
            if self.smsSign != nil {
                map["SmsSign"] = self.smsSign!
            }
            if self.smsType != nil {
                map["SmsType"] = self.smsType!
            }
            if self.spCode != nil {
                map["SpCode"] = self.spCode!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.templateCode != nil {
                map["TemplateCode"] = self.templateCode!
            }
            if self.userLimit != nil {
                map["UserLimit"] = self.userLimit!
            }
            if self.userMaxChannel != nil {
                map["UserMaxChannel"] = self.userMaxChannel!
            }
            if self.userName != nil {
                map["UserName"] = self.userName!
            }
            if self.userPwd != nil {
                map["UserPwd"] = self.userPwd!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuditOrderId"] as? String {
                self.auditOrderId = value
            }
            if let value = dict["CorpCode"] as? String {
                self.corpCode = value
            }
            if let value = dict["EffIpWhiteList"] as? String {
                self.effIpWhiteList = value
            }
            if let value = dict["FeatureCode"] as? Int32 {
                self.featureCode = value
            }
            if let value = dict["Ip"] as? String {
                self.ip = value
            }
            if let value = dict["IpAuditStatus"] as? Int32 {
                self.ipAuditStatus = value
            }
            if let value = dict["IpWhiteList"] as? String {
                self.ipWhiteList = value
            }
            if let value = dict["PartnerId"] as? Int64 {
                self.partnerId = value
            }
            if let value = dict["Port"] as? String {
                self.port = value
            }
            if let value = dict["ProfileId"] as? Int64 {
                self.profileId = value
            }
            if let value = dict["ProtocolType"] as? Int32 {
                self.protocolType = value
            }
            if let value = dict["ProtocolTypeStr"] as? String {
                self.protocolTypeStr = value
            }
            if let value = dict["RealNameInsId"] as? Int64 {
                self.realNameInsId = value
            }
            if let value = dict["ResCode"] as? String {
                self.resCode = value
            }
            if let value = dict["SmsSign"] as? String {
                self.smsSign = value
            }
            if let value = dict["SmsType"] as? String {
                self.smsType = value
            }
            if let value = dict["SpCode"] as? String {
                self.spCode = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TemplateCode"] as? String {
                self.templateCode = value
            }
            if let value = dict["UserLimit"] as? Int32 {
                self.userLimit = value
            }
            if let value = dict["UserMaxChannel"] as? Int32 {
                self.userMaxChannel = value
            }
            if let value = dict["UserName"] as? String {
                self.userName = value
            }
            if let value = dict["UserPwd"] as? String {
                self.userPwd = value
            }
        }
    }
    public var list: [QueryStandardProtocolListNewResponseBody.List]?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            var tmp : [Any] = []
            for k in self.list! {
                tmp.append(k.toMap())
            }
            map["List"] = tmp
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [Any?] {
            var tmp : [QueryStandardProtocolListNewResponseBody.List] = []
            for v in value {
                if v != nil {
                    var model = QueryStandardProtocolListNewResponseBody.List()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.list = tmp
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QueryStandardProtocolListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryStandardProtocolListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryStandardProtocolListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryTagResourcesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var category: String?

    public var nextToken: String?

    public var ownerId: Int64?

    public var pageSize: Int32?

    public var prodCode: String?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var resourceType: String?

    public var tag: [QueryTagResourcesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [QueryTagResourcesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = QueryTagResourcesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class QueryTagResourcesResponseBody : Tea.TeaModel {
    public class TagResources : Tea.TeaModel {
        public var resourceId: String?

        public var resourceType: String?

        public var tagKey: String?

        public var tagValue: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.tagKey != nil {
                map["TagKey"] = self.tagKey!
            }
            if self.tagValue != nil {
                map["TagValue"] = self.tagValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["TagKey"] as? String {
                self.tagKey = value
            }
            if let value = dict["TagValue"] as? String {
                self.tagValue = value
            }
        }
    }
    public var code: String?

    public var data: String?

    public var nextToken: String?

    public var requestId: String?

    public var tagResources: [QueryTagResourcesResponseBody.TagResources]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tagResources != nil {
            var tmp : [Any] = []
            for k in self.tagResources! {
                tmp.append(k.toMap())
            }
            map["TagResources"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TagResources"] as? [Any?] {
            var tmp : [QueryTagResourcesResponseBody.TagResources] = []
            for v in value {
                if v != nil {
                    var model = QueryTagResourcesResponseBody.TagResources()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tagResources = tmp
        }
    }
}

public class QueryTagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryTagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryTagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryTagResourcesNewRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var category: String?

    public var nextToken: String?

    public var ownerId: Int64?

    public var pageSize: Int32?

    public var prodCode: String?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceIdListString: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var resourceType: String?

    public var tag: [QueryTagResourcesNewRequest.Tag]?

    public var tagListString: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceIdListString != nil {
            map["ResourceIdListString"] = self.resourceIdListString!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.tagListString != nil {
            map["TagListString"] = self.tagListString!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceIdListString"] as? String {
            self.resourceIdListString = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [QueryTagResourcesNewRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = QueryTagResourcesNewRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["TagListString"] as? String {
            self.tagListString = value
        }
    }
}

public class QueryTagResourcesNewResponseBody : Tea.TeaModel {
    public class TagResources : Tea.TeaModel {
        public var resourceId: String?

        public var resourceType: String?

        public var tagKey: String?

        public var tagValue: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.tagKey != nil {
                map["TagKey"] = self.tagKey!
            }
            if self.tagValue != nil {
                map["TagValue"] = self.tagValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["TagKey"] as? String {
                self.tagKey = value
            }
            if let value = dict["TagValue"] as? String {
                self.tagValue = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var tagResources: [QueryTagResourcesNewResponseBody.TagResources]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tagResources != nil {
            var tmp : [Any] = []
            for k in self.tagResources! {
                tmp.append(k.toMap())
            }
            map["TagResources"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TagResources"] as? [Any?] {
            var tmp : [QueryTagResourcesNewResponseBody.TagResources] = []
            for v in value {
                if v != nil {
                    var model = QueryTagResourcesNewResponseBody.TagResources()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tagResources = tmp
        }
    }
}

public class QueryTagResourcesNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryTagResourcesNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryTagResourcesNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryTmpEffectReportDataRequest : Tea.TeaModel {
    public var endDate: String?

    public var pageNo: Int64?

    public var pageSize: Int64?

    public var startDate: String?

    public var tmpCode: String?

    public var tmpName: String?

    public var vendorCode: String?

    public var vendorName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endDate != nil {
            map["EndDate"] = self.endDate!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startDate != nil {
            map["StartDate"] = self.startDate!
        }
        if self.tmpCode != nil {
            map["TmpCode"] = self.tmpCode!
        }
        if self.tmpName != nil {
            map["TmpName"] = self.tmpName!
        }
        if self.vendorCode != nil {
            map["VendorCode"] = self.vendorCode!
        }
        if self.vendorName != nil {
            map["VendorName"] = self.vendorName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndDate"] as? String {
            self.endDate = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["StartDate"] as? String {
            self.startDate = value
        }
        if let value = dict["TmpCode"] as? String {
            self.tmpCode = value
        }
        if let value = dict["TmpName"] as? String {
            self.tmpName = value
        }
        if let value = dict["VendorCode"] as? String {
            self.vendorCode = value
        }
        if let value = dict["VendorName"] as? String {
            self.vendorName = value
        }
    }
}

public class QueryTmpEffectReportDataResponseBody : Tea.TeaModel {
    public class Model : Tea.TeaModel {
        public class Records : Tea.TeaModel {
            public var clickPv: String?

            public var clickUv: String?

            public var date: String?

            public var exposePv: String?

            public var exposeUv: String?

            public var id: Int64?

            public var rptSuccessCount: String?

            public var tmpCode: String?

            public var tmpName: String?

            public var vendorName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.clickPv != nil {
                    map["ClickPv"] = self.clickPv!
                }
                if self.clickUv != nil {
                    map["ClickUv"] = self.clickUv!
                }
                if self.date != nil {
                    map["Date"] = self.date!
                }
                if self.exposePv != nil {
                    map["ExposePv"] = self.exposePv!
                }
                if self.exposeUv != nil {
                    map["ExposeUv"] = self.exposeUv!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.rptSuccessCount != nil {
                    map["RptSuccessCount"] = self.rptSuccessCount!
                }
                if self.tmpCode != nil {
                    map["TmpCode"] = self.tmpCode!
                }
                if self.tmpName != nil {
                    map["TmpName"] = self.tmpName!
                }
                if self.vendorName != nil {
                    map["VendorName"] = self.vendorName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ClickPv"] as? String {
                    self.clickPv = value
                }
                if let value = dict["ClickUv"] as? String {
                    self.clickUv = value
                }
                if let value = dict["Date"] as? String {
                    self.date = value
                }
                if let value = dict["ExposePv"] as? String {
                    self.exposePv = value
                }
                if let value = dict["ExposeUv"] as? String {
                    self.exposeUv = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["RptSuccessCount"] as? String {
                    self.rptSuccessCount = value
                }
                if let value = dict["TmpCode"] as? String {
                    self.tmpCode = value
                }
                if let value = dict["TmpName"] as? String {
                    self.tmpName = value
                }
                if let value = dict["VendorName"] as? String {
                    self.vendorName = value
                }
            }
        }
        public var pageNo: Int64?

        public var pageSize: Int64?

        public var records: [QueryTmpEffectReportDataResponseBody.Model.Records]?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.records != nil {
                var tmp : [Any] = []
                for k in self.records! {
                    tmp.append(k.toMap())
                }
                map["Records"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PageNo"] as? Int64 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["Records"] as? [Any?] {
                var tmp : [QueryTmpEffectReportDataResponseBody.Model.Records] = []
                for v in value {
                    if v != nil {
                        var model = QueryTmpEffectReportDataResponseBody.Model.Records()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.records = tmp
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var model: QueryTmpEffectReportDataResponseBody.Model?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.model?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            map["Model"] = self.model?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? [String: Any?] {
            var model = QueryTmpEffectReportDataResponseBody.Model()
            model.fromMap(value)
            self.model = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryTmpEffectReportDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryTmpEffectReportDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryTmpEffectReportDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryTmpEffectReportDayDataRequest : Tea.TeaModel {
    public var endDate: String?

    public var pageNo: Int64?

    public var pageSize: Int64?

    public var startDate: String?

    public var tmpCode: String?

    public var tmpName: String?

    public var vendorName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endDate != nil {
            map["EndDate"] = self.endDate!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startDate != nil {
            map["StartDate"] = self.startDate!
        }
        if self.tmpCode != nil {
            map["TmpCode"] = self.tmpCode!
        }
        if self.tmpName != nil {
            map["TmpName"] = self.tmpName!
        }
        if self.vendorName != nil {
            map["VendorName"] = self.vendorName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndDate"] as? String {
            self.endDate = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["StartDate"] as? String {
            self.startDate = value
        }
        if let value = dict["TmpCode"] as? String {
            self.tmpCode = value
        }
        if let value = dict["TmpName"] as? String {
            self.tmpName = value
        }
        if let value = dict["VendorName"] as? String {
            self.vendorName = value
        }
    }
}

public class QueryTmpEffectReportDayDataResponseBody : Tea.TeaModel {
    public class Model : Tea.TeaModel {
        public class Records : Tea.TeaModel {
            public var clickPv: String?

            public var clickUv: String?

            public var date: String?

            public var exposePv: String?

            public var exposeUv: String?

            public var rptSuccessCount: String?

            public var tmpCode: String?

            public var tmpName: String?

            public var vendorName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.clickPv != nil {
                    map["ClickPv"] = self.clickPv!
                }
                if self.clickUv != nil {
                    map["ClickUv"] = self.clickUv!
                }
                if self.date != nil {
                    map["Date"] = self.date!
                }
                if self.exposePv != nil {
                    map["ExposePv"] = self.exposePv!
                }
                if self.exposeUv != nil {
                    map["ExposeUv"] = self.exposeUv!
                }
                if self.rptSuccessCount != nil {
                    map["RptSuccessCount"] = self.rptSuccessCount!
                }
                if self.tmpCode != nil {
                    map["TmpCode"] = self.tmpCode!
                }
                if self.tmpName != nil {
                    map["TmpName"] = self.tmpName!
                }
                if self.vendorName != nil {
                    map["VendorName"] = self.vendorName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ClickPv"] as? String {
                    self.clickPv = value
                }
                if let value = dict["ClickUv"] as? String {
                    self.clickUv = value
                }
                if let value = dict["Date"] as? String {
                    self.date = value
                }
                if let value = dict["ExposePv"] as? String {
                    self.exposePv = value
                }
                if let value = dict["ExposeUv"] as? String {
                    self.exposeUv = value
                }
                if let value = dict["RptSuccessCount"] as? String {
                    self.rptSuccessCount = value
                }
                if let value = dict["TmpCode"] as? String {
                    self.tmpCode = value
                }
                if let value = dict["TmpName"] as? String {
                    self.tmpName = value
                }
                if let value = dict["VendorName"] as? String {
                    self.vendorName = value
                }
            }
        }
        public var pageNo: Int64?

        public var pageSize: Int64?

        public var records: [QueryTmpEffectReportDayDataResponseBody.Model.Records]?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.records != nil {
                var tmp : [Any] = []
                for k in self.records! {
                    tmp.append(k.toMap())
                }
                map["Records"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PageNo"] as? Int64 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int64 {
                self.pageSize = value
            }
            if let value = dict["Records"] as? [Any?] {
                var tmp : [QueryTmpEffectReportDayDataResponseBody.Model.Records] = []
                for v in value {
                    if v != nil {
                        var model = QueryTmpEffectReportDayDataResponseBody.Model.Records()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.records = tmp
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var model: QueryTmpEffectReportDayDataResponseBody.Model?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.model?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.model != nil {
            map["Model"] = self.model?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Model"] as? [String: Any?] {
            var model = QueryTmpEffectReportDayDataResponseBody.Model()
            model.fromMap(value)
            self.model = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryTmpEffectReportDayDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryTmpEffectReportDayDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryTmpEffectReportDayDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryUsertagExistenceRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var usertagPosition: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.usertagPosition != nil {
            map["UsertagPosition"] = self.usertagPosition!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["UsertagPosition"] as? Int32 {
            self.usertagPosition = value
        }
    }
}

public class QueryUsertagExistenceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? Bool {
            self.data = value
        }
    }
}

public class QueryUsertagExistenceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryUsertagExistenceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryUsertagExistenceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryWarningThresholdRequest : Tea.TeaModel {
    public var bizType: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryWarningThresholdResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class QueryWarningThresholdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryWarningThresholdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryWarningThresholdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryWarningThresholdNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryWarningThresholdNewResponseBody : Tea.TeaModel {
    public var bizType: String?

    public var contactPhone: String?

    public var dailyHaltLimit: Int32?

    public var dailyWarningLimit: Int32?

    public var domesticDailySuccess: Int64?

    public var domesticDailyTotal: Int64?

    public var domesticMonthlySuccess: Int64?

    public var domesticMonthlyTotal: Int64?

    public var monthlyHaltLimit: Int32?

    public var monthlyWarningLimit: Int32?

    public var outDailySuccess: Int64?

    public var outDailyTotal: Int64?

    public var outMonthlySuccess: Int64?

    public var outMonthlyTotal: Int64?

    public var prevWaringNotice: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.contactPhone != nil {
            map["ContactPhone"] = self.contactPhone!
        }
        if self.dailyHaltLimit != nil {
            map["DailyHaltLimit"] = self.dailyHaltLimit!
        }
        if self.dailyWarningLimit != nil {
            map["DailyWarningLimit"] = self.dailyWarningLimit!
        }
        if self.domesticDailySuccess != nil {
            map["DomesticDailySuccess"] = self.domesticDailySuccess!
        }
        if self.domesticDailyTotal != nil {
            map["DomesticDailyTotal"] = self.domesticDailyTotal!
        }
        if self.domesticMonthlySuccess != nil {
            map["DomesticMonthlySuccess"] = self.domesticMonthlySuccess!
        }
        if self.domesticMonthlyTotal != nil {
            map["DomesticMonthlyTotal"] = self.domesticMonthlyTotal!
        }
        if self.monthlyHaltLimit != nil {
            map["MonthlyHaltLimit"] = self.monthlyHaltLimit!
        }
        if self.monthlyWarningLimit != nil {
            map["MonthlyWarningLimit"] = self.monthlyWarningLimit!
        }
        if self.outDailySuccess != nil {
            map["OutDailySuccess"] = self.outDailySuccess!
        }
        if self.outDailyTotal != nil {
            map["OutDailyTotal"] = self.outDailyTotal!
        }
        if self.outMonthlySuccess != nil {
            map["OutMonthlySuccess"] = self.outMonthlySuccess!
        }
        if self.outMonthlyTotal != nil {
            map["OutMonthlyTotal"] = self.outMonthlyTotal!
        }
        if self.prevWaringNotice != nil {
            map["PrevWaringNotice"] = self.prevWaringNotice!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["ContactPhone"] as? String {
            self.contactPhone = value
        }
        if let value = dict["DailyHaltLimit"] as? Int32 {
            self.dailyHaltLimit = value
        }
        if let value = dict["DailyWarningLimit"] as? Int32 {
            self.dailyWarningLimit = value
        }
        if let value = dict["DomesticDailySuccess"] as? Int64 {
            self.domesticDailySuccess = value
        }
        if let value = dict["DomesticDailyTotal"] as? Int64 {
            self.domesticDailyTotal = value
        }
        if let value = dict["DomesticMonthlySuccess"] as? Int64 {
            self.domesticMonthlySuccess = value
        }
        if let value = dict["DomesticMonthlyTotal"] as? Int64 {
            self.domesticMonthlyTotal = value
        }
        if let value = dict["MonthlyHaltLimit"] as? Int32 {
            self.monthlyHaltLimit = value
        }
        if let value = dict["MonthlyWarningLimit"] as? Int32 {
            self.monthlyWarningLimit = value
        }
        if let value = dict["OutDailySuccess"] as? Int64 {
            self.outDailySuccess = value
        }
        if let value = dict["OutDailyTotal"] as? Int64 {
            self.outDailyTotal = value
        }
        if let value = dict["OutMonthlySuccess"] as? Int64 {
            self.outMonthlySuccess = value
        }
        if let value = dict["OutMonthlyTotal"] as? Int64 {
            self.outMonthlyTotal = value
        }
        if let value = dict["PrevWaringNotice"] as? Bool {
            self.prevWaringNotice = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryWarningThresholdNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryWarningThresholdNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryWarningThresholdNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryWorkOrdAuditListNewRequest : Tea.TeaModel {
    public var orderId: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class QueryWorkOrdAuditListNewResponseBody : Tea.TeaModel {
    public class List : Tea.TeaModel {
        public class Param : Tea.TeaModel {
            public class AuditRemarkInfo : Tea.TeaModel {
                public var rejectDate: String?

                public var rejectInfo: String?

                public var rejectSubInfo: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.rejectDate != nil {
                        map["RejectDate"] = self.rejectDate!
                    }
                    if self.rejectInfo != nil {
                        map["RejectInfo"] = self.rejectInfo!
                    }
                    if self.rejectSubInfo != nil {
                        map["RejectSubInfo"] = self.rejectSubInfo!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["RejectDate"] as? String {
                        self.rejectDate = value
                    }
                    if let value = dict["RejectInfo"] as? String {
                        self.rejectInfo = value
                    }
                    if let value = dict["RejectSubInfo"] as? String {
                        self.rejectSubInfo = value
                    }
                }
            }
            public class AuditState : Tea.TeaModel {
                public var key: String?

                public var name: String?

                public var value: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Value"] as? Int32 {
                        self.value = value
                    }
                }
            }
            public var auditInfo: String?

            public var auditRemarkInfo: QueryWorkOrdAuditListNewResponseBody.List.Param.AuditRemarkInfo?

            public var auditState: QueryWorkOrdAuditListNewResponseBody.List.Param.AuditState?

            public var businessType: Int32?

            public var extendMessage: String?

            public var fileIds: [Int64]?

            public var fileUrlList: [String]?

            public var gmtCreateStr: String?

            public var id: Int64?

            public var orderId: String?

            public var partnerId: Int64?

            public var remark: String?

            public var sceneType: Int32?

            public var signName: String?

            public var signType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.auditRemarkInfo?.validate()
                try self.auditState?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.auditInfo != nil {
                    map["AuditInfo"] = self.auditInfo!
                }
                if self.auditRemarkInfo != nil {
                    map["AuditRemarkInfo"] = self.auditRemarkInfo?.toMap()
                }
                if self.auditState != nil {
                    map["AuditState"] = self.auditState?.toMap()
                }
                if self.businessType != nil {
                    map["BusinessType"] = self.businessType!
                }
                if self.extendMessage != nil {
                    map["ExtendMessage"] = self.extendMessage!
                }
                if self.fileIds != nil {
                    map["FileIds"] = self.fileIds!
                }
                if self.fileUrlList != nil {
                    map["FileUrlList"] = self.fileUrlList!
                }
                if self.gmtCreateStr != nil {
                    map["GmtCreateStr"] = self.gmtCreateStr!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.orderId != nil {
                    map["OrderId"] = self.orderId!
                }
                if self.partnerId != nil {
                    map["PartnerId"] = self.partnerId!
                }
                if self.remark != nil {
                    map["Remark"] = self.remark!
                }
                if self.sceneType != nil {
                    map["SceneType"] = self.sceneType!
                }
                if self.signName != nil {
                    map["SignName"] = self.signName!
                }
                if self.signType != nil {
                    map["SignType"] = self.signType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuditInfo"] as? String {
                    self.auditInfo = value
                }
                if let value = dict["AuditRemarkInfo"] as? [String: Any?] {
                    var model = QueryWorkOrdAuditListNewResponseBody.List.Param.AuditRemarkInfo()
                    model.fromMap(value)
                    self.auditRemarkInfo = model
                }
                if let value = dict["AuditState"] as? [String: Any?] {
                    var model = QueryWorkOrdAuditListNewResponseBody.List.Param.AuditState()
                    model.fromMap(value)
                    self.auditState = model
                }
                if let value = dict["BusinessType"] as? Int32 {
                    self.businessType = value
                }
                if let value = dict["ExtendMessage"] as? String {
                    self.extendMessage = value
                }
                if let value = dict["FileIds"] as? [Int64] {
                    self.fileIds = value
                }
                if let value = dict["FileUrlList"] as? [String] {
                    self.fileUrlList = value
                }
                if let value = dict["GmtCreateStr"] as? String {
                    self.gmtCreateStr = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["OrderId"] as? String {
                    self.orderId = value
                }
                if let value = dict["PartnerId"] as? Int64 {
                    self.partnerId = value
                }
                if let value = dict["Remark"] as? String {
                    self.remark = value
                }
                if let value = dict["SceneType"] as? Int32 {
                    self.sceneType = value
                }
                if let value = dict["SignName"] as? String {
                    self.signName = value
                }
                if let value = dict["SignType"] as? Int32 {
                    self.signType = value
                }
            }
        }
        public var auditRemark: String?

        public var auditResult: String?

        public var bizType: String?

        public var createDate: String?

        public var ordId: String?

        public var ordStatus: String?

        public var param: QueryWorkOrdAuditListNewResponseBody.List.Param?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.param?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.auditRemark != nil {
                map["AuditRemark"] = self.auditRemark!
            }
            if self.auditResult != nil {
                map["AuditResult"] = self.auditResult!
            }
            if self.bizType != nil {
                map["BizType"] = self.bizType!
            }
            if self.createDate != nil {
                map["CreateDate"] = self.createDate!
            }
            if self.ordId != nil {
                map["OrdId"] = self.ordId!
            }
            if self.ordStatus != nil {
                map["OrdStatus"] = self.ordStatus!
            }
            if self.param != nil {
                map["Param"] = self.param?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuditRemark"] as? String {
                self.auditRemark = value
            }
            if let value = dict["AuditResult"] as? String {
                self.auditResult = value
            }
            if let value = dict["BizType"] as? String {
                self.bizType = value
            }
            if let value = dict["CreateDate"] as? String {
                self.createDate = value
            }
            if let value = dict["OrdId"] as? String {
                self.ordId = value
            }
            if let value = dict["OrdStatus"] as? String {
                self.ordStatus = value
            }
            if let value = dict["Param"] as? [String: Any?] {
                var model = QueryWorkOrdAuditListNewResponseBody.List.Param()
                model.fromMap(value)
                self.param = model
            }
        }
    }
    public var list: [QueryWorkOrdAuditListNewResponseBody.List]?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.list != nil {
            var tmp : [Any] = []
            for k in self.list! {
                tmp.append(k.toMap())
            }
            map["List"] = tmp
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["List"] as? [Any?] {
            var tmp : [QueryWorkOrdAuditListNewResponseBody.List] = []
            for v in value {
                if v != nil {
                    var model = QueryWorkOrdAuditListNewResponseBody.List()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.list = tmp
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class QueryWorkOrdAuditListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryWorkOrdAuditListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryWorkOrdAuditListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveContactsNewRequest : Tea.TeaModel {
    public var email: String?

    public var id: Int64?

    public var name: String?

    public var openPkgWarning: Int32?

    public var openPreventBrushWarning: Int32?

    public var openSendWarning: Int32?

    public var ownerId: Int64?

    public var phone: String?

    public var prodCode: String?

    public var receiveSignTemplateAuditResult: Int32?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var verificationCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.openPkgWarning != nil {
            map["OpenPkgWarning"] = self.openPkgWarning!
        }
        if self.openPreventBrushWarning != nil {
            map["OpenPreventBrushWarning"] = self.openPreventBrushWarning!
        }
        if self.openSendWarning != nil {
            map["OpenSendWarning"] = self.openSendWarning!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.phone != nil {
            map["Phone"] = self.phone!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.receiveSignTemplateAuditResult != nil {
            map["ReceiveSignTemplateAuditResult"] = self.receiveSignTemplateAuditResult!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.verificationCode != nil {
            map["VerificationCode"] = self.verificationCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Email"] as? String {
            self.email = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OpenPkgWarning"] as? Int32 {
            self.openPkgWarning = value
        }
        if let value = dict["OpenPreventBrushWarning"] as? Int32 {
            self.openPreventBrushWarning = value
        }
        if let value = dict["OpenSendWarning"] as? Int32 {
            self.openSendWarning = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Phone"] as? String {
            self.phone = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ReceiveSignTemplateAuditResult"] as? Int32 {
            self.receiveSignTemplateAuditResult = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["VerificationCode"] as? String {
            self.verificationCode = value
        }
    }
}

public class SaveContactsNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class SaveContactsNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveContactsNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveContactsNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveLearningStatusNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var type: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
    }
}

public class SaveLearningStatusNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class SaveLearningStatusNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveLearningStatusNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveLearningStatusNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SelectTagResourceRequest : Tea.TeaModel {
    public var nextToken: String?

    public var ownerId: Int64?

    public var pageSize: Int32?

    public var prodCode: String?

    public var regionId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var resourceType: String?

    public var tagKey: String?

    public var tagValue: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tagKey != nil {
            map["TagKey"] = self.tagKey!
        }
        if self.tagValue != nil {
            map["TagValue"] = self.tagValue!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["TagKey"] as? String {
            self.tagKey = value
        }
        if let value = dict["TagValue"] as? String {
            self.tagValue = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class SelectTagResourceResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SelectTagResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SelectTagResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SelectTagResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SelectTagResourceNewRequest : Tea.TeaModel {
    public var nextToken: String?

    public var ownerId: Int64?

    public var pageSize: Int32?

    public var prodCode: String?

    public var regionId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var resourceType: String?

    public var tagKey: String?

    public var tagValue: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tagKey != nil {
            map["TagKey"] = self.tagKey!
        }
        if self.tagValue != nil {
            map["TagValue"] = self.tagValue!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["TagKey"] as? String {
            self.tagKey = value
        }
        if let value = dict["TagValue"] as? String {
            self.tagValue = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class SelectTagResourceNewResponseBody : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var tag: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tag != nil {
                map["Tag"] = self.tag!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Tag"] as? [String] {
                self.tag = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var tags: SelectTagResourceNewResponseBody.Tags?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tags?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tags != nil {
            map["Tags"] = self.tags?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Tags"] as? [String: Any?] {
            var model = SelectTagResourceNewResponseBody.Tags()
            model.fromMap(value)
            self.tags = model
        }
    }
}

public class SelectTagResourceNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SelectTagResourceNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SelectTagResourceNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SendSmsTestRequest : Tea.TeaModel {
    public var ncToken: String?

    public var ownerId: Int64?

    public var phoneNumber: String?

    public var prodCode: String?

    public var remoteIp: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sessionId: String?

    public var sig: String?

    public var signName: String?

    public var templateCode: String?

    public var templateParam: String?

    public var testType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ncToken != nil {
            map["NcToken"] = self.ncToken!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.phoneNumber != nil {
            map["PhoneNumber"] = self.phoneNumber!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.remoteIp != nil {
            map["RemoteIp"] = self.remoteIp!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.sig != nil {
            map["Sig"] = self.sig!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        if self.templateParam != nil {
            map["TemplateParam"] = self.templateParam!
        }
        if self.testType != nil {
            map["TestType"] = self.testType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NcToken"] as? String {
            self.ncToken = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PhoneNumber"] as? String {
            self.phoneNumber = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RemoteIp"] as? String {
            self.remoteIp = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["Sig"] as? String {
            self.sig = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["TemplateParam"] as? String {
            self.templateParam = value
        }
        if let value = dict["TestType"] as? String {
            self.testType = value
        }
    }
}

public class SendSmsTestResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class SendSmsTestResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SendSmsTestResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SendSmsTestResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SendSmsTestNewRequest : Tea.TeaModel {
    public var ncToken: String?

    public var ownerId: Int64?

    public var phoneNumber: String?

    public var prodCode: String?

    public var remoteIp: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var sessionId: String?

    public var sig: String?

    public var signName: String?

    public var templateCode: String?

    public var templateParam: String?

    public var testType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ncToken != nil {
            map["NcToken"] = self.ncToken!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.phoneNumber != nil {
            map["PhoneNumber"] = self.phoneNumber!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.remoteIp != nil {
            map["RemoteIp"] = self.remoteIp!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.sig != nil {
            map["Sig"] = self.sig!
        }
        if self.signName != nil {
            map["SignName"] = self.signName!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        if self.templateParam != nil {
            map["TemplateParam"] = self.templateParam!
        }
        if self.testType != nil {
            map["TestType"] = self.testType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NcToken"] as? String {
            self.ncToken = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PhoneNumber"] as? String {
            self.phoneNumber = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RemoteIp"] as? String {
            self.remoteIp = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["Sig"] as? String {
            self.sig = value
        }
        if let value = dict["SignName"] as? String {
            self.signName = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["TemplateParam"] as? String {
            self.templateParam = value
        }
        if let value = dict["TestType"] as? String {
            self.testType = value
        }
    }
}

public class SendSmsTestNewResponseBody : Tea.TeaModel {
    public var code: String?

    public var msg: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.msg != nil {
            map["Msg"] = self.msg!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Msg"] as? String {
            self.msg = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SendSmsTestNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SendSmsTestNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SendSmsTestNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SendVerificationRequest : Tea.TeaModel {
    public var bizType: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var target: String?

    public var verifyType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.target != nil {
            map["Target"] = self.target!
        }
        if self.verifyType != nil {
            map["VerifyType"] = self.verifyType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Target"] as? String {
            self.target = value
        }
        if let value = dict["VerifyType"] as? String {
            self.verifyType = value
        }
    }
}

public class SendVerificationResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var code: String?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class SendVerificationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SendVerificationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SendVerificationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SendVerificationNewRequest : Tea.TeaModel {
    public var bizType: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var target: String?

    public var verifyType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.target != nil {
            map["Target"] = self.target!
        }
        if self.verifyType != nil {
            map["VerifyType"] = self.verifyType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Target"] as? String {
            self.target = value
        }
        if let value = dict["VerifyType"] as? String {
            self.verifyType = value
        }
    }
}

public class SendVerificationNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class SendVerificationNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SendVerificationNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SendVerificationNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TagResourcesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var ownerId: Int64?

    public var prodCode: String?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var resourceType: String?

    public var tag: [TagResourcesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [TagResourcesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = TagResourcesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class TagResourcesResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class TagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TagResourcesNewRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var ownerId: Int64?

    public var prodCode: String?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceIdListString: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var resourceType: String?

    public var tag: [TagResourcesNewRequest.Tag]?

    public var tagListString: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceIdListString != nil {
            map["ResourceIdListString"] = self.resourceIdListString!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.tagListString != nil {
            map["TagListString"] = self.tagListString!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceIdListString"] as? String {
            self.resourceIdListString = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [TagResourcesNewRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = TagResourcesNewRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["TagListString"] as? String {
            self.tagListString = value
        }
    }
}

public class TagResourcesNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class TagResourcesNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TagResourcesNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TagResourcesNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TagResourcesSystemTagsRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var ownerId: Int64?

    public var prodCode: String?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var resourceType: String?

    public var scope: String?

    public var tag: [TagResourcesSystemTagsRequest.Tag]?

    public var tagOwnerUid: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.tagOwnerUid != nil {
            map["TagOwnerUid"] = self.tagOwnerUid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [TagResourcesSystemTagsRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = TagResourcesSystemTagsRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["TagOwnerUid"] as? Int64 {
            self.tagOwnerUid = value
        }
    }
}

public class TagResourcesSystemTagsResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class TagResourcesSystemTagsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TagResourcesSystemTagsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TagResourcesSystemTagsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UntagResourcesRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var all: Bool?

    public var ownerId: Int64?

    public var prodCode: String?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var resourceType: String?

    public var tags: [UntagResourcesRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.all != nil {
            map["All"] = self.all!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["All"] as? Bool {
            self.all = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [UntagResourcesRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = UntagResourcesRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class UntagResourcesResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UntagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UntagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UntagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UntagResourcesNewRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var all: Bool?

    public var ownerId: Int64?

    public var prodCode: String?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceIdListString: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var resourceType: String?

    public var tagListString: String?

    public var tags: [UntagResourcesNewRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.all != nil {
            map["All"] = self.all!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceIdListString != nil {
            map["ResourceIdListString"] = self.resourceIdListString!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tagListString != nil {
            map["TagListString"] = self.tagListString!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["All"] as? Bool {
            self.all = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceIdListString"] as? String {
            self.resourceIdListString = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["TagListString"] as? String {
            self.tagListString = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [UntagResourcesNewRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = UntagResourcesNewRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class UntagResourcesNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
    }
}

public class UntagResourcesNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UntagResourcesNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UntagResourcesNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UntagResourcesSystemTagsRequest : Tea.TeaModel {
    public var all: Bool?

    public var ownerId: Int64?

    public var prodCode: String?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var resourceType: String?

    public var tagKey: [String]?

    public var tagOwnerUid: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.all != nil {
            map["All"] = self.all!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tagKey != nil {
            map["TagKey"] = self.tagKey!
        }
        if self.tagOwnerUid != nil {
            map["TagOwnerUid"] = self.tagOwnerUid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["All"] as? Bool {
            self.all = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["TagKey"] as? [String] {
            self.tagKey = value
        }
        if let value = dict["TagOwnerUid"] as? Int64 {
            self.tagOwnerUid = value
        }
    }
}

public class UntagResourcesSystemTagsResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UntagResourcesSystemTagsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UntagResourcesSystemTagsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UntagResourcesSystemTagsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateIpWhiteListNewRequest : Tea.TeaModel {
    public var featureCode: Int32?

    public var ipWhiteList: String?

    public var ownerId: Int64?

    public var prodCode: String?

    public var realNameInsId: Int64?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var userName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.featureCode != nil {
            map["FeatureCode"] = self.featureCode!
        }
        if self.ipWhiteList != nil {
            map["IpWhiteList"] = self.ipWhiteList!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.realNameInsId != nil {
            map["RealNameInsId"] = self.realNameInsId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.userName != nil {
            map["UserName"] = self.userName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FeatureCode"] as? Int32 {
            self.featureCode = value
        }
        if let value = dict["IpWhiteList"] as? String {
            self.ipWhiteList = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RealNameInsId"] as? Int64 {
            self.realNameInsId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["UserName"] as? String {
            self.userName = value
        }
    }
}

public class UpdateIpWhiteListNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class UpdateIpWhiteListNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateIpWhiteListNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateIpWhiteListNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdatePartnerTemplateNewRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var templateCode: String?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class UpdatePartnerTemplateNewResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? String {
            self.result = value
        }
    }
}

public class UpdatePartnerTemplateNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdatePartnerTemplateNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdatePartnerTemplateNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSlsStatusNewRequest : Tea.TeaModel {
    public var authStatus: Bool?

    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var saveTime: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authStatus != nil {
            map["AuthStatus"] = self.authStatus!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.saveTime != nil {
            map["SaveTime"] = self.saveTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthStatus"] as? Bool {
            self.authStatus = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["SaveTime"] as? Int32 {
            self.saveTime = value
        }
    }
}

public class UpdateSlsStatusNewResponseBody : Tea.TeaModel {
    public var authorizeStatus: Bool?

    public var openStatus: Bool?

    public var prodCode: String?

    public var requestId: String?

    public var saveTime: Int32?

    public var uid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authorizeStatus != nil {
            map["AuthorizeStatus"] = self.authorizeStatus!
        }
        if self.openStatus != nil {
            map["OpenStatus"] = self.openStatus!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.saveTime != nil {
            map["SaveTime"] = self.saveTime!
        }
        if self.uid != nil {
            map["Uid"] = self.uid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthorizeStatus"] as? Bool {
            self.authorizeStatus = value
        }
        if let value = dict["OpenStatus"] as? Bool {
            self.openStatus = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SaveTime"] as? Int32 {
            self.saveTime = value
        }
        if let value = dict["Uid"] as? String {
            self.uid = value
        }
    }
}

public class UpdateSlsStatusNewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSlsStatusNewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSlsStatusNewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadCardResRequest : Tea.TeaModel {
    public var callerParentId: String?

    public var callerType: String?

    public var callerUid: String?

    public var extendInfo: String?

    public var fileSize: Int64?

    public var fileUrl: String?

    public var memo: String?

    public var ownerId: Int64?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var resourceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callerParentId != nil {
            map["CallerParentId"] = self.callerParentId!
        }
        if self.callerType != nil {
            map["CallerType"] = self.callerType!
        }
        if self.callerUid != nil {
            map["CallerUid"] = self.callerUid!
        }
        if self.extendInfo != nil {
            map["ExtendInfo"] = self.extendInfo!
        }
        if self.fileSize != nil {
            map["FileSize"] = self.fileSize!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.memo != nil {
            map["Memo"] = self.memo!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallerParentId"] as? String {
            self.callerParentId = value
        }
        if let value = dict["CallerType"] as? String {
            self.callerType = value
        }
        if let value = dict["CallerUid"] as? String {
            self.callerUid = value
        }
        if let value = dict["ExtendInfo"] as? String {
            self.extendInfo = value
        }
        if let value = dict["FileSize"] as? Int64 {
            self.fileSize = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["Memo"] as? String {
            self.memo = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
    }
}

public class UploadCardResResponseBody : Tea.TeaModel {
    public class Model : Tea.TeaModel {
        public var resourceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
        }
    }
    public var accessDeniedDetail: String?

    public var code: String?

    public var message: String?

    public var model: UploadCardResResponseBody.Model?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.model?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessDeniedDetail != nil {
            map["AccessDeniedDetail"] = self.accessDeniedDetail!
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.model != nil {
            map["Model"] = self.model?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessDeniedDetail"] as? String {
            self.accessDeniedDetail = value
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["Model"] as? [String: Any?] {
            var model = UploadCardResResponseBody.Model()
            model.fromMap(value)
            self.model = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UploadCardResResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadCardResResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadCardResResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadCardResWithDyncParamRequest : Tea.TeaModel {
    public var dynamicParam: String?

    public var expiredTimes: Int64?

    public var fileSize: Int64?

    public var fileUrl: String?

    public var memo: String?

    public var ownerId: Int64?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var resourceType: String?

    public var templateCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicParam != nil {
            map["DynamicParam"] = self.dynamicParam!
        }
        if self.expiredTimes != nil {
            map["ExpiredTimes"] = self.expiredTimes!
        }
        if self.fileSize != nil {
            map["FileSize"] = self.fileSize!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.memo != nil {
            map["Memo"] = self.memo!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.templateCode != nil {
            map["TemplateCode"] = self.templateCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicParam"] as? String {
            self.dynamicParam = value
        }
        if let value = dict["ExpiredTimes"] as? Int64 {
            self.expiredTimes = value
        }
        if let value = dict["FileSize"] as? Int64 {
            self.fileSize = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["Memo"] as? String {
            self.memo = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["TemplateCode"] as? String {
            self.templateCode = value
        }
    }
}

public class UploadCardResWithDyncParamResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var resourceId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResourceId"] as? Int64 {
                self.resourceId = value
            }
        }
    }
    public var accessDeniedDetail: String?

    public var code: String?

    public var data: UploadCardResWithDyncParamResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessDeniedDetail != nil {
            map["AccessDeniedDetail"] = self.accessDeniedDetail!
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessDeniedDetail"] as? String {
            self.accessDeniedDetail = value
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UploadCardResWithDyncParamResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UploadCardResWithDyncParamResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadCardResWithDyncParamResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadCardResWithDyncParamResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ValidatYunSmsIdRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var prodCode: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var data: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.prodCode != nil {
            map["ProdCode"] = self.prodCode!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProdCode"] as? String {
            self.prodCode = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["data"] as? String {
            self.data = value
        }
    }
}

public class ValidatYunSmsIdResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: String?

    public var message: String?

    public var requestId: String?

    public var success: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? String {
            self.success = value
        }
    }
}

public class ValidatYunSmsIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ValidatYunSmsIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ValidatYunSmsIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
