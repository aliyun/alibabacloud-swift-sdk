import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class DentryAppPropertiesValue : Tea.TeaModel {
    public var name: String?

    public var value: String?

    public var visibility: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
    }
}

public class DentriesAppPropertiesValue : Tea.TeaModel {
    public var name: String?

    public var value: String?

    public var visibility: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
    }
}

public class AddAttendeeHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: AddAttendeeHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = AddAttendeeHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class AddAttendeeShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class AddAttendeeRequest : Tea.TeaModel {
    public class AttendeesToAdd : Tea.TeaModel {
        public var id: String?

        public var isOptional: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.isOptional != nil {
                map["isOptional"] = self.isOptional!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["id"] as? String {
                self.id = value
            }
            if let value = dict["isOptional"] as? Bool {
                self.isOptional = value
            }
        }
    }
    public var attendeesToAdd: [AddAttendeeRequest.AttendeesToAdd]?

    public var calendarId: String?

    public var eventId: String?

    public var chatNotification: Bool?

    public var pushNotification: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attendeesToAdd != nil {
            var tmp : [Any] = []
            for k in self.attendeesToAdd! {
                tmp.append(k.toMap())
            }
            map["AttendeesToAdd"] = tmp
        }
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.chatNotification != nil {
            map["chatNotification"] = self.chatNotification!
        }
        if self.pushNotification != nil {
            map["pushNotification"] = self.pushNotification!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AttendeesToAdd"] as? [Any?] {
            var tmp : [AddAttendeeRequest.AttendeesToAdd] = []
            for v in value {
                if v != nil {
                    var model = AddAttendeeRequest.AttendeesToAdd()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.attendeesToAdd = tmp
        }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["chatNotification"] as? Bool {
            self.chatNotification = value
        }
        if let value = dict["pushNotification"] as? Bool {
            self.pushNotification = value
        }
    }
}

public class AddAttendeeShrinkRequest : Tea.TeaModel {
    public var attendeesToAddShrink: String?

    public var calendarId: String?

    public var eventId: String?

    public var chatNotification: Bool?

    public var pushNotification: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attendeesToAddShrink != nil {
            map["AttendeesToAdd"] = self.attendeesToAddShrink!
        }
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.chatNotification != nil {
            map["chatNotification"] = self.chatNotification!
        }
        if self.pushNotification != nil {
            map["pushNotification"] = self.pushNotification!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AttendeesToAdd"] as? String {
            self.attendeesToAddShrink = value
        }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["chatNotification"] as? Bool {
            self.chatNotification = value
        }
        if let value = dict["pushNotification"] as? Bool {
            self.pushNotification = value
        }
    }
}

public class AddAttendeeResponseBody : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public var data: Any?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                map["Data"] = self.data!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? Any {
                self.data = value
            }
        }
    }
    public var content: AddAttendeeResponseBody.Content?

    public var errorCode: String?

    public var errorCtx: [String: Any]?

    public var errorMsg: String?

    public var httpStatusCode: Int32?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.content?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content?.toMap()
        }
        if self.errorCode != nil {
            map["ErrorCode"] = self.errorCode!
        }
        if self.errorCtx != nil {
            map["ErrorCtx"] = self.errorCtx!
        }
        if self.errorMsg != nil {
            map["ErrorMsg"] = self.errorMsg!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? [String: Any?] {
            var model = AddAttendeeResponseBody.Content()
            model.fromMap(value)
            self.content = model
        }
        if let value = dict["ErrorCode"] as? String {
            self.errorCode = value
        }
        if let value = dict["ErrorCtx"] as? [String: Any] {
            self.errorCtx = value
        }
        if let value = dict["ErrorMsg"] as? String {
            self.errorMsg = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddAttendeeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddAttendeeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddAttendeeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddDriveSpaceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: AddDriveSpaceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = AddDriveSpaceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class AddDriveSpaceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class AddDriveSpaceRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var name: String?

    public var tenantContext: AddDriveSpaceRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = AddDriveSpaceRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class AddDriveSpaceShrinkRequest : Tea.TeaModel {
    public var name: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class AddDriveSpaceResponseBody : Tea.TeaModel {
    public var createTime: String?

    public var modifyTime: String?

    public var permissionMode: String?

    public var quota: Int64?

    public var requestId: String?

    public var spaceId: String?

    public var spaceName: String?

    public var spaceType: String?

    public var usedQuota: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTime != nil {
            map["createTime"] = self.createTime!
        }
        if self.modifyTime != nil {
            map["modifyTime"] = self.modifyTime!
        }
        if self.permissionMode != nil {
            map["permissionMode"] = self.permissionMode!
        }
        if self.quota != nil {
            map["quota"] = self.quota!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.spaceId != nil {
            map["spaceId"] = self.spaceId!
        }
        if self.spaceName != nil {
            map["spaceName"] = self.spaceName!
        }
        if self.spaceType != nil {
            map["spaceType"] = self.spaceType!
        }
        if self.usedQuota != nil {
            map["usedQuota"] = self.usedQuota!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["createTime"] as? String {
            self.createTime = value
        }
        if let value = dict["modifyTime"] as? String {
            self.modifyTime = value
        }
        if let value = dict["permissionMode"] as? String {
            self.permissionMode = value
        }
        if let value = dict["quota"] as? Int64 {
            self.quota = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["spaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["spaceName"] as? String {
            self.spaceName = value
        }
        if let value = dict["spaceType"] as? String {
            self.spaceType = value
        }
        if let value = dict["usedQuota"] as? Int64 {
            self.usedQuota = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class AddDriveSpaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddDriveSpaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddDriveSpaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddFolderHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: AddFolderHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = AddFolderHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class AddFolderShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class AddFolderRequest : Tea.TeaModel {
    public class Option : Tea.TeaModel {
        public class AppProperties : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public var visibility: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                if self.visibility != nil {
                    map["Visibility"] = self.visibility!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
                if let value = dict["Visibility"] as? String {
                    self.visibility = value
                }
            }
        }
        public var appProperties: [AddFolderRequest.Option.AppProperties]?

        public var conflictStrategy: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appProperties != nil {
                var tmp : [Any] = []
                for k in self.appProperties! {
                    tmp.append(k.toMap())
                }
                map["AppProperties"] = tmp
            }
            if self.conflictStrategy != nil {
                map["ConflictStrategy"] = self.conflictStrategy!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppProperties"] as? [Any?] {
                var tmp : [AddFolderRequest.Option.AppProperties] = []
                for v in value {
                    if v != nil {
                        var model = AddFolderRequest.Option.AppProperties()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.appProperties = tmp
            }
            if let value = dict["ConflictStrategy"] as? String {
                self.conflictStrategy = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var name: String?

    public var option: AddFolderRequest.Option?

    public var parentId: String?

    public var spaceId: String?

    public var tenantContext: AddFolderRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.option?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.option != nil {
            map["Option"] = self.option?.toMap()
        }
        if self.parentId != nil {
            map["ParentId"] = self.parentId!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Option"] as? [String: Any?] {
            var model = AddFolderRequest.Option()
            model.fromMap(value)
            self.option = model
        }
        if let value = dict["ParentId"] as? String {
            self.parentId = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = AddFolderRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class AddFolderShrinkRequest : Tea.TeaModel {
    public var name: String?

    public var optionShrink: String?

    public var parentId: String?

    public var spaceId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.optionShrink != nil {
            map["Option"] = self.optionShrink!
        }
        if self.parentId != nil {
            map["ParentId"] = self.parentId!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Option"] as? String {
            self.optionShrink = value
        }
        if let value = dict["ParentId"] as? String {
            self.parentId = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class AddFolderResponseBody : Tea.TeaModel {
    public class Dentry : Tea.TeaModel {
        public class Properties : Tea.TeaModel {
            public var readOnly: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.readOnly != nil {
                    map["ReadOnly"] = self.readOnly!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ReadOnly"] as? Bool {
                    self.readOnly = value
                }
            }
        }
        public var appProperties: [String: [DentryAppPropertiesValue]]?

        public var createTime: String?

        public var creatorId: String?

        public var extension_: String?

        public var id: String?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var parentId: String?

        public var partitionType: String?

        public var path: String?

        public var properties: AddFolderResponseBody.Dentry.Properties?

        public var size: Int64?

        public var spaceId: String?

        public var status: String?

        public var storageDriver: String?

        public var type: String?

        public var uuid: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.properties?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appProperties != nil {
                var tmp : [String: Any] = [:]
                for (k, v) in self.appProperties! {
                    var l1 : [Any] = []
                    for k1 in v {
                        l1.append(k1.toMap())
                    }
                    tmp[k] = l1
                }
                map["AppProperties"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.parentId != nil {
                map["ParentId"] = self.parentId!
            }
            if self.partitionType != nil {
                map["PartitionType"] = self.partitionType!
            }
            if self.path != nil {
                map["Path"] = self.path!
            }
            if self.properties != nil {
                map["Properties"] = self.properties?.toMap()
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.spaceId != nil {
                map["SpaceId"] = self.spaceId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageDriver != nil {
                map["StorageDriver"] = self.storageDriver!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.uuid != nil {
                map["Uuid"] = self.uuid!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppProperties"] as? [String: Any?] {
                var tmp : [String: [DentryAppPropertiesValue]] = [:]
                for (k, v) in value {
                    var l1 : [DentryAppPropertiesValue] = []
                    for v1 in v as! [Any?] {
                        if v1 != nil {
                            var model = DentryAppPropertiesValue()
                            if v1 != nil {
                                model.fromMap(v1 as? [String: Any?])
                            }
                            l1.append(model)
                        }
                    }
                    tmp[k] = l1
                }
                self.appProperties = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ParentId"] as? String {
                self.parentId = value
            }
            if let value = dict["PartitionType"] as? String {
                self.partitionType = value
            }
            if let value = dict["Path"] as? String {
                self.path = value
            }
            if let value = dict["Properties"] as? [String: Any?] {
                var model = AddFolderResponseBody.Dentry.Properties()
                model.fromMap(value)
                self.properties = model
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["SpaceId"] as? String {
                self.spaceId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StorageDriver"] as? String {
                self.storageDriver = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Uuid"] as? String {
                self.uuid = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var dentry: AddFolderResponseBody.Dentry?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.dentry?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentry != nil {
            map["dentry"] = self.dentry?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["dentry"] as? [String: Any?] {
            var model = AddFolderResponseBody.Dentry()
            model.fromMap(value)
            self.dentry = model
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class AddFolderResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddFolderResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddFolderResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddMeetingRoomsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: AddMeetingRoomsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = AddMeetingRoomsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class AddMeetingRoomsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class AddMeetingRoomsRequest : Tea.TeaModel {
    public class MeetingRoomsToAdd : Tea.TeaModel {
        public var roomId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.roomId != nil {
                map["RoomId"] = self.roomId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RoomId"] as? String {
                self.roomId = value
            }
        }
    }
    public var calendarId: String?

    public var eventId: String?

    public var meetingRoomsToAdd: [AddMeetingRoomsRequest.MeetingRoomsToAdd]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.meetingRoomsToAdd != nil {
            var tmp : [Any] = []
            for k in self.meetingRoomsToAdd! {
                tmp.append(k.toMap())
            }
            map["MeetingRoomsToAdd"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["MeetingRoomsToAdd"] as? [Any?] {
            var tmp : [AddMeetingRoomsRequest.MeetingRoomsToAdd] = []
            for v in value {
                if v != nil {
                    var model = AddMeetingRoomsRequest.MeetingRoomsToAdd()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.meetingRoomsToAdd = tmp
        }
    }
}

public class AddMeetingRoomsShrinkRequest : Tea.TeaModel {
    public var calendarId: String?

    public var eventId: String?

    public var meetingRoomsToAddShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.meetingRoomsToAddShrink != nil {
            map["MeetingRoomsToAdd"] = self.meetingRoomsToAddShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["MeetingRoomsToAdd"] as? String {
            self.meetingRoomsToAddShrink = value
        }
    }
}

public class AddMeetingRoomsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? Bool {
            self.result = value
        }
    }
}

public class AddMeetingRoomsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddMeetingRoomsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddMeetingRoomsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddMultiDimTableHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: AddMultiDimTableHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = AddMultiDimTableHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class AddMultiDimTableShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class AddMultiDimTableRequest : Tea.TeaModel {
    public class Fields : Tea.TeaModel {
        public var name: String?

        public var property: [String: Any]?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.property != nil {
                map["Property"] = self.property!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Property"] as? [String: Any] {
                self.property = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var baseId: String?

    public var fields: [AddMultiDimTableRequest.Fields]?

    public var name: String?

    public var tenantContext: AddMultiDimTableRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.fields != nil {
            var tmp : [Any] = []
            for k in self.fields! {
                tmp.append(k.toMap())
            }
            map["Fields"] = tmp
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["Fields"] as? [Any?] {
            var tmp : [AddMultiDimTableRequest.Fields] = []
            for v in value {
                if v != nil {
                    var model = AddMultiDimTableRequest.Fields()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.fields = tmp
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = AddMultiDimTableRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class AddMultiDimTableShrinkRequest : Tea.TeaModel {
    public var baseId: String?

    public var fieldsShrink: String?

    public var name: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.fieldsShrink != nil {
            map["Fields"] = self.fieldsShrink!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["Fields"] as? String {
            self.fieldsShrink = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class AddMultiDimTableResponseBody : Tea.TeaModel {
    public var id: String?

    public var name: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class AddMultiDimTableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddMultiDimTableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddMultiDimTableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddPermissionHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: AddPermissionHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = AddPermissionHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class AddPermissionShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class AddPermissionRequest : Tea.TeaModel {
    public class Members : Tea.TeaModel {
        public var corpId: String?

        public var id: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class Option : Tea.TeaModel {
        public var duration: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Duration"] as? Int64 {
                self.duration = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dentryUuid: String?

    public var members: [AddPermissionRequest.Members]?

    public var option: AddPermissionRequest.Option?

    public var roleId: String?

    public var tenantContext: AddPermissionRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.option?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.members != nil {
            var tmp : [Any] = []
            for k in self.members! {
                tmp.append(k.toMap())
            }
            map["Members"] = tmp
        }
        if self.option != nil {
            map["Option"] = self.option?.toMap()
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["Members"] as? [Any?] {
            var tmp : [AddPermissionRequest.Members] = []
            for v in value {
                if v != nil {
                    var model = AddPermissionRequest.Members()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.members = tmp
        }
        if let value = dict["Option"] as? [String: Any?] {
            var model = AddPermissionRequest.Option()
            model.fromMap(value)
            self.option = model
        }
        if let value = dict["RoleId"] as? String {
            self.roleId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = AddPermissionRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class AddPermissionShrinkRequest : Tea.TeaModel {
    public var dentryUuid: String?

    public var membersShrink: String?

    public var optionShrink: String?

    public var roleId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.membersShrink != nil {
            map["Members"] = self.membersShrink!
        }
        if self.optionShrink != nil {
            map["Option"] = self.optionShrink!
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["Members"] as? String {
            self.membersShrink = value
        }
        if let value = dict["Option"] as? String {
            self.optionShrink = value
        }
        if let value = dict["RoleId"] as? String {
            self.roleId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class AddPermissionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class AddPermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddPermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddPermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddRecordPermissionHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: AddRecordPermissionHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = AddRecordPermissionHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class AddRecordPermissionShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class AddRecordPermissionRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var bizType: String?

    public var conferenceId: String?

    public var tenantContext: AddRecordPermissionRequest.TenantContext?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.conferenceId != nil {
            map["ConferenceId"] = self.conferenceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["ConferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = AddRecordPermissionRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class AddRecordPermissionShrinkRequest : Tea.TeaModel {
    public var bizType: String?

    public var conferenceId: String?

    public var tenantContextShrink: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.conferenceId != nil {
            map["ConferenceId"] = self.conferenceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["ConferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class AddRecordPermissionResponseBody : Tea.TeaModel {
    public var code: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class AddRecordPermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddRecordPermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddRecordPermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddScenegroupMemberHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: AddScenegroupMemberHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = AddScenegroupMemberHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class AddScenegroupMemberShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class AddScenegroupMemberRequest : Tea.TeaModel {
    public var openConversationId: String?

    public var userIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openConversationId != nil {
            map["OpenConversationId"] = self.openConversationId!
        }
        if self.userIds != nil {
            map["UserIds"] = self.userIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenConversationId"] as? String {
            self.openConversationId = value
        }
        if let value = dict["UserIds"] as? String {
            self.userIds = value
        }
    }
}

public class AddScenegroupMemberResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class AddScenegroupMemberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddScenegroupMemberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddScenegroupMemberResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddTicketMemoHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: AddTicketMemoHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = AddTicketMemoHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class AddTicketMemoShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class AddTicketMemoRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public class TicketMemo : Tea.TeaModel {
        public class Attachments : Tea.TeaModel {
            public var fileName: String?

            public var key: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileName != nil {
                    map["FileName"] = self.fileName!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FileName"] as? String {
                    self.fileName = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
            }
        }
        public var attachments: [AddTicketMemoRequest.TicketMemo.Attachments]?

        public var memo: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attachments != nil {
                var tmp : [Any] = []
                for k in self.attachments! {
                    tmp.append(k.toMap())
                }
                map["Attachments"] = tmp
            }
            if self.memo != nil {
                map["Memo"] = self.memo!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attachments"] as? [Any?] {
                var tmp : [AddTicketMemoRequest.TicketMemo.Attachments] = []
                for v in value {
                    if v != nil {
                        var model = AddTicketMemoRequest.TicketMemo.Attachments()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.attachments = tmp
            }
            if let value = dict["Memo"] as? String {
                self.memo = value
            }
        }
    }
    public var openTeamId: String?

    public var openTicketId: String?

    public var tenantContext: AddTicketMemoRequest.TenantContext?

    public var ticketMemo: AddTicketMemoRequest.TicketMemo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
        try self.ticketMemo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTicketId != nil {
            map["OpenTicketId"] = self.openTicketId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.ticketMemo != nil {
            map["TicketMemo"] = self.ticketMemo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = AddTicketMemoRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["TicketMemo"] as? [String: Any?] {
            var model = AddTicketMemoRequest.TicketMemo()
            model.fromMap(value)
            self.ticketMemo = model
        }
    }
}

public class AddTicketMemoShrinkRequest : Tea.TeaModel {
    public var openTeamId: String?

    public var openTicketId: String?

    public var tenantContextShrink: String?

    public var ticketMemoShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTicketId != nil {
            map["OpenTicketId"] = self.openTicketId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.ticketMemoShrink != nil {
            map["TicketMemo"] = self.ticketMemoShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["TicketMemo"] as? String {
            self.ticketMemoShrink = value
        }
    }
}

public class AddTicketMemoResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class AddTicketMemoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddTicketMemoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddTicketMemoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddWorkspaceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: AddWorkspaceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = AddWorkspaceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class AddWorkspaceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class AddWorkspaceRequest : Tea.TeaModel {
    public class Option : Tea.TeaModel {
        public var description_: String?

        public var teamId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.teamId != nil {
                map["TeamId"] = self.teamId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["TeamId"] as? String {
                self.teamId = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var name: String?

    public var option: AddWorkspaceRequest.Option?

    public var tenantContext: AddWorkspaceRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.option?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.option != nil {
            map["Option"] = self.option?.toMap()
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Option"] as? [String: Any?] {
            var model = AddWorkspaceRequest.Option()
            model.fromMap(value)
            self.option = model
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = AddWorkspaceRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class AddWorkspaceShrinkRequest : Tea.TeaModel {
    public var name: String?

    public var optionShrink: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.optionShrink != nil {
            map["Option"] = self.optionShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Option"] as? String {
            self.optionShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class AddWorkspaceResponseBody : Tea.TeaModel {
    public class Workspace : Tea.TeaModel {
        public class Icon : Tea.TeaModel {
            public var type: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var corpId: String?

        public var cover: String?

        public var createTime: String?

        public var creatorId: String?

        public var description_: String?

        public var icon: AddWorkspaceResponseBody.Workspace.Icon?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var permissionRole: String?

        public var rootNodeId: String?

        public var teamId: String?

        public var type: String?

        public var url: String?

        public var workspaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.icon?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.cover != nil {
                map["Cover"] = self.cover!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.icon != nil {
                map["Icon"] = self.icon?.toMap()
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.permissionRole != nil {
                map["PermissionRole"] = self.permissionRole!
            }
            if self.rootNodeId != nil {
                map["RootNodeId"] = self.rootNodeId!
            }
            if self.teamId != nil {
                map["TeamId"] = self.teamId!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.workspaceId != nil {
                map["WorkspaceId"] = self.workspaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["Cover"] as? String {
                self.cover = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Icon"] as? [String: Any?] {
                var model = AddWorkspaceResponseBody.Workspace.Icon()
                model.fromMap(value)
                self.icon = model
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PermissionRole"] as? String {
                self.permissionRole = value
            }
            if let value = dict["RootNodeId"] as? String {
                self.rootNodeId = value
            }
            if let value = dict["TeamId"] as? String {
                self.teamId = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["WorkspaceId"] as? String {
                self.workspaceId = value
            }
        }
    }
    public var requestId: String?

    public var workspace: AddWorkspaceResponseBody.Workspace?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.workspace?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.workspace != nil {
            map["workspace"] = self.workspace?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["workspace"] as? [String: Any?] {
            var model = AddWorkspaceResponseBody.Workspace()
            model.fromMap(value)
            self.workspace = model
        }
    }
}

public class AddWorkspaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddWorkspaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddWorkspaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddWorkspaceDocMembersHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: AddWorkspaceDocMembersHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = AddWorkspaceDocMembersHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class AddWorkspaceDocMembersShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class AddWorkspaceDocMembersRequest : Tea.TeaModel {
    public class Members : Tea.TeaModel {
        public var memberId: String?

        public var memberType: String?

        public var roleType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.memberId != nil {
                map["MemberId"] = self.memberId!
            }
            if self.memberType != nil {
                map["MemberType"] = self.memberType!
            }
            if self.roleType != nil {
                map["RoleType"] = self.roleType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MemberId"] as? String {
                self.memberId = value
            }
            if let value = dict["MemberType"] as? String {
                self.memberType = value
            }
            if let value = dict["RoleType"] as? String {
                self.roleType = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var members: [AddWorkspaceDocMembersRequest.Members]?

    public var nodeId: String?

    public var tenantContext: AddWorkspaceDocMembersRequest.TenantContext?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.members != nil {
            var tmp : [Any] = []
            for k in self.members! {
                tmp.append(k.toMap())
            }
            map["Members"] = tmp
        }
        if self.nodeId != nil {
            map["NodeId"] = self.nodeId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Members"] as? [Any?] {
            var tmp : [AddWorkspaceDocMembersRequest.Members] = []
            for v in value {
                if v != nil {
                    var model = AddWorkspaceDocMembersRequest.Members()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.members = tmp
        }
        if let value = dict["NodeId"] as? String {
            self.nodeId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = AddWorkspaceDocMembersRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class AddWorkspaceDocMembersShrinkRequest : Tea.TeaModel {
    public var membersShrink: String?

    public var nodeId: String?

    public var tenantContextShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.membersShrink != nil {
            map["Members"] = self.membersShrink!
        }
        if self.nodeId != nil {
            map["NodeId"] = self.nodeId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Members"] as? String {
            self.membersShrink = value
        }
        if let value = dict["NodeId"] as? String {
            self.nodeId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class AddWorkspaceDocMembersResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddWorkspaceDocMembersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddWorkspaceDocMembersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddWorkspaceDocMembersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddWorkspaceMembersHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: AddWorkspaceMembersHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = AddWorkspaceMembersHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class AddWorkspaceMembersShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class AddWorkspaceMembersRequest : Tea.TeaModel {
    public class Members : Tea.TeaModel {
        public var memberId: String?

        public var memberType: String?

        public var roleType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.memberId != nil {
                map["MemberId"] = self.memberId!
            }
            if self.memberType != nil {
                map["MemberType"] = self.memberType!
            }
            if self.roleType != nil {
                map["RoleType"] = self.roleType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MemberId"] as? String {
                self.memberId = value
            }
            if let value = dict["MemberType"] as? String {
                self.memberType = value
            }
            if let value = dict["RoleType"] as? String {
                self.roleType = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var members: [AddWorkspaceMembersRequest.Members]?

    public var tenantContext: AddWorkspaceMembersRequest.TenantContext?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.members != nil {
            var tmp : [Any] = []
            for k in self.members! {
                tmp.append(k.toMap())
            }
            map["Members"] = tmp
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Members"] as? [Any?] {
            var tmp : [AddWorkspaceMembersRequest.Members] = []
            for v in value {
                if v != nil {
                    var model = AddWorkspaceMembersRequest.Members()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.members = tmp
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = AddWorkspaceMembersRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class AddWorkspaceMembersShrinkRequest : Tea.TeaModel {
    public var membersShrink: String?

    public var tenantContextShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.membersShrink != nil {
            map["Members"] = self.membersShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Members"] as? String {
            self.membersShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class AddWorkspaceMembersResponseBody : Tea.TeaModel {
    public var notInOrgList: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.notInOrgList != nil {
            map["NotInOrgList"] = self.notInOrgList!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NotInOrgList"] as? [String] {
            self.notInOrgList = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddWorkspaceMembersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddWorkspaceMembersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddWorkspaceMembersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AssignTicketHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: AssignTicketHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = AssignTicketHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class AssignTicketShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class AssignTicketRequest : Tea.TeaModel {
    public class Notify : Tea.TeaModel {
        public var groupNoticeReceiverUserIds: [String]?

        public var noticeAllGroupMember: Bool?

        public var workNoticeReceiverUserIds: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.groupNoticeReceiverUserIds != nil {
                map["GroupNoticeReceiverUserIds"] = self.groupNoticeReceiverUserIds!
            }
            if self.noticeAllGroupMember != nil {
                map["NoticeAllGroupMember"] = self.noticeAllGroupMember!
            }
            if self.workNoticeReceiverUserIds != nil {
                map["WorkNoticeReceiverUserIds"] = self.workNoticeReceiverUserIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["GroupNoticeReceiverUserIds"] as? [String] {
                self.groupNoticeReceiverUserIds = value
            }
            if let value = dict["NoticeAllGroupMember"] as? Bool {
                self.noticeAllGroupMember = value
            }
            if let value = dict["WorkNoticeReceiverUserIds"] as? [String] {
                self.workNoticeReceiverUserIds = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public class TicketMemo : Tea.TeaModel {
        public class Attachments : Tea.TeaModel {
            public var fileName: String?

            public var key: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileName != nil {
                    map["FileName"] = self.fileName!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FileName"] as? String {
                    self.fileName = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
            }
        }
        public var attachments: [AssignTicketRequest.TicketMemo.Attachments]?

        public var memo: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attachments != nil {
                var tmp : [Any] = []
                for k in self.attachments! {
                    tmp.append(k.toMap())
                }
                map["Attachments"] = tmp
            }
            if self.memo != nil {
                map["Memo"] = self.memo!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attachments"] as? [Any?] {
                var tmp : [AssignTicketRequest.TicketMemo.Attachments] = []
                for v in value {
                    if v != nil {
                        var model = AssignTicketRequest.TicketMemo.Attachments()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.attachments = tmp
            }
            if let value = dict["Memo"] as? String {
                self.memo = value
            }
        }
    }
    public var notify: AssignTicketRequest.Notify?

    public var openTeamId: String?

    public var openTicketId: String?

    public var processorUserIds: [String]?

    public var tenantContext: AssignTicketRequest.TenantContext?

    public var ticketMemo: AssignTicketRequest.TicketMemo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.notify?.validate()
        try self.tenantContext?.validate()
        try self.ticketMemo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.notify != nil {
            map["Notify"] = self.notify?.toMap()
        }
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTicketId != nil {
            map["OpenTicketId"] = self.openTicketId!
        }
        if self.processorUserIds != nil {
            map["ProcessorUserIds"] = self.processorUserIds!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.ticketMemo != nil {
            map["TicketMemo"] = self.ticketMemo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Notify"] as? [String: Any?] {
            var model = AssignTicketRequest.Notify()
            model.fromMap(value)
            self.notify = model
        }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["ProcessorUserIds"] as? [String] {
            self.processorUserIds = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = AssignTicketRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["TicketMemo"] as? [String: Any?] {
            var model = AssignTicketRequest.TicketMemo()
            model.fromMap(value)
            self.ticketMemo = model
        }
    }
}

public class AssignTicketShrinkRequest : Tea.TeaModel {
    public var notifyShrink: String?

    public var openTeamId: String?

    public var openTicketId: String?

    public var processorUserIdsShrink: String?

    public var tenantContextShrink: String?

    public var ticketMemoShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.notifyShrink != nil {
            map["Notify"] = self.notifyShrink!
        }
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTicketId != nil {
            map["OpenTicketId"] = self.openTicketId!
        }
        if self.processorUserIdsShrink != nil {
            map["ProcessorUserIds"] = self.processorUserIdsShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.ticketMemoShrink != nil {
            map["TicketMemo"] = self.ticketMemoShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Notify"] as? String {
            self.notifyShrink = value
        }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["ProcessorUserIds"] as? String {
            self.processorUserIdsShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["TicketMemo"] as? String {
            self.ticketMemoShrink = value
        }
    }
}

public class AssignTicketResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class AssignTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AssignTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AssignTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchGetFormDataByIdListHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: BatchGetFormDataByIdListHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = BatchGetFormDataByIdListHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class BatchGetFormDataByIdListShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class BatchGetFormDataByIdListRequest : Tea.TeaModel {
    public var appType: String?

    public var formInstanceIdList: [String]?

    public var formUuid: String?

    public var needFormInstanceValue: Bool?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formInstanceIdList != nil {
            map["FormInstanceIdList"] = self.formInstanceIdList!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.needFormInstanceValue != nil {
            map["NeedFormInstanceValue"] = self.needFormInstanceValue!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormInstanceIdList"] as? [String] {
            self.formInstanceIdList = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["NeedFormInstanceValue"] as? Bool {
            self.needFormInstanceValue = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class BatchGetFormDataByIdListShrinkRequest : Tea.TeaModel {
    public var appType: String?

    public var formInstanceIdListShrink: String?

    public var formUuid: String?

    public var needFormInstanceValue: Bool?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formInstanceIdListShrink != nil {
            map["FormInstanceIdList"] = self.formInstanceIdListShrink!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.needFormInstanceValue != nil {
            map["NeedFormInstanceValue"] = self.needFormInstanceValue!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormInstanceIdList"] as? String {
            self.formInstanceIdListShrink = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["NeedFormInstanceValue"] as? Bool {
            self.needFormInstanceValue = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class BatchGetFormDataByIdListResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public class ModifyUser : Tea.TeaModel {
            public class Name : Tea.TeaModel {
                public var nameInChinese: String?

                public var nameInEnglish: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.nameInChinese != nil {
                        map["NameInChinese"] = self.nameInChinese!
                    }
                    if self.nameInEnglish != nil {
                        map["NameInEnglish"] = self.nameInEnglish!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NameInChinese"] as? String {
                        self.nameInChinese = value
                    }
                    if let value = dict["NameInEnglish"] as? String {
                        self.nameInEnglish = value
                    }
                }
            }
            public var name: BatchGetFormDataByIdListResponseBody.Result.ModifyUser.Name?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.name?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name?.toMap()
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? [String: Any?] {
                    var model = BatchGetFormDataByIdListResponseBody.Result.ModifyUser.Name()
                    model.fromMap(value)
                    self.name = model
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class Originator : Tea.TeaModel {
            public class Name : Tea.TeaModel {
                public var nameInChinese: String?

                public var nameInEnglish: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.nameInChinese != nil {
                        map["NameInChinese"] = self.nameInChinese!
                    }
                    if self.nameInEnglish != nil {
                        map["NameInEnglish"] = self.nameInEnglish!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NameInChinese"] as? String {
                        self.nameInChinese = value
                    }
                    if let value = dict["NameInEnglish"] as? String {
                        self.nameInEnglish = value
                    }
                }
            }
            public var name: BatchGetFormDataByIdListResponseBody.Result.Originator.Name?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.name?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name?.toMap()
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? [String: Any?] {
                    var model = BatchGetFormDataByIdListResponseBody.Result.Originator.Name()
                    model.fromMap(value)
                    self.name = model
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var createTimeGMT: String?

        public var creatorUserId: String?

        public var formData: [String: Any]?

        public var formInstanceId: String?

        public var formUuid: String?

        public var id: Int64?

        public var instanceValue: String?

        public var modifiedTimeGMT: String?

        public var modifier: String?

        public var modifyUser: BatchGetFormDataByIdListResponseBody.Result.ModifyUser?

        public var originator: BatchGetFormDataByIdListResponseBody.Result.Originator?

        public var sequence: String?

        public var serialNumber: String?

        public var title: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.modifyUser?.validate()
            try self.originator?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTimeGMT != nil {
                map["CreateTimeGMT"] = self.createTimeGMT!
            }
            if self.creatorUserId != nil {
                map["CreatorUserId"] = self.creatorUserId!
            }
            if self.formData != nil {
                map["FormData"] = self.formData!
            }
            if self.formInstanceId != nil {
                map["FormInstanceId"] = self.formInstanceId!
            }
            if self.formUuid != nil {
                map["FormUuid"] = self.formUuid!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.instanceValue != nil {
                map["InstanceValue"] = self.instanceValue!
            }
            if self.modifiedTimeGMT != nil {
                map["ModifiedTimeGMT"] = self.modifiedTimeGMT!
            }
            if self.modifier != nil {
                map["Modifier"] = self.modifier!
            }
            if self.modifyUser != nil {
                map["ModifyUser"] = self.modifyUser?.toMap()
            }
            if self.originator != nil {
                map["Originator"] = self.originator?.toMap()
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTimeGMT"] as? String {
                self.createTimeGMT = value
            }
            if let value = dict["CreatorUserId"] as? String {
                self.creatorUserId = value
            }
            if let value = dict["FormData"] as? [String: Any] {
                self.formData = value
            }
            if let value = dict["FormInstanceId"] as? String {
                self.formInstanceId = value
            }
            if let value = dict["FormUuid"] as? String {
                self.formUuid = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["InstanceValue"] as? String {
                self.instanceValue = value
            }
            if let value = dict["ModifiedTimeGMT"] as? String {
                self.modifiedTimeGMT = value
            }
            if let value = dict["Modifier"] as? String {
                self.modifier = value
            }
            if let value = dict["ModifyUser"] as? [String: Any?] {
                var model = BatchGetFormDataByIdListResponseBody.Result.ModifyUser()
                model.fromMap(value)
                self.modifyUser = model
            }
            if let value = dict["Originator"] as? [String: Any?] {
                var model = BatchGetFormDataByIdListResponseBody.Result.Originator()
                model.fromMap(value)
                self.originator = model
            }
            if let value = dict["Sequence"] as? String {
                self.sequence = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var requestId: String?

    public var result: [BatchGetFormDataByIdListResponseBody.Result]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["result"] = tmp
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [Any?] {
            var tmp : [BatchGetFormDataByIdListResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = BatchGetFormDataByIdListResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class BatchGetFormDataByIdListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchGetFormDataByIdListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchGetFormDataByIdListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchRemovalByFormInstanceIdListHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: BatchRemovalByFormInstanceIdListHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = BatchRemovalByFormInstanceIdListHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class BatchRemovalByFormInstanceIdListShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class BatchRemovalByFormInstanceIdListRequest : Tea.TeaModel {
    public var appType: String?

    public var asynchronousExecution: Bool?

    public var executeExpression: Bool?

    public var formInstanceIdList: [String]?

    public var formUuid: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.asynchronousExecution != nil {
            map["AsynchronousExecution"] = self.asynchronousExecution!
        }
        if self.executeExpression != nil {
            map["ExecuteExpression"] = self.executeExpression!
        }
        if self.formInstanceIdList != nil {
            map["FormInstanceIdList"] = self.formInstanceIdList!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["AsynchronousExecution"] as? Bool {
            self.asynchronousExecution = value
        }
        if let value = dict["ExecuteExpression"] as? Bool {
            self.executeExpression = value
        }
        if let value = dict["FormInstanceIdList"] as? [String] {
            self.formInstanceIdList = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class BatchRemovalByFormInstanceIdListShrinkRequest : Tea.TeaModel {
    public var appType: String?

    public var asynchronousExecution: Bool?

    public var executeExpression: Bool?

    public var formInstanceIdListShrink: String?

    public var formUuid: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.asynchronousExecution != nil {
            map["AsynchronousExecution"] = self.asynchronousExecution!
        }
        if self.executeExpression != nil {
            map["ExecuteExpression"] = self.executeExpression!
        }
        if self.formInstanceIdListShrink != nil {
            map["FormInstanceIdList"] = self.formInstanceIdListShrink!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["AsynchronousExecution"] as? Bool {
            self.asynchronousExecution = value
        }
        if let value = dict["ExecuteExpression"] as? Bool {
            self.executeExpression = value
        }
        if let value = dict["FormInstanceIdList"] as? String {
            self.formInstanceIdListShrink = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class BatchRemovalByFormInstanceIdListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class BatchRemovalByFormInstanceIdListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchRemovalByFormInstanceIdListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchRemovalByFormInstanceIdListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchSaveFormDataHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: BatchSaveFormDataHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = BatchSaveFormDataHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class BatchSaveFormDataShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class BatchSaveFormDataRequest : Tea.TeaModel {
    public var appType: String?

    public var asynchronousExecution: Bool?

    public var formDataJsonList: [String]?

    public var formUuid: String?

    public var keepRunningAfterException: Bool?

    public var noExecuteExpression: Bool?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.asynchronousExecution != nil {
            map["AsynchronousExecution"] = self.asynchronousExecution!
        }
        if self.formDataJsonList != nil {
            map["FormDataJsonList"] = self.formDataJsonList!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.keepRunningAfterException != nil {
            map["KeepRunningAfterException"] = self.keepRunningAfterException!
        }
        if self.noExecuteExpression != nil {
            map["NoExecuteExpression"] = self.noExecuteExpression!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["AsynchronousExecution"] as? Bool {
            self.asynchronousExecution = value
        }
        if let value = dict["FormDataJsonList"] as? [String] {
            self.formDataJsonList = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["KeepRunningAfterException"] as? Bool {
            self.keepRunningAfterException = value
        }
        if let value = dict["NoExecuteExpression"] as? Bool {
            self.noExecuteExpression = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class BatchSaveFormDataShrinkRequest : Tea.TeaModel {
    public var appType: String?

    public var asynchronousExecution: Bool?

    public var formDataJsonListShrink: String?

    public var formUuid: String?

    public var keepRunningAfterException: Bool?

    public var noExecuteExpression: Bool?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.asynchronousExecution != nil {
            map["AsynchronousExecution"] = self.asynchronousExecution!
        }
        if self.formDataJsonListShrink != nil {
            map["FormDataJsonList"] = self.formDataJsonListShrink!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.keepRunningAfterException != nil {
            map["KeepRunningAfterException"] = self.keepRunningAfterException!
        }
        if self.noExecuteExpression != nil {
            map["NoExecuteExpression"] = self.noExecuteExpression!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["AsynchronousExecution"] as? Bool {
            self.asynchronousExecution = value
        }
        if let value = dict["FormDataJsonList"] as? String {
            self.formDataJsonListShrink = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["KeepRunningAfterException"] as? Bool {
            self.keepRunningAfterException = value
        }
        if let value = dict["NoExecuteExpression"] as? Bool {
            self.noExecuteExpression = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class BatchSaveFormDataResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: [String]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [String] {
            self.result = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class BatchSaveFormDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchSaveFormDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchSaveFormDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchUpdateFormDataByInstanceIdHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: BatchUpdateFormDataByInstanceIdHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = BatchUpdateFormDataByInstanceIdHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class BatchUpdateFormDataByInstanceIdShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class BatchUpdateFormDataByInstanceIdRequest : Tea.TeaModel {
    public var appType: String?

    public var asynchronousExecution: Bool?

    public var formInstanceIdList: [String]?

    public var formUuid: String?

    public var ignoreEmpty: Bool?

    public var noExecuteExpression: Bool?

    public var systemToken: String?

    public var updateFormDataJson: String?

    public var useLatestFormSchemaVersion: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.asynchronousExecution != nil {
            map["AsynchronousExecution"] = self.asynchronousExecution!
        }
        if self.formInstanceIdList != nil {
            map["FormInstanceIdList"] = self.formInstanceIdList!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.ignoreEmpty != nil {
            map["IgnoreEmpty"] = self.ignoreEmpty!
        }
        if self.noExecuteExpression != nil {
            map["NoExecuteExpression"] = self.noExecuteExpression!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.updateFormDataJson != nil {
            map["UpdateFormDataJson"] = self.updateFormDataJson!
        }
        if self.useLatestFormSchemaVersion != nil {
            map["UseLatestFormSchemaVersion"] = self.useLatestFormSchemaVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["AsynchronousExecution"] as? Bool {
            self.asynchronousExecution = value
        }
        if let value = dict["FormInstanceIdList"] as? [String] {
            self.formInstanceIdList = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["IgnoreEmpty"] as? Bool {
            self.ignoreEmpty = value
        }
        if let value = dict["NoExecuteExpression"] as? Bool {
            self.noExecuteExpression = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["UpdateFormDataJson"] as? String {
            self.updateFormDataJson = value
        }
        if let value = dict["UseLatestFormSchemaVersion"] as? Bool {
            self.useLatestFormSchemaVersion = value
        }
    }
}

public class BatchUpdateFormDataByInstanceIdShrinkRequest : Tea.TeaModel {
    public var appType: String?

    public var asynchronousExecution: Bool?

    public var formInstanceIdListShrink: String?

    public var formUuid: String?

    public var ignoreEmpty: Bool?

    public var noExecuteExpression: Bool?

    public var systemToken: String?

    public var updateFormDataJson: String?

    public var useLatestFormSchemaVersion: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.asynchronousExecution != nil {
            map["AsynchronousExecution"] = self.asynchronousExecution!
        }
        if self.formInstanceIdListShrink != nil {
            map["FormInstanceIdList"] = self.formInstanceIdListShrink!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.ignoreEmpty != nil {
            map["IgnoreEmpty"] = self.ignoreEmpty!
        }
        if self.noExecuteExpression != nil {
            map["NoExecuteExpression"] = self.noExecuteExpression!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.updateFormDataJson != nil {
            map["UpdateFormDataJson"] = self.updateFormDataJson!
        }
        if self.useLatestFormSchemaVersion != nil {
            map["UseLatestFormSchemaVersion"] = self.useLatestFormSchemaVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["AsynchronousExecution"] as? Bool {
            self.asynchronousExecution = value
        }
        if let value = dict["FormInstanceIdList"] as? String {
            self.formInstanceIdListShrink = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["IgnoreEmpty"] as? Bool {
            self.ignoreEmpty = value
        }
        if let value = dict["NoExecuteExpression"] as? Bool {
            self.noExecuteExpression = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["UpdateFormDataJson"] as? String {
            self.updateFormDataJson = value
        }
        if let value = dict["UseLatestFormSchemaVersion"] as? Bool {
            self.useLatestFormSchemaVersion = value
        }
    }
}

public class BatchUpdateFormDataByInstanceIdResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: [String]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [String] {
            self.result = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class BatchUpdateFormDataByInstanceIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchUpdateFormDataByInstanceIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchUpdateFormDataByInstanceIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchUpdateFormDataByInstanceMapHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: BatchUpdateFormDataByInstanceMapHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = BatchUpdateFormDataByInstanceMapHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class BatchUpdateFormDataByInstanceMapShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class BatchUpdateFormDataByInstanceMapRequest : Tea.TeaModel {
    public var appType: String?

    public var asynchronousExecution: Bool?

    public var formUuid: String?

    public var ignoreEmpty: Bool?

    public var noExecuteExpression: Bool?

    public var systemToken: String?

    public var updateFormDataJsonMap: [String: Any]?

    public var useLatestFormSchemaVersion: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.asynchronousExecution != nil {
            map["AsynchronousExecution"] = self.asynchronousExecution!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.ignoreEmpty != nil {
            map["IgnoreEmpty"] = self.ignoreEmpty!
        }
        if self.noExecuteExpression != nil {
            map["NoExecuteExpression"] = self.noExecuteExpression!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.updateFormDataJsonMap != nil {
            map["UpdateFormDataJsonMap"] = self.updateFormDataJsonMap!
        }
        if self.useLatestFormSchemaVersion != nil {
            map["UseLatestFormSchemaVersion"] = self.useLatestFormSchemaVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["AsynchronousExecution"] as? Bool {
            self.asynchronousExecution = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["IgnoreEmpty"] as? Bool {
            self.ignoreEmpty = value
        }
        if let value = dict["NoExecuteExpression"] as? Bool {
            self.noExecuteExpression = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["UpdateFormDataJsonMap"] as? [String: Any] {
            self.updateFormDataJsonMap = value
        }
        if let value = dict["UseLatestFormSchemaVersion"] as? Bool {
            self.useLatestFormSchemaVersion = value
        }
    }
}

public class BatchUpdateFormDataByInstanceMapShrinkRequest : Tea.TeaModel {
    public var appType: String?

    public var asynchronousExecution: Bool?

    public var formUuid: String?

    public var ignoreEmpty: Bool?

    public var noExecuteExpression: Bool?

    public var systemToken: String?

    public var updateFormDataJsonMapShrink: String?

    public var useLatestFormSchemaVersion: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.asynchronousExecution != nil {
            map["AsynchronousExecution"] = self.asynchronousExecution!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.ignoreEmpty != nil {
            map["IgnoreEmpty"] = self.ignoreEmpty!
        }
        if self.noExecuteExpression != nil {
            map["NoExecuteExpression"] = self.noExecuteExpression!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.updateFormDataJsonMapShrink != nil {
            map["UpdateFormDataJsonMap"] = self.updateFormDataJsonMapShrink!
        }
        if self.useLatestFormSchemaVersion != nil {
            map["UseLatestFormSchemaVersion"] = self.useLatestFormSchemaVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["AsynchronousExecution"] as? Bool {
            self.asynchronousExecution = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["IgnoreEmpty"] as? Bool {
            self.ignoreEmpty = value
        }
        if let value = dict["NoExecuteExpression"] as? Bool {
            self.noExecuteExpression = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["UpdateFormDataJsonMap"] as? String {
            self.updateFormDataJsonMapShrink = value
        }
        if let value = dict["UseLatestFormSchemaVersion"] as? Bool {
            self.useLatestFormSchemaVersion = value
        }
    }
}

public class BatchUpdateFormDataByInstanceMapResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: [String]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [String] {
            self.result = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class BatchUpdateFormDataByInstanceMapResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchUpdateFormDataByInstanceMapResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchUpdateFormDataByInstanceMapResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CancelScheduleConferenceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CancelScheduleConferenceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CancelScheduleConferenceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CancelScheduleConferenceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CancelScheduleConferenceRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var scheduleConferenceId: String?

    public var tenantContext: CancelScheduleConferenceRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.scheduleConferenceId != nil {
            map["ScheduleConferenceId"] = self.scheduleConferenceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ScheduleConferenceId"] as? String {
            self.scheduleConferenceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CancelScheduleConferenceRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class CancelScheduleConferenceShrinkRequest : Tea.TeaModel {
    public var scheduleConferenceId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.scheduleConferenceId != nil {
            map["ScheduleConferenceId"] = self.scheduleConferenceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ScheduleConferenceId"] as? String {
            self.scheduleConferenceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class CancelScheduleConferenceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class CancelScheduleConferenceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CancelScheduleConferenceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CancelScheduleConferenceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckAlibabaStaffHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CheckAlibabaStaffHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CheckAlibabaStaffHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CheckAlibabaStaffShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CheckAlibabaStaffRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var mobile: String?

    public var tenantContext: CheckAlibabaStaffRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mobile != nil {
            map["Mobile"] = self.mobile!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Mobile"] as? String {
            self.mobile = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CheckAlibabaStaffRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class CheckAlibabaStaffShrinkRequest : Tea.TeaModel {
    public var mobile: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mobile != nil {
            map["Mobile"] = self.mobile!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Mobile"] as? String {
            self.mobile = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class CheckAlibabaStaffResponseBody : Tea.TeaModel {
    public var isAlibabaStaff: Bool?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.isAlibabaStaff != nil {
            map["isAlibabaStaff"] = self.isAlibabaStaff!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["isAlibabaStaff"] as? Bool {
            self.isAlibabaStaff = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class CheckAlibabaStaffResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckAlibabaStaffResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckAlibabaStaffResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckUserIsGroupMemberHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CheckUserIsGroupMemberHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CheckUserIsGroupMemberHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CheckUserIsGroupMemberShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CheckUserIsGroupMemberRequest : Tea.TeaModel {
    public var openConversationId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openConversationId != nil {
            map["OpenConversationId"] = self.openConversationId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenConversationId"] as? String {
            self.openConversationId = value
        }
    }
}

public class CheckUserIsGroupMemberResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? Bool {
            self.result = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class CheckUserIsGroupMemberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckUserIsGroupMemberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckUserIsGroupMemberResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ClearHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ClearHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ClearHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ClearShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ClearRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var rangeAddress: String?

    public var sheetId: String?

    public var tenantContext: ClearRequest.TenantContext?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.rangeAddress != nil {
            map["RangeAddress"] = self.rangeAddress!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RangeAddress"] as? String {
            self.rangeAddress = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ClearRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class ClearShrinkRequest : Tea.TeaModel {
    public var rangeAddress: String?

    public var sheetId: String?

    public var tenantContextShrink: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.rangeAddress != nil {
            map["RangeAddress"] = self.rangeAddress!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RangeAddress"] as? String {
            self.rangeAddress = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class ClearResponseBody : Tea.TeaModel {
    public var a1Notation: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.a1Notation != nil {
            map["a1Notation"] = self.a1Notation!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["a1Notation"] as? String {
            self.a1Notation = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class ClearResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ClearResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ClearResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ClearDataHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ClearDataHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ClearDataHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ClearDataShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ClearDataRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var rangeAddress: String?

    public var sheetId: String?

    public var tenantContext: ClearDataRequest.TenantContext?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.rangeAddress != nil {
            map["RangeAddress"] = self.rangeAddress!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RangeAddress"] as? String {
            self.rangeAddress = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ClearDataRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class ClearDataShrinkRequest : Tea.TeaModel {
    public var rangeAddress: String?

    public var sheetId: String?

    public var tenantContextShrink: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.rangeAddress != nil {
            map["RangeAddress"] = self.rangeAddress!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RangeAddress"] as? String {
            self.rangeAddress = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class ClearDataResponseBody : Tea.TeaModel {
    public var a1Notation: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.a1Notation != nil {
            map["a1Notation"] = self.a1Notation!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["a1Notation"] as? String {
            self.a1Notation = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class ClearDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ClearDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ClearDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CloseVideoConferenceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CloseVideoConferenceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CloseVideoConferenceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CloseVideoConferenceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CloseVideoConferenceRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: CloseVideoConferenceRequest.TenantContext?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CloseVideoConferenceRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class CloseVideoConferenceShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class CloseVideoConferenceResponseBody : Tea.TeaModel {
    public var cause: String?

    public var code: Int64?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cause != nil {
            map["cause"] = self.cause!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["cause"] as? String {
            self.cause = value
        }
        if let value = dict["code"] as? Int64 {
            self.code = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class CloseVideoConferenceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CloseVideoConferenceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CloseVideoConferenceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CommentListReportHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CommentListReportHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CommentListReportHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CommentListReportShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CommentListReportRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var offset: Int64?

    public var reportId: String?

    public var size: Int64?

    public var tenantContext: CommentListReportRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.offset != nil {
            map["Offset"] = self.offset!
        }
        if self.reportId != nil {
            map["ReportId"] = self.reportId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Offset"] as? Int64 {
            self.offset = value
        }
        if let value = dict["ReportId"] as? String {
            self.reportId = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CommentListReportRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class CommentListReportShrinkRequest : Tea.TeaModel {
    public var offset: Int64?

    public var reportId: String?

    public var size: Int64?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.offset != nil {
            map["Offset"] = self.offset!
        }
        if self.reportId != nil {
            map["ReportId"] = self.reportId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Offset"] as? Int64 {
            self.offset = value
        }
        if let value = dict["ReportId"] as? String {
            self.reportId = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class CommentListReportResponseBody : Tea.TeaModel {
    public class Comments : Tea.TeaModel {
        public var content: String?

        public var createTime: String?

        public var userid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.userid != nil {
                map["Userid"] = self.userid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Userid"] as? String {
                self.userid = value
            }
        }
    }
    public var comments: [CommentListReportResponseBody.Comments]?

    public var hasMore: Bool?

    public var nextCursor: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.comments != nil {
            var tmp : [Any] = []
            for k in self.comments! {
                tmp.append(k.toMap())
            }
            map["comments"] = tmp
        }
        if self.hasMore != nil {
            map["hasMore"] = self.hasMore!
        }
        if self.nextCursor != nil {
            map["nextCursor"] = self.nextCursor!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["comments"] as? [Any?] {
            var tmp : [CommentListReportResponseBody.Comments] = []
            for v in value {
                if v != nil {
                    var model = CommentListReportResponseBody.Comments()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.comments = tmp
        }
        if let value = dict["hasMore"] as? Bool {
            self.hasMore = value
        }
        if let value = dict["nextCursor"] as? Int64 {
            self.nextCursor = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class CommentListReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CommentListReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CommentListReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CommitFileHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CommitFileHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CommitFileHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CommitFileShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CommitFileRequest : Tea.TeaModel {
    public class Option : Tea.TeaModel {
        public class AppProperties : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public var visibility: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                if self.visibility != nil {
                    map["Visibility"] = self.visibility!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
                if let value = dict["Visibility"] as? String {
                    self.visibility = value
                }
            }
        }
        public var appProperties: [CommitFileRequest.Option.AppProperties]?

        public var conflictStrategy: String?

        public var convertToOnlineDoc: Bool?

        public var convertToOnlineDocTargetDocumentType: String?

        public var size: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appProperties != nil {
                var tmp : [Any] = []
                for k in self.appProperties! {
                    tmp.append(k.toMap())
                }
                map["AppProperties"] = tmp
            }
            if self.conflictStrategy != nil {
                map["ConflictStrategy"] = self.conflictStrategy!
            }
            if self.convertToOnlineDoc != nil {
                map["ConvertToOnlineDoc"] = self.convertToOnlineDoc!
            }
            if self.convertToOnlineDocTargetDocumentType != nil {
                map["ConvertToOnlineDocTargetDocumentType"] = self.convertToOnlineDocTargetDocumentType!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppProperties"] as? [Any?] {
                var tmp : [CommitFileRequest.Option.AppProperties] = []
                for v in value {
                    if v != nil {
                        var model = CommitFileRequest.Option.AppProperties()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.appProperties = tmp
            }
            if let value = dict["ConflictStrategy"] as? String {
                self.conflictStrategy = value
            }
            if let value = dict["ConvertToOnlineDoc"] as? Bool {
                self.convertToOnlineDoc = value
            }
            if let value = dict["ConvertToOnlineDocTargetDocumentType"] as? String {
                self.convertToOnlineDocTargetDocumentType = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var name: String?

    public var option: CommitFileRequest.Option?

    public var parentDentryUuid: String?

    public var tenantContext: CommitFileRequest.TenantContext?

    public var uploadKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.option?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.option != nil {
            map["Option"] = self.option?.toMap()
        }
        if self.parentDentryUuid != nil {
            map["ParentDentryUuid"] = self.parentDentryUuid!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.uploadKey != nil {
            map["UploadKey"] = self.uploadKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Option"] as? [String: Any?] {
            var model = CommitFileRequest.Option()
            model.fromMap(value)
            self.option = model
        }
        if let value = dict["ParentDentryUuid"] as? String {
            self.parentDentryUuid = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CommitFileRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["UploadKey"] as? String {
            self.uploadKey = value
        }
    }
}

public class CommitFileShrinkRequest : Tea.TeaModel {
    public var name: String?

    public var optionShrink: String?

    public var parentDentryUuid: String?

    public var tenantContextShrink: String?

    public var uploadKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.optionShrink != nil {
            map["Option"] = self.optionShrink!
        }
        if self.parentDentryUuid != nil {
            map["ParentDentryUuid"] = self.parentDentryUuid!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.uploadKey != nil {
            map["UploadKey"] = self.uploadKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Option"] as? String {
            self.optionShrink = value
        }
        if let value = dict["ParentDentryUuid"] as? String {
            self.parentDentryUuid = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["UploadKey"] as? String {
            self.uploadKey = value
        }
    }
}

public class CommitFileResponseBody : Tea.TeaModel {
    public class Dentry : Tea.TeaModel {
        public class Properties : Tea.TeaModel {
            public var readOnly: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.readOnly != nil {
                    map["ReadOnly"] = self.readOnly!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ReadOnly"] as? Bool {
                    self.readOnly = value
                }
            }
        }
        public class Thumbnail : Tea.TeaModel {
            public var height: Int32?

            public var url: String?

            public var width: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Height"] as? Int32 {
                    self.height = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
                if let value = dict["Width"] as? Int32 {
                    self.width = value
                }
            }
        }
        public var appProperties: [String: [DentryAppPropertiesValue]]?

        public var category: String?

        public var createTime: String?

        public var creatorId: String?

        public var extension_: String?

        public var id: String?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var parentId: String?

        public var partitionType: String?

        public var path: String?

        public var properties: CommitFileResponseBody.Dentry.Properties?

        public var size: Int64?

        public var spaceId: String?

        public var status: String?

        public var storageDriver: String?

        public var thumbnail: CommitFileResponseBody.Dentry.Thumbnail?

        public var type: String?

        public var uuid: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.properties?.validate()
            try self.thumbnail?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appProperties != nil {
                var tmp : [String: Any] = [:]
                for (k, v) in self.appProperties! {
                    var l1 : [Any] = []
                    for k1 in v {
                        l1.append(k1.toMap())
                    }
                    tmp[k] = l1
                }
                map["AppProperties"] = tmp
            }
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.parentId != nil {
                map["ParentId"] = self.parentId!
            }
            if self.partitionType != nil {
                map["PartitionType"] = self.partitionType!
            }
            if self.path != nil {
                map["Path"] = self.path!
            }
            if self.properties != nil {
                map["Properties"] = self.properties?.toMap()
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.spaceId != nil {
                map["SpaceId"] = self.spaceId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageDriver != nil {
                map["StorageDriver"] = self.storageDriver!
            }
            if self.thumbnail != nil {
                map["Thumbnail"] = self.thumbnail?.toMap()
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.uuid != nil {
                map["Uuid"] = self.uuid!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppProperties"] as? [String: Any?] {
                var tmp : [String: [DentryAppPropertiesValue]] = [:]
                for (k, v) in value {
                    var l1 : [DentryAppPropertiesValue] = []
                    for v1 in v as! [Any?] {
                        if v1 != nil {
                            var model = DentryAppPropertiesValue()
                            if v1 != nil {
                                model.fromMap(v1 as? [String: Any?])
                            }
                            l1.append(model)
                        }
                    }
                    tmp[k] = l1
                }
                self.appProperties = tmp
            }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ParentId"] as? String {
                self.parentId = value
            }
            if let value = dict["PartitionType"] as? String {
                self.partitionType = value
            }
            if let value = dict["Path"] as? String {
                self.path = value
            }
            if let value = dict["Properties"] as? [String: Any?] {
                var model = CommitFileResponseBody.Dentry.Properties()
                model.fromMap(value)
                self.properties = model
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["SpaceId"] as? String {
                self.spaceId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StorageDriver"] as? String {
                self.storageDriver = value
            }
            if let value = dict["Thumbnail"] as? [String: Any?] {
                var model = CommitFileResponseBody.Dentry.Thumbnail()
                model.fromMap(value)
                self.thumbnail = model
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Uuid"] as? String {
                self.uuid = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var dentry: CommitFileResponseBody.Dentry?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.dentry?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentry != nil {
            map["dentry"] = self.dentry?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["dentry"] as? [String: Any?] {
            var model = CommitFileResponseBody.Dentry()
            model.fromMap(value)
            self.dentry = model
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class CommitFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CommitFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CommitFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CopyDentryHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CopyDentryHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CopyDentryHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CopyDentryShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CopyDentryRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dentryId: String?

    public var name: String?

    public var spaceId: String?

    public var targetSpaceId: String?

    public var tenantContext: CopyDentryRequest.TenantContext?

    public var toNextDentryId: String?

    public var toParentDentryId: String?

    public var toPrevDentryId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryId != nil {
            map["DentryId"] = self.dentryId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.targetSpaceId != nil {
            map["TargetSpaceId"] = self.targetSpaceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.toNextDentryId != nil {
            map["ToNextDentryId"] = self.toNextDentryId!
        }
        if self.toParentDentryId != nil {
            map["ToParentDentryId"] = self.toParentDentryId!
        }
        if self.toPrevDentryId != nil {
            map["ToPrevDentryId"] = self.toPrevDentryId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TargetSpaceId"] as? String {
            self.targetSpaceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CopyDentryRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["ToNextDentryId"] as? String {
            self.toNextDentryId = value
        }
        if let value = dict["ToParentDentryId"] as? String {
            self.toParentDentryId = value
        }
        if let value = dict["ToPrevDentryId"] as? String {
            self.toPrevDentryId = value
        }
    }
}

public class CopyDentryShrinkRequest : Tea.TeaModel {
    public var dentryId: String?

    public var name: String?

    public var spaceId: String?

    public var targetSpaceId: String?

    public var tenantContextShrink: String?

    public var toNextDentryId: String?

    public var toParentDentryId: String?

    public var toPrevDentryId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryId != nil {
            map["DentryId"] = self.dentryId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.targetSpaceId != nil {
            map["TargetSpaceId"] = self.targetSpaceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.toNextDentryId != nil {
            map["ToNextDentryId"] = self.toNextDentryId!
        }
        if self.toParentDentryId != nil {
            map["ToParentDentryId"] = self.toParentDentryId!
        }
        if self.toPrevDentryId != nil {
            map["ToPrevDentryId"] = self.toPrevDentryId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TargetSpaceId"] as? String {
            self.targetSpaceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["ToNextDentryId"] as? String {
            self.toNextDentryId = value
        }
        if let value = dict["ToParentDentryId"] as? String {
            self.toParentDentryId = value
        }
        if let value = dict["ToPrevDentryId"] as? String {
            self.toPrevDentryId = value
        }
    }
}

public class CopyDentryResponseBody : Tea.TeaModel {
    public class LinkSourceInfo : Tea.TeaModel {
        public class IconUrl : Tea.TeaModel {
            public var line: String?

            public var small: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.line != nil {
                    map["Line"] = self.line!
                }
                if self.small != nil {
                    map["Small"] = self.small!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Line"] as? String {
                    self.line = value
                }
                if let value = dict["Small"] as? String {
                    self.small = value
                }
            }
        }
        public var extension_: String?

        public var iconUrl: CopyDentryResponseBody.LinkSourceInfo.IconUrl?

        public var id: String?

        public var linkType: Int64?

        public var spaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.iconUrl?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.iconUrl != nil {
                map["IconUrl"] = self.iconUrl?.toMap()
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.linkType != nil {
                map["LinkType"] = self.linkType!
            }
            if self.spaceId != nil {
                map["SpaceId"] = self.spaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["IconUrl"] as? [String: Any?] {
                var model = CopyDentryResponseBody.LinkSourceInfo.IconUrl()
                model.fromMap(value)
                self.iconUrl = model
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["LinkType"] as? Int64 {
                self.linkType = value
            }
            if let value = dict["SpaceId"] as? String {
                self.spaceId = value
            }
        }
    }
    public class Space : Tea.TeaModel {
        public class HdIconVO : Tea.TeaModel {
            public var icon: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.icon != nil {
                    map["Icon"] = self.icon!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Icon"] as? String {
                    self.icon = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class IconVO : Tea.TeaModel {
            public var icon: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.icon != nil {
                    map["Icon"] = self.icon!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Icon"] as? String {
                    self.icon = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class Owner : Tea.TeaModel {
            public var name: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class RecentList : Tea.TeaModel {
            public class Creator : Tea.TeaModel {
                public var name: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public class LinkSourceInfo : Tea.TeaModel {
                public class IconUrl : Tea.TeaModel {
                    public var line: String?

                    public var small: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.line != nil {
                            map["Line"] = self.line!
                        }
                        if self.small != nil {
                            map["Small"] = self.small!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Line"] as? String {
                            self.line = value
                        }
                        if let value = dict["Small"] as? String {
                            self.small = value
                        }
                    }
                }
                public var extension_: String?

                public var iconUrl: CopyDentryResponseBody.Space.RecentList.LinkSourceInfo.IconUrl?

                public var id: String?

                public var linkType: Int64?

                public var spaceId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.iconUrl?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.extension_ != nil {
                        map["Extension"] = self.extension_!
                    }
                    if self.iconUrl != nil {
                        map["IconUrl"] = self.iconUrl?.toMap()
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.linkType != nil {
                        map["LinkType"] = self.linkType!
                    }
                    if self.spaceId != nil {
                        map["SpaceId"] = self.spaceId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Extension"] as? String {
                        self.extension_ = value
                    }
                    if let value = dict["IconUrl"] as? [String: Any?] {
                        var model = CopyDentryResponseBody.Space.RecentList.LinkSourceInfo.IconUrl()
                        model.fromMap(value)
                        self.iconUrl = model
                    }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["LinkType"] as? Int64 {
                        self.linkType = value
                    }
                    if let value = dict["SpaceId"] as? String {
                        self.spaceId = value
                    }
                }
            }
            public class StatisticalInfo : Tea.TeaModel {
                public var wordCount: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.wordCount != nil {
                        map["WordCount"] = self.wordCount!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["WordCount"] as? Int64 {
                        self.wordCount = value
                    }
                }
            }
            public class Updater : Tea.TeaModel {
                public var name: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public class VisitorInfo : Tea.TeaModel {
                public var dentryActions: [String]?

                public var roleCode: String?

                public var spaceActions: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dentryActions != nil {
                        map["DentryActions"] = self.dentryActions!
                    }
                    if self.roleCode != nil {
                        map["RoleCode"] = self.roleCode!
                    }
                    if self.spaceActions != nil {
                        map["SpaceActions"] = self.spaceActions!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DentryActions"] as? [String] {
                        self.dentryActions = value
                    }
                    if let value = dict["RoleCode"] as? String {
                        self.roleCode = value
                    }
                    if let value = dict["SpaceActions"] as? [String] {
                        self.spaceActions = value
                    }
                }
            }
            public var contentType: String?

            public var createdTime: Int64?

            public var creator: CopyDentryResponseBody.Space.RecentList.Creator?

            public var dentryId: String?

            public var dentryType: String?

            public var dentryUuid: String?

            public var docKey: String?

            public var extension_: String?

            public var hasChildren: Bool?

            public var linkSourceInfo: CopyDentryResponseBody.Space.RecentList.LinkSourceInfo?

            public var name: String?

            public var path: String?

            public var space: Any?

            public var spaceId: String?

            public var statisticalInfo: CopyDentryResponseBody.Space.RecentList.StatisticalInfo?

            public var updatedTime: Int64?

            public var updater: CopyDentryResponseBody.Space.RecentList.Updater?

            public var url: String?

            public var visitorInfo: CopyDentryResponseBody.Space.RecentList.VisitorInfo?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.creator?.validate()
                try self.linkSourceInfo?.validate()
                try self.statisticalInfo?.validate()
                try self.updater?.validate()
                try self.visitorInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contentType != nil {
                    map["ContentType"] = self.contentType!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator?.toMap()
                }
                if self.dentryId != nil {
                    map["DentryId"] = self.dentryId!
                }
                if self.dentryType != nil {
                    map["DentryType"] = self.dentryType!
                }
                if self.dentryUuid != nil {
                    map["DentryUuid"] = self.dentryUuid!
                }
                if self.docKey != nil {
                    map["DocKey"] = self.docKey!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.hasChildren != nil {
                    map["HasChildren"] = self.hasChildren!
                }
                if self.linkSourceInfo != nil {
                    map["LinkSourceInfo"] = self.linkSourceInfo?.toMap()
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.space != nil {
                    map["Space"] = self.space!
                }
                if self.spaceId != nil {
                    map["SpaceId"] = self.spaceId!
                }
                if self.statisticalInfo != nil {
                    map["StatisticalInfo"] = self.statisticalInfo?.toMap()
                }
                if self.updatedTime != nil {
                    map["UpdatedTime"] = self.updatedTime!
                }
                if self.updater != nil {
                    map["Updater"] = self.updater?.toMap()
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                if self.visitorInfo != nil {
                    map["VisitorInfo"] = self.visitorInfo?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContentType"] as? String {
                    self.contentType = value
                }
                if let value = dict["CreatedTime"] as? Int64 {
                    self.createdTime = value
                }
                if let value = dict["Creator"] as? [String: Any?] {
                    var model = CopyDentryResponseBody.Space.RecentList.Creator()
                    model.fromMap(value)
                    self.creator = model
                }
                if let value = dict["DentryId"] as? String {
                    self.dentryId = value
                }
                if let value = dict["DentryType"] as? String {
                    self.dentryType = value
                }
                if let value = dict["DentryUuid"] as? String {
                    self.dentryUuid = value
                }
                if let value = dict["DocKey"] as? String {
                    self.docKey = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["HasChildren"] as? Bool {
                    self.hasChildren = value
                }
                if let value = dict["LinkSourceInfo"] as? [String: Any?] {
                    var model = CopyDentryResponseBody.Space.RecentList.LinkSourceInfo()
                    model.fromMap(value)
                    self.linkSourceInfo = model
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["Space"] as? Any {
                    self.space = value
                }
                if let value = dict["SpaceId"] as? String {
                    self.spaceId = value
                }
                if let value = dict["StatisticalInfo"] as? [String: Any?] {
                    var model = CopyDentryResponseBody.Space.RecentList.StatisticalInfo()
                    model.fromMap(value)
                    self.statisticalInfo = model
                }
                if let value = dict["UpdatedTime"] as? Int64 {
                    self.updatedTime = value
                }
                if let value = dict["Updater"] as? [String: Any?] {
                    var model = CopyDentryResponseBody.Space.RecentList.Updater()
                    model.fromMap(value)
                    self.updater = model
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
                if let value = dict["VisitorInfo"] as? [String: Any?] {
                    var model = CopyDentryResponseBody.Space.RecentList.VisitorInfo()
                    model.fromMap(value)
                    self.visitorInfo = model
                }
            }
        }
        public class VisitorInfo : Tea.TeaModel {
            public var dentryActions: [String]?

            public var roleCode: String?

            public var spaceActions: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dentryActions != nil {
                    map["DentryActions"] = self.dentryActions!
                }
                if self.roleCode != nil {
                    map["RoleCode"] = self.roleCode!
                }
                if self.spaceActions != nil {
                    map["SpaceActions"] = self.spaceActions!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DentryActions"] as? [String] {
                    self.dentryActions = value
                }
                if let value = dict["RoleCode"] as? String {
                    self.roleCode = value
                }
                if let value = dict["SpaceActions"] as? [String] {
                    self.spaceActions = value
                }
            }
        }
        public var cover: String?

        public var description_: String?

        public var hdIconVO: CopyDentryResponseBody.Space.HdIconVO?

        public var iconVO: CopyDentryResponseBody.Space.IconVO?

        public var id: String?

        public var name: String?

        public var owner: CopyDentryResponseBody.Space.Owner?

        public var recentList: [CopyDentryResponseBody.Space.RecentList]?

        public var type: Int32?

        public var url: String?

        public var visitorInfo: CopyDentryResponseBody.Space.VisitorInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.hdIconVO?.validate()
            try self.iconVO?.validate()
            try self.owner?.validate()
            try self.visitorInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cover != nil {
                map["Cover"] = self.cover!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.hdIconVO != nil {
                map["HdIconVO"] = self.hdIconVO?.toMap()
            }
            if self.iconVO != nil {
                map["IconVO"] = self.iconVO?.toMap()
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.owner != nil {
                map["Owner"] = self.owner?.toMap()
            }
            if self.recentList != nil {
                var tmp : [Any] = []
                for k in self.recentList! {
                    tmp.append(k.toMap())
                }
                map["RecentList"] = tmp
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.visitorInfo != nil {
                map["VisitorInfo"] = self.visitorInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Cover"] as? String {
                self.cover = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["HdIconVO"] as? [String: Any?] {
                var model = CopyDentryResponseBody.Space.HdIconVO()
                model.fromMap(value)
                self.hdIconVO = model
            }
            if let value = dict["IconVO"] as? [String: Any?] {
                var model = CopyDentryResponseBody.Space.IconVO()
                model.fromMap(value)
                self.iconVO = model
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Owner"] as? [String: Any?] {
                var model = CopyDentryResponseBody.Space.Owner()
                model.fromMap(value)
                self.owner = model
            }
            if let value = dict["RecentList"] as? [Any?] {
                var tmp : [CopyDentryResponseBody.Space.RecentList] = []
                for v in value {
                    if v != nil {
                        var model = CopyDentryResponseBody.Space.RecentList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.recentList = tmp
            }
            if let value = dict["Type"] as? Int32 {
                self.type = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["VisitorInfo"] as? [String: Any?] {
                var model = CopyDentryResponseBody.Space.VisitorInfo()
                model.fromMap(value)
                self.visitorInfo = model
            }
        }
    }
    public var contentType: String?

    public var createdTime: Int64?

    public var creator: [String: Any]?

    public var dentryId: String?

    public var dentryType: String?

    public var dentryUuid: String?

    public var docKey: String?

    public var extension_: String?

    public var hasChildren: Bool?

    public var linkSourceInfo: CopyDentryResponseBody.LinkSourceInfo?

    public var name: String?

    public var path: String?

    public var requestId: String?

    public var space: CopyDentryResponseBody.Space?

    public var spaceId: String?

    public var updatedTime: Int64?

    public var updater: [String: Any]?

    public var url: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public var visitorInfo: [String: Any]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.linkSourceInfo?.validate()
        try self.space?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contentType != nil {
            map["contentType"] = self.contentType!
        }
        if self.createdTime != nil {
            map["createdTime"] = self.createdTime!
        }
        if self.creator != nil {
            map["creator"] = self.creator!
        }
        if self.dentryId != nil {
            map["dentryId"] = self.dentryId!
        }
        if self.dentryType != nil {
            map["dentryType"] = self.dentryType!
        }
        if self.dentryUuid != nil {
            map["dentryUuid"] = self.dentryUuid!
        }
        if self.docKey != nil {
            map["docKey"] = self.docKey!
        }
        if self.extension_ != nil {
            map["extension"] = self.extension_!
        }
        if self.hasChildren != nil {
            map["hasChildren"] = self.hasChildren!
        }
        if self.linkSourceInfo != nil {
            map["linkSourceInfo"] = self.linkSourceInfo?.toMap()
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.path != nil {
            map["path"] = self.path!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.space != nil {
            map["space"] = self.space?.toMap()
        }
        if self.spaceId != nil {
            map["spaceId"] = self.spaceId!
        }
        if self.updatedTime != nil {
            map["updatedTime"] = self.updatedTime!
        }
        if self.updater != nil {
            map["updater"] = self.updater!
        }
        if self.url != nil {
            map["url"] = self.url!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        if self.visitorInfo != nil {
            map["visitorInfo"] = self.visitorInfo!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["contentType"] as? String {
            self.contentType = value
        }
        if let value = dict["createdTime"] as? Int64 {
            self.createdTime = value
        }
        if let value = dict["creator"] as? [String: Any] {
            self.creator = value
        }
        if let value = dict["dentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["dentryType"] as? String {
            self.dentryType = value
        }
        if let value = dict["dentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["docKey"] as? String {
            self.docKey = value
        }
        if let value = dict["extension"] as? String {
            self.extension_ = value
        }
        if let value = dict["hasChildren"] as? Bool {
            self.hasChildren = value
        }
        if let value = dict["linkSourceInfo"] as? [String: Any?] {
            var model = CopyDentryResponseBody.LinkSourceInfo()
            model.fromMap(value)
            self.linkSourceInfo = model
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["path"] as? String {
            self.path = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["space"] as? [String: Any?] {
            var model = CopyDentryResponseBody.Space()
            model.fromMap(value)
            self.space = model
        }
        if let value = dict["spaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["updatedTime"] as? Int64 {
            self.updatedTime = value
        }
        if let value = dict["updater"] as? [String: Any] {
            self.updater = value
        }
        if let value = dict["url"] as? String {
            self.url = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
        if let value = dict["visitorInfo"] as? [String: Any] {
            self.visitorInfo = value
        }
    }
}

public class CopyDentryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CopyDentryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CopyDentryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDeliveryPlanHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var userToken: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userToken != nil {
                map["userToken"] = self.userToken!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["userToken"] as? String {
                self.userToken = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateDeliveryPlanHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateDeliveryPlanHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateDeliveryPlanShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateDeliveryPlanRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var content: [String: Any]?

    public var endTime: Int64?

    public var resId: String?

    public var startTime: Int64?

    public var tenantContext: CreateDeliveryPlanRequest.TenantContext?

    public var userIdList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.resId != nil {
            map["ResId"] = self.resId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.userIdList != nil {
            map["UserIdList"] = self.userIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? [String: Any] {
            self.content = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ResId"] as? String {
            self.resId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateDeliveryPlanRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["UserIdList"] as? [String] {
            self.userIdList = value
        }
    }
}

public class CreateDeliveryPlanShrinkRequest : Tea.TeaModel {
    public var contentShrink: String?

    public var endTime: Int64?

    public var resId: String?

    public var startTime: Int64?

    public var tenantContextShrink: String?

    public var userIdListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contentShrink != nil {
            map["Content"] = self.contentShrink!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.resId != nil {
            map["ResId"] = self.resId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.userIdListShrink != nil {
            map["UserIdList"] = self.userIdListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.contentShrink = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ResId"] as? String {
            self.resId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["UserIdList"] as? String {
            self.userIdListShrink = value
        }
    }
}

public class CreateDeliveryPlanResponseBody : Tea.TeaModel {
    public var arguments: [Any]?

    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arguments != nil {
            map["arguments"] = self.arguments!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["arguments"] as? [Any] {
            self.arguments = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class CreateDeliveryPlanResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDeliveryPlanResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDeliveryPlanResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDingtalkPersonalTodoTaskHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateDingtalkPersonalTodoTaskHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateDingtalkPersonalTodoTaskHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateDingtalkPersonalTodoTaskShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateDingtalkPersonalTodoTaskRequest : Tea.TeaModel {
    public class NotifyConfigs : Tea.TeaModel {
        public var dingNotify: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dingNotify != nil {
                map["DingNotify"] = self.dingNotify!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DingNotify"] as? String {
                self.dingNotify = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var description_: String?

    public var dueTime: Int64?

    public var executorIds: [String]?

    public var notifyConfigs: CreateDingtalkPersonalTodoTaskRequest.NotifyConfigs?

    public var participantIds: [String]?

    public var subject: String?

    public var tenantContext: CreateDingtalkPersonalTodoTaskRequest.TenantContext?

    public var userToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.notifyConfigs?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.dueTime != nil {
            map["DueTime"] = self.dueTime!
        }
        if self.executorIds != nil {
            map["ExecutorIds"] = self.executorIds!
        }
        if self.notifyConfigs != nil {
            map["NotifyConfigs"] = self.notifyConfigs?.toMap()
        }
        if self.participantIds != nil {
            map["ParticipantIds"] = self.participantIds!
        }
        if self.subject != nil {
            map["Subject"] = self.subject!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.userToken != nil {
            map["UserToken"] = self.userToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DueTime"] as? Int64 {
            self.dueTime = value
        }
        if let value = dict["ExecutorIds"] as? [String] {
            self.executorIds = value
        }
        if let value = dict["NotifyConfigs"] as? [String: Any?] {
            var model = CreateDingtalkPersonalTodoTaskRequest.NotifyConfigs()
            model.fromMap(value)
            self.notifyConfigs = model
        }
        if let value = dict["ParticipantIds"] as? [String] {
            self.participantIds = value
        }
        if let value = dict["Subject"] as? String {
            self.subject = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateDingtalkPersonalTodoTaskRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["UserToken"] as? String {
            self.userToken = value
        }
    }
}

public class CreateDingtalkPersonalTodoTaskShrinkRequest : Tea.TeaModel {
    public var description_: String?

    public var dueTime: Int64?

    public var executorIdsShrink: String?

    public var notifyConfigsShrink: String?

    public var participantIdsShrink: String?

    public var subject: String?

    public var tenantContextShrink: String?

    public var userToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.dueTime != nil {
            map["DueTime"] = self.dueTime!
        }
        if self.executorIdsShrink != nil {
            map["ExecutorIds"] = self.executorIdsShrink!
        }
        if self.notifyConfigsShrink != nil {
            map["NotifyConfigs"] = self.notifyConfigsShrink!
        }
        if self.participantIdsShrink != nil {
            map["ParticipantIds"] = self.participantIdsShrink!
        }
        if self.subject != nil {
            map["Subject"] = self.subject!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.userToken != nil {
            map["UserToken"] = self.userToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DueTime"] as? Int64 {
            self.dueTime = value
        }
        if let value = dict["ExecutorIds"] as? String {
            self.executorIdsShrink = value
        }
        if let value = dict["NotifyConfigs"] as? String {
            self.notifyConfigsShrink = value
        }
        if let value = dict["ParticipantIds"] as? String {
            self.participantIdsShrink = value
        }
        if let value = dict["Subject"] as? String {
            self.subject = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["UserToken"] as? String {
            self.userToken = value
        }
    }
}

public class CreateDingtalkPersonalTodoTaskResponseBody : Tea.TeaModel {
    public var createdTime: Int64?

    public var requestId: String?

    public var taskId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createdTime != nil {
            map["createdTime"] = self.createdTime!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["createdTime"] as? Int64 {
            self.createdTime = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["taskId"] as? String {
            self.taskId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class CreateDingtalkPersonalTodoTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDingtalkPersonalTodoTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDingtalkPersonalTodoTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEventHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateEventHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateEventHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateEventShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateEventRequest : Tea.TeaModel {
    public class Attendees : Tea.TeaModel {
        public var id: String?

        public var isOptional: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.isOptional != nil {
                map["isOptional"] = self.isOptional!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["id"] as? String {
                self.id = value
            }
            if let value = dict["isOptional"] as? Bool {
                self.isOptional = value
            }
        }
    }
    public class CardInstances : Tea.TeaModel {
        public var outTrackId: String?

        public var scenario: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.outTrackId != nil {
                map["OutTrackId"] = self.outTrackId!
            }
            if self.scenario != nil {
                map["Scenario"] = self.scenario!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OutTrackId"] as? String {
                self.outTrackId = value
            }
            if let value = dict["Scenario"] as? String {
                self.scenario = value
            }
        }
    }
    public class End : Tea.TeaModel {
        public var date: String?

        public var dateTime: String?

        public var timeZone: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.date != nil {
                map["date"] = self.date!
            }
            if self.dateTime != nil {
                map["dateTime"] = self.dateTime!
            }
            if self.timeZone != nil {
                map["timeZone"] = self.timeZone!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["date"] as? String {
                self.date = value
            }
            if let value = dict["dateTime"] as? String {
                self.dateTime = value
            }
            if let value = dict["timeZone"] as? String {
                self.timeZone = value
            }
        }
    }
    public class Location : Tea.TeaModel {
        public var displayName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["displayName"] = self.displayName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["displayName"] as? String {
                self.displayName = value
            }
        }
    }
    public class OnlineMeetingInfo : Tea.TeaModel {
        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public class Recurrence : Tea.TeaModel {
        public class Pattern : Tea.TeaModel {
            public var dayOfMonth: Int32?

            public var daysOfWeek: String?

            public var index: String?

            public var interval: Int32?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dayOfMonth != nil {
                    map["dayOfMonth"] = self.dayOfMonth!
                }
                if self.daysOfWeek != nil {
                    map["daysOfWeek"] = self.daysOfWeek!
                }
                if self.index != nil {
                    map["index"] = self.index!
                }
                if self.interval != nil {
                    map["interval"] = self.interval!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["dayOfMonth"] as? Int32 {
                    self.dayOfMonth = value
                }
                if let value = dict["daysOfWeek"] as? String {
                    self.daysOfWeek = value
                }
                if let value = dict["index"] as? String {
                    self.index = value
                }
                if let value = dict["interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
            }
        }
        public class Range : Tea.TeaModel {
            public var endDate: String?

            public var numberOfOccurrences: Int32?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["endDate"] = self.endDate!
                }
                if self.numberOfOccurrences != nil {
                    map["numberOfOccurrences"] = self.numberOfOccurrences!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["endDate"] as? String {
                    self.endDate = value
                }
                if let value = dict["numberOfOccurrences"] as? Int32 {
                    self.numberOfOccurrences = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
            }
        }
        public var pattern: CreateEventRequest.Recurrence.Pattern?

        public var range: CreateEventRequest.Recurrence.Range?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.pattern?.validate()
            try self.range?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pattern != nil {
                map["pattern"] = self.pattern?.toMap()
            }
            if self.range != nil {
                map["range"] = self.range?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["pattern"] as? [String: Any?] {
                var model = CreateEventRequest.Recurrence.Pattern()
                model.fromMap(value)
                self.pattern = model
            }
            if let value = dict["range"] as? [String: Any?] {
                var model = CreateEventRequest.Recurrence.Range()
                model.fromMap(value)
                self.range = model
            }
        }
    }
    public class Reminders : Tea.TeaModel {
        public var method: String?

        public var minutes: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.method != nil {
                map["method"] = self.method!
            }
            if self.minutes != nil {
                map["minutes"] = self.minutes!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["method"] as? String {
                self.method = value
            }
            if let value = dict["minutes"] as? Int32 {
                self.minutes = value
            }
        }
    }
    public class RichTextDescription : Tea.TeaModel {
        public var text: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.text != nil {
                map["text"] = self.text!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["text"] as? String {
                self.text = value
            }
        }
    }
    public class UiConfigs : Tea.TeaModel {
        public var uiName: String?

        public var uiStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.uiName != nil {
                map["uiName"] = self.uiName!
            }
            if self.uiStatus != nil {
                map["uiStatus"] = self.uiStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["uiName"] as? String {
                self.uiName = value
            }
            if let value = dict["uiStatus"] as? String {
                self.uiStatus = value
            }
        }
    }
    public class Start : Tea.TeaModel {
        public var date: String?

        public var dateTime: String?

        public var timeZone: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.date != nil {
                map["date"] = self.date!
            }
            if self.dateTime != nil {
                map["dateTime"] = self.dateTime!
            }
            if self.timeZone != nil {
                map["timeZone"] = self.timeZone!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["date"] as? String {
                self.date = value
            }
            if let value = dict["dateTime"] as? String {
                self.dateTime = value
            }
            if let value = dict["timeZone"] as? String {
                self.timeZone = value
            }
        }
    }
    public var attendees: [CreateEventRequest.Attendees]?

    public var cardInstances: [CreateEventRequest.CardInstances]?

    public var description_: String?

    public var end: CreateEventRequest.End?

    public var extra: [String: String]?

    public var isAllDay: Bool?

    public var location: CreateEventRequest.Location?

    public var onlineMeetingInfo: CreateEventRequest.OnlineMeetingInfo?

    public var recurrence: CreateEventRequest.Recurrence?

    public var reminders: [CreateEventRequest.Reminders]?

    public var richTextDescription: CreateEventRequest.RichTextDescription?

    public var summary: String?

    public var uiConfigs: [CreateEventRequest.UiConfigs]?

    public var calendarId: String?

    public var start: CreateEventRequest.Start?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.end?.validate()
        try self.location?.validate()
        try self.onlineMeetingInfo?.validate()
        try self.recurrence?.validate()
        try self.richTextDescription?.validate()
        try self.start?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attendees != nil {
            var tmp : [Any] = []
            for k in self.attendees! {
                tmp.append(k.toMap())
            }
            map["Attendees"] = tmp
        }
        if self.cardInstances != nil {
            var tmp : [Any] = []
            for k in self.cardInstances! {
                tmp.append(k.toMap())
            }
            map["CardInstances"] = tmp
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.end != nil {
            map["End"] = self.end?.toMap()
        }
        if self.extra != nil {
            map["Extra"] = self.extra!
        }
        if self.isAllDay != nil {
            map["IsAllDay"] = self.isAllDay!
        }
        if self.location != nil {
            map["Location"] = self.location?.toMap()
        }
        if self.onlineMeetingInfo != nil {
            map["OnlineMeetingInfo"] = self.onlineMeetingInfo?.toMap()
        }
        if self.recurrence != nil {
            map["Recurrence"] = self.recurrence?.toMap()
        }
        if self.reminders != nil {
            var tmp : [Any] = []
            for k in self.reminders! {
                tmp.append(k.toMap())
            }
            map["Reminders"] = tmp
        }
        if self.richTextDescription != nil {
            map["RichTextDescription"] = self.richTextDescription?.toMap()
        }
        if self.summary != nil {
            map["Summary"] = self.summary!
        }
        if self.uiConfigs != nil {
            var tmp : [Any] = []
            for k in self.uiConfigs! {
                tmp.append(k.toMap())
            }
            map["UiConfigs"] = tmp
        }
        if self.calendarId != nil {
            map["calendarId"] = self.calendarId!
        }
        if self.start != nil {
            map["start"] = self.start?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Attendees"] as? [Any?] {
            var tmp : [CreateEventRequest.Attendees] = []
            for v in value {
                if v != nil {
                    var model = CreateEventRequest.Attendees()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.attendees = tmp
        }
        if let value = dict["CardInstances"] as? [Any?] {
            var tmp : [CreateEventRequest.CardInstances] = []
            for v in value {
                if v != nil {
                    var model = CreateEventRequest.CardInstances()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.cardInstances = tmp
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["End"] as? [String: Any?] {
            var model = CreateEventRequest.End()
            model.fromMap(value)
            self.end = model
        }
        if let value = dict["Extra"] as? [String: String] {
            self.extra = value
        }
        if let value = dict["IsAllDay"] as? Bool {
            self.isAllDay = value
        }
        if let value = dict["Location"] as? [String: Any?] {
            var model = CreateEventRequest.Location()
            model.fromMap(value)
            self.location = model
        }
        if let value = dict["OnlineMeetingInfo"] as? [String: Any?] {
            var model = CreateEventRequest.OnlineMeetingInfo()
            model.fromMap(value)
            self.onlineMeetingInfo = model
        }
        if let value = dict["Recurrence"] as? [String: Any?] {
            var model = CreateEventRequest.Recurrence()
            model.fromMap(value)
            self.recurrence = model
        }
        if let value = dict["Reminders"] as? [Any?] {
            var tmp : [CreateEventRequest.Reminders] = []
            for v in value {
                if v != nil {
                    var model = CreateEventRequest.Reminders()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.reminders = tmp
        }
        if let value = dict["RichTextDescription"] as? [String: Any?] {
            var model = CreateEventRequest.RichTextDescription()
            model.fromMap(value)
            self.richTextDescription = model
        }
        if let value = dict["Summary"] as? String {
            self.summary = value
        }
        if let value = dict["UiConfigs"] as? [Any?] {
            var tmp : [CreateEventRequest.UiConfigs] = []
            for v in value {
                if v != nil {
                    var model = CreateEventRequest.UiConfigs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.uiConfigs = tmp
        }
        if let value = dict["calendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["start"] as? [String: Any?] {
            var model = CreateEventRequest.Start()
            model.fromMap(value)
            self.start = model
        }
    }
}

public class CreateEventShrinkRequest : Tea.TeaModel {
    public var attendeesShrink: String?

    public var cardInstancesShrink: String?

    public var description_: String?

    public var endShrink: String?

    public var extraShrink: String?

    public var isAllDay: Bool?

    public var locationShrink: String?

    public var onlineMeetingInfoShrink: String?

    public var recurrenceShrink: String?

    public var remindersShrink: String?

    public var richTextDescriptionShrink: String?

    public var summary: String?

    public var uiConfigsShrink: String?

    public var calendarId: String?

    public var startShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attendeesShrink != nil {
            map["Attendees"] = self.attendeesShrink!
        }
        if self.cardInstancesShrink != nil {
            map["CardInstances"] = self.cardInstancesShrink!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.endShrink != nil {
            map["End"] = self.endShrink!
        }
        if self.extraShrink != nil {
            map["Extra"] = self.extraShrink!
        }
        if self.isAllDay != nil {
            map["IsAllDay"] = self.isAllDay!
        }
        if self.locationShrink != nil {
            map["Location"] = self.locationShrink!
        }
        if self.onlineMeetingInfoShrink != nil {
            map["OnlineMeetingInfo"] = self.onlineMeetingInfoShrink!
        }
        if self.recurrenceShrink != nil {
            map["Recurrence"] = self.recurrenceShrink!
        }
        if self.remindersShrink != nil {
            map["Reminders"] = self.remindersShrink!
        }
        if self.richTextDescriptionShrink != nil {
            map["RichTextDescription"] = self.richTextDescriptionShrink!
        }
        if self.summary != nil {
            map["Summary"] = self.summary!
        }
        if self.uiConfigsShrink != nil {
            map["UiConfigs"] = self.uiConfigsShrink!
        }
        if self.calendarId != nil {
            map["calendarId"] = self.calendarId!
        }
        if self.startShrink != nil {
            map["start"] = self.startShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Attendees"] as? String {
            self.attendeesShrink = value
        }
        if let value = dict["CardInstances"] as? String {
            self.cardInstancesShrink = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["End"] as? String {
            self.endShrink = value
        }
        if let value = dict["Extra"] as? String {
            self.extraShrink = value
        }
        if let value = dict["IsAllDay"] as? Bool {
            self.isAllDay = value
        }
        if let value = dict["Location"] as? String {
            self.locationShrink = value
        }
        if let value = dict["OnlineMeetingInfo"] as? String {
            self.onlineMeetingInfoShrink = value
        }
        if let value = dict["Recurrence"] as? String {
            self.recurrenceShrink = value
        }
        if let value = dict["Reminders"] as? String {
            self.remindersShrink = value
        }
        if let value = dict["RichTextDescription"] as? String {
            self.richTextDescriptionShrink = value
        }
        if let value = dict["Summary"] as? String {
            self.summary = value
        }
        if let value = dict["UiConfigs"] as? String {
            self.uiConfigsShrink = value
        }
        if let value = dict["calendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["start"] as? String {
            self.startShrink = value
        }
    }
}

public class CreateEventResponseBody : Tea.TeaModel {
    public class Attendees : Tea.TeaModel {
        public var displayName: String?

        public var isOptional: Bool?

        public var responseStatus: String?

        public var self_: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.isOptional != nil {
                map["IsOptional"] = self.isOptional!
            }
            if self.responseStatus != nil {
                map["ResponseStatus"] = self.responseStatus!
            }
            if self.self_ != nil {
                map["Self"] = self.self_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["IsOptional"] as? Bool {
                self.isOptional = value
            }
            if let value = dict["ResponseStatus"] as? String {
                self.responseStatus = value
            }
            if let value = dict["Self"] as? Bool {
                self.self_ = value
            }
        }
    }
    public class End : Tea.TeaModel {
        public var date: String?

        public var dateTime: String?

        public var timeZone: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.date != nil {
                map["Date"] = self.date!
            }
            if self.dateTime != nil {
                map["DateTime"] = self.dateTime!
            }
            if self.timeZone != nil {
                map["TimeZone"] = self.timeZone!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Date"] as? String {
                self.date = value
            }
            if let value = dict["DateTime"] as? String {
                self.dateTime = value
            }
            if let value = dict["TimeZone"] as? String {
                self.timeZone = value
            }
        }
    }
    public class Location : Tea.TeaModel {
        public var displayName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
        }
    }
    public class OnlineMeetingInfo : Tea.TeaModel {
        public var conferenceId: String?

        public var extraInfo: [String: Any]?

        public var type: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.conferenceId != nil {
                map["ConferenceId"] = self.conferenceId!
            }
            if self.extraInfo != nil {
                map["ExtraInfo"] = self.extraInfo!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConferenceId"] as? String {
                self.conferenceId = value
            }
            if let value = dict["ExtraInfo"] as? [String: Any] {
                self.extraInfo = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public class Organizer : Tea.TeaModel {
        public var displayName: String?

        public var id: String?

        public var responseStatus: String?

        public var self_: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.responseStatus != nil {
                map["ResponseStatus"] = self.responseStatus!
            }
            if self.self_ != nil {
                map["Self"] = self.self_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["ResponseStatus"] as? String {
                self.responseStatus = value
            }
            if let value = dict["Self"] as? Bool {
                self.self_ = value
            }
        }
    }
    public class Recurrence : Tea.TeaModel {
        public class Pattern : Tea.TeaModel {
            public var dayOfMonth: Int32?

            public var daysOfWeek: String?

            public var index: String?

            public var interval: Int32?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dayOfMonth != nil {
                    map["DayOfMonth"] = self.dayOfMonth!
                }
                if self.daysOfWeek != nil {
                    map["DaysOfWeek"] = self.daysOfWeek!
                }
                if self.index != nil {
                    map["Index"] = self.index!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DayOfMonth"] as? Int32 {
                    self.dayOfMonth = value
                }
                if let value = dict["DaysOfWeek"] as? String {
                    self.daysOfWeek = value
                }
                if let value = dict["Index"] as? String {
                    self.index = value
                }
                if let value = dict["Interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class Range : Tea.TeaModel {
            public var endDate: String?

            public var numberOfOccurrences: Int32?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["EndDate"] = self.endDate!
                }
                if self.numberOfOccurrences != nil {
                    map["NumberOfOccurrences"] = self.numberOfOccurrences!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndDate"] as? String {
                    self.endDate = value
                }
                if let value = dict["NumberOfOccurrences"] as? Int32 {
                    self.numberOfOccurrences = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var pattern: CreateEventResponseBody.Recurrence.Pattern?

        public var range: CreateEventResponseBody.Recurrence.Range?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.pattern?.validate()
            try self.range?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pattern != nil {
                map["Pattern"] = self.pattern?.toMap()
            }
            if self.range != nil {
                map["Range"] = self.range?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Pattern"] as? [String: Any?] {
                var model = CreateEventResponseBody.Recurrence.Pattern()
                model.fromMap(value)
                self.pattern = model
            }
            if let value = dict["Range"] as? [String: Any?] {
                var model = CreateEventResponseBody.Recurrence.Range()
                model.fromMap(value)
                self.range = model
            }
        }
    }
    public class Reminders : Tea.TeaModel {
        public var method: String?

        public var minutes: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.method != nil {
                map["Method"] = self.method!
            }
            if self.minutes != nil {
                map["Minutes"] = self.minutes!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Method"] as? String {
                self.method = value
            }
            if let value = dict["Minutes"] as? String {
                self.minutes = value
            }
        }
    }
    public class RichTextDescription : Tea.TeaModel {
        public var text: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.text != nil {
                map["text"] = self.text!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["text"] as? String {
                self.text = value
            }
        }
    }
    public class Start : Tea.TeaModel {
        public var date: String?

        public var dateTime: String?

        public var timeZone: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.date != nil {
                map["Date"] = self.date!
            }
            if self.dateTime != nil {
                map["DateTime"] = self.dateTime!
            }
            if self.timeZone != nil {
                map["TimeZone"] = self.timeZone!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Date"] as? String {
                self.date = value
            }
            if let value = dict["DateTime"] as? String {
                self.dateTime = value
            }
            if let value = dict["TimeZone"] as? String {
                self.timeZone = value
            }
        }
    }
    public class UiConfigs : Tea.TeaModel {
        public var uiName: String?

        public var uiStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.uiName != nil {
                map["UiName"] = self.uiName!
            }
            if self.uiStatus != nil {
                map["UiStatus"] = self.uiStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UiName"] as? String {
                self.uiName = value
            }
            if let value = dict["UiStatus"] as? String {
                self.uiStatus = value
            }
        }
    }
    public var attendees: [CreateEventResponseBody.Attendees]?

    public var createTime: String?

    public var description_: String?

    public var end: CreateEventResponseBody.End?

    public var id: String?

    public var isAllDay: Bool?

    public var location: CreateEventResponseBody.Location?

    public var onlineMeetingInfo: CreateEventResponseBody.OnlineMeetingInfo?

    public var organizer: CreateEventResponseBody.Organizer?

    public var recurrence: CreateEventResponseBody.Recurrence?

    public var reminders: [CreateEventResponseBody.Reminders]?

    public var requestId: String?

    public var richTextDescription: CreateEventResponseBody.RichTextDescription?

    public var start: CreateEventResponseBody.Start?

    public var summary: String?

    public var uiConfigs: [CreateEventResponseBody.UiConfigs]?

    public var updateTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.end?.validate()
        try self.location?.validate()
        try self.onlineMeetingInfo?.validate()
        try self.organizer?.validate()
        try self.recurrence?.validate()
        try self.richTextDescription?.validate()
        try self.start?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attendees != nil {
            var tmp : [Any] = []
            for k in self.attendees! {
                tmp.append(k.toMap())
            }
            map["attendees"] = tmp
        }
        if self.createTime != nil {
            map["createTime"] = self.createTime!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.end != nil {
            map["end"] = self.end?.toMap()
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.isAllDay != nil {
            map["isAllDay"] = self.isAllDay!
        }
        if self.location != nil {
            map["location"] = self.location?.toMap()
        }
        if self.onlineMeetingInfo != nil {
            map["onlineMeetingInfo"] = self.onlineMeetingInfo?.toMap()
        }
        if self.organizer != nil {
            map["organizer"] = self.organizer?.toMap()
        }
        if self.recurrence != nil {
            map["recurrence"] = self.recurrence?.toMap()
        }
        if self.reminders != nil {
            var tmp : [Any] = []
            for k in self.reminders! {
                tmp.append(k.toMap())
            }
            map["reminders"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.richTextDescription != nil {
            map["richTextDescription"] = self.richTextDescription?.toMap()
        }
        if self.start != nil {
            map["start"] = self.start?.toMap()
        }
        if self.summary != nil {
            map["summary"] = self.summary!
        }
        if self.uiConfigs != nil {
            var tmp : [Any] = []
            for k in self.uiConfigs! {
                tmp.append(k.toMap())
            }
            map["uiConfigs"] = tmp
        }
        if self.updateTime != nil {
            map["updateTime"] = self.updateTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["attendees"] as? [Any?] {
            var tmp : [CreateEventResponseBody.Attendees] = []
            for v in value {
                if v != nil {
                    var model = CreateEventResponseBody.Attendees()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.attendees = tmp
        }
        if let value = dict["createTime"] as? String {
            self.createTime = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["end"] as? [String: Any?] {
            var model = CreateEventResponseBody.End()
            model.fromMap(value)
            self.end = model
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["isAllDay"] as? Bool {
            self.isAllDay = value
        }
        if let value = dict["location"] as? [String: Any?] {
            var model = CreateEventResponseBody.Location()
            model.fromMap(value)
            self.location = model
        }
        if let value = dict["onlineMeetingInfo"] as? [String: Any?] {
            var model = CreateEventResponseBody.OnlineMeetingInfo()
            model.fromMap(value)
            self.onlineMeetingInfo = model
        }
        if let value = dict["organizer"] as? [String: Any?] {
            var model = CreateEventResponseBody.Organizer()
            model.fromMap(value)
            self.organizer = model
        }
        if let value = dict["recurrence"] as? [String: Any?] {
            var model = CreateEventResponseBody.Recurrence()
            model.fromMap(value)
            self.recurrence = model
        }
        if let value = dict["reminders"] as? [Any?] {
            var tmp : [CreateEventResponseBody.Reminders] = []
            for v in value {
                if v != nil {
                    var model = CreateEventResponseBody.Reminders()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.reminders = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["richTextDescription"] as? [String: Any?] {
            var model = CreateEventResponseBody.RichTextDescription()
            model.fromMap(value)
            self.richTextDescription = model
        }
        if let value = dict["start"] as? [String: Any?] {
            var model = CreateEventResponseBody.Start()
            model.fromMap(value)
            self.start = model
        }
        if let value = dict["summary"] as? String {
            self.summary = value
        }
        if let value = dict["uiConfigs"] as? [Any?] {
            var tmp : [CreateEventResponseBody.UiConfigs] = []
            for v in value {
                if v != nil {
                    var model = CreateEventResponseBody.UiConfigs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.uiConfigs = tmp
        }
        if let value = dict["updateTime"] as? String {
            self.updateTime = value
        }
    }
}

public class CreateEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateLiveHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateLiveHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateLiveHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateLiveShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateLiveRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var coverUrl: String?

    public var introduction: String?

    public var preEndTime: Int64?

    public var preStartTime: Int64?

    public var publicType: Int64?

    public var tenantContext: CreateLiveRequest.TenantContext?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coverUrl != nil {
            map["CoverUrl"] = self.coverUrl!
        }
        if self.introduction != nil {
            map["Introduction"] = self.introduction!
        }
        if self.preEndTime != nil {
            map["PreEndTime"] = self.preEndTime!
        }
        if self.preStartTime != nil {
            map["PreStartTime"] = self.preStartTime!
        }
        if self.publicType != nil {
            map["PublicType"] = self.publicType!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoverUrl"] as? String {
            self.coverUrl = value
        }
        if let value = dict["Introduction"] as? String {
            self.introduction = value
        }
        if let value = dict["PreEndTime"] as? Int64 {
            self.preEndTime = value
        }
        if let value = dict["PreStartTime"] as? Int64 {
            self.preStartTime = value
        }
        if let value = dict["PublicType"] as? Int64 {
            self.publicType = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateLiveRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class CreateLiveShrinkRequest : Tea.TeaModel {
    public var coverUrl: String?

    public var introduction: String?

    public var preEndTime: Int64?

    public var preStartTime: Int64?

    public var publicType: Int64?

    public var tenantContextShrink: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coverUrl != nil {
            map["CoverUrl"] = self.coverUrl!
        }
        if self.introduction != nil {
            map["Introduction"] = self.introduction!
        }
        if self.preEndTime != nil {
            map["PreEndTime"] = self.preEndTime!
        }
        if self.preStartTime != nil {
            map["PreStartTime"] = self.preStartTime!
        }
        if self.publicType != nil {
            map["PublicType"] = self.publicType!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoverUrl"] as? String {
            self.coverUrl = value
        }
        if let value = dict["Introduction"] as? String {
            self.introduction = value
        }
        if let value = dict["PreEndTime"] as? Int64 {
            self.preEndTime = value
        }
        if let value = dict["PreStartTime"] as? Int64 {
            self.preStartTime = value
        }
        if let value = dict["PublicType"] as? Int64 {
            self.publicType = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class CreateLiveResponseBody : Tea.TeaModel {
    public var liveId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.liveId != nil {
            map["liveId"] = self.liveId!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["liveId"] as? String {
            self.liveId = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateLiveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateLiveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateLiveResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMeetingRoomHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateMeetingRoomHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateMeetingRoomHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateMeetingRoomShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateMeetingRoomRequest : Tea.TeaModel {
    public class ReservationAuthority : Tea.TeaModel {
        public class AuthorizedMembers : Tea.TeaModel {
            public var memberId: String?

            public var memberName: String?

            public var memberType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.memberId != nil {
                    map["MemberId"] = self.memberId!
                }
                if self.memberName != nil {
                    map["MemberName"] = self.memberName!
                }
                if self.memberType != nil {
                    map["MemberType"] = self.memberType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MemberId"] as? String {
                    self.memberId = value
                }
                if let value = dict["MemberName"] as? String {
                    self.memberName = value
                }
                if let value = dict["MemberType"] as? String {
                    self.memberType = value
                }
            }
        }
        public var authorizedMembers: [CreateMeetingRoomRequest.ReservationAuthority.AuthorizedMembers]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authorizedMembers != nil {
                var tmp : [Any] = []
                for k in self.authorizedMembers! {
                    tmp.append(k.toMap())
                }
                map["AuthorizedMembers"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuthorizedMembers"] as? [Any?] {
                var tmp : [CreateMeetingRoomRequest.ReservationAuthority.AuthorizedMembers] = []
                for v in value {
                    if v != nil {
                        var model = CreateMeetingRoomRequest.ReservationAuthority.AuthorizedMembers()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.authorizedMembers = tmp
            }
        }
    }
    public class RoomLocation : Tea.TeaModel {
        public var desc: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.desc != nil {
                map["Desc"] = self.desc!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Desc"] as? String {
                self.desc = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var enableCycleReservation: Bool?

    public var groupId: Int64?

    public var isvRoomId: String?

    public var reservationAuthority: CreateMeetingRoomRequest.ReservationAuthority?

    public var roomCapacity: Int32?

    public var roomLabelIds: [Int64]?

    public var roomLocation: CreateMeetingRoomRequest.RoomLocation?

    public var roomName: String?

    public var roomPicture: String?

    public var roomStatus: Int32?

    public var tenantContext: CreateMeetingRoomRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.reservationAuthority?.validate()
        try self.roomLocation?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enableCycleReservation != nil {
            map["EnableCycleReservation"] = self.enableCycleReservation!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.isvRoomId != nil {
            map["IsvRoomId"] = self.isvRoomId!
        }
        if self.reservationAuthority != nil {
            map["ReservationAuthority"] = self.reservationAuthority?.toMap()
        }
        if self.roomCapacity != nil {
            map["RoomCapacity"] = self.roomCapacity!
        }
        if self.roomLabelIds != nil {
            map["RoomLabelIds"] = self.roomLabelIds!
        }
        if self.roomLocation != nil {
            map["RoomLocation"] = self.roomLocation?.toMap()
        }
        if self.roomName != nil {
            map["RoomName"] = self.roomName!
        }
        if self.roomPicture != nil {
            map["RoomPicture"] = self.roomPicture!
        }
        if self.roomStatus != nil {
            map["RoomStatus"] = self.roomStatus!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnableCycleReservation"] as? Bool {
            self.enableCycleReservation = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["IsvRoomId"] as? String {
            self.isvRoomId = value
        }
        if let value = dict["ReservationAuthority"] as? [String: Any?] {
            var model = CreateMeetingRoomRequest.ReservationAuthority()
            model.fromMap(value)
            self.reservationAuthority = model
        }
        if let value = dict["RoomCapacity"] as? Int32 {
            self.roomCapacity = value
        }
        if let value = dict["RoomLabelIds"] as? [Int64] {
            self.roomLabelIds = value
        }
        if let value = dict["RoomLocation"] as? [String: Any?] {
            var model = CreateMeetingRoomRequest.RoomLocation()
            model.fromMap(value)
            self.roomLocation = model
        }
        if let value = dict["RoomName"] as? String {
            self.roomName = value
        }
        if let value = dict["RoomPicture"] as? String {
            self.roomPicture = value
        }
        if let value = dict["RoomStatus"] as? Int32 {
            self.roomStatus = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateMeetingRoomRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class CreateMeetingRoomShrinkRequest : Tea.TeaModel {
    public var enableCycleReservation: Bool?

    public var groupId: Int64?

    public var isvRoomId: String?

    public var reservationAuthorityShrink: String?

    public var roomCapacity: Int32?

    public var roomLabelIdsShrink: String?

    public var roomLocationShrink: String?

    public var roomName: String?

    public var roomPicture: String?

    public var roomStatus: Int32?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enableCycleReservation != nil {
            map["EnableCycleReservation"] = self.enableCycleReservation!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.isvRoomId != nil {
            map["IsvRoomId"] = self.isvRoomId!
        }
        if self.reservationAuthorityShrink != nil {
            map["ReservationAuthority"] = self.reservationAuthorityShrink!
        }
        if self.roomCapacity != nil {
            map["RoomCapacity"] = self.roomCapacity!
        }
        if self.roomLabelIdsShrink != nil {
            map["RoomLabelIds"] = self.roomLabelIdsShrink!
        }
        if self.roomLocationShrink != nil {
            map["RoomLocation"] = self.roomLocationShrink!
        }
        if self.roomName != nil {
            map["RoomName"] = self.roomName!
        }
        if self.roomPicture != nil {
            map["RoomPicture"] = self.roomPicture!
        }
        if self.roomStatus != nil {
            map["RoomStatus"] = self.roomStatus!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnableCycleReservation"] as? Bool {
            self.enableCycleReservation = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["IsvRoomId"] as? String {
            self.isvRoomId = value
        }
        if let value = dict["ReservationAuthority"] as? String {
            self.reservationAuthorityShrink = value
        }
        if let value = dict["RoomCapacity"] as? Int32 {
            self.roomCapacity = value
        }
        if let value = dict["RoomLabelIds"] as? String {
            self.roomLabelIdsShrink = value
        }
        if let value = dict["RoomLocation"] as? String {
            self.roomLocationShrink = value
        }
        if let value = dict["RoomName"] as? String {
            self.roomName = value
        }
        if let value = dict["RoomPicture"] as? String {
            self.roomPicture = value
        }
        if let value = dict["RoomStatus"] as? Int32 {
            self.roomStatus = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class CreateMeetingRoomResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? String {
            self.result = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class CreateMeetingRoomResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMeetingRoomResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMeetingRoomResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMeetingRoomGroupHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateMeetingRoomGroupHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateMeetingRoomGroupHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateMeetingRoomGroupShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateMeetingRoomGroupRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var groupName: String?

    public var parentGroupId: Int64?

    public var tenantContext: CreateMeetingRoomGroupRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.parentGroupId != nil {
            map["ParentGroupId"] = self.parentGroupId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["ParentGroupId"] as? Int64 {
            self.parentGroupId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateMeetingRoomGroupRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class CreateMeetingRoomGroupShrinkRequest : Tea.TeaModel {
    public var groupName: String?

    public var parentGroupId: Int64?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.parentGroupId != nil {
            map["ParentGroupId"] = self.parentGroupId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["ParentGroupId"] as? Int64 {
            self.parentGroupId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class CreateMeetingRoomGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? Int64 {
            self.result = value
        }
    }
}

public class CreateMeetingRoomGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMeetingRoomGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMeetingRoomGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMessageHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountId != nil {
            map["accountId"] = self.accountId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["accountId"] as? String {
            self.accountId = value
        }
    }
}

public class CreateMessageRequest : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public class CardCallback : Tea.TeaModel {
            public var content: String?

            public var templateId: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["content"] = self.content!
                }
                if self.templateId != nil {
                    map["templateId"] = self.templateId!
                }
                if self.userId != nil {
                    map["userId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["content"] as? String {
                    self.content = value
                }
                if let value = dict["templateId"] as? String {
                    self.templateId = value
                }
                if let value = dict["userId"] as? String {
                    self.userId = value
                }
            }
        }
        public class DingCard : Tea.TeaModel {
            public var cardDesc: String?

            public var content: String?

            public var contentType: String?

            public var finished: Bool?

            public var templateId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cardDesc != nil {
                    map["cardDesc"] = self.cardDesc!
                }
                if self.content != nil {
                    map["content"] = self.content!
                }
                if self.contentType != nil {
                    map["contentType"] = self.contentType!
                }
                if self.finished != nil {
                    map["finished"] = self.finished!
                }
                if self.templateId != nil {
                    map["templateId"] = self.templateId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["cardDesc"] as? String {
                    self.cardDesc = value
                }
                if let value = dict["content"] as? String {
                    self.content = value
                }
                if let value = dict["contentType"] as? String {
                    self.contentType = value
                }
                if let value = dict["finished"] as? Bool {
                    self.finished = value
                }
                if let value = dict["templateId"] as? String {
                    self.templateId = value
                }
            }
        }
        public class ImageUrl : Tea.TeaModel {
            public var detail: String?

            public var imageDesc: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.detail != nil {
                    map["detail"] = self.detail!
                }
                if self.imageDesc != nil {
                    map["imageDesc"] = self.imageDesc!
                }
                if self.url != nil {
                    map["url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["detail"] as? String {
                    self.detail = value
                }
                if let value = dict["imageDesc"] as? String {
                    self.imageDesc = value
                }
                if let value = dict["url"] as? String {
                    self.url = value
                }
            }
        }
        public class Markdown : Tea.TeaModel {
            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.value != nil {
                    map["value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["value"] as? String {
                    self.value = value
                }
            }
        }
        public class Text : Tea.TeaModel {
            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.value != nil {
                    map["value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["value"] as? String {
                    self.value = value
                }
            }
        }
        public var cardCallback: CreateMessageRequest.Content.CardCallback?

        public var dingCard: CreateMessageRequest.Content.DingCard?

        public var imageUrl: CreateMessageRequest.Content.ImageUrl?

        public var markdown: CreateMessageRequest.Content.Markdown?

        public var text: CreateMessageRequest.Content.Text?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.cardCallback?.validate()
            try self.dingCard?.validate()
            try self.imageUrl?.validate()
            try self.markdown?.validate()
            try self.text?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cardCallback != nil {
                map["cardCallback"] = self.cardCallback?.toMap()
            }
            if self.dingCard != nil {
                map["dingCard"] = self.dingCard?.toMap()
            }
            if self.imageUrl != nil {
                map["imageUrl"] = self.imageUrl?.toMap()
            }
            if self.markdown != nil {
                map["markdown"] = self.markdown?.toMap()
            }
            if self.text != nil {
                map["text"] = self.text?.toMap()
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["cardCallback"] as? [String: Any?] {
                var model = CreateMessageRequest.Content.CardCallback()
                model.fromMap(value)
                self.cardCallback = model
            }
            if let value = dict["dingCard"] as? [String: Any?] {
                var model = CreateMessageRequest.Content.DingCard()
                model.fromMap(value)
                self.dingCard = model
            }
            if let value = dict["imageUrl"] as? [String: Any?] {
                var model = CreateMessageRequest.Content.ImageUrl()
                model.fromMap(value)
                self.imageUrl = model
            }
            if let value = dict["markdown"] as? [String: Any?] {
                var model = CreateMessageRequest.Content.Markdown()
                model.fromMap(value)
                self.markdown = model
            }
            if let value = dict["text"] as? [String: Any?] {
                var model = CreateMessageRequest.Content.Text()
                model.fromMap(value)
                self.text = model
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public var assistantId: String?

    public var content: [CreateMessageRequest.Content]?

    public var metadata: [String: Any]?

    public var originalAssistantId: String?

    public var role: String?

    public var threadId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assistantId != nil {
            map["assistantId"] = self.assistantId!
        }
        if self.content != nil {
            var tmp : [Any] = []
            for k in self.content! {
                tmp.append(k.toMap())
            }
            map["content"] = tmp
        }
        if self.metadata != nil {
            map["metadata"] = self.metadata!
        }
        if self.originalAssistantId != nil {
            map["originalAssistantId"] = self.originalAssistantId!
        }
        if self.role != nil {
            map["role"] = self.role!
        }
        if self.threadId != nil {
            map["threadId"] = self.threadId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["assistantId"] as? String {
            self.assistantId = value
        }
        if let value = dict["content"] as? [Any?] {
            var tmp : [CreateMessageRequest.Content] = []
            for v in value {
                if v != nil {
                    var model = CreateMessageRequest.Content()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.content = tmp
        }
        if let value = dict["metadata"] as? [String: Any] {
            self.metadata = value
        }
        if let value = dict["originalAssistantId"] as? String {
            self.originalAssistantId = value
        }
        if let value = dict["role"] as? String {
            self.role = value
        }
        if let value = dict["threadId"] as? String {
            self.threadId = value
        }
    }
}

public class CreateMessageResponseBody : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public class CardCallback : Tea.TeaModel {
            public var content: String?

            public var templateId: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["content"] = self.content!
                }
                if self.templateId != nil {
                    map["templateId"] = self.templateId!
                }
                if self.userId != nil {
                    map["userId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["content"] as? String {
                    self.content = value
                }
                if let value = dict["templateId"] as? String {
                    self.templateId = value
                }
                if let value = dict["userId"] as? String {
                    self.userId = value
                }
            }
        }
        public class DingCard : Tea.TeaModel {
            public var cardDesc: String?

            public var content: String?

            public var contentType: String?

            public var finished: Bool?

            public var templateId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cardDesc != nil {
                    map["cardDesc"] = self.cardDesc!
                }
                if self.content != nil {
                    map["content"] = self.content!
                }
                if self.contentType != nil {
                    map["contentType"] = self.contentType!
                }
                if self.finished != nil {
                    map["finished"] = self.finished!
                }
                if self.templateId != nil {
                    map["templateId"] = self.templateId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["cardDesc"] as? String {
                    self.cardDesc = value
                }
                if let value = dict["content"] as? String {
                    self.content = value
                }
                if let value = dict["contentType"] as? String {
                    self.contentType = value
                }
                if let value = dict["finished"] as? Bool {
                    self.finished = value
                }
                if let value = dict["templateId"] as? String {
                    self.templateId = value
                }
            }
        }
        public class ImageUrl : Tea.TeaModel {
            public var detail: String?

            public var imageDesc: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.detail != nil {
                    map["detail"] = self.detail!
                }
                if self.imageDesc != nil {
                    map["imageDesc"] = self.imageDesc!
                }
                if self.url != nil {
                    map["url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["detail"] as? String {
                    self.detail = value
                }
                if let value = dict["imageDesc"] as? String {
                    self.imageDesc = value
                }
                if let value = dict["url"] as? String {
                    self.url = value
                }
            }
        }
        public class Markdown : Tea.TeaModel {
            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.value != nil {
                    map["value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["value"] as? String {
                    self.value = value
                }
            }
        }
        public class Text : Tea.TeaModel {
            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.value != nil {
                    map["value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["value"] as? String {
                    self.value = value
                }
            }
        }
        public var cardCallback: CreateMessageResponseBody.Content.CardCallback?

        public var dingCard: CreateMessageResponseBody.Content.DingCard?

        public var imageUrl: CreateMessageResponseBody.Content.ImageUrl?

        public var markdown: CreateMessageResponseBody.Content.Markdown?

        public var text: CreateMessageResponseBody.Content.Text?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.cardCallback?.validate()
            try self.dingCard?.validate()
            try self.imageUrl?.validate()
            try self.markdown?.validate()
            try self.text?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cardCallback != nil {
                map["cardCallback"] = self.cardCallback?.toMap()
            }
            if self.dingCard != nil {
                map["dingCard"] = self.dingCard?.toMap()
            }
            if self.imageUrl != nil {
                map["imageUrl"] = self.imageUrl?.toMap()
            }
            if self.markdown != nil {
                map["markdown"] = self.markdown?.toMap()
            }
            if self.text != nil {
                map["text"] = self.text?.toMap()
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["cardCallback"] as? [String: Any?] {
                var model = CreateMessageResponseBody.Content.CardCallback()
                model.fromMap(value)
                self.cardCallback = model
            }
            if let value = dict["dingCard"] as? [String: Any?] {
                var model = CreateMessageResponseBody.Content.DingCard()
                model.fromMap(value)
                self.dingCard = model
            }
            if let value = dict["imageUrl"] as? [String: Any?] {
                var model = CreateMessageResponseBody.Content.ImageUrl()
                model.fromMap(value)
                self.imageUrl = model
            }
            if let value = dict["markdown"] as? [String: Any?] {
                var model = CreateMessageResponseBody.Content.Markdown()
                model.fromMap(value)
                self.markdown = model
            }
            if let value = dict["text"] as? [String: Any?] {
                var model = CreateMessageResponseBody.Content.Text()
                model.fromMap(value)
                self.text = model
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public var content: [CreateMessageResponseBody.Content]?

    public var createAt: Int64?

    public var id: String?

    public var metadata: [String: Any]?

    public var object: String?

    public var requestId: String?

    public var role: String?

    public var threadId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            var tmp : [Any] = []
            for k in self.content! {
                tmp.append(k.toMap())
            }
            map["content"] = tmp
        }
        if self.createAt != nil {
            map["createAt"] = self.createAt!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.metadata != nil {
            map["metadata"] = self.metadata!
        }
        if self.object != nil {
            map["object"] = self.object!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.role != nil {
            map["role"] = self.role!
        }
        if self.threadId != nil {
            map["threadId"] = self.threadId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["content"] as? [Any?] {
            var tmp : [CreateMessageResponseBody.Content] = []
            for v in value {
                if v != nil {
                    var model = CreateMessageResponseBody.Content()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.content = tmp
        }
        if let value = dict["createAt"] as? Int64 {
            self.createAt = value
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["metadata"] as? [String: Any] {
            self.metadata = value
        }
        if let value = dict["object"] as? String {
            self.object = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["role"] as? String {
            self.role = value
        }
        if let value = dict["threadId"] as? String {
            self.threadId = value
        }
    }
}

public class CreateMessageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMessageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMessageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMultiDimTableFieldHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateMultiDimTableFieldHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateMultiDimTableFieldHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateMultiDimTableFieldShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateMultiDimTableFieldRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var baseId: String?

    public var name: String?

    public var property: [String: Any]?

    public var sheetIdOrName: String?

    public var tenantContext: CreateMultiDimTableFieldRequest.TenantContext?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.property != nil {
            map["Property"] = self.property!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Property"] as? [String: Any] {
            self.property = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateMultiDimTableFieldRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreateMultiDimTableFieldShrinkRequest : Tea.TeaModel {
    public var baseId: String?

    public var name: String?

    public var propertyShrink: String?

    public var sheetIdOrName: String?

    public var tenantContextShrink: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.propertyShrink != nil {
            map["Property"] = self.propertyShrink!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Property"] as? String {
            self.propertyShrink = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreateMultiDimTableFieldResponseBody : Tea.TeaModel {
    public var id: String?

    public var name: String?

    public var property: [String: Any]?

    public var type: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.property != nil {
            map["Property"] = self.property!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Property"] as? [String: Any] {
            self.property = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class CreateMultiDimTableFieldResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMultiDimTableFieldResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMultiDimTableFieldResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateOrUpdateFormDataHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateOrUpdateFormDataHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateOrUpdateFormDataHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateOrUpdateFormDataShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateOrUpdateFormDataRequest : Tea.TeaModel {
    public var appType: String?

    public var formDataJson: String?

    public var formUuid: String?

    public var noExecuteExpression: Bool?

    public var searchCondition: String?

    public var systemToken: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formDataJson != nil {
            map["FormDataJson"] = self.formDataJson!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.noExecuteExpression != nil {
            map["NoExecuteExpression"] = self.noExecuteExpression!
        }
        if self.searchCondition != nil {
            map["SearchCondition"] = self.searchCondition!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormDataJson"] as? String {
            self.formDataJson = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["NoExecuteExpression"] as? Bool {
            self.noExecuteExpression = value
        }
        if let value = dict["SearchCondition"] as? String {
            self.searchCondition = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class CreateOrUpdateFormDataResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: [String]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [String] {
            self.result = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class CreateOrUpdateFormDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateOrUpdateFormDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateOrUpdateFormDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateOrgHonorTemplateHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateOrgHonorTemplateHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateOrgHonorTemplateHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateOrgHonorTemplateShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateOrgHonorTemplateRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: CreateOrgHonorTemplateRequest.TenantContext?

    public var avatarFrameMediaId: String?

    public var defaultBgColor: String?

    public var medalDesc: String?

    public var medalMediaId: String?

    public var medalName: String?

    public var orgId: Int64?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.avatarFrameMediaId != nil {
            map["avatarFrameMediaId"] = self.avatarFrameMediaId!
        }
        if self.defaultBgColor != nil {
            map["defaultBgColor"] = self.defaultBgColor!
        }
        if self.medalDesc != nil {
            map["medalDesc"] = self.medalDesc!
        }
        if self.medalMediaId != nil {
            map["medalMediaId"] = self.medalMediaId!
        }
        if self.medalName != nil {
            map["medalName"] = self.medalName!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateOrgHonorTemplateRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["avatarFrameMediaId"] as? String {
            self.avatarFrameMediaId = value
        }
        if let value = dict["defaultBgColor"] as? String {
            self.defaultBgColor = value
        }
        if let value = dict["medalDesc"] as? String {
            self.medalDesc = value
        }
        if let value = dict["medalMediaId"] as? String {
            self.medalMediaId = value
        }
        if let value = dict["medalName"] as? String {
            self.medalName = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
    }
}

public class CreateOrgHonorTemplateShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var avatarFrameMediaId: String?

    public var defaultBgColor: String?

    public var medalDesc: String?

    public var medalMediaId: String?

    public var medalName: String?

    public var orgId: Int64?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.avatarFrameMediaId != nil {
            map["avatarFrameMediaId"] = self.avatarFrameMediaId!
        }
        if self.defaultBgColor != nil {
            map["defaultBgColor"] = self.defaultBgColor!
        }
        if self.medalDesc != nil {
            map["medalDesc"] = self.medalDesc!
        }
        if self.medalMediaId != nil {
            map["medalMediaId"] = self.medalMediaId!
        }
        if self.medalName != nil {
            map["medalName"] = self.medalName!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["avatarFrameMediaId"] as? String {
            self.avatarFrameMediaId = value
        }
        if let value = dict["defaultBgColor"] as? String {
            self.defaultBgColor = value
        }
        if let value = dict["medalDesc"] as? String {
            self.medalDesc = value
        }
        if let value = dict["medalMediaId"] as? String {
            self.medalMediaId = value
        }
        if let value = dict["medalName"] as? String {
            self.medalName = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
    }
}

public class CreateOrgHonorTemplateResponseBody : Tea.TeaModel {
    public var honorId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.honorId != nil {
            map["honorId"] = self.honorId!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["honorId"] as? String {
            self.honorId = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateOrgHonorTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateOrgHonorTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateOrgHonorTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePersonalTodoTaskHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreatePersonalTodoTaskHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreatePersonalTodoTaskHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreatePersonalTodoTaskShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreatePersonalTodoTaskRequest : Tea.TeaModel {
    public class NotifyConfigs : Tea.TeaModel {
        public var dingNotify: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dingNotify != nil {
                map["DingNotify"] = self.dingNotify!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DingNotify"] as? String {
                self.dingNotify = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var description_: String?

    public var dueTime: Int64?

    public var executorIds: [String]?

    public var notifyConfigs: CreatePersonalTodoTaskRequest.NotifyConfigs?

    public var participantIds: [String]?

    public var reminderTimeStamp: Int64?

    public var subject: String?

    public var tenantContext: CreatePersonalTodoTaskRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.notifyConfigs?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.dueTime != nil {
            map["DueTime"] = self.dueTime!
        }
        if self.executorIds != nil {
            map["ExecutorIds"] = self.executorIds!
        }
        if self.notifyConfigs != nil {
            map["NotifyConfigs"] = self.notifyConfigs?.toMap()
        }
        if self.participantIds != nil {
            map["ParticipantIds"] = self.participantIds!
        }
        if self.reminderTimeStamp != nil {
            map["ReminderTimeStamp"] = self.reminderTimeStamp!
        }
        if self.subject != nil {
            map["Subject"] = self.subject!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DueTime"] as? Int64 {
            self.dueTime = value
        }
        if let value = dict["ExecutorIds"] as? [String] {
            self.executorIds = value
        }
        if let value = dict["NotifyConfigs"] as? [String: Any?] {
            var model = CreatePersonalTodoTaskRequest.NotifyConfigs()
            model.fromMap(value)
            self.notifyConfigs = model
        }
        if let value = dict["ParticipantIds"] as? [String] {
            self.participantIds = value
        }
        if let value = dict["ReminderTimeStamp"] as? Int64 {
            self.reminderTimeStamp = value
        }
        if let value = dict["Subject"] as? String {
            self.subject = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreatePersonalTodoTaskRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class CreatePersonalTodoTaskShrinkRequest : Tea.TeaModel {
    public var description_: String?

    public var dueTime: Int64?

    public var executorIdsShrink: String?

    public var notifyConfigsShrink: String?

    public var participantIdsShrink: String?

    public var reminderTimeStamp: Int64?

    public var subject: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.dueTime != nil {
            map["DueTime"] = self.dueTime!
        }
        if self.executorIdsShrink != nil {
            map["ExecutorIds"] = self.executorIdsShrink!
        }
        if self.notifyConfigsShrink != nil {
            map["NotifyConfigs"] = self.notifyConfigsShrink!
        }
        if self.participantIdsShrink != nil {
            map["ParticipantIds"] = self.participantIdsShrink!
        }
        if self.reminderTimeStamp != nil {
            map["ReminderTimeStamp"] = self.reminderTimeStamp!
        }
        if self.subject != nil {
            map["Subject"] = self.subject!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DueTime"] as? Int64 {
            self.dueTime = value
        }
        if let value = dict["ExecutorIds"] as? String {
            self.executorIdsShrink = value
        }
        if let value = dict["NotifyConfigs"] as? String {
            self.notifyConfigsShrink = value
        }
        if let value = dict["ParticipantIds"] as? String {
            self.participantIdsShrink = value
        }
        if let value = dict["ReminderTimeStamp"] as? Int64 {
            self.reminderTimeStamp = value
        }
        if let value = dict["Subject"] as? String {
            self.subject = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class CreatePersonalTodoTaskResponseBody : Tea.TeaModel {
    public var createdTime: Int64?

    public var requestId: String?

    public var taskId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createdTime != nil {
            map["createdTime"] = self.createdTime!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["createdTime"] as? Int64 {
            self.createdTime = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["taskId"] as? String {
            self.taskId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class CreatePersonalTodoTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePersonalTodoTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePersonalTodoTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateReportHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateReportHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateReportHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateReportShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateReportRequest : Tea.TeaModel {
    public class Contents : Tea.TeaModel {
        public var content: String?

        public var contentType: String?

        public var key: String?

        public var sort: Int64?

        public var type: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.contentType != nil {
                map["ContentType"] = self.contentType!
            }
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.sort != nil {
                map["Sort"] = self.sort!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["ContentType"] as? String {
                self.contentType = value
            }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Sort"] as? Int64 {
                self.sort = value
            }
            if let value = dict["Type"] as? Int64 {
                self.type = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var contents: [CreateReportRequest.Contents]?

    public var ddFrom: String?

    public var templateId: String?

    public var tenantContext: CreateReportRequest.TenantContext?

    public var toChat: Bool?

    public var toCids: [String]?

    public var toUserids: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contents != nil {
            var tmp : [Any] = []
            for k in self.contents! {
                tmp.append(k.toMap())
            }
            map["Contents"] = tmp
        }
        if self.ddFrom != nil {
            map["DdFrom"] = self.ddFrom!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.toChat != nil {
            map["ToChat"] = self.toChat!
        }
        if self.toCids != nil {
            map["ToCids"] = self.toCids!
        }
        if self.toUserids != nil {
            map["ToUserids"] = self.toUserids!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Contents"] as? [Any?] {
            var tmp : [CreateReportRequest.Contents] = []
            for v in value {
                if v != nil {
                    var model = CreateReportRequest.Contents()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.contents = tmp
        }
        if let value = dict["DdFrom"] as? String {
            self.ddFrom = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateReportRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["ToChat"] as? Bool {
            self.toChat = value
        }
        if let value = dict["ToCids"] as? [String] {
            self.toCids = value
        }
        if let value = dict["ToUserids"] as? [String] {
            self.toUserids = value
        }
    }
}

public class CreateReportShrinkRequest : Tea.TeaModel {
    public var contentsShrink: String?

    public var ddFrom: String?

    public var templateId: String?

    public var tenantContextShrink: String?

    public var toChat: Bool?

    public var toCidsShrink: String?

    public var toUseridsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contentsShrink != nil {
            map["Contents"] = self.contentsShrink!
        }
        if self.ddFrom != nil {
            map["DdFrom"] = self.ddFrom!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.toChat != nil {
            map["ToChat"] = self.toChat!
        }
        if self.toCidsShrink != nil {
            map["ToCids"] = self.toCidsShrink!
        }
        if self.toUseridsShrink != nil {
            map["ToUserids"] = self.toUseridsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Contents"] as? String {
            self.contentsShrink = value
        }
        if let value = dict["DdFrom"] as? String {
            self.ddFrom = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["ToChat"] as? Bool {
            self.toChat = value
        }
        if let value = dict["ToCids"] as? String {
            self.toCidsShrink = value
        }
        if let value = dict["ToUserids"] as? String {
            self.toUseridsShrink = value
        }
    }
}

public class CreateReportResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRunHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountId != nil {
            map["accountId"] = self.accountId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["accountId"] as? String {
            self.accountId = value
        }
    }
}

public class CreateRunRequest : Tea.TeaModel {
    public var assistantId: String?

    public var instructions: String?

    public var metadata: [String: Any]?

    public var originalAssistantId: String?

    public var stream: Bool?

    public var threadId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assistantId != nil {
            map["assistantId"] = self.assistantId!
        }
        if self.instructions != nil {
            map["instructions"] = self.instructions!
        }
        if self.metadata != nil {
            map["metadata"] = self.metadata!
        }
        if self.originalAssistantId != nil {
            map["originalAssistantId"] = self.originalAssistantId!
        }
        if self.stream != nil {
            map["stream"] = self.stream!
        }
        if self.threadId != nil {
            map["threadId"] = self.threadId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["assistantId"] as? String {
            self.assistantId = value
        }
        if let value = dict["instructions"] as? String {
            self.instructions = value
        }
        if let value = dict["metadata"] as? [String: Any] {
            self.metadata = value
        }
        if let value = dict["originalAssistantId"] as? String {
            self.originalAssistantId = value
        }
        if let value = dict["stream"] as? Bool {
            self.stream = value
        }
        if let value = dict["threadId"] as? String {
            self.threadId = value
        }
    }
}

public class CreateRunResponseBody : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public class CardCallback : Tea.TeaModel {
            public var content: String?

            public var templateId: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["content"] = self.content!
                }
                if self.templateId != nil {
                    map["templateId"] = self.templateId!
                }
                if self.userId != nil {
                    map["userId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["content"] as? String {
                    self.content = value
                }
                if let value = dict["templateId"] as? String {
                    self.templateId = value
                }
                if let value = dict["userId"] as? String {
                    self.userId = value
                }
            }
        }
        public class DingCard : Tea.TeaModel {
            public var cardDesc: String?

            public var content: String?

            public var contentType: String?

            public var finished: Bool?

            public var templateId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cardDesc != nil {
                    map["cardDesc"] = self.cardDesc!
                }
                if self.content != nil {
                    map["content"] = self.content!
                }
                if self.contentType != nil {
                    map["contentType"] = self.contentType!
                }
                if self.finished != nil {
                    map["finished"] = self.finished!
                }
                if self.templateId != nil {
                    map["templateId"] = self.templateId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["cardDesc"] as? String {
                    self.cardDesc = value
                }
                if let value = dict["content"] as? String {
                    self.content = value
                }
                if let value = dict["contentType"] as? String {
                    self.contentType = value
                }
                if let value = dict["finished"] as? Bool {
                    self.finished = value
                }
                if let value = dict["templateId"] as? String {
                    self.templateId = value
                }
            }
        }
        public class ImageUrl : Tea.TeaModel {
            public var detail: String?

            public var imageDesc: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.detail != nil {
                    map["detail"] = self.detail!
                }
                if self.imageDesc != nil {
                    map["imageDesc"] = self.imageDesc!
                }
                if self.url != nil {
                    map["url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["detail"] as? String {
                    self.detail = value
                }
                if let value = dict["imageDesc"] as? String {
                    self.imageDesc = value
                }
                if let value = dict["url"] as? String {
                    self.url = value
                }
            }
        }
        public class Markdown : Tea.TeaModel {
            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.value != nil {
                    map["value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["value"] as? String {
                    self.value = value
                }
            }
        }
        public class Text : Tea.TeaModel {
            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.value != nil {
                    map["value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["value"] as? String {
                    self.value = value
                }
            }
        }
        public var cardCallback: CreateRunResponseBody.Content.CardCallback?

        public var dingCard: CreateRunResponseBody.Content.DingCard?

        public var imageUrl: CreateRunResponseBody.Content.ImageUrl?

        public var markdown: CreateRunResponseBody.Content.Markdown?

        public var text: CreateRunResponseBody.Content.Text?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.cardCallback?.validate()
            try self.dingCard?.validate()
            try self.imageUrl?.validate()
            try self.markdown?.validate()
            try self.text?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cardCallback != nil {
                map["cardCallback"] = self.cardCallback?.toMap()
            }
            if self.dingCard != nil {
                map["dingCard"] = self.dingCard?.toMap()
            }
            if self.imageUrl != nil {
                map["imageUrl"] = self.imageUrl?.toMap()
            }
            if self.markdown != nil {
                map["markdown"] = self.markdown?.toMap()
            }
            if self.text != nil {
                map["text"] = self.text?.toMap()
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["cardCallback"] as? [String: Any?] {
                var model = CreateRunResponseBody.Content.CardCallback()
                model.fromMap(value)
                self.cardCallback = model
            }
            if let value = dict["dingCard"] as? [String: Any?] {
                var model = CreateRunResponseBody.Content.DingCard()
                model.fromMap(value)
                self.dingCard = model
            }
            if let value = dict["imageUrl"] as? [String: Any?] {
                var model = CreateRunResponseBody.Content.ImageUrl()
                model.fromMap(value)
                self.imageUrl = model
            }
            if let value = dict["markdown"] as? [String: Any?] {
                var model = CreateRunResponseBody.Content.Markdown()
                model.fromMap(value)
                self.markdown = model
            }
            if let value = dict["text"] as? [String: Any?] {
                var model = CreateRunResponseBody.Content.Text()
                model.fromMap(value)
                self.text = model
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public class Data : Tea.TeaModel {
        public class Content : Tea.TeaModel {
            public class CardCallback : Tea.TeaModel {
                public var content: String?

                public var templateId: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["content"] = self.content!
                    }
                    if self.templateId != nil {
                        map["templateId"] = self.templateId!
                    }
                    if self.userId != nil {
                        map["userId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["content"] as? String {
                        self.content = value
                    }
                    if let value = dict["templateId"] as? String {
                        self.templateId = value
                    }
                    if let value = dict["userId"] as? String {
                        self.userId = value
                    }
                }
            }
            public class DingCard : Tea.TeaModel {
                public var cardDesc: String?

                public var content: String?

                public var contentType: String?

                public var finished: Bool?

                public var templateId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cardDesc != nil {
                        map["cardDesc"] = self.cardDesc!
                    }
                    if self.content != nil {
                        map["content"] = self.content!
                    }
                    if self.contentType != nil {
                        map["contentType"] = self.contentType!
                    }
                    if self.finished != nil {
                        map["finished"] = self.finished!
                    }
                    if self.templateId != nil {
                        map["templateId"] = self.templateId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["cardDesc"] as? String {
                        self.cardDesc = value
                    }
                    if let value = dict["content"] as? String {
                        self.content = value
                    }
                    if let value = dict["contentType"] as? String {
                        self.contentType = value
                    }
                    if let value = dict["finished"] as? Bool {
                        self.finished = value
                    }
                    if let value = dict["templateId"] as? String {
                        self.templateId = value
                    }
                }
            }
            public class ImageUrl : Tea.TeaModel {
                public var detail: String?

                public var imageDesc: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.detail != nil {
                        map["detail"] = self.detail!
                    }
                    if self.imageDesc != nil {
                        map["imageDesc"] = self.imageDesc!
                    }
                    if self.url != nil {
                        map["url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["detail"] as? String {
                        self.detail = value
                    }
                    if let value = dict["imageDesc"] as? String {
                        self.imageDesc = value
                    }
                    if let value = dict["url"] as? String {
                        self.url = value
                    }
                }
            }
            public class Markdown : Tea.TeaModel {
                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.value != nil {
                        map["value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Text : Tea.TeaModel {
                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.value != nil {
                        map["value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["value"] as? String {
                        self.value = value
                    }
                }
            }
            public var cardCallback: CreateRunResponseBody.Data.Content.CardCallback?

            public var dingCard: CreateRunResponseBody.Data.Content.DingCard?

            public var imageUrl: CreateRunResponseBody.Data.Content.ImageUrl?

            public var markdown: CreateRunResponseBody.Data.Content.Markdown?

            public var text: CreateRunResponseBody.Data.Content.Text?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.cardCallback?.validate()
                try self.dingCard?.validate()
                try self.imageUrl?.validate()
                try self.markdown?.validate()
                try self.text?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cardCallback != nil {
                    map["cardCallback"] = self.cardCallback?.toMap()
                }
                if self.dingCard != nil {
                    map["dingCard"] = self.dingCard?.toMap()
                }
                if self.imageUrl != nil {
                    map["imageUrl"] = self.imageUrl?.toMap()
                }
                if self.markdown != nil {
                    map["markdown"] = self.markdown?.toMap()
                }
                if self.text != nil {
                    map["text"] = self.text?.toMap()
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["cardCallback"] as? [String: Any?] {
                    var model = CreateRunResponseBody.Data.Content.CardCallback()
                    model.fromMap(value)
                    self.cardCallback = model
                }
                if let value = dict["dingCard"] as? [String: Any?] {
                    var model = CreateRunResponseBody.Data.Content.DingCard()
                    model.fromMap(value)
                    self.dingCard = model
                }
                if let value = dict["imageUrl"] as? [String: Any?] {
                    var model = CreateRunResponseBody.Data.Content.ImageUrl()
                    model.fromMap(value)
                    self.imageUrl = model
                }
                if let value = dict["markdown"] as? [String: Any?] {
                    var model = CreateRunResponseBody.Data.Content.Markdown()
                    model.fromMap(value)
                    self.markdown = model
                }
                if let value = dict["text"] as? [String: Any?] {
                    var model = CreateRunResponseBody.Data.Content.Text()
                    model.fromMap(value)
                    self.text = model
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
            }
        }
        public var content: [CreateRunResponseBody.Data.Content]?

        public var createAt: Int64?

        public var id: String?

        public var metadata: [String: Any]?

        public var object: String?

        public var role: String?

        public var runId: String?

        public var threadId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                var tmp : [Any] = []
                for k in self.content! {
                    tmp.append(k.toMap())
                }
                map["content"] = tmp
            }
            if self.createAt != nil {
                map["createAt"] = self.createAt!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.metadata != nil {
                map["metadata"] = self.metadata!
            }
            if self.object != nil {
                map["object"] = self.object!
            }
            if self.role != nil {
                map["role"] = self.role!
            }
            if self.runId != nil {
                map["runId"] = self.runId!
            }
            if self.threadId != nil {
                map["threadId"] = self.threadId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["content"] as? [Any?] {
                var tmp : [CreateRunResponseBody.Data.Content] = []
                for v in value {
                    if v != nil {
                        var model = CreateRunResponseBody.Data.Content()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.content = tmp
            }
            if let value = dict["createAt"] as? Int64 {
                self.createAt = value
            }
            if let value = dict["id"] as? String {
                self.id = value
            }
            if let value = dict["metadata"] as? [String: Any] {
                self.metadata = value
            }
            if let value = dict["object"] as? String {
                self.object = value
            }
            if let value = dict["role"] as? String {
                self.role = value
            }
            if let value = dict["runId"] as? String {
                self.runId = value
            }
            if let value = dict["threadId"] as? String {
                self.threadId = value
            }
        }
    }
    public class Delta : Tea.TeaModel {
        public class Content : Tea.TeaModel {
            public class CardCallback : Tea.TeaModel {
                public var content: String?

                public var templateId: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["content"] = self.content!
                    }
                    if self.templateId != nil {
                        map["templateId"] = self.templateId!
                    }
                    if self.userId != nil {
                        map["userId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["content"] as? String {
                        self.content = value
                    }
                    if let value = dict["templateId"] as? String {
                        self.templateId = value
                    }
                    if let value = dict["userId"] as? String {
                        self.userId = value
                    }
                }
            }
            public class DingCard : Tea.TeaModel {
                public var cardDesc: String?

                public var content: String?

                public var contentType: String?

                public var finished: Bool?

                public var templateId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cardDesc != nil {
                        map["cardDesc"] = self.cardDesc!
                    }
                    if self.content != nil {
                        map["content"] = self.content!
                    }
                    if self.contentType != nil {
                        map["contentType"] = self.contentType!
                    }
                    if self.finished != nil {
                        map["finished"] = self.finished!
                    }
                    if self.templateId != nil {
                        map["templateId"] = self.templateId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["cardDesc"] as? String {
                        self.cardDesc = value
                    }
                    if let value = dict["content"] as? String {
                        self.content = value
                    }
                    if let value = dict["contentType"] as? String {
                        self.contentType = value
                    }
                    if let value = dict["finished"] as? Bool {
                        self.finished = value
                    }
                    if let value = dict["templateId"] as? String {
                        self.templateId = value
                    }
                }
            }
            public class ImageUrl : Tea.TeaModel {
                public var detail: String?

                public var imageDesc: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.detail != nil {
                        map["detail"] = self.detail!
                    }
                    if self.imageDesc != nil {
                        map["imageDesc"] = self.imageDesc!
                    }
                    if self.url != nil {
                        map["url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["detail"] as? String {
                        self.detail = value
                    }
                    if let value = dict["imageDesc"] as? String {
                        self.imageDesc = value
                    }
                    if let value = dict["url"] as? String {
                        self.url = value
                    }
                }
            }
            public class Markdown : Tea.TeaModel {
                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.value != nil {
                        map["value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Text : Tea.TeaModel {
                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.value != nil {
                        map["value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["value"] as? String {
                        self.value = value
                    }
                }
            }
            public var cardCallback: CreateRunResponseBody.Delta.Content.CardCallback?

            public var dingCard: CreateRunResponseBody.Delta.Content.DingCard?

            public var imageUrl: CreateRunResponseBody.Delta.Content.ImageUrl?

            public var markdown: CreateRunResponseBody.Delta.Content.Markdown?

            public var text: CreateRunResponseBody.Delta.Content.Text?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.cardCallback?.validate()
                try self.dingCard?.validate()
                try self.imageUrl?.validate()
                try self.markdown?.validate()
                try self.text?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cardCallback != nil {
                    map["cardCallback"] = self.cardCallback?.toMap()
                }
                if self.dingCard != nil {
                    map["dingCard"] = self.dingCard?.toMap()
                }
                if self.imageUrl != nil {
                    map["imageUrl"] = self.imageUrl?.toMap()
                }
                if self.markdown != nil {
                    map["markdown"] = self.markdown?.toMap()
                }
                if self.text != nil {
                    map["text"] = self.text?.toMap()
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["cardCallback"] as? [String: Any?] {
                    var model = CreateRunResponseBody.Delta.Content.CardCallback()
                    model.fromMap(value)
                    self.cardCallback = model
                }
                if let value = dict["dingCard"] as? [String: Any?] {
                    var model = CreateRunResponseBody.Delta.Content.DingCard()
                    model.fromMap(value)
                    self.dingCard = model
                }
                if let value = dict["imageUrl"] as? [String: Any?] {
                    var model = CreateRunResponseBody.Delta.Content.ImageUrl()
                    model.fromMap(value)
                    self.imageUrl = model
                }
                if let value = dict["markdown"] as? [String: Any?] {
                    var model = CreateRunResponseBody.Delta.Content.Markdown()
                    model.fromMap(value)
                    self.markdown = model
                }
                if let value = dict["text"] as? [String: Any?] {
                    var model = CreateRunResponseBody.Delta.Content.Text()
                    model.fromMap(value)
                    self.text = model
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
            }
        }
        public var content: CreateRunResponseBody.Delta.Content?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.content?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["content"] = self.content?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["content"] as? [String: Any?] {
                var model = CreateRunResponseBody.Delta.Content()
                model.fromMap(value)
                self.content = model
            }
        }
    }
    public var cancelledAt: Int64?

    public var completedAt: Int64?

    public var content: CreateRunResponseBody.Content?

    public var createAt: Int64?

    public var data: CreateRunResponseBody.Data?

    public var delta: CreateRunResponseBody.Delta?

    public var expiresAt: Int64?

    public var failedAt: Int64?

    public var id: String?

    public var lastErrorMsg: String?

    public var metadata: [String: Any]?

    public var object: String?

    public var requestId: String?

    public var startedAt: Int64?

    public var status: String?

    public var threadId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.content?.validate()
        try self.data?.validate()
        try self.delta?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cancelledAt != nil {
            map["cancelledAt"] = self.cancelledAt!
        }
        if self.completedAt != nil {
            map["completedAt"] = self.completedAt!
        }
        if self.content != nil {
            map["content"] = self.content?.toMap()
        }
        if self.createAt != nil {
            map["createAt"] = self.createAt!
        }
        if self.data != nil {
            map["data"] = self.data?.toMap()
        }
        if self.delta != nil {
            map["delta"] = self.delta?.toMap()
        }
        if self.expiresAt != nil {
            map["expiresAt"] = self.expiresAt!
        }
        if self.failedAt != nil {
            map["failedAt"] = self.failedAt!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.lastErrorMsg != nil {
            map["lastErrorMsg"] = self.lastErrorMsg!
        }
        if self.metadata != nil {
            map["metadata"] = self.metadata!
        }
        if self.object != nil {
            map["object"] = self.object!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.startedAt != nil {
            map["startedAt"] = self.startedAt!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.threadId != nil {
            map["threadId"] = self.threadId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["cancelledAt"] as? Int64 {
            self.cancelledAt = value
        }
        if let value = dict["completedAt"] as? Int64 {
            self.completedAt = value
        }
        if let value = dict["content"] as? [String: Any?] {
            var model = CreateRunResponseBody.Content()
            model.fromMap(value)
            self.content = model
        }
        if let value = dict["createAt"] as? Int64 {
            self.createAt = value
        }
        if let value = dict["data"] as? [String: Any?] {
            var model = CreateRunResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["delta"] as? [String: Any?] {
            var model = CreateRunResponseBody.Delta()
            model.fromMap(value)
            self.delta = model
        }
        if let value = dict["expiresAt"] as? Int64 {
            self.expiresAt = value
        }
        if let value = dict["failedAt"] as? Int64 {
            self.failedAt = value
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["lastErrorMsg"] as? String {
            self.lastErrorMsg = value
        }
        if let value = dict["metadata"] as? [String: Any] {
            self.metadata = value
        }
        if let value = dict["object"] as? String {
            self.object = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["startedAt"] as? Int64 {
            self.startedAt = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
        if let value = dict["threadId"] as? String {
            self.threadId = value
        }
    }
}

public class CreateRunResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRunResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRunResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateScenegroupHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateScenegroupHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateScenegroupHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateScenegroupShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateScenegroupRequest : Tea.TeaModel {
    public var addFriendForbidden: Int64?

    public var allMembersCanCreateCalendar: Int64?

    public var allMembersCanCreateMcsConf: Int64?

    public var chatBannedType: Int64?

    public var groupEmailDisabled: Int64?

    public var groupLiveSwitch: Int64?

    public var icon: String?

    public var managementType: Int64?

    public var membersToAdminChat: Int64?

    public var mentionAllAuthority: Int64?

    public var onlyAdminCanDing: Int64?

    public var onlyAdminCanSetMsgTop: Int64?

    public var searchable: Int64?

    public var showHistoryType: Int64?

    public var subadminIds: String?

    public var templateId: String?

    public var title: String?

    public var userIds: String?

    public var uuid: String?

    public var validationType: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addFriendForbidden != nil {
            map["AddFriendForbidden"] = self.addFriendForbidden!
        }
        if self.allMembersCanCreateCalendar != nil {
            map["AllMembersCanCreateCalendar"] = self.allMembersCanCreateCalendar!
        }
        if self.allMembersCanCreateMcsConf != nil {
            map["AllMembersCanCreateMcsConf"] = self.allMembersCanCreateMcsConf!
        }
        if self.chatBannedType != nil {
            map["ChatBannedType"] = self.chatBannedType!
        }
        if self.groupEmailDisabled != nil {
            map["GroupEmailDisabled"] = self.groupEmailDisabled!
        }
        if self.groupLiveSwitch != nil {
            map["GroupLiveSwitch"] = self.groupLiveSwitch!
        }
        if self.icon != nil {
            map["Icon"] = self.icon!
        }
        if self.managementType != nil {
            map["ManagementType"] = self.managementType!
        }
        if self.membersToAdminChat != nil {
            map["MembersToAdminChat"] = self.membersToAdminChat!
        }
        if self.mentionAllAuthority != nil {
            map["MentionAllAuthority"] = self.mentionAllAuthority!
        }
        if self.onlyAdminCanDing != nil {
            map["OnlyAdminCanDing"] = self.onlyAdminCanDing!
        }
        if self.onlyAdminCanSetMsgTop != nil {
            map["OnlyAdminCanSetMsgTop"] = self.onlyAdminCanSetMsgTop!
        }
        if self.searchable != nil {
            map["Searchable"] = self.searchable!
        }
        if self.showHistoryType != nil {
            map["ShowHistoryType"] = self.showHistoryType!
        }
        if self.subadminIds != nil {
            map["SubadminIds"] = self.subadminIds!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.userIds != nil {
            map["UserIds"] = self.userIds!
        }
        if self.uuid != nil {
            map["Uuid"] = self.uuid!
        }
        if self.validationType != nil {
            map["ValidationType"] = self.validationType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddFriendForbidden"] as? Int64 {
            self.addFriendForbidden = value
        }
        if let value = dict["AllMembersCanCreateCalendar"] as? Int64 {
            self.allMembersCanCreateCalendar = value
        }
        if let value = dict["AllMembersCanCreateMcsConf"] as? Int64 {
            self.allMembersCanCreateMcsConf = value
        }
        if let value = dict["ChatBannedType"] as? Int64 {
            self.chatBannedType = value
        }
        if let value = dict["GroupEmailDisabled"] as? Int64 {
            self.groupEmailDisabled = value
        }
        if let value = dict["GroupLiveSwitch"] as? Int64 {
            self.groupLiveSwitch = value
        }
        if let value = dict["Icon"] as? String {
            self.icon = value
        }
        if let value = dict["ManagementType"] as? Int64 {
            self.managementType = value
        }
        if let value = dict["MembersToAdminChat"] as? Int64 {
            self.membersToAdminChat = value
        }
        if let value = dict["MentionAllAuthority"] as? Int64 {
            self.mentionAllAuthority = value
        }
        if let value = dict["OnlyAdminCanDing"] as? Int64 {
            self.onlyAdminCanDing = value
        }
        if let value = dict["OnlyAdminCanSetMsgTop"] as? Int64 {
            self.onlyAdminCanSetMsgTop = value
        }
        if let value = dict["Searchable"] as? Int64 {
            self.searchable = value
        }
        if let value = dict["ShowHistoryType"] as? Int64 {
            self.showHistoryType = value
        }
        if let value = dict["SubadminIds"] as? String {
            self.subadminIds = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["UserIds"] as? String {
            self.userIds = value
        }
        if let value = dict["Uuid"] as? String {
            self.uuid = value
        }
        if let value = dict["ValidationType"] as? Int64 {
            self.validationType = value
        }
    }
}

public class CreateScenegroupResponseBody : Tea.TeaModel {
    public var openConversationId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openConversationId != nil {
            map["openConversationId"] = self.openConversationId!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["openConversationId"] as? String {
            self.openConversationId = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateScenegroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateScenegroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateScenegroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateScheduleConferenceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateScheduleConferenceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateScheduleConferenceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateScheduleConferenceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateScheduleConferenceRequest : Tea.TeaModel {
    public class ScheduleConfSettingModel : Tea.TeaModel {
        public class MoziConfOpenRecordSetting : Tea.TeaModel {
            public var isFollowHost: Bool?

            public var mode: String?

            public var recordAutoStart: Int32?

            public var recordAutoStartType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.isFollowHost != nil {
                    map["IsFollowHost"] = self.isFollowHost!
                }
                if self.mode != nil {
                    map["Mode"] = self.mode!
                }
                if self.recordAutoStart != nil {
                    map["RecordAutoStart"] = self.recordAutoStart!
                }
                if self.recordAutoStartType != nil {
                    map["RecordAutoStartType"] = self.recordAutoStartType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IsFollowHost"] as? Bool {
                    self.isFollowHost = value
                }
                if let value = dict["Mode"] as? String {
                    self.mode = value
                }
                if let value = dict["RecordAutoStart"] as? Int32 {
                    self.recordAutoStart = value
                }
                if let value = dict["RecordAutoStartType"] as? Int32 {
                    self.recordAutoStartType = value
                }
            }
        }
        public class MoziConfVirtualExtraSetting : Tea.TeaModel {
            public class MoziConfExtensionAppSettings : Tea.TeaModel {
                public var autoOpenMode: Int32?

                public var coolAppCode: String?

                public var extensionAppBizData: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.autoOpenMode != nil {
                        map["AutoOpenMode"] = self.autoOpenMode!
                    }
                    if self.coolAppCode != nil {
                        map["CoolAppCode"] = self.coolAppCode!
                    }
                    if self.extensionAppBizData != nil {
                        map["ExtensionAppBizData"] = self.extensionAppBizData!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AutoOpenMode"] as? Int32 {
                        self.autoOpenMode = value
                    }
                    if let value = dict["CoolAppCode"] as? String {
                        self.coolAppCode = value
                    }
                    if let value = dict["ExtensionAppBizData"] as? String {
                        self.extensionAppBizData = value
                    }
                }
            }
            public var cloudRecordOwnerUserId: String?

            public var enableChat: Int32?

            public var enableWebAnonymousJoin: Bool?

            public var joinBeforeHost: Int32?

            public var lockMediaStatusMicMute: Int32?

            public var lockNick: Int32?

            public var minutesOwnerUserId: String?

            public var moziConfExtensionAppSettings: [CreateScheduleConferenceRequest.ScheduleConfSettingModel.MoziConfVirtualExtraSetting.MoziConfExtensionAppSettings]?

            public var pushAllMeetingRecords: Bool?

            public var pushCloudRecordCard: Bool?

            public var pushMinutesCard: Bool?

            public var waitingRoom: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cloudRecordOwnerUserId != nil {
                    map["CloudRecordOwnerUserId"] = self.cloudRecordOwnerUserId!
                }
                if self.enableChat != nil {
                    map["EnableChat"] = self.enableChat!
                }
                if self.enableWebAnonymousJoin != nil {
                    map["EnableWebAnonymousJoin"] = self.enableWebAnonymousJoin!
                }
                if self.joinBeforeHost != nil {
                    map["JoinBeforeHost"] = self.joinBeforeHost!
                }
                if self.lockMediaStatusMicMute != nil {
                    map["LockMediaStatusMicMute"] = self.lockMediaStatusMicMute!
                }
                if self.lockNick != nil {
                    map["LockNick"] = self.lockNick!
                }
                if self.minutesOwnerUserId != nil {
                    map["MinutesOwnerUserId"] = self.minutesOwnerUserId!
                }
                if self.moziConfExtensionAppSettings != nil {
                    var tmp : [Any] = []
                    for k in self.moziConfExtensionAppSettings! {
                        tmp.append(k.toMap())
                    }
                    map["MoziConfExtensionAppSettings"] = tmp
                }
                if self.pushAllMeetingRecords != nil {
                    map["PushAllMeetingRecords"] = self.pushAllMeetingRecords!
                }
                if self.pushCloudRecordCard != nil {
                    map["PushCloudRecordCard"] = self.pushCloudRecordCard!
                }
                if self.pushMinutesCard != nil {
                    map["PushMinutesCard"] = self.pushMinutesCard!
                }
                if self.waitingRoom != nil {
                    map["WaitingRoom"] = self.waitingRoom!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CloudRecordOwnerUserId"] as? String {
                    self.cloudRecordOwnerUserId = value
                }
                if let value = dict["EnableChat"] as? Int32 {
                    self.enableChat = value
                }
                if let value = dict["EnableWebAnonymousJoin"] as? Bool {
                    self.enableWebAnonymousJoin = value
                }
                if let value = dict["JoinBeforeHost"] as? Int32 {
                    self.joinBeforeHost = value
                }
                if let value = dict["LockMediaStatusMicMute"] as? Int32 {
                    self.lockMediaStatusMicMute = value
                }
                if let value = dict["LockNick"] as? Int32 {
                    self.lockNick = value
                }
                if let value = dict["MinutesOwnerUserId"] as? String {
                    self.minutesOwnerUserId = value
                }
                if let value = dict["MoziConfExtensionAppSettings"] as? [Any?] {
                    var tmp : [CreateScheduleConferenceRequest.ScheduleConfSettingModel.MoziConfVirtualExtraSetting.MoziConfExtensionAppSettings] = []
                    for v in value {
                        if v != nil {
                            var model = CreateScheduleConferenceRequest.ScheduleConfSettingModel.MoziConfVirtualExtraSetting.MoziConfExtensionAppSettings()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.moziConfExtensionAppSettings = tmp
                }
                if let value = dict["PushAllMeetingRecords"] as? Bool {
                    self.pushAllMeetingRecords = value
                }
                if let value = dict["PushCloudRecordCard"] as? Bool {
                    self.pushCloudRecordCard = value
                }
                if let value = dict["PushMinutesCard"] as? Bool {
                    self.pushMinutesCard = value
                }
                if let value = dict["WaitingRoom"] as? Int32 {
                    self.waitingRoom = value
                }
            }
        }
        public var cohostUserIds: [String]?

        public var confAllowedCorpId: String?

        public var hostUserId: String?

        public var lockRoom: Int32?

        public var moziConfOpenRecordSetting: CreateScheduleConferenceRequest.ScheduleConfSettingModel.MoziConfOpenRecordSetting?

        public var moziConfVirtualExtraSetting: CreateScheduleConferenceRequest.ScheduleConfSettingModel.MoziConfVirtualExtraSetting?

        public var muteOnJoin: Int32?

        public var screenShareForbidden: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.moziConfOpenRecordSetting?.validate()
            try self.moziConfVirtualExtraSetting?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cohostUserIds != nil {
                map["CohostUserIds"] = self.cohostUserIds!
            }
            if self.confAllowedCorpId != nil {
                map["ConfAllowedCorpId"] = self.confAllowedCorpId!
            }
            if self.hostUserId != nil {
                map["HostUserId"] = self.hostUserId!
            }
            if self.lockRoom != nil {
                map["LockRoom"] = self.lockRoom!
            }
            if self.moziConfOpenRecordSetting != nil {
                map["MoziConfOpenRecordSetting"] = self.moziConfOpenRecordSetting?.toMap()
            }
            if self.moziConfVirtualExtraSetting != nil {
                map["MoziConfVirtualExtraSetting"] = self.moziConfVirtualExtraSetting?.toMap()
            }
            if self.muteOnJoin != nil {
                map["MuteOnJoin"] = self.muteOnJoin!
            }
            if self.screenShareForbidden != nil {
                map["ScreenShareForbidden"] = self.screenShareForbidden!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CohostUserIds"] as? [String] {
                self.cohostUserIds = value
            }
            if let value = dict["ConfAllowedCorpId"] as? String {
                self.confAllowedCorpId = value
            }
            if let value = dict["HostUserId"] as? String {
                self.hostUserId = value
            }
            if let value = dict["LockRoom"] as? Int32 {
                self.lockRoom = value
            }
            if let value = dict["MoziConfOpenRecordSetting"] as? [String: Any?] {
                var model = CreateScheduleConferenceRequest.ScheduleConfSettingModel.MoziConfOpenRecordSetting()
                model.fromMap(value)
                self.moziConfOpenRecordSetting = model
            }
            if let value = dict["MoziConfVirtualExtraSetting"] as? [String: Any?] {
                var model = CreateScheduleConferenceRequest.ScheduleConfSettingModel.MoziConfVirtualExtraSetting()
                model.fromMap(value)
                self.moziConfVirtualExtraSetting = model
            }
            if let value = dict["MuteOnJoin"] as? Int32 {
                self.muteOnJoin = value
            }
            if let value = dict["ScreenShareForbidden"] as? Int32 {
                self.screenShareForbidden = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var endTime: Int64?

    public var scheduleConfSettingModel: CreateScheduleConferenceRequest.ScheduleConfSettingModel?

    public var startTime: Int64?

    public var tenantContext: CreateScheduleConferenceRequest.TenantContext?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.scheduleConfSettingModel?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.scheduleConfSettingModel != nil {
            map["ScheduleConfSettingModel"] = self.scheduleConfSettingModel?.toMap()
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ScheduleConfSettingModel"] as? [String: Any?] {
            var model = CreateScheduleConferenceRequest.ScheduleConfSettingModel()
            model.fromMap(value)
            self.scheduleConfSettingModel = model
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateScheduleConferenceRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class CreateScheduleConferenceShrinkRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var scheduleConfSettingModelShrink: String?

    public var startTime: Int64?

    public var tenantContextShrink: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.scheduleConfSettingModelShrink != nil {
            map["ScheduleConfSettingModel"] = self.scheduleConfSettingModelShrink!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ScheduleConfSettingModel"] as? String {
            self.scheduleConfSettingModelShrink = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class CreateScheduleConferenceResponseBody : Tea.TeaModel {
    public var phones: [String]?

    public var requestId: String?

    public var roomCode: String?

    public var scheduleConferenceId: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.phones != nil {
            map["phones"] = self.phones!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.roomCode != nil {
            map["roomCode"] = self.roomCode!
        }
        if self.scheduleConferenceId != nil {
            map["scheduleConferenceId"] = self.scheduleConferenceId!
        }
        if self.url != nil {
            map["url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["phones"] as? [String] {
            self.phones = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["roomCode"] as? String {
            self.roomCode = value
        }
        if let value = dict["scheduleConferenceId"] as? String {
            self.scheduleConferenceId = value
        }
        if let value = dict["url"] as? String {
            self.url = value
        }
    }
}

public class CreateScheduleConferenceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateScheduleConferenceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateScheduleConferenceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSearchDomeHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var userToken: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userToken != nil {
                map["userToken"] = self.userToken!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["userToken"] as? String {
                self.userToken = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateSearchDomeHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateSearchDomeHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateSearchDomeShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateSearchDomeRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var content: String?

    public var endTime: Int64?

    public var resId: String?

    public var startTime: Int64?

    public var tenantContext: CreateSearchDomeRequest.TenantContext?

    public var userIdList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.resId != nil {
            map["ResId"] = self.resId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.userIdList != nil {
            map["UserIdList"] = self.userIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ResId"] as? String {
            self.resId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateSearchDomeRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["UserIdList"] as? [String] {
            self.userIdList = value
        }
    }
}

public class CreateSearchDomeShrinkRequest : Tea.TeaModel {
    public var content: String?

    public var endTime: Int64?

    public var resId: String?

    public var startTime: Int64?

    public var tenantContextShrink: String?

    public var userIdListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.resId != nil {
            map["ResId"] = self.resId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.userIdListShrink != nil {
            map["UserIdList"] = self.userIdListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ResId"] as? String {
            self.resId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["UserIdList"] as? String {
            self.userIdListShrink = value
        }
    }
}

public class CreateSearchDomeResponseBody : Tea.TeaModel {
    public var arguments: [Any]?

    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arguments != nil {
            map["arguments"] = self.arguments!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["arguments"] as? [Any] {
            self.arguments = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class CreateSearchDomeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSearchDomeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSearchDomeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSearchKeywordHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var userToken: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userToken != nil {
                map["userToken"] = self.userToken!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["userToken"] as? String {
                self.userToken = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateSearchKeywordHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateSearchKeywordHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateSearchKeywordShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateSearchKeywordRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var content: String?

    public var endTime: Int64?

    public var resId: String?

    public var startTime: Int64?

    public var tenantContext: CreateSearchKeywordRequest.TenantContext?

    public var userIdList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.resId != nil {
            map["ResId"] = self.resId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.userIdList != nil {
            map["UserIdList"] = self.userIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ResId"] as? String {
            self.resId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateSearchKeywordRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["UserIdList"] as? [String] {
            self.userIdList = value
        }
    }
}

public class CreateSearchKeywordShrinkRequest : Tea.TeaModel {
    public var content: String?

    public var endTime: Int64?

    public var resId: String?

    public var startTime: Int64?

    public var tenantContextShrink: String?

    public var userIdListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.resId != nil {
            map["ResId"] = self.resId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.userIdListShrink != nil {
            map["UserIdList"] = self.userIdListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ResId"] as? String {
            self.resId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["UserIdList"] as? String {
            self.userIdListShrink = value
        }
    }
}

public class CreateSearchKeywordResponseBody : Tea.TeaModel {
    public var arguments: [Any]?

    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arguments != nil {
            map["arguments"] = self.arguments!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["arguments"] as? [Any] {
            self.arguments = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class CreateSearchKeywordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSearchKeywordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSearchKeywordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSheetHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateSheetHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateSheetHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateSheetShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateSheetRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var name: String?

    public var tenantContext: CreateSheetRequest.TenantContext?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateSheetRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class CreateSheetShrinkRequest : Tea.TeaModel {
    public var name: String?

    public var tenantContextShrink: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class CreateSheetResponseBody : Tea.TeaModel {
    public var id: String?

    public var name: String?

    public var requestId: String?

    public var visibility: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.visibility != nil {
            map["visibility"] = self.visibility!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["visibility"] as? String {
            self.visibility = value
        }
    }
}

public class CreateSheetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSheetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSheetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSubscribedCalendarHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateSubscribedCalendarHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateSubscribedCalendarHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateSubscribedCalendarShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateSubscribedCalendarRequest : Tea.TeaModel {
    public class SubscribeScope : Tea.TeaModel {
        public var corpIds: [String]?

        public var openConversationIds: [String]?

        public var userIds: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpIds != nil {
                map["CorpIds"] = self.corpIds!
            }
            if self.openConversationIds != nil {
                map["OpenConversationIds"] = self.openConversationIds!
            }
            if self.userIds != nil {
                map["UserIds"] = self.userIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpIds"] as? [String] {
                self.corpIds = value
            }
            if let value = dict["OpenConversationIds"] as? [String] {
                self.openConversationIds = value
            }
            if let value = dict["UserIds"] as? [String] {
                self.userIds = value
            }
        }
    }
    public var description_: String?

    public var managers: [String]?

    public var name: String?

    public var subscribeScope: CreateSubscribedCalendarRequest.SubscribeScope?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.subscribeScope?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.managers != nil {
            map["Managers"] = self.managers!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.subscribeScope != nil {
            map["SubscribeScope"] = self.subscribeScope?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Managers"] as? [String] {
            self.managers = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["SubscribeScope"] as? [String: Any?] {
            var model = CreateSubscribedCalendarRequest.SubscribeScope()
            model.fromMap(value)
            self.subscribeScope = model
        }
    }
}

public class CreateSubscribedCalendarShrinkRequest : Tea.TeaModel {
    public var description_: String?

    public var managersShrink: String?

    public var name: String?

    public var subscribeScopeShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.managersShrink != nil {
            map["Managers"] = self.managersShrink!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.subscribeScopeShrink != nil {
            map["SubscribeScope"] = self.subscribeScopeShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Managers"] as? String {
            self.managersShrink = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["SubscribeScope"] as? String {
            self.subscribeScopeShrink = value
        }
    }
}

public class CreateSubscribedCalendarResponseBody : Tea.TeaModel {
    public var calendarId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["calendarId"] = self.calendarId!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["calendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSubscribedCalendarResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSubscribedCalendarResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSubscribedCalendarResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateThreadHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountId != nil {
            map["accountId"] = self.accountId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["accountId"] as? String {
            self.accountId = value
        }
    }
}

public class CreateThreadRequest : Tea.TeaModel {
    public var assistantId: String?

    public var metadata: [String: Any]?

    public var originalAssistantId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assistantId != nil {
            map["assistantId"] = self.assistantId!
        }
        if self.metadata != nil {
            map["metadata"] = self.metadata!
        }
        if self.originalAssistantId != nil {
            map["originalAssistantId"] = self.originalAssistantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["assistantId"] as? String {
            self.assistantId = value
        }
        if let value = dict["metadata"] as? [String: Any] {
            self.metadata = value
        }
        if let value = dict["originalAssistantId"] as? String {
            self.originalAssistantId = value
        }
    }
}

public class CreateThreadResponseBody : Tea.TeaModel {
    public var createAt: Int64?

    public var id: String?

    public var metadata: [String: Any]?

    public var object: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createAt != nil {
            map["createAt"] = self.createAt!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.metadata != nil {
            map["metadata"] = self.metadata!
        }
        if self.object != nil {
            map["object"] = self.object!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["createAt"] as? Int64 {
            self.createAt = value
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["metadata"] as? [String: Any] {
            self.metadata = value
        }
        if let value = dict["object"] as? String {
            self.object = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateThreadResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateThreadResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateThreadResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateTicketHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateTicketHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateTicketHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateTicketShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateTicketRequest : Tea.TeaModel {
    public class Notify : Tea.TeaModel {
        public var groupNoticeReceiverUserIds: [String]?

        public var noticeAllGroupMember: Bool?

        public var workNoticeReceiverUserIds: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.groupNoticeReceiverUserIds != nil {
                map["GroupNoticeReceiverUserIds"] = self.groupNoticeReceiverUserIds!
            }
            if self.noticeAllGroupMember != nil {
                map["NoticeAllGroupMember"] = self.noticeAllGroupMember!
            }
            if self.workNoticeReceiverUserIds != nil {
                map["WorkNoticeReceiverUserIds"] = self.workNoticeReceiverUserIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["GroupNoticeReceiverUserIds"] as? [String] {
                self.groupNoticeReceiverUserIds = value
            }
            if let value = dict["NoticeAllGroupMember"] as? Bool {
                self.noticeAllGroupMember = value
            }
            if let value = dict["WorkNoticeReceiverUserIds"] as? [String] {
                self.workNoticeReceiverUserIds = value
            }
        }
    }
    public class SceneContext : Tea.TeaModel {
        public class GroupMsgs : Tea.TeaModel {
            public var anchor: Bool?

            public var openMsgId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.anchor != nil {
                    map["Anchor"] = self.anchor!
                }
                if self.openMsgId != nil {
                    map["OpenMsgId"] = self.openMsgId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Anchor"] as? Bool {
                    self.anchor = value
                }
                if let value = dict["OpenMsgId"] as? String {
                    self.openMsgId = value
                }
            }
        }
        public var groupMsgs: [CreateTicketRequest.SceneContext.GroupMsgs]?

        public var openConversationId: String?

        public var relevantorUserIds: [String]?

        public var topicId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.groupMsgs != nil {
                var tmp : [Any] = []
                for k in self.groupMsgs! {
                    tmp.append(k.toMap())
                }
                map["GroupMsgs"] = tmp
            }
            if self.openConversationId != nil {
                map["OpenConversationId"] = self.openConversationId!
            }
            if self.relevantorUserIds != nil {
                map["RelevantorUserIds"] = self.relevantorUserIds!
            }
            if self.topicId != nil {
                map["TopicId"] = self.topicId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["GroupMsgs"] as? [Any?] {
                var tmp : [CreateTicketRequest.SceneContext.GroupMsgs] = []
                for v in value {
                    if v != nil {
                        var model = CreateTicketRequest.SceneContext.GroupMsgs()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.groupMsgs = tmp
            }
            if let value = dict["OpenConversationId"] as? String {
                self.openConversationId = value
            }
            if let value = dict["RelevantorUserIds"] as? [String] {
                self.relevantorUserIds = value
            }
            if let value = dict["TopicId"] as? String {
                self.topicId = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var customFields: String?

    public var notify: CreateTicketRequest.Notify?

    public var openTeamId: String?

    public var openTemplateBizId: String?

    public var processorUserIds: [String]?

    public var scene: String?

    public var sceneContext: CreateTicketRequest.SceneContext?

    public var tenantContext: CreateTicketRequest.TenantContext?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.notify?.validate()
        try self.sceneContext?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customFields != nil {
            map["CustomFields"] = self.customFields!
        }
        if self.notify != nil {
            map["Notify"] = self.notify?.toMap()
        }
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTemplateBizId != nil {
            map["OpenTemplateBizId"] = self.openTemplateBizId!
        }
        if self.processorUserIds != nil {
            map["ProcessorUserIds"] = self.processorUserIds!
        }
        if self.scene != nil {
            map["Scene"] = self.scene!
        }
        if self.sceneContext != nil {
            map["SceneContext"] = self.sceneContext?.toMap()
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomFields"] as? String {
            self.customFields = value
        }
        if let value = dict["Notify"] as? [String: Any?] {
            var model = CreateTicketRequest.Notify()
            model.fromMap(value)
            self.notify = model
        }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTemplateBizId"] as? String {
            self.openTemplateBizId = value
        }
        if let value = dict["ProcessorUserIds"] as? [String] {
            self.processorUserIds = value
        }
        if let value = dict["Scene"] as? String {
            self.scene = value
        }
        if let value = dict["SceneContext"] as? [String: Any?] {
            var model = CreateTicketRequest.SceneContext()
            model.fromMap(value)
            self.sceneContext = model
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateTicketRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class CreateTicketShrinkRequest : Tea.TeaModel {
    public var customFields: String?

    public var notifyShrink: String?

    public var openTeamId: String?

    public var openTemplateBizId: String?

    public var processorUserIdsShrink: String?

    public var scene: String?

    public var sceneContextShrink: String?

    public var tenantContextShrink: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customFields != nil {
            map["CustomFields"] = self.customFields!
        }
        if self.notifyShrink != nil {
            map["Notify"] = self.notifyShrink!
        }
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTemplateBizId != nil {
            map["OpenTemplateBizId"] = self.openTemplateBizId!
        }
        if self.processorUserIdsShrink != nil {
            map["ProcessorUserIds"] = self.processorUserIdsShrink!
        }
        if self.scene != nil {
            map["Scene"] = self.scene!
        }
        if self.sceneContextShrink != nil {
            map["SceneContext"] = self.sceneContextShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomFields"] as? String {
            self.customFields = value
        }
        if let value = dict["Notify"] as? String {
            self.notifyShrink = value
        }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTemplateBizId"] as? String {
            self.openTemplateBizId = value
        }
        if let value = dict["ProcessorUserIds"] as? String {
            self.processorUserIdsShrink = value
        }
        if let value = dict["Scene"] as? String {
            self.scene = value
        }
        if let value = dict["SceneContext"] as? String {
            self.sceneContextShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class CreateTicketResponseBody : Tea.TeaModel {
    public var openTicketId: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openTicketId != nil {
            map["openTicketId"] = self.openTicketId!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["openTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class CreateTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateTodoTaskHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateTodoTaskHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateTodoTaskHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateTodoTaskShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateTodoTaskRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public class ActionList : Tea.TeaModel {
        public class Param : Tea.TeaModel {
            public var body: String?

            public var header: [String: String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["body"] = self.body!
                }
                if self.header != nil {
                    map["header"] = self.header!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["body"] as? String {
                    self.body = value
                }
                if let value = dict["header"] as? [String: String] {
                    self.header = value
                }
            }
        }
        public var actionKey: String?

        public var actionType: Int32?

        public var buttonStyleType: Int32?

        public var param: CreateTodoTaskRequest.ActionList.Param?

        public var pcUrl: String?

        public var title: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.param?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actionKey != nil {
                map["actionKey"] = self.actionKey!
            }
            if self.actionType != nil {
                map["actionType"] = self.actionType!
            }
            if self.buttonStyleType != nil {
                map["buttonStyleType"] = self.buttonStyleType!
            }
            if self.param != nil {
                map["param"] = self.param?.toMap()
            }
            if self.pcUrl != nil {
                map["pcUrl"] = self.pcUrl!
            }
            if self.title != nil {
                map["title"] = self.title!
            }
            if self.url != nil {
                map["url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["actionKey"] as? String {
                self.actionKey = value
            }
            if let value = dict["actionType"] as? Int32 {
                self.actionType = value
            }
            if let value = dict["buttonStyleType"] as? Int32 {
                self.buttonStyleType = value
            }
            if let value = dict["param"] as? [String: Any?] {
                var model = CreateTodoTaskRequest.ActionList.Param()
                model.fromMap(value)
                self.param = model
            }
            if let value = dict["pcUrl"] as? String {
                self.pcUrl = value
            }
            if let value = dict["title"] as? String {
                self.title = value
            }
            if let value = dict["url"] as? String {
                self.url = value
            }
        }
    }
    public class ContentFieldList : Tea.TeaModel {
        public var fieldKey: String?

        public var fieldValue: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fieldKey != nil {
                map["fieldKey"] = self.fieldKey!
            }
            if self.fieldValue != nil {
                map["fieldValue"] = self.fieldValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["fieldKey"] as? String {
                self.fieldKey = value
            }
            if let value = dict["fieldValue"] as? String {
                self.fieldValue = value
            }
        }
    }
    public class DetailUrl : Tea.TeaModel {
        public var appUrl: String?

        public var pcUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appUrl != nil {
                map["appUrl"] = self.appUrl!
            }
            if self.pcUrl != nil {
                map["pcUrl"] = self.pcUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["appUrl"] as? String {
                self.appUrl = value
            }
            if let value = dict["pcUrl"] as? String {
                self.pcUrl = value
            }
        }
    }
    public class NotifyConfigs : Tea.TeaModel {
        public var dingNotify: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dingNotify != nil {
                map["dingNotify"] = self.dingNotify!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["dingNotify"] as? String {
                self.dingNotify = value
            }
        }
    }
    public var tenantContext: CreateTodoTaskRequest.TenantContext?

    public var actionList: [CreateTodoTaskRequest.ActionList]?

    public var contentFieldList: [CreateTodoTaskRequest.ContentFieldList]?

    public var creatorId: String?

    public var description_: String?

    public var detailUrl: CreateTodoTaskRequest.DetailUrl?

    public var dueTime: Int64?

    public var executorIds: [String]?

    public var isOnlyShowExecutor: Bool?

    public var notifyConfigs: CreateTodoTaskRequest.NotifyConfigs?

    public var operatorId: String?

    public var participantIds: [String]?

    public var priority: Int32?

    public var sourceId: String?

    public var subject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
        try self.detailUrl?.validate()
        try self.notifyConfigs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.actionList != nil {
            var tmp : [Any] = []
            for k in self.actionList! {
                tmp.append(k.toMap())
            }
            map["actionList"] = tmp
        }
        if self.contentFieldList != nil {
            var tmp : [Any] = []
            for k in self.contentFieldList! {
                tmp.append(k.toMap())
            }
            map["contentFieldList"] = tmp
        }
        if self.creatorId != nil {
            map["creatorId"] = self.creatorId!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.detailUrl != nil {
            map["detailUrl"] = self.detailUrl?.toMap()
        }
        if self.dueTime != nil {
            map["dueTime"] = self.dueTime!
        }
        if self.executorIds != nil {
            map["executorIds"] = self.executorIds!
        }
        if self.isOnlyShowExecutor != nil {
            map["isOnlyShowExecutor"] = self.isOnlyShowExecutor!
        }
        if self.notifyConfigs != nil {
            map["notifyConfigs"] = self.notifyConfigs?.toMap()
        }
        if self.operatorId != nil {
            map["operatorId"] = self.operatorId!
        }
        if self.participantIds != nil {
            map["participantIds"] = self.participantIds!
        }
        if self.priority != nil {
            map["priority"] = self.priority!
        }
        if self.sourceId != nil {
            map["sourceId"] = self.sourceId!
        }
        if self.subject != nil {
            map["subject"] = self.subject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateTodoTaskRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["actionList"] as? [Any?] {
            var tmp : [CreateTodoTaskRequest.ActionList] = []
            for v in value {
                if v != nil {
                    var model = CreateTodoTaskRequest.ActionList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.actionList = tmp
        }
        if let value = dict["contentFieldList"] as? [Any?] {
            var tmp : [CreateTodoTaskRequest.ContentFieldList] = []
            for v in value {
                if v != nil {
                    var model = CreateTodoTaskRequest.ContentFieldList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.contentFieldList = tmp
        }
        if let value = dict["creatorId"] as? String {
            self.creatorId = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["detailUrl"] as? [String: Any?] {
            var model = CreateTodoTaskRequest.DetailUrl()
            model.fromMap(value)
            self.detailUrl = model
        }
        if let value = dict["dueTime"] as? Int64 {
            self.dueTime = value
        }
        if let value = dict["executorIds"] as? [String] {
            self.executorIds = value
        }
        if let value = dict["isOnlyShowExecutor"] as? Bool {
            self.isOnlyShowExecutor = value
        }
        if let value = dict["notifyConfigs"] as? [String: Any?] {
            var model = CreateTodoTaskRequest.NotifyConfigs()
            model.fromMap(value)
            self.notifyConfigs = model
        }
        if let value = dict["operatorId"] as? String {
            self.operatorId = value
        }
        if let value = dict["participantIds"] as? [String] {
            self.participantIds = value
        }
        if let value = dict["priority"] as? Int32 {
            self.priority = value
        }
        if let value = dict["sourceId"] as? String {
            self.sourceId = value
        }
        if let value = dict["subject"] as? String {
            self.subject = value
        }
    }
}

public class CreateTodoTaskShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var actionListShrink: String?

    public var contentFieldListShrink: String?

    public var creatorId: String?

    public var description_: String?

    public var detailUrlShrink: String?

    public var dueTime: Int64?

    public var executorIdsShrink: String?

    public var isOnlyShowExecutor: Bool?

    public var notifyConfigsShrink: String?

    public var operatorId: String?

    public var participantIdsShrink: String?

    public var priority: Int32?

    public var sourceId: String?

    public var subject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.actionListShrink != nil {
            map["actionList"] = self.actionListShrink!
        }
        if self.contentFieldListShrink != nil {
            map["contentFieldList"] = self.contentFieldListShrink!
        }
        if self.creatorId != nil {
            map["creatorId"] = self.creatorId!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.detailUrlShrink != nil {
            map["detailUrl"] = self.detailUrlShrink!
        }
        if self.dueTime != nil {
            map["dueTime"] = self.dueTime!
        }
        if self.executorIdsShrink != nil {
            map["executorIds"] = self.executorIdsShrink!
        }
        if self.isOnlyShowExecutor != nil {
            map["isOnlyShowExecutor"] = self.isOnlyShowExecutor!
        }
        if self.notifyConfigsShrink != nil {
            map["notifyConfigs"] = self.notifyConfigsShrink!
        }
        if self.operatorId != nil {
            map["operatorId"] = self.operatorId!
        }
        if self.participantIdsShrink != nil {
            map["participantIds"] = self.participantIdsShrink!
        }
        if self.priority != nil {
            map["priority"] = self.priority!
        }
        if self.sourceId != nil {
            map["sourceId"] = self.sourceId!
        }
        if self.subject != nil {
            map["subject"] = self.subject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["actionList"] as? String {
            self.actionListShrink = value
        }
        if let value = dict["contentFieldList"] as? String {
            self.contentFieldListShrink = value
        }
        if let value = dict["creatorId"] as? String {
            self.creatorId = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["detailUrl"] as? String {
            self.detailUrlShrink = value
        }
        if let value = dict["dueTime"] as? Int64 {
            self.dueTime = value
        }
        if let value = dict["executorIds"] as? String {
            self.executorIdsShrink = value
        }
        if let value = dict["isOnlyShowExecutor"] as? Bool {
            self.isOnlyShowExecutor = value
        }
        if let value = dict["notifyConfigs"] as? String {
            self.notifyConfigsShrink = value
        }
        if let value = dict["operatorId"] as? String {
            self.operatorId = value
        }
        if let value = dict["participantIds"] as? String {
            self.participantIdsShrink = value
        }
        if let value = dict["priority"] as? Int32 {
            self.priority = value
        }
        if let value = dict["sourceId"] as? String {
            self.sourceId = value
        }
        if let value = dict["subject"] as? String {
            self.subject = value
        }
    }
}

public class CreateTodoTaskResponseBody : Tea.TeaModel {
    public class ContentFieldList : Tea.TeaModel {
        public var fieldKey: String?

        public var fieldValue: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fieldKey != nil {
                map["fieldKey"] = self.fieldKey!
            }
            if self.fieldValue != nil {
                map["fieldValue"] = self.fieldValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["fieldKey"] as? String {
                self.fieldKey = value
            }
            if let value = dict["fieldValue"] as? String {
                self.fieldValue = value
            }
        }
    }
    public class DetailUrl : Tea.TeaModel {
        public var appUrl: String?

        public var pcUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appUrl != nil {
                map["appUrl"] = self.appUrl!
            }
            if self.pcUrl != nil {
                map["pcUrl"] = self.pcUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["appUrl"] as? String {
                self.appUrl = value
            }
            if let value = dict["pcUrl"] as? String {
                self.pcUrl = value
            }
        }
    }
    public class NotifyConfigs : Tea.TeaModel {
        public var dingNotify: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dingNotify != nil {
                map["dingNotify"] = self.dingNotify!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["dingNotify"] as? String {
                self.dingNotify = value
            }
        }
    }
    public var bizTag: String?

    public var contentFieldList: [CreateTodoTaskResponseBody.ContentFieldList]?

    public var createdTime: Int64?

    public var creatorId: String?

    public var description_: String?

    public var detailUrl: CreateTodoTaskResponseBody.DetailUrl?

    public var done: Bool?

    public var dueTime: Int64?

    public var executorIds: [String]?

    public var finishTime: Int64?

    public var id: String?

    public var isOnlyShowExecutor: Bool?

    public var modifiedTime: Int64?

    public var modifierId: String?

    public var notifyConfigs: CreateTodoTaskResponseBody.NotifyConfigs?

    public var participantIds: [String]?

    public var priority: Int32?

    public var requestId: String?

    public var source: String?

    public var sourceId: String?

    public var startTime: Int64?

    public var subject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.detailUrl?.validate()
        try self.notifyConfigs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizTag != nil {
            map["bizTag"] = self.bizTag!
        }
        if self.contentFieldList != nil {
            var tmp : [Any] = []
            for k in self.contentFieldList! {
                tmp.append(k.toMap())
            }
            map["contentFieldList"] = tmp
        }
        if self.createdTime != nil {
            map["createdTime"] = self.createdTime!
        }
        if self.creatorId != nil {
            map["creatorId"] = self.creatorId!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.detailUrl != nil {
            map["detailUrl"] = self.detailUrl?.toMap()
        }
        if self.done != nil {
            map["done"] = self.done!
        }
        if self.dueTime != nil {
            map["dueTime"] = self.dueTime!
        }
        if self.executorIds != nil {
            map["executorIds"] = self.executorIds!
        }
        if self.finishTime != nil {
            map["finishTime"] = self.finishTime!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.isOnlyShowExecutor != nil {
            map["isOnlyShowExecutor"] = self.isOnlyShowExecutor!
        }
        if self.modifiedTime != nil {
            map["modifiedTime"] = self.modifiedTime!
        }
        if self.modifierId != nil {
            map["modifierId"] = self.modifierId!
        }
        if self.notifyConfigs != nil {
            map["notifyConfigs"] = self.notifyConfigs?.toMap()
        }
        if self.participantIds != nil {
            map["participantIds"] = self.participantIds!
        }
        if self.priority != nil {
            map["priority"] = self.priority!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.source != nil {
            map["source"] = self.source!
        }
        if self.sourceId != nil {
            map["sourceId"] = self.sourceId!
        }
        if self.startTime != nil {
            map["startTime"] = self.startTime!
        }
        if self.subject != nil {
            map["subject"] = self.subject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["bizTag"] as? String {
            self.bizTag = value
        }
        if let value = dict["contentFieldList"] as? [Any?] {
            var tmp : [CreateTodoTaskResponseBody.ContentFieldList] = []
            for v in value {
                if v != nil {
                    var model = CreateTodoTaskResponseBody.ContentFieldList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.contentFieldList = tmp
        }
        if let value = dict["createdTime"] as? Int64 {
            self.createdTime = value
        }
        if let value = dict["creatorId"] as? String {
            self.creatorId = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["detailUrl"] as? [String: Any?] {
            var model = CreateTodoTaskResponseBody.DetailUrl()
            model.fromMap(value)
            self.detailUrl = model
        }
        if let value = dict["done"] as? Bool {
            self.done = value
        }
        if let value = dict["dueTime"] as? Int64 {
            self.dueTime = value
        }
        if let value = dict["executorIds"] as? [String] {
            self.executorIds = value
        }
        if let value = dict["finishTime"] as? Int64 {
            self.finishTime = value
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["isOnlyShowExecutor"] as? Bool {
            self.isOnlyShowExecutor = value
        }
        if let value = dict["modifiedTime"] as? Int64 {
            self.modifiedTime = value
        }
        if let value = dict["modifierId"] as? String {
            self.modifierId = value
        }
        if let value = dict["notifyConfigs"] as? [String: Any?] {
            var model = CreateTodoTaskResponseBody.NotifyConfigs()
            model.fromMap(value)
            self.notifyConfigs = model
        }
        if let value = dict["participantIds"] as? [String] {
            self.participantIds = value
        }
        if let value = dict["priority"] as? Int32 {
            self.priority = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["source"] as? String {
            self.source = value
        }
        if let value = dict["sourceId"] as? String {
            self.sourceId = value
        }
        if let value = dict["startTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["subject"] as? String {
            self.subject = value
        }
    }
}

public class CreateTodoTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateTodoTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateTodoTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateVideoConferenceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateVideoConferenceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateVideoConferenceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateVideoConferenceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateVideoConferenceRequest : Tea.TeaModel {
    public var confTitle: String?

    public var inviteCaller: Bool?

    public var inviteUserIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.confTitle != nil {
            map["ConfTitle"] = self.confTitle!
        }
        if self.inviteCaller != nil {
            map["InviteCaller"] = self.inviteCaller!
        }
        if self.inviteUserIds != nil {
            map["InviteUserIds"] = self.inviteUserIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfTitle"] as? String {
            self.confTitle = value
        }
        if let value = dict["InviteCaller"] as? Bool {
            self.inviteCaller = value
        }
        if let value = dict["InviteUserIds"] as? [String] {
            self.inviteUserIds = value
        }
    }
}

public class CreateVideoConferenceShrinkRequest : Tea.TeaModel {
    public var confTitle: String?

    public var inviteCaller: Bool?

    public var inviteUserIdsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.confTitle != nil {
            map["ConfTitle"] = self.confTitle!
        }
        if self.inviteCaller != nil {
            map["InviteCaller"] = self.inviteCaller!
        }
        if self.inviteUserIdsShrink != nil {
            map["InviteUserIds"] = self.inviteUserIdsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfTitle"] as? String {
            self.confTitle = value
        }
        if let value = dict["InviteCaller"] as? Bool {
            self.inviteCaller = value
        }
        if let value = dict["InviteUserIds"] as? String {
            self.inviteUserIdsShrink = value
        }
    }
}

public class CreateVideoConferenceResponseBody : Tea.TeaModel {
    public var conferenceId: String?

    public var conferencePassword: String?

    public var externalLinkUrl: String?

    public var hostPassword: String?

    public var phoneNumbers: [String]?

    public var requestId: String?

    public var roomCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        if self.conferencePassword != nil {
            map["conferencePassword"] = self.conferencePassword!
        }
        if self.externalLinkUrl != nil {
            map["externalLinkUrl"] = self.externalLinkUrl!
        }
        if self.hostPassword != nil {
            map["hostPassword"] = self.hostPassword!
        }
        if self.phoneNumbers != nil {
            map["phoneNumbers"] = self.phoneNumbers!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.roomCode != nil {
            map["roomCode"] = self.roomCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["conferencePassword"] as? String {
            self.conferencePassword = value
        }
        if let value = dict["externalLinkUrl"] as? String {
            self.externalLinkUrl = value
        }
        if let value = dict["hostPassword"] as? String {
            self.hostPassword = value
        }
        if let value = dict["phoneNumbers"] as? [String] {
            self.phoneNumbers = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["roomCode"] as? String {
            self.roomCode = value
        }
    }
}

public class CreateVideoConferenceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateVideoConferenceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateVideoConferenceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWorkspaceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateWorkspaceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateWorkspaceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateWorkspaceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateWorkspaceRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var description_: String?

    public var name: String?

    public var tenantContext: CreateWorkspaceRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateWorkspaceRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class CreateWorkspaceShrinkRequest : Tea.TeaModel {
    public var description_: String?

    public var name: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class CreateWorkspaceResponseBody : Tea.TeaModel {
    public var description_: String?

    public var name: String?

    public var requestId: String?

    public var url: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.url != nil {
            map["url"] = self.url!
        }
        if self.workspaceId != nil {
            map["workspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["url"] as? String {
            self.url = value
        }
        if let value = dict["workspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class CreateWorkspaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWorkspaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWorkspaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWorkspaceDocHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: CreateWorkspaceDocHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = CreateWorkspaceDocHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class CreateWorkspaceDocShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class CreateWorkspaceDocRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var docType: String?

    public var name: String?

    public var parentNodeId: String?

    public var templateId: String?

    public var templateType: String?

    public var tenantContext: CreateWorkspaceDocRequest.TenantContext?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.parentNodeId != nil {
            map["ParentNodeId"] = self.parentNodeId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.templateType != nil {
            map["TemplateType"] = self.templateType!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["ParentNodeId"] as? String {
            self.parentNodeId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
        if let value = dict["TemplateType"] as? String {
            self.templateType = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = CreateWorkspaceDocRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class CreateWorkspaceDocShrinkRequest : Tea.TeaModel {
    public var docType: String?

    public var name: String?

    public var parentNodeId: String?

    public var templateId: String?

    public var templateType: String?

    public var tenantContextShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.docType != nil {
            map["DocType"] = self.docType!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.parentNodeId != nil {
            map["ParentNodeId"] = self.parentNodeId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.templateType != nil {
            map["TemplateType"] = self.templateType!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DocType"] as? String {
            self.docType = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["ParentNodeId"] as? String {
            self.parentNodeId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
        if let value = dict["TemplateType"] as? String {
            self.templateType = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class CreateWorkspaceDocResponseBody : Tea.TeaModel {
    public var dentryUuid: String?

    public var docKey: String?

    public var nodeId: String?

    public var requestId: String?

    public var url: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["dentryUuid"] = self.dentryUuid!
        }
        if self.docKey != nil {
            map["docKey"] = self.docKey!
        }
        if self.nodeId != nil {
            map["nodeId"] = self.nodeId!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.url != nil {
            map["url"] = self.url!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        if self.workspaceId != nil {
            map["workspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["dentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["docKey"] as? String {
            self.docKey = value
        }
        if let value = dict["nodeId"] as? String {
            self.nodeId = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["url"] as? String {
            self.url = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
        if let value = dict["workspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class CreateWorkspaceDocResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWorkspaceDocResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWorkspaceDocResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteColumnsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteColumnsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteColumnsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteColumnsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteColumnsRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var column: Int64?

    public var columnCount: Int64?

    public var sheetId: String?

    public var tenantContext: DeleteColumnsRequest.TenantContext?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.column != nil {
            map["Column"] = self.column!
        }
        if self.columnCount != nil {
            map["ColumnCount"] = self.columnCount!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Column"] as? Int64 {
            self.column = value
        }
        if let value = dict["ColumnCount"] as? Int64 {
            self.columnCount = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeleteColumnsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class DeleteColumnsShrinkRequest : Tea.TeaModel {
    public var column: Int64?

    public var columnCount: Int64?

    public var sheetId: String?

    public var tenantContextShrink: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.column != nil {
            map["Column"] = self.column!
        }
        if self.columnCount != nil {
            map["ColumnCount"] = self.columnCount!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Column"] as? Int64 {
            self.column = value
        }
        if let value = dict["ColumnCount"] as? Int64 {
            self.columnCount = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class DeleteColumnsResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteColumnsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteColumnsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteColumnsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDentryHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteDentryHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteDentryHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteDentryShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteDentryRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dentryId: String?

    public var spaceId: String?

    public var tenantContext: DeleteDentryRequest.TenantContext?

    public var toRecycleBin: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryId != nil {
            map["DentryId"] = self.dentryId!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.toRecycleBin != nil {
            map["ToRecycleBin"] = self.toRecycleBin!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeleteDentryRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["ToRecycleBin"] as? Bool {
            self.toRecycleBin = value
        }
    }
}

public class DeleteDentryShrinkRequest : Tea.TeaModel {
    public var dentryId: String?

    public var spaceId: String?

    public var tenantContextShrink: String?

    public var toRecycleBin: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryId != nil {
            map["DentryId"] = self.dentryId!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.toRecycleBin != nil {
            map["ToRecycleBin"] = self.toRecycleBin!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["ToRecycleBin"] as? Bool {
            self.toRecycleBin = value
        }
    }
}

public class DeleteDentryResponseBody : Tea.TeaModel {
    public var async: Bool?

    public var requestId: String?

    public var taskId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.async != nil {
            map["async"] = self.async!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["async"] as? Bool {
            self.async = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["taskId"] as? String {
            self.taskId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class DeleteDentryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDentryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDentryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDriveSpaceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteDriveSpaceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteDriveSpaceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteDriveSpaceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteDriveSpaceRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var spaceId: String?

    public var tenantContext: DeleteDriveSpaceRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeleteDriveSpaceRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class DeleteDriveSpaceShrinkRequest : Tea.TeaModel {
    public var spaceId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class DeleteDriveSpaceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class DeleteDriveSpaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDriveSpaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDriveSpaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEventHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteEventHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteEventHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteEventShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteEventRequest : Tea.TeaModel {
    public var calendarId: String?

    public var eventId: String?

    public var pushNotification: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.pushNotification != nil {
            map["pushNotification"] = self.pushNotification!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["pushNotification"] as? Bool {
            self.pushNotification = value
        }
    }
}

public class DeleteEventResponseBody : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public var data: Any?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                map["data"] = self.data!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["data"] as? Any {
                self.data = value
            }
        }
    }
    public var content: DeleteEventResponseBody.Content?

    public var errorCode: String?

    public var errorCtx: [String: Any]?

    public var errorMsg: String?

    public var httpStatusCode: Int32?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.content?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["content"] = self.content?.toMap()
        }
        if self.errorCode != nil {
            map["errorCode"] = self.errorCode!
        }
        if self.errorCtx != nil {
            map["errorCtx"] = self.errorCtx!
        }
        if self.errorMsg != nil {
            map["errorMsg"] = self.errorMsg!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["content"] as? [String: Any?] {
            var model = DeleteEventResponseBody.Content()
            model.fromMap(value)
            self.content = model
        }
        if let value = dict["errorCode"] as? String {
            self.errorCode = value
        }
        if let value = dict["errorCtx"] as? [String: Any] {
            self.errorCtx = value
        }
        if let value = dict["errorMsg"] as? String {
            self.errorMsg = value
        }
        if let value = dict["httpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteFormDataHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteFormDataHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteFormDataHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteFormDataShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteFormDataRequest : Tea.TeaModel {
    public var appType: String?

    public var formInstanceId: String?

    public var language: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formInstanceId != nil {
            map["FormInstanceId"] = self.formInstanceId!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormInstanceId"] as? String {
            self.formInstanceId = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class DeleteFormDataResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class DeleteFormDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteFormDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteFormDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteInstanceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteInstanceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteInstanceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteInstanceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteInstanceRequest : Tea.TeaModel {
    public var appType: String?

    public var language: String?

    public var processInstanceId: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.processInstanceId != nil {
            map["ProcessInstanceId"] = self.processInstanceId!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ProcessInstanceId"] as? String {
            self.processInstanceId = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class DeleteInstanceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class DeleteInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteLiveHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteLiveHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteLiveHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteLiveShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteLiveRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var liveId: String?

    public var tenantContext: DeleteLiveRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.liveId != nil {
            map["LiveId"] = self.liveId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LiveId"] as? String {
            self.liveId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeleteLiveRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class DeleteLiveShrinkRequest : Tea.TeaModel {
    public var liveId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.liveId != nil {
            map["LiveId"] = self.liveId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LiveId"] as? String {
            self.liveId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class DeleteLiveResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteLiveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteLiveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteLiveResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMeetingRoomHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteMeetingRoomHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteMeetingRoomHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteMeetingRoomShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteMeetingRoomRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var roomId: String?

    public var tenantContext: DeleteMeetingRoomRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.roomId != nil {
            map["RoomId"] = self.roomId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RoomId"] as? String {
            self.roomId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeleteMeetingRoomRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class DeleteMeetingRoomShrinkRequest : Tea.TeaModel {
    public var roomId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.roomId != nil {
            map["RoomId"] = self.roomId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RoomId"] as? String {
            self.roomId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class DeleteMeetingRoomResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? Bool {
            self.result = value
        }
    }
}

public class DeleteMeetingRoomResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMeetingRoomResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMeetingRoomResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMeetingRoomGroupHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteMeetingRoomGroupHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteMeetingRoomGroupHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteMeetingRoomGroupShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteMeetingRoomGroupRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var groupId: String?

    public var tenantContext: DeleteMeetingRoomGroupRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeleteMeetingRoomGroupRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class DeleteMeetingRoomGroupShrinkRequest : Tea.TeaModel {
    public var groupId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class DeleteMeetingRoomGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? Bool {
            self.result = value
        }
    }
}

public class DeleteMeetingRoomGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMeetingRoomGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMeetingRoomGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMultiDimTableFieldHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteMultiDimTableFieldHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteMultiDimTableFieldHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteMultiDimTableFieldShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteMultiDimTableFieldRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var baseId: String?

    public var fieldIdOrName: String?

    public var sheetIdOrName: String?

    public var tenantContext: DeleteMultiDimTableFieldRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.fieldIdOrName != nil {
            map["FieldIdOrName"] = self.fieldIdOrName!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["FieldIdOrName"] as? String {
            self.fieldIdOrName = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeleteMultiDimTableFieldRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class DeleteMultiDimTableFieldShrinkRequest : Tea.TeaModel {
    public var baseId: String?

    public var fieldIdOrName: String?

    public var sheetIdOrName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.fieldIdOrName != nil {
            map["FieldIdOrName"] = self.fieldIdOrName!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["FieldIdOrName"] as? String {
            self.fieldIdOrName = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class DeleteMultiDimTableFieldResponseBody : Tea.TeaModel {
    public var success: Bool?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class DeleteMultiDimTableFieldResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMultiDimTableFieldResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMultiDimTableFieldResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMultiDimTableRecordsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteMultiDimTableRecordsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteMultiDimTableRecordsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteMultiDimTableRecordsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteMultiDimTableRecordsRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var baseId: String?

    public var recordIds: [String]?

    public var sheetIdOrName: String?

    public var tenantContext: DeleteMultiDimTableRecordsRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.recordIds != nil {
            map["RecordIds"] = self.recordIds!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["RecordIds"] as? [String] {
            self.recordIds = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeleteMultiDimTableRecordsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class DeleteMultiDimTableRecordsShrinkRequest : Tea.TeaModel {
    public var baseId: String?

    public var recordIdsShrink: String?

    public var sheetIdOrName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.recordIdsShrink != nil {
            map["RecordIds"] = self.recordIdsShrink!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["RecordIds"] as? String {
            self.recordIdsShrink = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class DeleteMultiDimTableRecordsResponseBody : Tea.TeaModel {
    public var success: Bool?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class DeleteMultiDimTableRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMultiDimTableRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMultiDimTableRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePermissionHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeletePermissionHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeletePermissionHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeletePermissionShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeletePermissionRequest : Tea.TeaModel {
    public class Members : Tea.TeaModel {
        public var corpId: String?

        public var id: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dentryUuid: String?

    public var members: [DeletePermissionRequest.Members]?

    public var roleId: String?

    public var tenantContext: DeletePermissionRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.members != nil {
            var tmp : [Any] = []
            for k in self.members! {
                tmp.append(k.toMap())
            }
            map["Members"] = tmp
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["Members"] as? [Any?] {
            var tmp : [DeletePermissionRequest.Members] = []
            for v in value {
                if v != nil {
                    var model = DeletePermissionRequest.Members()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.members = tmp
        }
        if let value = dict["RoleId"] as? String {
            self.roleId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeletePermissionRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class DeletePermissionShrinkRequest : Tea.TeaModel {
    public var dentryUuid: String?

    public var membersShrink: String?

    public var roleId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.membersShrink != nil {
            map["Members"] = self.membersShrink!
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["Members"] as? String {
            self.membersShrink = value
        }
        if let value = dict["RoleId"] as? String {
            self.roleId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class DeletePermissionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class DeletePermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRowsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteRowsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteRowsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteRowsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteRowsRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var row: Int64?

    public var rowCount: Int64?

    public var sheetId: String?

    public var tenantContext: DeleteRowsRequest.TenantContext?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.row != nil {
            map["Row"] = self.row!
        }
        if self.rowCount != nil {
            map["RowCount"] = self.rowCount!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Row"] as? Int64 {
            self.row = value
        }
        if let value = dict["RowCount"] as? Int64 {
            self.rowCount = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeleteRowsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class DeleteRowsShrinkRequest : Tea.TeaModel {
    public var row: Int64?

    public var rowCount: Int64?

    public var sheetId: String?

    public var tenantContextShrink: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.row != nil {
            map["Row"] = self.row!
        }
        if self.rowCount != nil {
            map["RowCount"] = self.rowCount!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Row"] as? Int64 {
            self.row = value
        }
        if let value = dict["RowCount"] as? Int64 {
            self.rowCount = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class DeleteRowsResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteRowsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRowsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRowsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteScenegroupMemberHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteScenegroupMemberHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteScenegroupMemberHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteScenegroupMemberShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteScenegroupMemberRequest : Tea.TeaModel {
    public var openConversationId: String?

    public var userIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openConversationId != nil {
            map["OpenConversationId"] = self.openConversationId!
        }
        if self.userIds != nil {
            map["UserIds"] = self.userIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenConversationId"] as? String {
            self.openConversationId = value
        }
        if let value = dict["UserIds"] as? String {
            self.userIds = value
        }
    }
}

public class DeleteScenegroupMemberResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteScenegroupMemberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteScenegroupMemberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteScenegroupMemberResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSheetHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteSheetHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteSheetHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteSheetShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteSheetRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var sheetId: String?

    public var tenantContext: DeleteSheetRequest.TenantContext?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeleteSheetRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class DeleteSheetShrinkRequest : Tea.TeaModel {
    public var sheetId: String?

    public var tenantContextShrink: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class DeleteSheetResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteSheetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSheetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSheetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSubscribedCalendarHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteSubscribedCalendarHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteSubscribedCalendarHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteSubscribedCalendarShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteSubscribedCalendarRequest : Tea.TeaModel {
    public var calendarId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
    }
}

public class DeleteSubscribedCalendarResponseBody : Tea.TeaModel {
    public var result: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.result != nil {
            map["Result"] = self.result!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteSubscribedCalendarResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSubscribedCalendarResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSubscribedCalendarResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteTodoTaskHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteTodoTaskHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteTodoTaskHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteTodoTaskShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteTodoTaskRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: DeleteTodoTaskRequest.TenantContext?

    public var operatorId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.operatorId != nil {
            map["operatorId"] = self.operatorId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeleteTodoTaskRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["operatorId"] as? String {
            self.operatorId = value
        }
        if let value = dict["taskId"] as? String {
            self.taskId = value
        }
    }
}

public class DeleteTodoTaskShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var operatorId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.operatorId != nil {
            map["operatorId"] = self.operatorId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["operatorId"] as? String {
            self.operatorId = value
        }
        if let value = dict["taskId"] as? String {
            self.taskId = value
        }
    }
}

public class DeleteTodoTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? Bool {
            self.result = value
        }
    }
}

public class DeleteTodoTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteTodoTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteTodoTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteWorkspaceDocMembersHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteWorkspaceDocMembersHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteWorkspaceDocMembersHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteWorkspaceDocMembersShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteWorkspaceDocMembersRequest : Tea.TeaModel {
    public class Members : Tea.TeaModel {
        public var memberId: String?

        public var memberType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.memberId != nil {
                map["MemberId"] = self.memberId!
            }
            if self.memberType != nil {
                map["MemberType"] = self.memberType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MemberId"] as? String {
                self.memberId = value
            }
            if let value = dict["MemberType"] as? String {
                self.memberType = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var members: [DeleteWorkspaceDocMembersRequest.Members]?

    public var nodeId: String?

    public var tenantContext: DeleteWorkspaceDocMembersRequest.TenantContext?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.members != nil {
            var tmp : [Any] = []
            for k in self.members! {
                tmp.append(k.toMap())
            }
            map["Members"] = tmp
        }
        if self.nodeId != nil {
            map["NodeId"] = self.nodeId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Members"] as? [Any?] {
            var tmp : [DeleteWorkspaceDocMembersRequest.Members] = []
            for v in value {
                if v != nil {
                    var model = DeleteWorkspaceDocMembersRequest.Members()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.members = tmp
        }
        if let value = dict["NodeId"] as? String {
            self.nodeId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeleteWorkspaceDocMembersRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class DeleteWorkspaceDocMembersShrinkRequest : Tea.TeaModel {
    public var membersShrink: String?

    public var nodeId: String?

    public var tenantContextShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.membersShrink != nil {
            map["Members"] = self.membersShrink!
        }
        if self.nodeId != nil {
            map["NodeId"] = self.nodeId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Members"] as? String {
            self.membersShrink = value
        }
        if let value = dict["NodeId"] as? String {
            self.nodeId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class DeleteWorkspaceDocMembersResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteWorkspaceDocMembersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteWorkspaceDocMembersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteWorkspaceDocMembersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteWorkspaceMembersHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DeleteWorkspaceMembersHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DeleteWorkspaceMembersHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DeleteWorkspaceMembersShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DeleteWorkspaceMembersRequest : Tea.TeaModel {
    public class Members : Tea.TeaModel {
        public var memberId: String?

        public var memberType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.memberId != nil {
                map["MemberId"] = self.memberId!
            }
            if self.memberType != nil {
                map["MemberType"] = self.memberType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MemberId"] as? String {
                self.memberId = value
            }
            if let value = dict["MemberType"] as? String {
                self.memberType = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var members: [DeleteWorkspaceMembersRequest.Members]?

    public var tenantContext: DeleteWorkspaceMembersRequest.TenantContext?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.members != nil {
            var tmp : [Any] = []
            for k in self.members! {
                tmp.append(k.toMap())
            }
            map["Members"] = tmp
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Members"] as? [Any?] {
            var tmp : [DeleteWorkspaceMembersRequest.Members] = []
            for v in value {
                if v != nil {
                    var model = DeleteWorkspaceMembersRequest.Members()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.members = tmp
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DeleteWorkspaceMembersRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class DeleteWorkspaceMembersShrinkRequest : Tea.TeaModel {
    public var membersShrink: String?

    public var tenantContextShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.membersShrink != nil {
            map["Members"] = self.membersShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Members"] as? String {
            self.membersShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class DeleteWorkspaceMembersResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteWorkspaceMembersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteWorkspaceMembersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteWorkspaceMembersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DocBlocksQueryHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DocBlocksQueryHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DocBlocksQueryHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DocBlocksQueryShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DocBlocksQueryRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var blockType: String?

    public var docKey: String?

    public var endIndex: Int32?

    public var startIndex: Int32?

    public var tenantContext: DocBlocksQueryRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.blockType != nil {
            map["BlockType"] = self.blockType!
        }
        if self.docKey != nil {
            map["DocKey"] = self.docKey!
        }
        if self.endIndex != nil {
            map["EndIndex"] = self.endIndex!
        }
        if self.startIndex != nil {
            map["StartIndex"] = self.startIndex!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BlockType"] as? String {
            self.blockType = value
        }
        if let value = dict["DocKey"] as? String {
            self.docKey = value
        }
        if let value = dict["EndIndex"] as? Int32 {
            self.endIndex = value
        }
        if let value = dict["StartIndex"] as? Int32 {
            self.startIndex = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DocBlocksQueryRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class DocBlocksQueryShrinkRequest : Tea.TeaModel {
    public var blockType: String?

    public var docKey: String?

    public var endIndex: Int32?

    public var startIndex: Int32?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.blockType != nil {
            map["BlockType"] = self.blockType!
        }
        if self.docKey != nil {
            map["DocKey"] = self.docKey!
        }
        if self.endIndex != nil {
            map["EndIndex"] = self.endIndex!
        }
        if self.startIndex != nil {
            map["StartIndex"] = self.startIndex!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BlockType"] as? String {
            self.blockType = value
        }
        if let value = dict["DocKey"] as? String {
            self.docKey = value
        }
        if let value = dict["EndIndex"] as? Int32 {
            self.endIndex = value
        }
        if let value = dict["StartIndex"] as? Int32 {
            self.startIndex = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class DocBlocksQueryResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var data: [Any]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                map["Data"] = self.data!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any] {
                self.data = value
            }
        }
    }
    public var requestId: String?

    public var result: DocBlocksQueryResponseBody.Result?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.result?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result?.toMap()
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [String: Any?] {
            var model = DocBlocksQueryResponseBody.Result()
            model.fromMap(value)
            self.result = model
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class DocBlocksQueryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DocBlocksQueryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DocBlocksQueryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DocUpdateContentHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: DocUpdateContentHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = DocUpdateContentHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class DocUpdateContentShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class DocUpdateContentRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var content: String?

    public var dataType: String?

    public var docKey: String?

    public var tenantContext: DocUpdateContentRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.dataType != nil {
            map["DataType"] = self.dataType!
        }
        if self.docKey != nil {
            map["DocKey"] = self.docKey!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["DataType"] as? String {
            self.dataType = value
        }
        if let value = dict["DocKey"] as? String {
            self.docKey = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = DocUpdateContentRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class DocUpdateContentShrinkRequest : Tea.TeaModel {
    public var content: String?

    public var dataType: String?

    public var docKey: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.dataType != nil {
            map["DataType"] = self.dataType!
        }
        if self.docKey != nil {
            map["DocKey"] = self.docKey!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["DataType"] as? String {
            self.dataType = value
        }
        if let value = dict["DocKey"] as? String {
            self.docKey = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class DocUpdateContentResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var value: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.value != nil {
            map["value"] = self.value!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["value"] as? Bool {
            self.value = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class DocUpdateContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DocUpdateContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DocUpdateContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExecuteBatchTaskHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ExecuteBatchTaskHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ExecuteBatchTaskHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ExecuteBatchTaskShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ExecuteBatchTaskRequest : Tea.TeaModel {
    public var appType: String?

    public var outResult: String?

    public var remark: String?

    public var systemToken: String?

    public var taskInformationList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.outResult != nil {
            map["OutResult"] = self.outResult!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.taskInformationList != nil {
            map["TaskInformationList"] = self.taskInformationList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["OutResult"] as? String {
            self.outResult = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["TaskInformationList"] as? String {
            self.taskInformationList = value
        }
    }
}

public class ExecuteBatchTaskResponseBody : Tea.TeaModel {
    public var failNumber: Int32?

    public var requestId: String?

    public var successNumber: Int32?

    public var total: Int32?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failNumber != nil {
            map["failNumber"] = self.failNumber!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.successNumber != nil {
            map["successNumber"] = self.successNumber!
        }
        if self.total != nil {
            map["total"] = self.total!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["failNumber"] as? Int32 {
            self.failNumber = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["successNumber"] as? Int32 {
            self.successNumber = value
        }
        if let value = dict["total"] as? Int32 {
            self.total = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ExecuteBatchTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExecuteBatchTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExecuteBatchTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExecutePlatformTaskHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ExecutePlatformTaskHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ExecutePlatformTaskHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ExecutePlatformTaskShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ExecutePlatformTaskRequest : Tea.TeaModel {
    public var appType: String?

    public var formDataJson: String?

    public var language: String?

    public var noExecuteExpressions: String?

    public var outResult: String?

    public var processInstanceId: String?

    public var remark: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formDataJson != nil {
            map["FormDataJson"] = self.formDataJson!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.noExecuteExpressions != nil {
            map["NoExecuteExpressions"] = self.noExecuteExpressions!
        }
        if self.outResult != nil {
            map["OutResult"] = self.outResult!
        }
        if self.processInstanceId != nil {
            map["ProcessInstanceId"] = self.processInstanceId!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormDataJson"] as? String {
            self.formDataJson = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["NoExecuteExpressions"] as? String {
            self.noExecuteExpressions = value
        }
        if let value = dict["OutResult"] as? String {
            self.outResult = value
        }
        if let value = dict["ProcessInstanceId"] as? String {
            self.processInstanceId = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class ExecutePlatformTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ExecutePlatformTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExecutePlatformTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExecutePlatformTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExecuteTaskHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ExecuteTaskHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ExecuteTaskHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ExecuteTaskShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ExecuteTaskRequest : Tea.TeaModel {
    public var appType: String?

    public var digitalSignUrl: String?

    public var formDataJson: String?

    public var language: String?

    public var noExecuteExpressions: String?

    public var outResult: String?

    public var processInstanceId: String?

    public var remark: String?

    public var systemToken: String?

    public var taskId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.digitalSignUrl != nil {
            map["DigitalSignUrl"] = self.digitalSignUrl!
        }
        if self.formDataJson != nil {
            map["FormDataJson"] = self.formDataJson!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.noExecuteExpressions != nil {
            map["NoExecuteExpressions"] = self.noExecuteExpressions!
        }
        if self.outResult != nil {
            map["OutResult"] = self.outResult!
        }
        if self.processInstanceId != nil {
            map["ProcessInstanceId"] = self.processInstanceId!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["DigitalSignUrl"] as? String {
            self.digitalSignUrl = value
        }
        if let value = dict["FormDataJson"] as? String {
            self.formDataJson = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["NoExecuteExpressions"] as? String {
            self.noExecuteExpressions = value
        }
        if let value = dict["OutResult"] as? String {
            self.outResult = value
        }
        if let value = dict["ProcessInstanceId"] as? String {
            self.processInstanceId = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
    }
}

public class ExecuteTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ExecuteTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExecuteTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExecuteTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExpandGroupCapacityHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ExpandGroupCapacityHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ExpandGroupCapacityHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ExpandGroupCapacityShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ExpandGroupCapacityRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var openConversationId: String?

    public var tenantContext: ExpandGroupCapacityRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openConversationId != nil {
            map["OpenConversationId"] = self.openConversationId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenConversationId"] as? String {
            self.openConversationId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ExpandGroupCapacityRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class ExpandGroupCapacityShrinkRequest : Tea.TeaModel {
    public var openConversationId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openConversationId != nil {
            map["OpenConversationId"] = self.openConversationId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenConversationId"] as? String {
            self.openConversationId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class ExpandGroupCapacityResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ExpandGroupCapacityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExpandGroupCapacityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExpandGroupCapacityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class FinishTicketHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: FinishTicketHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = FinishTicketHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class FinishTicketShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class FinishTicketRequest : Tea.TeaModel {
    public class Notify : Tea.TeaModel {
        public var groupNoticeReceiverUserIds: [String]?

        public var noticeAllGroupMember: Bool?

        public var workNoticeReceiverUserIds: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.groupNoticeReceiverUserIds != nil {
                map["GroupNoticeReceiverUserIds"] = self.groupNoticeReceiverUserIds!
            }
            if self.noticeAllGroupMember != nil {
                map["NoticeAllGroupMember"] = self.noticeAllGroupMember!
            }
            if self.workNoticeReceiverUserIds != nil {
                map["WorkNoticeReceiverUserIds"] = self.workNoticeReceiverUserIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["GroupNoticeReceiverUserIds"] as? [String] {
                self.groupNoticeReceiverUserIds = value
            }
            if let value = dict["NoticeAllGroupMember"] as? Bool {
                self.noticeAllGroupMember = value
            }
            if let value = dict["WorkNoticeReceiverUserIds"] as? [String] {
                self.workNoticeReceiverUserIds = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public class TicketMemo : Tea.TeaModel {
        public class Attachments : Tea.TeaModel {
            public var fileName: String?

            public var key: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileName != nil {
                    map["FileName"] = self.fileName!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FileName"] as? String {
                    self.fileName = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
            }
        }
        public var attachments: [FinishTicketRequest.TicketMemo.Attachments]?

        public var memo: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attachments != nil {
                var tmp : [Any] = []
                for k in self.attachments! {
                    tmp.append(k.toMap())
                }
                map["Attachments"] = tmp
            }
            if self.memo != nil {
                map["Memo"] = self.memo!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attachments"] as? [Any?] {
                var tmp : [FinishTicketRequest.TicketMemo.Attachments] = []
                for v in value {
                    if v != nil {
                        var model = FinishTicketRequest.TicketMemo.Attachments()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.attachments = tmp
            }
            if let value = dict["Memo"] as? String {
                self.memo = value
            }
        }
    }
    public var notify: FinishTicketRequest.Notify?

    public var openTeamId: String?

    public var openTicketId: String?

    public var tenantContext: FinishTicketRequest.TenantContext?

    public var ticketMemo: FinishTicketRequest.TicketMemo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.notify?.validate()
        try self.tenantContext?.validate()
        try self.ticketMemo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.notify != nil {
            map["Notify"] = self.notify?.toMap()
        }
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTicketId != nil {
            map["OpenTicketId"] = self.openTicketId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.ticketMemo != nil {
            map["TicketMemo"] = self.ticketMemo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Notify"] as? [String: Any?] {
            var model = FinishTicketRequest.Notify()
            model.fromMap(value)
            self.notify = model
        }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = FinishTicketRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["TicketMemo"] as? [String: Any?] {
            var model = FinishTicketRequest.TicketMemo()
            model.fromMap(value)
            self.ticketMemo = model
        }
    }
}

public class FinishTicketShrinkRequest : Tea.TeaModel {
    public var notifyShrink: String?

    public var openTeamId: String?

    public var openTicketId: String?

    public var tenantContextShrink: String?

    public var ticketMemoShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.notifyShrink != nil {
            map["Notify"] = self.notifyShrink!
        }
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTicketId != nil {
            map["OpenTicketId"] = self.openTicketId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.ticketMemoShrink != nil {
            map["TicketMemo"] = self.ticketMemoShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Notify"] as? String {
            self.notifyShrink = value
        }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["TicketMemo"] as? String {
            self.ticketMemoShrink = value
        }
    }
}

public class FinishTicketResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class FinishTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FinishTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = FinishTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetActivityListHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetActivityListHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetActivityListHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetActivityListShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetActivityListRequest : Tea.TeaModel {
    public var appType: String?

    public var language: String?

    public var processCode: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.processCode != nil {
            map["ProcessCode"] = self.processCode!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ProcessCode"] as? String {
            self.processCode = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class GetActivityListResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var activityId: String?

        public var activityName: String?

        public var activityNameInEnglish: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.activityId != nil {
                map["ActivityId"] = self.activityId!
            }
            if self.activityName != nil {
                map["ActivityName"] = self.activityName!
            }
            if self.activityNameInEnglish != nil {
                map["ActivityNameInEnglish"] = self.activityNameInEnglish!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActivityId"] as? String {
                self.activityId = value
            }
            if let value = dict["ActivityName"] as? String {
                self.activityName = value
            }
            if let value = dict["ActivityNameInEnglish"] as? String {
                self.activityNameInEnglish = value
            }
        }
    }
    public var requestId: String?

    public var result: [GetActivityListResponseBody.Result]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["result"] = tmp
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [Any?] {
            var tmp : [GetActivityListResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = GetActivityListResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetActivityListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetActivityListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetActivityListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAllSheetsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetAllSheetsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetAllSheetsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetAllSheetsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetAllSheetsRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: GetAllSheetsRequest.TenantContext?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetAllSheetsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class GetAllSheetsShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class GetAllSheetsResponseBody : Tea.TeaModel {
    public class Value : Tea.TeaModel {
        public var id: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var requestId: String?

    public var value: [GetAllSheetsResponseBody.Value]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.value != nil {
            var tmp : [Any] = []
            for k in self.value! {
                tmp.append(k.toMap())
            }
            map["value"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["value"] as? [Any?] {
            var tmp : [GetAllSheetsResponseBody.Value] = []
            for v in value {
                if v != nil {
                    var model = GetAllSheetsResponseBody.Value()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.value = tmp
        }
    }
}

public class GetAllSheetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAllSheetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAllSheetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAssistantCapabilityHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountId != nil {
            map["accountId"] = self.accountId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["accountId"] as? String {
            self.accountId = value
        }
    }
}

public class GetAssistantCapabilityRequest : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public class CardCallback : Tea.TeaModel {
            public var content: String?

            public var templateId: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["content"] = self.content!
                }
                if self.templateId != nil {
                    map["templateId"] = self.templateId!
                }
                if self.userId != nil {
                    map["userId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["content"] as? String {
                    self.content = value
                }
                if let value = dict["templateId"] as? String {
                    self.templateId = value
                }
                if let value = dict["userId"] as? String {
                    self.userId = value
                }
            }
        }
        public class DingCard : Tea.TeaModel {
            public var cardDesc: String?

            public var content: String?

            public var contentType: String?

            public var finished: Bool?

            public var templateId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cardDesc != nil {
                    map["cardDesc"] = self.cardDesc!
                }
                if self.content != nil {
                    map["content"] = self.content!
                }
                if self.contentType != nil {
                    map["contentType"] = self.contentType!
                }
                if self.finished != nil {
                    map["finished"] = self.finished!
                }
                if self.templateId != nil {
                    map["templateId"] = self.templateId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["cardDesc"] as? String {
                    self.cardDesc = value
                }
                if let value = dict["content"] as? String {
                    self.content = value
                }
                if let value = dict["contentType"] as? String {
                    self.contentType = value
                }
                if let value = dict["finished"] as? Bool {
                    self.finished = value
                }
                if let value = dict["templateId"] as? String {
                    self.templateId = value
                }
            }
        }
        public class ImageUrl : Tea.TeaModel {
            public var detail: String?

            public var imageDesc: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.detail != nil {
                    map["detail"] = self.detail!
                }
                if self.imageDesc != nil {
                    map["imageDesc"] = self.imageDesc!
                }
                if self.url != nil {
                    map["url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["detail"] as? String {
                    self.detail = value
                }
                if let value = dict["imageDesc"] as? String {
                    self.imageDesc = value
                }
                if let value = dict["url"] as? String {
                    self.url = value
                }
            }
        }
        public class Markdown : Tea.TeaModel {
            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.value != nil {
                    map["value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["value"] as? String {
                    self.value = value
                }
            }
        }
        public class Text : Tea.TeaModel {
            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.value != nil {
                    map["value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["value"] as? String {
                    self.value = value
                }
            }
        }
        public var cardCallback: GetAssistantCapabilityRequest.Content.CardCallback?

        public var dingCard: GetAssistantCapabilityRequest.Content.DingCard?

        public var imageUrl: GetAssistantCapabilityRequest.Content.ImageUrl?

        public var markdown: GetAssistantCapabilityRequest.Content.Markdown?

        public var text: GetAssistantCapabilityRequest.Content.Text?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.cardCallback?.validate()
            try self.dingCard?.validate()
            try self.imageUrl?.validate()
            try self.markdown?.validate()
            try self.text?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cardCallback != nil {
                map["cardCallback"] = self.cardCallback?.toMap()
            }
            if self.dingCard != nil {
                map["dingCard"] = self.dingCard?.toMap()
            }
            if self.imageUrl != nil {
                map["imageUrl"] = self.imageUrl?.toMap()
            }
            if self.markdown != nil {
                map["markdown"] = self.markdown?.toMap()
            }
            if self.text != nil {
                map["text"] = self.text?.toMap()
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["cardCallback"] as? [String: Any?] {
                var model = GetAssistantCapabilityRequest.Content.CardCallback()
                model.fromMap(value)
                self.cardCallback = model
            }
            if let value = dict["dingCard"] as? [String: Any?] {
                var model = GetAssistantCapabilityRequest.Content.DingCard()
                model.fromMap(value)
                self.dingCard = model
            }
            if let value = dict["imageUrl"] as? [String: Any?] {
                var model = GetAssistantCapabilityRequest.Content.ImageUrl()
                model.fromMap(value)
                self.imageUrl = model
            }
            if let value = dict["markdown"] as? [String: Any?] {
                var model = GetAssistantCapabilityRequest.Content.Markdown()
                model.fromMap(value)
                self.markdown = model
            }
            if let value = dict["text"] as? [String: Any?] {
                var model = GetAssistantCapabilityRequest.Content.Text()
                model.fromMap(value)
                self.text = model
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public var assistantId: String?

    public var content: [GetAssistantCapabilityRequest.Content]?

    public var id: String?

    public var metadata: [String: Any]?

    public var originalAssistantId: String?

    public var protocol_: String?

    public var threadId: String?

    public var timeout: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assistantId != nil {
            map["assistantId"] = self.assistantId!
        }
        if self.content != nil {
            var tmp : [Any] = []
            for k in self.content! {
                tmp.append(k.toMap())
            }
            map["content"] = tmp
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.metadata != nil {
            map["metadata"] = self.metadata!
        }
        if self.originalAssistantId != nil {
            map["originalAssistantId"] = self.originalAssistantId!
        }
        if self.protocol_ != nil {
            map["protocol"] = self.protocol_!
        }
        if self.threadId != nil {
            map["threadId"] = self.threadId!
        }
        if self.timeout != nil {
            map["timeout"] = self.timeout!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["assistantId"] as? String {
            self.assistantId = value
        }
        if let value = dict["content"] as? [Any?] {
            var tmp : [GetAssistantCapabilityRequest.Content] = []
            for v in value {
                if v != nil {
                    var model = GetAssistantCapabilityRequest.Content()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.content = tmp
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["metadata"] as? [String: Any] {
            self.metadata = value
        }
        if let value = dict["originalAssistantId"] as? String {
            self.originalAssistantId = value
        }
        if let value = dict["protocol"] as? String {
            self.protocol_ = value
        }
        if let value = dict["threadId"] as? String {
            self.threadId = value
        }
        if let value = dict["timeout"] as? Int32 {
            self.timeout = value
        }
    }
}

public class GetAssistantCapabilityResponseBody : Tea.TeaModel {
    public class CapabilityAssessment : Tea.TeaModel {
        public class CapabilityList : Tea.TeaModel {
            public var capabilityOverview: String?

            public var description_: String?

            public var metadata: [String: Any]?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.capabilityOverview != nil {
                    map["capabilityOverview"] = self.capabilityOverview!
                }
                if self.description_ != nil {
                    map["description"] = self.description_!
                }
                if self.metadata != nil {
                    map["metadata"] = self.metadata!
                }
                if self.name != nil {
                    map["name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["capabilityOverview"] as? String {
                    self.capabilityOverview = value
                }
                if let value = dict["description"] as? String {
                    self.description_ = value
                }
                if let value = dict["metadata"] as? [String: Any] {
                    self.metadata = value
                }
                if let value = dict["name"] as? String {
                    self.name = value
                }
            }
        }
        public var briefCapability: String?

        public var capabilityList: [GetAssistantCapabilityResponseBody.CapabilityAssessment.CapabilityList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.briefCapability != nil {
                map["briefCapability"] = self.briefCapability!
            }
            if self.capabilityList != nil {
                var tmp : [Any] = []
                for k in self.capabilityList! {
                    tmp.append(k.toMap())
                }
                map["capabilityList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["briefCapability"] as? String {
                self.briefCapability = value
            }
            if let value = dict["capabilityList"] as? [Any?] {
                var tmp : [GetAssistantCapabilityResponseBody.CapabilityAssessment.CapabilityList] = []
                for v in value {
                    if v != nil {
                        var model = GetAssistantCapabilityResponseBody.CapabilityAssessment.CapabilityList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.capabilityList = tmp
            }
        }
    }
    public var assistantDescription: String?

    public var canHandle: Bool?

    public var capabilityAssessment: GetAssistantCapabilityResponseBody.CapabilityAssessment?

    public var id: String?

    public var metadata: [String: Any]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.capabilityAssessment?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assistantDescription != nil {
            map["assistantDescription"] = self.assistantDescription!
        }
        if self.canHandle != nil {
            map["canHandle"] = self.canHandle!
        }
        if self.capabilityAssessment != nil {
            map["capabilityAssessment"] = self.capabilityAssessment?.toMap()
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.metadata != nil {
            map["metadata"] = self.metadata!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["assistantDescription"] as? String {
            self.assistantDescription = value
        }
        if let value = dict["canHandle"] as? Bool {
            self.canHandle = value
        }
        if let value = dict["capabilityAssessment"] as? [String: Any?] {
            var model = GetAssistantCapabilityResponseBody.CapabilityAssessment()
            model.fromMap(value)
            self.capabilityAssessment = model
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["metadata"] as? [String: Any] {
            self.metadata = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetAssistantCapabilityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAssistantCapabilityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAssistantCapabilityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetConversaionSpaceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetConversaionSpaceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetConversaionSpaceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetConversaionSpaceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetConversaionSpaceRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var openConversationId: String?

    public var tenantContext: GetConversaionSpaceRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openConversationId != nil {
            map["OpenConversationId"] = self.openConversationId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenConversationId"] as? String {
            self.openConversationId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetConversaionSpaceRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetConversaionSpaceShrinkRequest : Tea.TeaModel {
    public var openConversationId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openConversationId != nil {
            map["OpenConversationId"] = self.openConversationId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenConversationId"] as? String {
            self.openConversationId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetConversaionSpaceResponseBody : Tea.TeaModel {
    public class Space : Tea.TeaModel {
        public var corpId: String?

        public var createTime: String?

        public var modifiedTime: String?

        public var spaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.spaceId != nil {
                map["SpaceId"] = self.spaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["SpaceId"] as? String {
                self.spaceId = value
            }
        }
    }
    public var requestId: String?

    public var space: GetConversaionSpaceResponseBody.Space?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.space?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.space != nil {
            map["space"] = self.space?.toMap()
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["space"] as? [String: Any?] {
            var model = GetConversaionSpaceResponseBody.Space()
            model.fromMap(value)
            self.space = model
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetConversaionSpaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetConversaionSpaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetConversaionSpaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCorpAccomplishmentTasksHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetCorpAccomplishmentTasksHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetCorpAccomplishmentTasksHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetCorpAccomplishmentTasksShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetCorpAccomplishmentTasksRequest : Tea.TeaModel {
    public var appTypes: String?

    public var corpId: String?

    public var createFromTimeGMT: Int64?

    public var createToTimeGMT: Int64?

    public var keyword: String?

    public var language: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var processCodes: String?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appTypes != nil {
            map["AppTypes"] = self.appTypes!
        }
        if self.corpId != nil {
            map["CorpId"] = self.corpId!
        }
        if self.createFromTimeGMT != nil {
            map["CreateFromTimeGMT"] = self.createFromTimeGMT!
        }
        if self.createToTimeGMT != nil {
            map["CreateToTimeGMT"] = self.createToTimeGMT!
        }
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.processCodes != nil {
            map["ProcessCodes"] = self.processCodes!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppTypes"] as? String {
            self.appTypes = value
        }
        if let value = dict["CorpId"] as? String {
            self.corpId = value
        }
        if let value = dict["CreateFromTimeGMT"] as? Int64 {
            self.createFromTimeGMT = value
        }
        if let value = dict["CreateToTimeGMT"] as? Int64 {
            self.createToTimeGMT = value
        }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProcessCodes"] as? String {
            self.processCodes = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class GetCorpAccomplishmentTasksResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var activeTimeGMT: String?

        public var actualActionerId: String?

        public var appType: String?

        public var createTimeGMT: String?

        public var finishTimeGMT: String?

        public var originatorEmail: String?

        public var originatorId: String?

        public var originatorName: String?

        public var originatorNameInEnglish: String?

        public var originatorNickName: String?

        public var originatorNickNameInEnglish: String?

        public var originatorPhoto: String?

        public var outResult: String?

        public var outResultName: String?

        public var processInstanceId: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.activeTimeGMT != nil {
                map["ActiveTimeGMT"] = self.activeTimeGMT!
            }
            if self.actualActionerId != nil {
                map["ActualActionerId"] = self.actualActionerId!
            }
            if self.appType != nil {
                map["AppType"] = self.appType!
            }
            if self.createTimeGMT != nil {
                map["CreateTimeGMT"] = self.createTimeGMT!
            }
            if self.finishTimeGMT != nil {
                map["FinishTimeGMT"] = self.finishTimeGMT!
            }
            if self.originatorEmail != nil {
                map["OriginatorEmail"] = self.originatorEmail!
            }
            if self.originatorId != nil {
                map["OriginatorId"] = self.originatorId!
            }
            if self.originatorName != nil {
                map["OriginatorName"] = self.originatorName!
            }
            if self.originatorNameInEnglish != nil {
                map["OriginatorNameInEnglish"] = self.originatorNameInEnglish!
            }
            if self.originatorNickName != nil {
                map["OriginatorNickName"] = self.originatorNickName!
            }
            if self.originatorNickNameInEnglish != nil {
                map["OriginatorNickNameInEnglish"] = self.originatorNickNameInEnglish!
            }
            if self.originatorPhoto != nil {
                map["OriginatorPhoto"] = self.originatorPhoto!
            }
            if self.outResult != nil {
                map["OutResult"] = self.outResult!
            }
            if self.outResultName != nil {
                map["OutResultName"] = self.outResultName!
            }
            if self.processInstanceId != nil {
                map["ProcessInstanceId"] = self.processInstanceId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActiveTimeGMT"] as? String {
                self.activeTimeGMT = value
            }
            if let value = dict["ActualActionerId"] as? String {
                self.actualActionerId = value
            }
            if let value = dict["AppType"] as? String {
                self.appType = value
            }
            if let value = dict["CreateTimeGMT"] as? String {
                self.createTimeGMT = value
            }
            if let value = dict["FinishTimeGMT"] as? String {
                self.finishTimeGMT = value
            }
            if let value = dict["OriginatorEmail"] as? String {
                self.originatorEmail = value
            }
            if let value = dict["OriginatorId"] as? String {
                self.originatorId = value
            }
            if let value = dict["OriginatorName"] as? String {
                self.originatorName = value
            }
            if let value = dict["OriginatorNameInEnglish"] as? String {
                self.originatorNameInEnglish = value
            }
            if let value = dict["OriginatorNickName"] as? String {
                self.originatorNickName = value
            }
            if let value = dict["OriginatorNickNameInEnglish"] as? String {
                self.originatorNickNameInEnglish = value
            }
            if let value = dict["OriginatorPhoto"] as? String {
                self.originatorPhoto = value
            }
            if let value = dict["OutResult"] as? String {
                self.outResult = value
            }
            if let value = dict["OutResultName"] as? String {
                self.outResultName = value
            }
            if let value = dict["ProcessInstanceId"] as? String {
                self.processInstanceId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var data: [GetCorpAccomplishmentTasksResponseBody.Data]?

    public var pageNumber: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["data"] = tmp
        }
        if self.pageNumber != nil {
            map["pageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? [Any?] {
            var tmp : [GetCorpAccomplishmentTasksResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetCorpAccomplishmentTasksResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["pageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetCorpAccomplishmentTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCorpAccomplishmentTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCorpAccomplishmentTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCorpTasksHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetCorpTasksHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetCorpTasksHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetCorpTasksShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetCorpTasksRequest : Tea.TeaModel {
    public var appTypes: String?

    public var corpId: String?

    public var createFromTimeGMT: Int64?

    public var createToTimeGMT: Int64?

    public var keyword: String?

    public var language: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var processCodes: String?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appTypes != nil {
            map["AppTypes"] = self.appTypes!
        }
        if self.corpId != nil {
            map["CorpId"] = self.corpId!
        }
        if self.createFromTimeGMT != nil {
            map["CreateFromTimeGMT"] = self.createFromTimeGMT!
        }
        if self.createToTimeGMT != nil {
            map["CreateToTimeGMT"] = self.createToTimeGMT!
        }
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.processCodes != nil {
            map["ProcessCodes"] = self.processCodes!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppTypes"] as? String {
            self.appTypes = value
        }
        if let value = dict["CorpId"] as? String {
            self.corpId = value
        }
        if let value = dict["CreateFromTimeGMT"] as? Int64 {
            self.createFromTimeGMT = value
        }
        if let value = dict["CreateToTimeGMT"] as? Int64 {
            self.createToTimeGMT = value
        }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProcessCodes"] as? String {
            self.processCodes = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class GetCorpTasksResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var activeTimeGMT: String?

        public var actualActionerId: String?

        public var appType: String?

        public var createTimeGMT: String?

        public var finishTimeGMT: String?

        public var originatorEmail: String?

        public var originatorId: String?

        public var originatorName: String?

        public var originatorNameInEnglish: String?

        public var originatorNickName: String?

        public var originatorNickNameEn: String?

        public var originatorNickNameInEnglish: String?

        public var originatorPhoto: String?

        public var outResult: String?

        public var outResultName: String?

        public var processInstanceId: String?

        public var status: String?

        public var taskId: String?

        public var taskType: String?

        public var title: String?

        public var titleInEnglish: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.activeTimeGMT != nil {
                map["ActiveTimeGMT"] = self.activeTimeGMT!
            }
            if self.actualActionerId != nil {
                map["ActualActionerId"] = self.actualActionerId!
            }
            if self.appType != nil {
                map["AppType"] = self.appType!
            }
            if self.createTimeGMT != nil {
                map["CreateTimeGMT"] = self.createTimeGMT!
            }
            if self.finishTimeGMT != nil {
                map["FinishTimeGMT"] = self.finishTimeGMT!
            }
            if self.originatorEmail != nil {
                map["OriginatorEmail"] = self.originatorEmail!
            }
            if self.originatorId != nil {
                map["OriginatorId"] = self.originatorId!
            }
            if self.originatorName != nil {
                map["OriginatorName"] = self.originatorName!
            }
            if self.originatorNameInEnglish != nil {
                map["OriginatorNameInEnglish"] = self.originatorNameInEnglish!
            }
            if self.originatorNickName != nil {
                map["OriginatorNickName"] = self.originatorNickName!
            }
            if self.originatorNickNameEn != nil {
                map["OriginatorNickNameEn"] = self.originatorNickNameEn!
            }
            if self.originatorNickNameInEnglish != nil {
                map["OriginatorNickNameInEnglish"] = self.originatorNickNameInEnglish!
            }
            if self.originatorPhoto != nil {
                map["OriginatorPhoto"] = self.originatorPhoto!
            }
            if self.outResult != nil {
                map["OutResult"] = self.outResult!
            }
            if self.outResultName != nil {
                map["OutResultName"] = self.outResultName!
            }
            if self.processInstanceId != nil {
                map["ProcessInstanceId"] = self.processInstanceId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.titleInEnglish != nil {
                map["TitleInEnglish"] = self.titleInEnglish!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActiveTimeGMT"] as? String {
                self.activeTimeGMT = value
            }
            if let value = dict["ActualActionerId"] as? String {
                self.actualActionerId = value
            }
            if let value = dict["AppType"] as? String {
                self.appType = value
            }
            if let value = dict["CreateTimeGMT"] as? String {
                self.createTimeGMT = value
            }
            if let value = dict["FinishTimeGMT"] as? String {
                self.finishTimeGMT = value
            }
            if let value = dict["OriginatorEmail"] as? String {
                self.originatorEmail = value
            }
            if let value = dict["OriginatorId"] as? String {
                self.originatorId = value
            }
            if let value = dict["OriginatorName"] as? String {
                self.originatorName = value
            }
            if let value = dict["OriginatorNameInEnglish"] as? String {
                self.originatorNameInEnglish = value
            }
            if let value = dict["OriginatorNickName"] as? String {
                self.originatorNickName = value
            }
            if let value = dict["OriginatorNickNameEn"] as? String {
                self.originatorNickNameEn = value
            }
            if let value = dict["OriginatorNickNameInEnglish"] as? String {
                self.originatorNickNameInEnglish = value
            }
            if let value = dict["OriginatorPhoto"] as? String {
                self.originatorPhoto = value
            }
            if let value = dict["OutResult"] as? String {
                self.outResult = value
            }
            if let value = dict["OutResultName"] as? String {
                self.outResultName = value
            }
            if let value = dict["ProcessInstanceId"] as? String {
                self.processInstanceId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskType"] as? String {
                self.taskType = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["TitleInEnglish"] as? String {
                self.titleInEnglish = value
            }
        }
    }
    public var data: [GetCorpTasksResponseBody.Data]?

    public var pageNumber: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["data"] = tmp
        }
        if self.pageNumber != nil {
            map["pageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? [Any?] {
            var tmp : [GetCorpTasksResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetCorpTasksResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["pageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetCorpTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCorpTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCorpTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDeptNoHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetDeptNoHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetDeptNoHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetDeptNoShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetDeptNoRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: GetDeptNoRequest.TenantContext?

    public var deptId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.deptId != nil {
            map["deptId"] = self.deptId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetDeptNoRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["deptId"] as? String {
            self.deptId = value
        }
    }
}

public class GetDeptNoShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var deptId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.deptId != nil {
            map["deptId"] = self.deptId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["deptId"] as? String {
            self.deptId = value
        }
    }
}

public class GetDeptNoResponseBody : Tea.TeaModel {
    public var deptNo: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deptNo != nil {
            map["deptNo"] = self.deptNo!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["deptNo"] as? String {
            self.deptNo = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetDeptNoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDeptNoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDeptNoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDocContentHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetDocContentHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetDocContentHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetDocContentShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetDocContentRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dentryUuid: String?

    public var targetFormat: String?

    public var tenantContext: GetDocContentRequest.TenantContext?

    public var userToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.targetFormat != nil {
            map["TargetFormat"] = self.targetFormat!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.userToken != nil {
            map["userToken"] = self.userToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["TargetFormat"] as? String {
            self.targetFormat = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetDocContentRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["userToken"] as? String {
            self.userToken = value
        }
    }
}

public class GetDocContentShrinkRequest : Tea.TeaModel {
    public var dentryUuid: String?

    public var targetFormat: String?

    public var tenantContextShrink: String?

    public var userToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.targetFormat != nil {
            map["TargetFormat"] = self.targetFormat!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.userToken != nil {
            map["userToken"] = self.userToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["TargetFormat"] as? String {
            self.targetFormat = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["userToken"] as? String {
            self.userToken = value
        }
    }
}

public class GetDocContentResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var taskId: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["taskId"] as? Int64 {
            self.taskId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetDocContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDocContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDocContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDocContentTakIdHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetDocContentTakIdHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetDocContentTakIdHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetDocContentTakIdShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetDocContentTakIdRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dentryUuid: String?

    public var generateCp: Bool?

    public var targetFormat: String?

    public var tenantContext: GetDocContentTakIdRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.generateCp != nil {
            map["GenerateCp"] = self.generateCp!
        }
        if self.targetFormat != nil {
            map["TargetFormat"] = self.targetFormat!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["GenerateCp"] as? Bool {
            self.generateCp = value
        }
        if let value = dict["TargetFormat"] as? String {
            self.targetFormat = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetDocContentTakIdRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetDocContentTakIdShrinkRequest : Tea.TeaModel {
    public var dentryUuid: String?

    public var generateCp: Bool?

    public var targetFormat: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.generateCp != nil {
            map["GenerateCp"] = self.generateCp!
        }
        if self.targetFormat != nil {
            map["TargetFormat"] = self.targetFormat!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["GenerateCp"] as? Bool {
            self.generateCp = value
        }
        if let value = dict["TargetFormat"] as? String {
            self.targetFormat = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetDocContentTakIdResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var taskId: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["taskId"] as? Int64 {
            self.taskId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetDocContentTakIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDocContentTakIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDocContentTakIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEventHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetEventHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetEventHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetEventShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetEventRequest : Tea.TeaModel {
    public var calendarId: String?

    public var eventId: String?

    public var maxAttendees: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.maxAttendees != nil {
            map["MaxAttendees"] = self.maxAttendees!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["MaxAttendees"] as? Int64 {
            self.maxAttendees = value
        }
    }
}

public class GetEventResponseBody : Tea.TeaModel {
    public class Attendees : Tea.TeaModel {
        public var displayName: String?

        public var id: String?

        public var isOptional: Bool?

        public var responseStatus: String?

        public var self_: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.isOptional != nil {
                map["IsOptional"] = self.isOptional!
            }
            if self.responseStatus != nil {
                map["ResponseStatus"] = self.responseStatus!
            }
            if self.self_ != nil {
                map["Self"] = self.self_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["IsOptional"] as? Bool {
                self.isOptional = value
            }
            if let value = dict["ResponseStatus"] as? String {
                self.responseStatus = value
            }
            if let value = dict["Self"] as? Bool {
                self.self_ = value
            }
        }
    }
    public class Categories : Tea.TeaModel {
        public var displayName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
        }
    }
    public class End : Tea.TeaModel {
        public var date: String?

        public var dateTime: String?

        public var timeZone: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.date != nil {
                map["Date"] = self.date!
            }
            if self.dateTime != nil {
                map["DateTime"] = self.dateTime!
            }
            if self.timeZone != nil {
                map["TimeZone"] = self.timeZone!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Date"] as? String {
                self.date = value
            }
            if let value = dict["DateTime"] as? String {
                self.dateTime = value
            }
            if let value = dict["TimeZone"] as? String {
                self.timeZone = value
            }
        }
    }
    public class ExtendedProperties : Tea.TeaModel {
        public class SharedProperties : Tea.TeaModel {
            public var belongCorpId: String?

            public var sourceOpenCid: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.belongCorpId != nil {
                    map["BelongCorpId"] = self.belongCorpId!
                }
                if self.sourceOpenCid != nil {
                    map["SourceOpenCid"] = self.sourceOpenCid!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BelongCorpId"] as? String {
                    self.belongCorpId = value
                }
                if let value = dict["SourceOpenCid"] as? String {
                    self.sourceOpenCid = value
                }
            }
        }
        public var sharedProperties: GetEventResponseBody.ExtendedProperties.SharedProperties?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.sharedProperties?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.sharedProperties != nil {
                map["SharedProperties"] = self.sharedProperties?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SharedProperties"] as? [String: Any?] {
                var model = GetEventResponseBody.ExtendedProperties.SharedProperties()
                model.fromMap(value)
                self.sharedProperties = model
            }
        }
    }
    public class Location : Tea.TeaModel {
        public var displayName: String?

        public var meetingRooms: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.meetingRooms != nil {
                map["MeetingRooms"] = self.meetingRooms!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["MeetingRooms"] as? [String] {
                self.meetingRooms = value
            }
        }
    }
    public class MeetingRooms : Tea.TeaModel {
        public var displayName: String?

        public var responseStatus: String?

        public var roomId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.responseStatus != nil {
                map["ResponseStatus"] = self.responseStatus!
            }
            if self.roomId != nil {
                map["RoomId"] = self.roomId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["ResponseStatus"] as? String {
                self.responseStatus = value
            }
            if let value = dict["RoomId"] as? String {
                self.roomId = value
            }
        }
    }
    public class OnlineMeetingInfo : Tea.TeaModel {
        public var conferenceId: String?

        public var extraInfo: [String: Any]?

        public var type: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.conferenceId != nil {
                map["ConferenceId"] = self.conferenceId!
            }
            if self.extraInfo != nil {
                map["ExtraInfo"] = self.extraInfo!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConferenceId"] as? String {
                self.conferenceId = value
            }
            if let value = dict["ExtraInfo"] as? [String: Any] {
                self.extraInfo = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public class Organizer : Tea.TeaModel {
        public var displayName: String?

        public var id: String?

        public var responseStatus: String?

        public var self_: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.responseStatus != nil {
                map["ResponseStatus"] = self.responseStatus!
            }
            if self.self_ != nil {
                map["Self"] = self.self_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["ResponseStatus"] as? String {
                self.responseStatus = value
            }
            if let value = dict["Self"] as? Bool {
                self.self_ = value
            }
        }
    }
    public class OriginStart : Tea.TeaModel {
        public var dateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dateTime != nil {
                map["DateTime"] = self.dateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DateTime"] as? String {
                self.dateTime = value
            }
        }
    }
    public class Recurrence : Tea.TeaModel {
        public class Pattern : Tea.TeaModel {
            public var dayOfMonth: Int32?

            public var daysOfWeek: String?

            public var index: String?

            public var interval: Int32?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dayOfMonth != nil {
                    map["DayOfMonth"] = self.dayOfMonth!
                }
                if self.daysOfWeek != nil {
                    map["DaysOfWeek"] = self.daysOfWeek!
                }
                if self.index != nil {
                    map["Index"] = self.index!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DayOfMonth"] as? Int32 {
                    self.dayOfMonth = value
                }
                if let value = dict["DaysOfWeek"] as? String {
                    self.daysOfWeek = value
                }
                if let value = dict["Index"] as? String {
                    self.index = value
                }
                if let value = dict["Interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class Range : Tea.TeaModel {
            public var endDate: String?

            public var numberOfOccurrences: Int32?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["EndDate"] = self.endDate!
                }
                if self.numberOfOccurrences != nil {
                    map["NumberOfOccurrences"] = self.numberOfOccurrences!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndDate"] as? String {
                    self.endDate = value
                }
                if let value = dict["NumberOfOccurrences"] as? Int32 {
                    self.numberOfOccurrences = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var pattern: GetEventResponseBody.Recurrence.Pattern?

        public var range: GetEventResponseBody.Recurrence.Range?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.pattern?.validate()
            try self.range?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pattern != nil {
                map["Pattern"] = self.pattern?.toMap()
            }
            if self.range != nil {
                map["Range"] = self.range?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Pattern"] as? [String: Any?] {
                var model = GetEventResponseBody.Recurrence.Pattern()
                model.fromMap(value)
                self.pattern = model
            }
            if let value = dict["Range"] as? [String: Any?] {
                var model = GetEventResponseBody.Recurrence.Range()
                model.fromMap(value)
                self.range = model
            }
        }
    }
    public class Reminders : Tea.TeaModel {
        public var method: String?

        public var minutes: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.method != nil {
                map["Method"] = self.method!
            }
            if self.minutes != nil {
                map["Minutes"] = self.minutes!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Method"] as? String {
                self.method = value
            }
            if let value = dict["Minutes"] as? String {
                self.minutes = value
            }
        }
    }
    public class RichTextDescription : Tea.TeaModel {
        public var text: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.text != nil {
                map["Text"] = self.text!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Text"] as? String {
                self.text = value
            }
        }
    }
    public class Start : Tea.TeaModel {
        public var date: String?

        public var dateTime: String?

        public var timeZone: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.date != nil {
                map["Date"] = self.date!
            }
            if self.dateTime != nil {
                map["DateTime"] = self.dateTime!
            }
            if self.timeZone != nil {
                map["TimeZone"] = self.timeZone!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Date"] as? String {
                self.date = value
            }
            if let value = dict["DateTime"] as? String {
                self.dateTime = value
            }
            if let value = dict["TimeZone"] as? String {
                self.timeZone = value
            }
        }
    }
    public var attendees: [GetEventResponseBody.Attendees]?

    public var categories: [GetEventResponseBody.Categories]?

    public var createTime: String?

    public var description_: String?

    public var end: GetEventResponseBody.End?

    public var extendedProperties: GetEventResponseBody.ExtendedProperties?

    public var id: String?

    public var isAllDay: Bool?

    public var location: GetEventResponseBody.Location?

    public var meetingRooms: [GetEventResponseBody.MeetingRooms]?

    public var onlineMeetingInfo: GetEventResponseBody.OnlineMeetingInfo?

    public var organizer: GetEventResponseBody.Organizer?

    public var originStart: GetEventResponseBody.OriginStart?

    public var recurrence: GetEventResponseBody.Recurrence?

    public var reminders: [GetEventResponseBody.Reminders]?

    public var requestId: String?

    public var richTextDescription: GetEventResponseBody.RichTextDescription?

    public var seriesMasterId: String?

    public var start: GetEventResponseBody.Start?

    public var status: String?

    public var summary: String?

    public var updateTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.end?.validate()
        try self.extendedProperties?.validate()
        try self.location?.validate()
        try self.onlineMeetingInfo?.validate()
        try self.organizer?.validate()
        try self.originStart?.validate()
        try self.recurrence?.validate()
        try self.richTextDescription?.validate()
        try self.start?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attendees != nil {
            var tmp : [Any] = []
            for k in self.attendees! {
                tmp.append(k.toMap())
            }
            map["attendees"] = tmp
        }
        if self.categories != nil {
            var tmp : [Any] = []
            for k in self.categories! {
                tmp.append(k.toMap())
            }
            map["categories"] = tmp
        }
        if self.createTime != nil {
            map["createTime"] = self.createTime!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.end != nil {
            map["end"] = self.end?.toMap()
        }
        if self.extendedProperties != nil {
            map["extendedProperties"] = self.extendedProperties?.toMap()
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.isAllDay != nil {
            map["isAllDay"] = self.isAllDay!
        }
        if self.location != nil {
            map["location"] = self.location?.toMap()
        }
        if self.meetingRooms != nil {
            var tmp : [Any] = []
            for k in self.meetingRooms! {
                tmp.append(k.toMap())
            }
            map["meetingRooms"] = tmp
        }
        if self.onlineMeetingInfo != nil {
            map["onlineMeetingInfo"] = self.onlineMeetingInfo?.toMap()
        }
        if self.organizer != nil {
            map["organizer"] = self.organizer?.toMap()
        }
        if self.originStart != nil {
            map["originStart"] = self.originStart?.toMap()
        }
        if self.recurrence != nil {
            map["recurrence"] = self.recurrence?.toMap()
        }
        if self.reminders != nil {
            var tmp : [Any] = []
            for k in self.reminders! {
                tmp.append(k.toMap())
            }
            map["reminders"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.richTextDescription != nil {
            map["richTextDescription"] = self.richTextDescription?.toMap()
        }
        if self.seriesMasterId != nil {
            map["seriesMasterId"] = self.seriesMasterId!
        }
        if self.start != nil {
            map["start"] = self.start?.toMap()
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.summary != nil {
            map["summary"] = self.summary!
        }
        if self.updateTime != nil {
            map["updateTime"] = self.updateTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["attendees"] as? [Any?] {
            var tmp : [GetEventResponseBody.Attendees] = []
            for v in value {
                if v != nil {
                    var model = GetEventResponseBody.Attendees()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.attendees = tmp
        }
        if let value = dict["categories"] as? [Any?] {
            var tmp : [GetEventResponseBody.Categories] = []
            for v in value {
                if v != nil {
                    var model = GetEventResponseBody.Categories()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.categories = tmp
        }
        if let value = dict["createTime"] as? String {
            self.createTime = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["end"] as? [String: Any?] {
            var model = GetEventResponseBody.End()
            model.fromMap(value)
            self.end = model
        }
        if let value = dict["extendedProperties"] as? [String: Any?] {
            var model = GetEventResponseBody.ExtendedProperties()
            model.fromMap(value)
            self.extendedProperties = model
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["isAllDay"] as? Bool {
            self.isAllDay = value
        }
        if let value = dict["location"] as? [String: Any?] {
            var model = GetEventResponseBody.Location()
            model.fromMap(value)
            self.location = model
        }
        if let value = dict["meetingRooms"] as? [Any?] {
            var tmp : [GetEventResponseBody.MeetingRooms] = []
            for v in value {
                if v != nil {
                    var model = GetEventResponseBody.MeetingRooms()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.meetingRooms = tmp
        }
        if let value = dict["onlineMeetingInfo"] as? [String: Any?] {
            var model = GetEventResponseBody.OnlineMeetingInfo()
            model.fromMap(value)
            self.onlineMeetingInfo = model
        }
        if let value = dict["organizer"] as? [String: Any?] {
            var model = GetEventResponseBody.Organizer()
            model.fromMap(value)
            self.organizer = model
        }
        if let value = dict["originStart"] as? [String: Any?] {
            var model = GetEventResponseBody.OriginStart()
            model.fromMap(value)
            self.originStart = model
        }
        if let value = dict["recurrence"] as? [String: Any?] {
            var model = GetEventResponseBody.Recurrence()
            model.fromMap(value)
            self.recurrence = model
        }
        if let value = dict["reminders"] as? [Any?] {
            var tmp : [GetEventResponseBody.Reminders] = []
            for v in value {
                if v != nil {
                    var model = GetEventResponseBody.Reminders()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.reminders = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["richTextDescription"] as? [String: Any?] {
            var model = GetEventResponseBody.RichTextDescription()
            model.fromMap(value)
            self.richTextDescription = model
        }
        if let value = dict["seriesMasterId"] as? String {
            self.seriesMasterId = value
        }
        if let value = dict["start"] as? [String: Any?] {
            var model = GetEventResponseBody.Start()
            model.fromMap(value)
            self.start = model
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
        if let value = dict["summary"] as? String {
            self.summary = value
        }
        if let value = dict["updateTime"] as? String {
            self.updateTime = value
        }
    }
}

public class GetEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetFieldDefByUuidHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetFieldDefByUuidHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetFieldDefByUuidHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetFieldDefByUuidShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetFieldDefByUuidRequest : Tea.TeaModel {
    public var appType: String?

    public var formUuid: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class GetFieldDefByUuidResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var behavior: String?

        public var children: String?

        public var componentName: String?

        public var fieldId: String?

        public var label: Any?

        public var props: Any?

        public var success: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.behavior != nil {
                map["Behavior"] = self.behavior!
            }
            if self.children != nil {
                map["Children"] = self.children!
            }
            if self.componentName != nil {
                map["ComponentName"] = self.componentName!
            }
            if self.fieldId != nil {
                map["FieldId"] = self.fieldId!
            }
            if self.label != nil {
                map["Label"] = self.label!
            }
            if self.props != nil {
                map["Props"] = self.props!
            }
            if self.success != nil {
                map["Success"] = self.success!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Behavior"] as? String {
                self.behavior = value
            }
            if let value = dict["Children"] as? String {
                self.children = value
            }
            if let value = dict["ComponentName"] as? String {
                self.componentName = value
            }
            if let value = dict["FieldId"] as? String {
                self.fieldId = value
            }
            if let value = dict["Label"] as? Any {
                self.label = value
            }
            if let value = dict["Props"] as? Any {
                self.props = value
            }
            if let value = dict["Success"] as? Bool {
                self.success = value
            }
        }
    }
    public var requestId: String?

    public var result: [GetFieldDefByUuidResponseBody.Result]?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["result"] = tmp
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [Any?] {
            var tmp : [GetFieldDefByUuidResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = GetFieldDefByUuidResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetFieldDefByUuidResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetFieldDefByUuidResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetFieldDefByUuidResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetFileDownloadInfoHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetFileDownloadInfoHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetFileDownloadInfoHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetFileDownloadInfoShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetFileDownloadInfoRequest : Tea.TeaModel {
    public class Option : Tea.TeaModel {
        public var preferIntranet: Bool?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.preferIntranet != nil {
                map["PreferIntranet"] = self.preferIntranet!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PreferIntranet"] as? Bool {
                self.preferIntranet = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dentryId: String?

    public var option: GetFileDownloadInfoRequest.Option?

    public var spaceId: String?

    public var tenantContext: GetFileDownloadInfoRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.option?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryId != nil {
            map["DentryId"] = self.dentryId!
        }
        if self.option != nil {
            map["Option"] = self.option?.toMap()
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["Option"] as? [String: Any?] {
            var model = GetFileDownloadInfoRequest.Option()
            model.fromMap(value)
            self.option = model
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetFileDownloadInfoRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetFileDownloadInfoShrinkRequest : Tea.TeaModel {
    public var dentryId: String?

    public var optionShrink: String?

    public var spaceId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryId != nil {
            map["DentryId"] = self.dentryId!
        }
        if self.optionShrink != nil {
            map["Option"] = self.optionShrink!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["Option"] as? String {
            self.optionShrink = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetFileDownloadInfoResponseBody : Tea.TeaModel {
    public class HeaderSignatureInfo : Tea.TeaModel {
        public var expirationSeconds: Int32?

        public var headers: [String: String]?

        public var internalResourceUrls: [String]?

        public var region: String?

        public var resourceUrls: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expirationSeconds != nil {
                map["ExpirationSeconds"] = self.expirationSeconds!
            }
            if self.headers != nil {
                map["Headers"] = self.headers!
            }
            if self.internalResourceUrls != nil {
                map["InternalResourceUrls"] = self.internalResourceUrls!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.resourceUrls != nil {
                map["ResourceUrls"] = self.resourceUrls!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ExpirationSeconds"] as? Int32 {
                self.expirationSeconds = value
            }
            if let value = dict["Headers"] as? [String: String] {
                self.headers = value
            }
            if let value = dict["InternalResourceUrls"] as? [String] {
                self.internalResourceUrls = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["ResourceUrls"] as? [String] {
                self.resourceUrls = value
            }
        }
    }
    public var headerSignatureInfo: GetFileDownloadInfoResponseBody.HeaderSignatureInfo?

    public var protocol_: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.headerSignatureInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headerSignatureInfo != nil {
            map["headerSignatureInfo"] = self.headerSignatureInfo?.toMap()
        }
        if self.protocol_ != nil {
            map["protocol"] = self.protocol_!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headerSignatureInfo"] as? [String: Any?] {
            var model = GetFileDownloadInfoResponseBody.HeaderSignatureInfo()
            model.fromMap(value)
            self.headerSignatureInfo = model
        }
        if let value = dict["protocol"] as? String {
            self.protocol_ = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetFileDownloadInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetFileDownloadInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetFileDownloadInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetFileUploadInfoHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetFileUploadInfoHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetFileUploadInfoHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetFileUploadInfoShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetFileUploadInfoRequest : Tea.TeaModel {
    public class Option : Tea.TeaModel {
        public class PreCheckParam : Tea.TeaModel {
            public var name: String?

            public var size: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Size"] as? Int64 {
                    self.size = value
                }
            }
        }
        public var preCheckParam: GetFileUploadInfoRequest.Option.PreCheckParam?

        public var preferIntranet: Bool?

        public var preferRegion: String?

        public var storageDriver: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.preCheckParam?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.preCheckParam != nil {
                map["PreCheckParam"] = self.preCheckParam?.toMap()
            }
            if self.preferIntranet != nil {
                map["PreferIntranet"] = self.preferIntranet!
            }
            if self.preferRegion != nil {
                map["PreferRegion"] = self.preferRegion!
            }
            if self.storageDriver != nil {
                map["StorageDriver"] = self.storageDriver!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PreCheckParam"] as? [String: Any?] {
                var model = GetFileUploadInfoRequest.Option.PreCheckParam()
                model.fromMap(value)
                self.preCheckParam = model
            }
            if let value = dict["PreferIntranet"] as? Bool {
                self.preferIntranet = value
            }
            if let value = dict["PreferRegion"] as? String {
                self.preferRegion = value
            }
            if let value = dict["StorageDriver"] as? String {
                self.storageDriver = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var option: GetFileUploadInfoRequest.Option?

    public var parentDentryUuid: String?

    public var protocol_: String?

    public var tenantContext: GetFileUploadInfoRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.option?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.option != nil {
            map["Option"] = self.option?.toMap()
        }
        if self.parentDentryUuid != nil {
            map["ParentDentryUuid"] = self.parentDentryUuid!
        }
        if self.protocol_ != nil {
            map["Protocol"] = self.protocol_!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Option"] as? [String: Any?] {
            var model = GetFileUploadInfoRequest.Option()
            model.fromMap(value)
            self.option = model
        }
        if let value = dict["ParentDentryUuid"] as? String {
            self.parentDentryUuid = value
        }
        if let value = dict["Protocol"] as? String {
            self.protocol_ = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetFileUploadInfoRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetFileUploadInfoShrinkRequest : Tea.TeaModel {
    public var optionShrink: String?

    public var parentDentryUuid: String?

    public var protocol_: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.optionShrink != nil {
            map["Option"] = self.optionShrink!
        }
        if self.parentDentryUuid != nil {
            map["ParentDentryUuid"] = self.parentDentryUuid!
        }
        if self.protocol_ != nil {
            map["Protocol"] = self.protocol_!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Option"] as? String {
            self.optionShrink = value
        }
        if let value = dict["ParentDentryUuid"] as? String {
            self.parentDentryUuid = value
        }
        if let value = dict["Protocol"] as? String {
            self.protocol_ = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetFileUploadInfoResponseBody : Tea.TeaModel {
    public class HeaderSignatureInfo : Tea.TeaModel {
        public var expirationSeconds: Int32?

        public var headers: [String: String]?

        public var internalResourceUrls: [String]?

        public var region: String?

        public var resourceUrls: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expirationSeconds != nil {
                map["ExpirationSeconds"] = self.expirationSeconds!
            }
            if self.headers != nil {
                map["Headers"] = self.headers!
            }
            if self.internalResourceUrls != nil {
                map["InternalResourceUrls"] = self.internalResourceUrls!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.resourceUrls != nil {
                map["ResourceUrls"] = self.resourceUrls!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ExpirationSeconds"] as? Int32 {
                self.expirationSeconds = value
            }
            if let value = dict["Headers"] as? [String: String] {
                self.headers = value
            }
            if let value = dict["InternalResourceUrls"] as? [String] {
                self.internalResourceUrls = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["ResourceUrls"] as? [String] {
                self.resourceUrls = value
            }
        }
    }
    public var headerSignatureInfo: GetFileUploadInfoResponseBody.HeaderSignatureInfo?

    public var protocol_: String?

    public var requestId: String?

    public var storageDriver: String?

    public var uploadKey: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.headerSignatureInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headerSignatureInfo != nil {
            map["headerSignatureInfo"] = self.headerSignatureInfo?.toMap()
        }
        if self.protocol_ != nil {
            map["protocol"] = self.protocol_!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.storageDriver != nil {
            map["storageDriver"] = self.storageDriver!
        }
        if self.uploadKey != nil {
            map["uploadKey"] = self.uploadKey!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headerSignatureInfo"] as? [String: Any?] {
            var model = GetFileUploadInfoResponseBody.HeaderSignatureInfo()
            model.fromMap(value)
            self.headerSignatureInfo = model
        }
        if let value = dict["protocol"] as? String {
            self.protocol_ = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["storageDriver"] as? String {
            self.storageDriver = value
        }
        if let value = dict["uploadKey"] as? String {
            self.uploadKey = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetFileUploadInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetFileUploadInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetFileUploadInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetFormComponentDefinitionListHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetFormComponentDefinitionListHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetFormComponentDefinitionListHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetFormComponentDefinitionListShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetFormComponentDefinitionListRequest : Tea.TeaModel {
    public var appType: String?

    public var formUuid: String?

    public var language: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class GetFormComponentDefinitionListResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var componentName: String?

        public var fieldId: String?

        public var label: String?

        public var parentId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.componentName != nil {
                map["ComponentName"] = self.componentName!
            }
            if self.fieldId != nil {
                map["FieldId"] = self.fieldId!
            }
            if self.label != nil {
                map["Label"] = self.label!
            }
            if self.parentId != nil {
                map["ParentId"] = self.parentId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ComponentName"] as? String {
                self.componentName = value
            }
            if let value = dict["FieldId"] as? String {
                self.fieldId = value
            }
            if let value = dict["Label"] as? String {
                self.label = value
            }
            if let value = dict["ParentId"] as? String {
                self.parentId = value
            }
        }
    }
    public var result: [GetFormComponentDefinitionListResponseBody.Result]?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["Result"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Result"] as? [Any?] {
            var tmp : [GetFormComponentDefinitionListResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = GetFormComponentDefinitionListResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetFormComponentDefinitionListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetFormComponentDefinitionListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetFormComponentDefinitionListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetFormDataByIDHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetFormDataByIDHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetFormDataByIDHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetFormDataByIDShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetFormDataByIDRequest : Tea.TeaModel {
    public var appType: String?

    public var id: String?

    public var language: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class GetFormDataByIDResponseBody : Tea.TeaModel {
    public class Originator : Tea.TeaModel {
        public class Name : Tea.TeaModel {
            public var nameInChinese: String?

            public var nameInEnglish: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.nameInChinese != nil {
                    map["NameInChinese"] = self.nameInChinese!
                }
                if self.nameInEnglish != nil {
                    map["NameInEnglish"] = self.nameInEnglish!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NameInChinese"] as? String {
                    self.nameInChinese = value
                }
                if let value = dict["NameInEnglish"] as? String {
                    self.nameInEnglish = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var departmentName: String?

        public var email: String?

        public var name: GetFormDataByIDResponseBody.Originator.Name?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.name?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.departmentName != nil {
                map["DepartmentName"] = self.departmentName!
            }
            if self.email != nil {
                map["Email"] = self.email!
            }
            if self.name != nil {
                map["Name"] = self.name?.toMap()
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DepartmentName"] as? String {
                self.departmentName = value
            }
            if let value = dict["Email"] as? String {
                self.email = value
            }
            if let value = dict["Name"] as? [String: Any?] {
                var model = GetFormDataByIDResponseBody.Originator.Name()
                model.fromMap(value)
                self.name = model
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var formData: [String: Any]?

    public var formInstId: String?

    public var modifiedTimeGMT: String?

    public var originator: GetFormDataByIDResponseBody.Originator?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.originator?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.formData != nil {
            map["formData"] = self.formData!
        }
        if self.formInstId != nil {
            map["formInstId"] = self.formInstId!
        }
        if self.modifiedTimeGMT != nil {
            map["modifiedTimeGMT"] = self.modifiedTimeGMT!
        }
        if self.originator != nil {
            map["originator"] = self.originator?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["formData"] as? [String: Any] {
            self.formData = value
        }
        if let value = dict["formInstId"] as? String {
            self.formInstId = value
        }
        if let value = dict["modifiedTimeGMT"] as? String {
            self.modifiedTimeGMT = value
        }
        if let value = dict["originator"] as? [String: Any?] {
            var model = GetFormDataByIDResponseBody.Originator()
            model.fromMap(value)
            self.originator = model
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetFormDataByIDResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetFormDataByIDResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetFormDataByIDResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetFormListInAppHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetFormListInAppHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetFormListInAppHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetFormListInAppShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetFormListInAppRequest : Tea.TeaModel {
    public var appType: String?

    public var formTypes: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formTypes != nil {
            map["FormTypes"] = self.formTypes!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormTypes"] as? String {
            self.formTypes = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class GetFormListInAppResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Title : Tea.TeaModel {
            public var enUS: String?

            public var zhCN: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.enUS != nil {
                    map["EnUS"] = self.enUS!
                }
                if self.zhCN != nil {
                    map["ZhCN"] = self.zhCN!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EnUS"] as? String {
                    self.enUS = value
                }
                if let value = dict["ZhCN"] as? String {
                    self.zhCN = value
                }
            }
        }
        public var creator: String?

        public var formType: String?

        public var formUuid: String?

        public var gmtCreate: String?

        public var title: GetFormListInAppResponseBody.Data.Title?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.title?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.formType != nil {
                map["FormType"] = self.formType!
            }
            if self.formUuid != nil {
                map["FormUuid"] = self.formUuid!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.title != nil {
                map["Title"] = self.title?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["FormType"] as? String {
                self.formType = value
            }
            if let value = dict["FormUuid"] as? String {
                self.formUuid = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["Title"] as? [String: Any?] {
                var model = GetFormListInAppResponseBody.Data.Title()
                model.fromMap(value)
                self.title = model
            }
        }
    }
    public var currentPage: Int32?

    public var data: [GetFormListInAppResponseBody.Data]?

    public var requestId: String?

    public var success: Bool?

    public var totalCount: Int32?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["data"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["data"] as? [Any?] {
            var tmp : [GetFormListInAppResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetFormListInAppResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["totalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetFormListInAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetFormListInAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetFormListInAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetGroupLiveListHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetGroupLiveListHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetGroupLiveListHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetGroupLiveListShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetGroupLiveListRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var endTime: Int64?

    public var openConversationId: String?

    public var startTime: Int64?

    public var tenantContext: GetGroupLiveListRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.openConversationId != nil {
            map["OpenConversationId"] = self.openConversationId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["OpenConversationId"] as? String {
            self.openConversationId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetGroupLiveListRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetGroupLiveListShrinkRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var openConversationId: String?

    public var startTime: Int64?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.openConversationId != nil {
            map["OpenConversationId"] = self.openConversationId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["OpenConversationId"] as? String {
            self.openConversationId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetGroupLiveListResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public class GroupLiveList : Tea.TeaModel {
            public var anchorNickname: String?

            public var anchorUnionId: String?

            public var liveEndTime: Int64?

            public var liveStartTime: Int64?

            public var liveUuid: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.anchorNickname != nil {
                    map["AnchorNickname"] = self.anchorNickname!
                }
                if self.anchorUnionId != nil {
                    map["AnchorUnionId"] = self.anchorUnionId!
                }
                if self.liveEndTime != nil {
                    map["LiveEndTime"] = self.liveEndTime!
                }
                if self.liveStartTime != nil {
                    map["LiveStartTime"] = self.liveStartTime!
                }
                if self.liveUuid != nil {
                    map["LiveUuid"] = self.liveUuid!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AnchorNickname"] as? String {
                    self.anchorNickname = value
                }
                if let value = dict["AnchorUnionId"] as? String {
                    self.anchorUnionId = value
                }
                if let value = dict["LiveEndTime"] as? Int64 {
                    self.liveEndTime = value
                }
                if let value = dict["LiveStartTime"] as? Int64 {
                    self.liveStartTime = value
                }
                if let value = dict["LiveUuid"] as? String {
                    self.liveUuid = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public var groupLiveList: [GetGroupLiveListResponseBody.Result.GroupLiveList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.groupLiveList != nil {
                var tmp : [Any] = []
                for k in self.groupLiveList! {
                    tmp.append(k.toMap())
                }
                map["GroupLiveList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["GroupLiveList"] as? [Any?] {
                var tmp : [GetGroupLiveListResponseBody.Result.GroupLiveList] = []
                for v in value {
                    if v != nil {
                        var model = GetGroupLiveListResponseBody.Result.GroupLiveList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.groupLiveList = tmp
            }
        }
    }
    public var requestId: String?

    public var result: GetGroupLiveListResponseBody.Result?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.result?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result?.toMap()
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [String: Any?] {
            var model = GetGroupLiveListResponseBody.Result()
            model.fromMap(value)
            self.result = model
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetGroupLiveListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetGroupLiveListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetGroupLiveListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetInnerGroupMembersHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetInnerGroupMembersHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetInnerGroupMembersHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetInnerGroupMembersShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetInnerGroupMembersRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var openConversationId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.openConversationId != nil {
            map["OpenConversationId"] = self.openConversationId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OpenConversationId"] as? String {
            self.openConversationId = value
        }
    }
}

public class GetInnerGroupMembersResponseBody : Tea.TeaModel {
    public var hasMore: Bool?

    public var nextToken: String?

    public var requestId: String?

    public var userIds: [String]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hasMore != nil {
            map["hasMore"] = self.hasMore!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.userIds != nil {
            map["userIds"] = self.userIds!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["hasMore"] as? Bool {
            self.hasMore = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["userIds"] as? [String] {
            self.userIds = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetInnerGroupMembersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInnerGroupMembersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetInnerGroupMembersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetInstanceByIdHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetInstanceByIdHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetInstanceByIdHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetInstanceByIdShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetInstanceByIdRequest : Tea.TeaModel {
    public var appType: String?

    public var id: String?

    public var language: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class GetInstanceByIdResponseBody : Tea.TeaModel {
    public class ActionExecutor : Tea.TeaModel {
        public class Name : Tea.TeaModel {
            public var nameInChinese: String?

            public var nameInEnglish: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.nameInChinese != nil {
                    map["NameInChinese"] = self.nameInChinese!
                }
                if self.nameInEnglish != nil {
                    map["NameInEnglish"] = self.nameInEnglish!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NameInChinese"] as? String {
                    self.nameInChinese = value
                }
                if let value = dict["NameInEnglish"] as? String {
                    self.nameInEnglish = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var deptName: String?

        public var email: String?

        public var name: GetInstanceByIdResponseBody.ActionExecutor.Name?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.name?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deptName != nil {
                map["DeptName"] = self.deptName!
            }
            if self.email != nil {
                map["Email"] = self.email!
            }
            if self.name != nil {
                map["Name"] = self.name?.toMap()
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeptName"] as? String {
                self.deptName = value
            }
            if let value = dict["Email"] as? String {
                self.email = value
            }
            if let value = dict["Name"] as? [String: Any?] {
                var model = GetInstanceByIdResponseBody.ActionExecutor.Name()
                model.fromMap(value)
                self.name = model
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public class Originator : Tea.TeaModel {
        public class Name : Tea.TeaModel {
            public var nameInChinese: String?

            public var nameInEnglish: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.nameInChinese != nil {
                    map["NameInChinese"] = self.nameInChinese!
                }
                if self.nameInEnglish != nil {
                    map["NameInEnglish"] = self.nameInEnglish!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NameInChinese"] as? String {
                    self.nameInChinese = value
                }
                if let value = dict["NameInEnglish"] as? String {
                    self.nameInEnglish = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var deptName: String?

        public var email: String?

        public var name: GetInstanceByIdResponseBody.Originator.Name?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.name?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deptName != nil {
                map["DeptName"] = self.deptName!
            }
            if self.email != nil {
                map["Email"] = self.email!
            }
            if self.name != nil {
                map["Name"] = self.name?.toMap()
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeptName"] as? String {
                self.deptName = value
            }
            if let value = dict["Email"] as? String {
                self.email = value
            }
            if let value = dict["Name"] as? [String: Any?] {
                var model = GetInstanceByIdResponseBody.Originator.Name()
                model.fromMap(value)
                self.name = model
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var actionExecutor: [GetInstanceByIdResponseBody.ActionExecutor]?

    public var approvedResult: String?

    public var createTimeGMT: String?

    public var data: [String: Any]?

    public var formUuid: String?

    public var instanceStatus: String?

    public var modifiedTimeGMT: String?

    public var originator: GetInstanceByIdResponseBody.Originator?

    public var processCode: String?

    public var processInstanceId: String?

    public var requestId: String?

    public var title: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public var version: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.originator?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.actionExecutor != nil {
            var tmp : [Any] = []
            for k in self.actionExecutor! {
                tmp.append(k.toMap())
            }
            map["actionExecutor"] = tmp
        }
        if self.approvedResult != nil {
            map["approvedResult"] = self.approvedResult!
        }
        if self.createTimeGMT != nil {
            map["createTimeGMT"] = self.createTimeGMT!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        if self.formUuid != nil {
            map["formUuid"] = self.formUuid!
        }
        if self.instanceStatus != nil {
            map["instanceStatus"] = self.instanceStatus!
        }
        if self.modifiedTimeGMT != nil {
            map["modifiedTimeGMT"] = self.modifiedTimeGMT!
        }
        if self.originator != nil {
            map["originator"] = self.originator?.toMap()
        }
        if self.processCode != nil {
            map["processCode"] = self.processCode!
        }
        if self.processInstanceId != nil {
            map["processInstanceId"] = self.processInstanceId!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        if self.version != nil {
            map["version"] = self.version!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["actionExecutor"] as? [Any?] {
            var tmp : [GetInstanceByIdResponseBody.ActionExecutor] = []
            for v in value {
                if v != nil {
                    var model = GetInstanceByIdResponseBody.ActionExecutor()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.actionExecutor = tmp
        }
        if let value = dict["approvedResult"] as? String {
            self.approvedResult = value
        }
        if let value = dict["createTimeGMT"] as? String {
            self.createTimeGMT = value
        }
        if let value = dict["data"] as? [String: Any] {
            self.data = value
        }
        if let value = dict["formUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["instanceStatus"] as? String {
            self.instanceStatus = value
        }
        if let value = dict["modifiedTimeGMT"] as? String {
            self.modifiedTimeGMT = value
        }
        if let value = dict["originator"] as? [String: Any?] {
            var model = GetInstanceByIdResponseBody.Originator()
            model.fromMap(value)
            self.originator = model
        }
        if let value = dict["processCode"] as? String {
            self.processCode = value
        }
        if let value = dict["processInstanceId"] as? String {
            self.processInstanceId = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
        if let value = dict["version"] as? Int64 {
            self.version = value
        }
    }
}

public class GetInstanceByIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInstanceByIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetInstanceByIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetInstanceIdListHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetInstanceIdListHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetInstanceIdListHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetInstanceIdListShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetInstanceIdListRequest : Tea.TeaModel {
    public var appType: String?

    public var approvedResult: String?

    public var createFromTimeGMT: String?

    public var createToTimeGMT: String?

    public var formUuid: String?

    public var instanceStatus: String?

    public var language: String?

    public var modifiedFromTimeGMT: String?

    public var modifiedToTimeGMT: String?

    public var originatorId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchFieldJson: String?

    public var systemToken: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.approvedResult != nil {
            map["ApprovedResult"] = self.approvedResult!
        }
        if self.createFromTimeGMT != nil {
            map["CreateFromTimeGMT"] = self.createFromTimeGMT!
        }
        if self.createToTimeGMT != nil {
            map["CreateToTimeGMT"] = self.createToTimeGMT!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.instanceStatus != nil {
            map["InstanceStatus"] = self.instanceStatus!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.modifiedFromTimeGMT != nil {
            map["ModifiedFromTimeGMT"] = self.modifiedFromTimeGMT!
        }
        if self.modifiedToTimeGMT != nil {
            map["ModifiedToTimeGMT"] = self.modifiedToTimeGMT!
        }
        if self.originatorId != nil {
            map["OriginatorId"] = self.originatorId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchFieldJson != nil {
            map["SearchFieldJson"] = self.searchFieldJson!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["ApprovedResult"] as? String {
            self.approvedResult = value
        }
        if let value = dict["CreateFromTimeGMT"] as? String {
            self.createFromTimeGMT = value
        }
        if let value = dict["CreateToTimeGMT"] as? String {
            self.createToTimeGMT = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["InstanceStatus"] as? String {
            self.instanceStatus = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ModifiedFromTimeGMT"] as? String {
            self.modifiedFromTimeGMT = value
        }
        if let value = dict["ModifiedToTimeGMT"] as? String {
            self.modifiedToTimeGMT = value
        }
        if let value = dict["OriginatorId"] as? String {
            self.originatorId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchFieldJson"] as? String {
            self.searchFieldJson = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class GetInstanceIdListResponseBody : Tea.TeaModel {
    public var data: [String]?

    public var pageNumber: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["data"] = self.data!
        }
        if self.pageNumber != nil {
            map["pageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? [String] {
            self.data = value
        }
        if let value = dict["pageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetInstanceIdListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInstanceIdListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetInstanceIdListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetInstancesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetInstancesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetInstancesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetInstancesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetInstancesRequest : Tea.TeaModel {
    public var appType: String?

    public var approvedResult: String?

    public var createFromTimeGMT: String?

    public var createToTimeGMT: String?

    public var formUuid: String?

    public var instanceStatus: String?

    public var language: String?

    public var modifiedFromTimeGMT: String?

    public var modifiedToTimeGMT: String?

    public var orderConfigJson: String?

    public var originatorId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchFieldJson: String?

    public var systemToken: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.approvedResult != nil {
            map["ApprovedResult"] = self.approvedResult!
        }
        if self.createFromTimeGMT != nil {
            map["CreateFromTimeGMT"] = self.createFromTimeGMT!
        }
        if self.createToTimeGMT != nil {
            map["CreateToTimeGMT"] = self.createToTimeGMT!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.instanceStatus != nil {
            map["InstanceStatus"] = self.instanceStatus!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.modifiedFromTimeGMT != nil {
            map["ModifiedFromTimeGMT"] = self.modifiedFromTimeGMT!
        }
        if self.modifiedToTimeGMT != nil {
            map["ModifiedToTimeGMT"] = self.modifiedToTimeGMT!
        }
        if self.orderConfigJson != nil {
            map["OrderConfigJson"] = self.orderConfigJson!
        }
        if self.originatorId != nil {
            map["OriginatorId"] = self.originatorId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchFieldJson != nil {
            map["SearchFieldJson"] = self.searchFieldJson!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["ApprovedResult"] as? String {
            self.approvedResult = value
        }
        if let value = dict["CreateFromTimeGMT"] as? String {
            self.createFromTimeGMT = value
        }
        if let value = dict["CreateToTimeGMT"] as? String {
            self.createToTimeGMT = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["InstanceStatus"] as? String {
            self.instanceStatus = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ModifiedFromTimeGMT"] as? String {
            self.modifiedFromTimeGMT = value
        }
        if let value = dict["ModifiedToTimeGMT"] as? String {
            self.modifiedToTimeGMT = value
        }
        if let value = dict["OrderConfigJson"] as? String {
            self.orderConfigJson = value
        }
        if let value = dict["OriginatorId"] as? String {
            self.originatorId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchFieldJson"] as? String {
            self.searchFieldJson = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class GetInstancesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ActionExecutor : Tea.TeaModel {
            public class Name : Tea.TeaModel {
                public var nameInChinese: String?

                public var nameInEnglish: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.nameInChinese != nil {
                        map["NameInChinese"] = self.nameInChinese!
                    }
                    if self.nameInEnglish != nil {
                        map["NameInEnglish"] = self.nameInEnglish!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NameInChinese"] as? String {
                        self.nameInChinese = value
                    }
                    if let value = dict["NameInEnglish"] as? String {
                        self.nameInEnglish = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var deptName: String?

            public var email: String?

            public var name: GetInstancesResponseBody.Data.ActionExecutor.Name?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.name?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.deptName != nil {
                    map["DeptName"] = self.deptName!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.name != nil {
                    map["Name"] = self.name?.toMap()
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DeptName"] as? String {
                    self.deptName = value
                }
                if let value = dict["Email"] as? String {
                    self.email = value
                }
                if let value = dict["Name"] as? [String: Any?] {
                    var model = GetInstancesResponseBody.Data.ActionExecutor.Name()
                    model.fromMap(value)
                    self.name = model
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class Originator : Tea.TeaModel {
            public class Name : Tea.TeaModel {
                public var nameInChinese: String?

                public var nameInEnglish: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.nameInChinese != nil {
                        map["NameInChinese"] = self.nameInChinese!
                    }
                    if self.nameInEnglish != nil {
                        map["NameInEnglish"] = self.nameInEnglish!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NameInChinese"] as? String {
                        self.nameInChinese = value
                    }
                    if let value = dict["NameInEnglish"] as? String {
                        self.nameInEnglish = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var deptName: String?

            public var email: String?

            public var name: GetInstancesResponseBody.Data.Originator.Name?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.name?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.deptName != nil {
                    map["DeptName"] = self.deptName!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.name != nil {
                    map["Name"] = self.name?.toMap()
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DeptName"] as? String {
                    self.deptName = value
                }
                if let value = dict["Email"] as? String {
                    self.email = value
                }
                if let value = dict["Name"] as? [String: Any?] {
                    var model = GetInstancesResponseBody.Data.Originator.Name()
                    model.fromMap(value)
                    self.name = model
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var actionExecutor: [GetInstancesResponseBody.Data.ActionExecutor]?

        public var approvedResult: String?

        public var createTimeGMT: String?

        public var data: [String: Any]?

        public var formUuid: String?

        public var instanceStatus: String?

        public var modifiedTimeGMT: String?

        public var originator: GetInstancesResponseBody.Data.Originator?

        public var processCode: String?

        public var processInstanceId: String?

        public var title: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.originator?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actionExecutor != nil {
                var tmp : [Any] = []
                for k in self.actionExecutor! {
                    tmp.append(k.toMap())
                }
                map["ActionExecutor"] = tmp
            }
            if self.approvedResult != nil {
                map["ApprovedResult"] = self.approvedResult!
            }
            if self.createTimeGMT != nil {
                map["CreateTimeGMT"] = self.createTimeGMT!
            }
            if self.data != nil {
                map["Data"] = self.data!
            }
            if self.formUuid != nil {
                map["FormUuid"] = self.formUuid!
            }
            if self.instanceStatus != nil {
                map["InstanceStatus"] = self.instanceStatus!
            }
            if self.modifiedTimeGMT != nil {
                map["ModifiedTimeGMT"] = self.modifiedTimeGMT!
            }
            if self.originator != nil {
                map["Originator"] = self.originator?.toMap()
            }
            if self.processCode != nil {
                map["ProcessCode"] = self.processCode!
            }
            if self.processInstanceId != nil {
                map["ProcessInstanceId"] = self.processInstanceId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActionExecutor"] as? [Any?] {
                var tmp : [GetInstancesResponseBody.Data.ActionExecutor] = []
                for v in value {
                    if v != nil {
                        var model = GetInstancesResponseBody.Data.ActionExecutor()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.actionExecutor = tmp
            }
            if let value = dict["ApprovedResult"] as? String {
                self.approvedResult = value
            }
            if let value = dict["CreateTimeGMT"] as? String {
                self.createTimeGMT = value
            }
            if let value = dict["Data"] as? [String: Any] {
                self.data = value
            }
            if let value = dict["FormUuid"] as? String {
                self.formUuid = value
            }
            if let value = dict["InstanceStatus"] as? String {
                self.instanceStatus = value
            }
            if let value = dict["ModifiedTimeGMT"] as? String {
                self.modifiedTimeGMT = value
            }
            if let value = dict["Originator"] as? [String: Any?] {
                var model = GetInstancesResponseBody.Data.Originator()
                model.fromMap(value)
                self.originator = model
            }
            if let value = dict["ProcessCode"] as? String {
                self.processCode = value
            }
            if let value = dict["ProcessInstanceId"] as? String {
                self.processInstanceId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var data: [GetInstancesResponseBody.Data]?

    public var pageNumber: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["data"] = tmp
        }
        if self.pageNumber != nil {
            map["pageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? [Any?] {
            var tmp : [GetInstancesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetInstancesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["pageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetInstancesByIdListHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetInstancesByIdListHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetInstancesByIdListHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetInstancesByIdListShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetInstancesByIdListRequest : Tea.TeaModel {
    public var appType: String?

    public var language: String?

    public var processInstanceIds: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.processInstanceIds != nil {
            map["ProcessInstanceIds"] = self.processInstanceIds!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ProcessInstanceIds"] as? String {
            self.processInstanceIds = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class GetInstancesByIdListResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public class ActionExecutor : Tea.TeaModel {
            public class Name : Tea.TeaModel {
                public var nameInChinese: String?

                public var nameInEnglish: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.nameInChinese != nil {
                        map["NameInChinese"] = self.nameInChinese!
                    }
                    if self.nameInEnglish != nil {
                        map["NameInEnglish"] = self.nameInEnglish!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NameInChinese"] as? String {
                        self.nameInChinese = value
                    }
                    if let value = dict["NameInEnglish"] as? String {
                        self.nameInEnglish = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var departmentName: String?

            public var email: String?

            public var name: GetInstancesByIdListResponseBody.Result.ActionExecutor.Name?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.name?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.departmentName != nil {
                    map["DepartmentName"] = self.departmentName!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.name != nil {
                    map["Name"] = self.name?.toMap()
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DepartmentName"] as? String {
                    self.departmentName = value
                }
                if let value = dict["Email"] as? String {
                    self.email = value
                }
                if let value = dict["Name"] as? [String: Any?] {
                    var model = GetInstancesByIdListResponseBody.Result.ActionExecutor.Name()
                    model.fromMap(value)
                    self.name = model
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class Originator : Tea.TeaModel {
            public class Name : Tea.TeaModel {
                public var nameInChinese: String?

                public var nameInEnglish: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.nameInChinese != nil {
                        map["NameInChinese"] = self.nameInChinese!
                    }
                    if self.nameInEnglish != nil {
                        map["NameInEnglish"] = self.nameInEnglish!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NameInChinese"] as? String {
                        self.nameInChinese = value
                    }
                    if let value = dict["NameInEnglish"] as? String {
                        self.nameInEnglish = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var departmentName: String?

            public var email: String?

            public var name: GetInstancesByIdListResponseBody.Result.Originator.Name?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.name?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.departmentName != nil {
                    map["DepartmentName"] = self.departmentName!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.name != nil {
                    map["Name"] = self.name?.toMap()
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DepartmentName"] as? String {
                    self.departmentName = value
                }
                if let value = dict["Email"] as? String {
                    self.email = value
                }
                if let value = dict["Name"] as? [String: Any?] {
                    var model = GetInstancesByIdListResponseBody.Result.Originator.Name()
                    model.fromMap(value)
                    self.name = model
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var actionExecutor: [GetInstancesByIdListResponseBody.Result.ActionExecutor]?

        public var approvedResult: String?

        public var data: [String: Any]?

        public var formUuid: String?

        public var instanceStatus: String?

        public var originator: GetInstancesByIdListResponseBody.Result.Originator?

        public var processCode: String?

        public var processInstanceId: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.originator?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actionExecutor != nil {
                var tmp : [Any] = []
                for k in self.actionExecutor! {
                    tmp.append(k.toMap())
                }
                map["ActionExecutor"] = tmp
            }
            if self.approvedResult != nil {
                map["ApprovedResult"] = self.approvedResult!
            }
            if self.data != nil {
                map["Data"] = self.data!
            }
            if self.formUuid != nil {
                map["FormUuid"] = self.formUuid!
            }
            if self.instanceStatus != nil {
                map["InstanceStatus"] = self.instanceStatus!
            }
            if self.originator != nil {
                map["Originator"] = self.originator?.toMap()
            }
            if self.processCode != nil {
                map["ProcessCode"] = self.processCode!
            }
            if self.processInstanceId != nil {
                map["ProcessInstanceId"] = self.processInstanceId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActionExecutor"] as? [Any?] {
                var tmp : [GetInstancesByIdListResponseBody.Result.ActionExecutor] = []
                for v in value {
                    if v != nil {
                        var model = GetInstancesByIdListResponseBody.Result.ActionExecutor()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.actionExecutor = tmp
            }
            if let value = dict["ApprovedResult"] as? String {
                self.approvedResult = value
            }
            if let value = dict["Data"] as? [String: Any] {
                self.data = value
            }
            if let value = dict["FormUuid"] as? String {
                self.formUuid = value
            }
            if let value = dict["InstanceStatus"] as? String {
                self.instanceStatus = value
            }
            if let value = dict["Originator"] as? [String: Any?] {
                var model = GetInstancesByIdListResponseBody.Result.Originator()
                model.fromMap(value)
                self.originator = model
            }
            if let value = dict["ProcessCode"] as? String {
                self.processCode = value
            }
            if let value = dict["ProcessInstanceId"] as? String {
                self.processInstanceId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var requestId: String?

    public var result: [GetInstancesByIdListResponseBody.Result]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["result"] = tmp
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [Any?] {
            var tmp : [GetInstancesByIdListResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = GetInstancesByIdListResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetInstancesByIdListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInstancesByIdListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetInstancesByIdListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetLiveReplayUrlHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetLiveReplayUrlHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetLiveReplayUrlHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetLiveReplayUrlShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetLiveReplayUrlRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var liveId: String?

    public var tenantContext: GetLiveReplayUrlRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.liveId != nil {
            map["LiveId"] = self.liveId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LiveId"] as? String {
            self.liveId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetLiveReplayUrlRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetLiveReplayUrlShrinkRequest : Tea.TeaModel {
    public var liveId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.liveId != nil {
            map["LiveId"] = self.liveId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LiveId"] as? String {
            self.liveId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetLiveReplayUrlResponseBody : Tea.TeaModel {
    public var replayUrl: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.replayUrl != nil {
            map["replayUrl"] = self.replayUrl!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["replayUrl"] as? String {
            self.replayUrl = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetLiveReplayUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetLiveReplayUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetLiveReplayUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMeCorpSubmissionHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetMeCorpSubmissionHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetMeCorpSubmissionHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetMeCorpSubmissionShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetMeCorpSubmissionRequest : Tea.TeaModel {
    public var appTypes: String?

    public var corpId: String?

    public var createFromTimeGMT: Int64?

    public var createToTimeGMT: Int64?

    public var keyword: String?

    public var language: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var processCodes: String?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appTypes != nil {
            map["AppTypes"] = self.appTypes!
        }
        if self.corpId != nil {
            map["CorpId"] = self.corpId!
        }
        if self.createFromTimeGMT != nil {
            map["CreateFromTimeGMT"] = self.createFromTimeGMT!
        }
        if self.createToTimeGMT != nil {
            map["CreateToTimeGMT"] = self.createToTimeGMT!
        }
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.processCodes != nil {
            map["ProcessCodes"] = self.processCodes!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppTypes"] as? String {
            self.appTypes = value
        }
        if let value = dict["CorpId"] as? String {
            self.corpId = value
        }
        if let value = dict["CreateFromTimeGMT"] as? Int64 {
            self.createFromTimeGMT = value
        }
        if let value = dict["CreateToTimeGMT"] as? Int64 {
            self.createToTimeGMT = value
        }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProcessCodes"] as? String {
            self.processCodes = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class GetMeCorpSubmissionResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Actioner : Tea.TeaModel {
            public var buName: String?

            public var email: String?

            public var employeeType: String?

            public var employeeTypeInformation: String?

            public var humanResourceGroupWorkNumber: String?

            public var isSystemAdmin: Bool?

            public var level: String?

            public var name: String?

            public var nickName: String?

            public var orderNumber: String?

            public var personalPhoto: String?

            public var personalPhotoUrl: String?

            public var pinyinNameAll: String?

            public var pinyinNickName: String?

            public var state: String?

            public var superUserId: String?

            public var tbWang: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.buName != nil {
                    map["BuName"] = self.buName!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.employeeType != nil {
                    map["EmployeeType"] = self.employeeType!
                }
                if self.employeeTypeInformation != nil {
                    map["EmployeeTypeInformation"] = self.employeeTypeInformation!
                }
                if self.humanResourceGroupWorkNumber != nil {
                    map["HumanResourceGroupWorkNumber"] = self.humanResourceGroupWorkNumber!
                }
                if self.isSystemAdmin != nil {
                    map["IsSystemAdmin"] = self.isSystemAdmin!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.nickName != nil {
                    map["NickName"] = self.nickName!
                }
                if self.orderNumber != nil {
                    map["OrderNumber"] = self.orderNumber!
                }
                if self.personalPhoto != nil {
                    map["PersonalPhoto"] = self.personalPhoto!
                }
                if self.personalPhotoUrl != nil {
                    map["PersonalPhotoUrl"] = self.personalPhotoUrl!
                }
                if self.pinyinNameAll != nil {
                    map["PinyinNameAll"] = self.pinyinNameAll!
                }
                if self.pinyinNickName != nil {
                    map["PinyinNickName"] = self.pinyinNickName!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.superUserId != nil {
                    map["SuperUserId"] = self.superUserId!
                }
                if self.tbWang != nil {
                    map["TbWang"] = self.tbWang!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BuName"] as? String {
                    self.buName = value
                }
                if let value = dict["Email"] as? String {
                    self.email = value
                }
                if let value = dict["EmployeeType"] as? String {
                    self.employeeType = value
                }
                if let value = dict["EmployeeTypeInformation"] as? String {
                    self.employeeTypeInformation = value
                }
                if let value = dict["HumanResourceGroupWorkNumber"] as? String {
                    self.humanResourceGroupWorkNumber = value
                }
                if let value = dict["IsSystemAdmin"] as? Bool {
                    self.isSystemAdmin = value
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NickName"] as? String {
                    self.nickName = value
                }
                if let value = dict["OrderNumber"] as? String {
                    self.orderNumber = value
                }
                if let value = dict["PersonalPhoto"] as? String {
                    self.personalPhoto = value
                }
                if let value = dict["PersonalPhotoUrl"] as? String {
                    self.personalPhotoUrl = value
                }
                if let value = dict["PinyinNameAll"] as? String {
                    self.pinyinNameAll = value
                }
                if let value = dict["PinyinNickName"] as? String {
                    self.pinyinNickName = value
                }
                if let value = dict["State"] as? String {
                    self.state = value
                }
                if let value = dict["SuperUserId"] as? String {
                    self.superUserId = value
                }
                if let value = dict["TbWang"] as? String {
                    self.tbWang = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class CurrentActivityInstances : Tea.TeaModel {
            public var activityId: String?

            public var activityInstanceStatus: String?

            public var activityName: String?

            public var activityNameEn: String?

            public var id: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.activityId != nil {
                    map["ActivityId"] = self.activityId!
                }
                if self.activityInstanceStatus != nil {
                    map["ActivityInstanceStatus"] = self.activityInstanceStatus!
                }
                if self.activityName != nil {
                    map["ActivityName"] = self.activityName!
                }
                if self.activityNameEn != nil {
                    map["ActivityNameEn"] = self.activityNameEn!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ActivityId"] as? String {
                    self.activityId = value
                }
                if let value = dict["ActivityInstanceStatus"] as? String {
                    self.activityInstanceStatus = value
                }
                if let value = dict["ActivityName"] as? String {
                    self.activityName = value
                }
                if let value = dict["ActivityNameEn"] as? String {
                    self.activityNameEn = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
            }
        }
        public var actioner: [GetMeCorpSubmissionResponseBody.Data.Actioner]?

        public var actionerId: [String]?

        public var actionerName: [String]?

        public var appType: String?

        public var createTimeGMT: String?

        public var currentActivityInstances: [GetMeCorpSubmissionResponseBody.Data.CurrentActivityInstances]?

        public var dataMap: [String: Any]?

        public var dataType: String?

        public var finishTimeGMT: String?

        public var formInstanceId: String?

        public var formUuid: String?

        public var instanceValue: String?

        public var modifiedTimeGMT: String?

        public var originatorAvatar: String?

        public var originatorDisplayName: String?

        public var originatorId: String?

        public var processApprovedResult: String?

        public var processApprovedResultText: String?

        public var processCode: String?

        public var processId: Int64?

        public var processInstanceId: String?

        public var processInstanceStatus: String?

        public var processInstanceStatusText: String?

        public var processName: String?

        public var title: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actioner != nil {
                var tmp : [Any] = []
                for k in self.actioner! {
                    tmp.append(k.toMap())
                }
                map["Actioner"] = tmp
            }
            if self.actionerId != nil {
                map["ActionerId"] = self.actionerId!
            }
            if self.actionerName != nil {
                map["ActionerName"] = self.actionerName!
            }
            if self.appType != nil {
                map["AppType"] = self.appType!
            }
            if self.createTimeGMT != nil {
                map["CreateTimeGMT"] = self.createTimeGMT!
            }
            if self.currentActivityInstances != nil {
                var tmp : [Any] = []
                for k in self.currentActivityInstances! {
                    tmp.append(k.toMap())
                }
                map["CurrentActivityInstances"] = tmp
            }
            if self.dataMap != nil {
                map["DataMap"] = self.dataMap!
            }
            if self.dataType != nil {
                map["DataType"] = self.dataType!
            }
            if self.finishTimeGMT != nil {
                map["FinishTimeGMT"] = self.finishTimeGMT!
            }
            if self.formInstanceId != nil {
                map["FormInstanceId"] = self.formInstanceId!
            }
            if self.formUuid != nil {
                map["FormUuid"] = self.formUuid!
            }
            if self.instanceValue != nil {
                map["InstanceValue"] = self.instanceValue!
            }
            if self.modifiedTimeGMT != nil {
                map["ModifiedTimeGMT"] = self.modifiedTimeGMT!
            }
            if self.originatorAvatar != nil {
                map["OriginatorAvatar"] = self.originatorAvatar!
            }
            if self.originatorDisplayName != nil {
                map["OriginatorDisplayName"] = self.originatorDisplayName!
            }
            if self.originatorId != nil {
                map["OriginatorId"] = self.originatorId!
            }
            if self.processApprovedResult != nil {
                map["ProcessApprovedResult"] = self.processApprovedResult!
            }
            if self.processApprovedResultText != nil {
                map["ProcessApprovedResultText"] = self.processApprovedResultText!
            }
            if self.processCode != nil {
                map["ProcessCode"] = self.processCode!
            }
            if self.processId != nil {
                map["ProcessId"] = self.processId!
            }
            if self.processInstanceId != nil {
                map["ProcessInstanceId"] = self.processInstanceId!
            }
            if self.processInstanceStatus != nil {
                map["ProcessInstanceStatus"] = self.processInstanceStatus!
            }
            if self.processInstanceStatusText != nil {
                map["ProcessInstanceStatusText"] = self.processInstanceStatusText!
            }
            if self.processName != nil {
                map["ProcessName"] = self.processName!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Actioner"] as? [Any?] {
                var tmp : [GetMeCorpSubmissionResponseBody.Data.Actioner] = []
                for v in value {
                    if v != nil {
                        var model = GetMeCorpSubmissionResponseBody.Data.Actioner()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.actioner = tmp
            }
            if let value = dict["ActionerId"] as? [String] {
                self.actionerId = value
            }
            if let value = dict["ActionerName"] as? [String] {
                self.actionerName = value
            }
            if let value = dict["AppType"] as? String {
                self.appType = value
            }
            if let value = dict["CreateTimeGMT"] as? String {
                self.createTimeGMT = value
            }
            if let value = dict["CurrentActivityInstances"] as? [Any?] {
                var tmp : [GetMeCorpSubmissionResponseBody.Data.CurrentActivityInstances] = []
                for v in value {
                    if v != nil {
                        var model = GetMeCorpSubmissionResponseBody.Data.CurrentActivityInstances()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.currentActivityInstances = tmp
            }
            if let value = dict["DataMap"] as? [String: Any] {
                self.dataMap = value
            }
            if let value = dict["DataType"] as? String {
                self.dataType = value
            }
            if let value = dict["FinishTimeGMT"] as? String {
                self.finishTimeGMT = value
            }
            if let value = dict["FormInstanceId"] as? String {
                self.formInstanceId = value
            }
            if let value = dict["FormUuid"] as? String {
                self.formUuid = value
            }
            if let value = dict["InstanceValue"] as? String {
                self.instanceValue = value
            }
            if let value = dict["ModifiedTimeGMT"] as? String {
                self.modifiedTimeGMT = value
            }
            if let value = dict["OriginatorAvatar"] as? String {
                self.originatorAvatar = value
            }
            if let value = dict["OriginatorDisplayName"] as? String {
                self.originatorDisplayName = value
            }
            if let value = dict["OriginatorId"] as? String {
                self.originatorId = value
            }
            if let value = dict["ProcessApprovedResult"] as? String {
                self.processApprovedResult = value
            }
            if let value = dict["ProcessApprovedResultText"] as? String {
                self.processApprovedResultText = value
            }
            if let value = dict["ProcessCode"] as? String {
                self.processCode = value
            }
            if let value = dict["ProcessId"] as? Int64 {
                self.processId = value
            }
            if let value = dict["ProcessInstanceId"] as? String {
                self.processInstanceId = value
            }
            if let value = dict["ProcessInstanceStatus"] as? String {
                self.processInstanceStatus = value
            }
            if let value = dict["ProcessInstanceStatusText"] as? String {
                self.processInstanceStatusText = value
            }
            if let value = dict["ProcessName"] as? String {
                self.processName = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var data: [GetMeCorpSubmissionResponseBody.Data]?

    public var pageNumber: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["data"] = tmp
        }
        if self.pageNumber != nil {
            map["pageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? [Any?] {
            var tmp : [GetMeCorpSubmissionResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetMeCorpSubmissionResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["pageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetMeCorpSubmissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMeCorpSubmissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMeCorpSubmissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMeetingRoomsScheduleHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetMeetingRoomsScheduleHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetMeetingRoomsScheduleHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetMeetingRoomsScheduleShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetMeetingRoomsScheduleRequest : Tea.TeaModel {
    public var endTime: String?

    public var roomIds: [String]?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.roomIds != nil {
            map["RoomIds"] = self.roomIds!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["RoomIds"] as? [String] {
            self.roomIds = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class GetMeetingRoomsScheduleShrinkRequest : Tea.TeaModel {
    public var endTime: String?

    public var roomIdsShrink: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.roomIdsShrink != nil {
            map["RoomIds"] = self.roomIdsShrink!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["RoomIds"] as? String {
            self.roomIdsShrink = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class GetMeetingRoomsScheduleResponseBody : Tea.TeaModel {
    public class ScheduleInformation : Tea.TeaModel {
        public class ScheduleItems : Tea.TeaModel {
            public class End : Tea.TeaModel {
                public var dateTime: String?

                public var timeZone: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dateTime != nil {
                        map["DateTime"] = self.dateTime!
                    }
                    if self.timeZone != nil {
                        map["TimeZone"] = self.timeZone!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DateTime"] as? String {
                        self.dateTime = value
                    }
                    if let value = dict["TimeZone"] as? String {
                        self.timeZone = value
                    }
                }
            }
            public class Organizer : Tea.TeaModel {
                public var id: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                }
            }
            public class Start : Tea.TeaModel {
                public var dateTime: String?

                public var timeZone: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dateTime != nil {
                        map["DateTime"] = self.dateTime!
                    }
                    if self.timeZone != nil {
                        map["TimeZone"] = self.timeZone!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DateTime"] as? String {
                        self.dateTime = value
                    }
                    if let value = dict["TimeZone"] as? String {
                        self.timeZone = value
                    }
                }
            }
            public var end: GetMeetingRoomsScheduleResponseBody.ScheduleInformation.ScheduleItems.End?

            public var eventId: String?

            public var organizer: GetMeetingRoomsScheduleResponseBody.ScheduleInformation.ScheduleItems.Organizer?

            public var start: GetMeetingRoomsScheduleResponseBody.ScheduleInformation.ScheduleItems.Start?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.end?.validate()
                try self.organizer?.validate()
                try self.start?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.end != nil {
                    map["End"] = self.end?.toMap()
                }
                if self.eventId != nil {
                    map["EventId"] = self.eventId!
                }
                if self.organizer != nil {
                    map["Organizer"] = self.organizer?.toMap()
                }
                if self.start != nil {
                    map["Start"] = self.start?.toMap()
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["End"] as? [String: Any?] {
                    var model = GetMeetingRoomsScheduleResponseBody.ScheduleInformation.ScheduleItems.End()
                    model.fromMap(value)
                    self.end = model
                }
                if let value = dict["EventId"] as? String {
                    self.eventId = value
                }
                if let value = dict["Organizer"] as? [String: Any?] {
                    var model = GetMeetingRoomsScheduleResponseBody.ScheduleInformation.ScheduleItems.Organizer()
                    model.fromMap(value)
                    self.organizer = model
                }
                if let value = dict["Start"] as? [String: Any?] {
                    var model = GetMeetingRoomsScheduleResponseBody.ScheduleInformation.ScheduleItems.Start()
                    model.fromMap(value)
                    self.start = model
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var error: String?

        public var roomId: String?

        public var scheduleItems: [GetMeetingRoomsScheduleResponseBody.ScheduleInformation.ScheduleItems]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.error != nil {
                map["Error"] = self.error!
            }
            if self.roomId != nil {
                map["RoomId"] = self.roomId!
            }
            if self.scheduleItems != nil {
                var tmp : [Any] = []
                for k in self.scheduleItems! {
                    tmp.append(k.toMap())
                }
                map["ScheduleItems"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Error"] as? String {
                self.error = value
            }
            if let value = dict["RoomId"] as? String {
                self.roomId = value
            }
            if let value = dict["ScheduleItems"] as? [Any?] {
                var tmp : [GetMeetingRoomsScheduleResponseBody.ScheduleInformation.ScheduleItems] = []
                for v in value {
                    if v != nil {
                        var model = GetMeetingRoomsScheduleResponseBody.ScheduleInformation.ScheduleItems()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.scheduleItems = tmp
            }
        }
    }
    public var requestId: String?

    public var scheduleInformation: [GetMeetingRoomsScheduleResponseBody.ScheduleInformation]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.scheduleInformation != nil {
            var tmp : [Any] = []
            for k in self.scheduleInformation! {
                tmp.append(k.toMap())
            }
            map["scheduleInformation"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["scheduleInformation"] as? [Any?] {
            var tmp : [GetMeetingRoomsScheduleResponseBody.ScheduleInformation] = []
            for v in value {
                if v != nil {
                    var model = GetMeetingRoomsScheduleResponseBody.ScheduleInformation()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.scheduleInformation = tmp
        }
    }
}

public class GetMeetingRoomsScheduleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMeetingRoomsScheduleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMeetingRoomsScheduleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMineWorkspaceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetMineWorkspaceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetMineWorkspaceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetMineWorkspaceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetMineWorkspaceRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var request: [String: Any]?

    public var tenantContext: GetMineWorkspaceRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.request != nil {
            map["Request"] = self.request!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Request"] as? [String: Any] {
            self.request = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetMineWorkspaceRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetMineWorkspaceShrinkRequest : Tea.TeaModel {
    public var requestShrink: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestShrink != nil {
            map["Request"] = self.requestShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Request"] as? String {
            self.requestShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetMineWorkspaceResponseBody : Tea.TeaModel {
    public class Workspace : Tea.TeaModel {
        public class Icon : Tea.TeaModel {
            public var type: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var corpId: String?

        public var cover: String?

        public var createTime: String?

        public var creatorId: String?

        public var description_: String?

        public var icon: GetMineWorkspaceResponseBody.Workspace.Icon?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var permissionRole: String?

        public var rootNodeId: String?

        public var teamId: String?

        public var type: String?

        public var url: String?

        public var workspaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.icon?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.cover != nil {
                map["Cover"] = self.cover!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.icon != nil {
                map["Icon"] = self.icon?.toMap()
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.permissionRole != nil {
                map["PermissionRole"] = self.permissionRole!
            }
            if self.rootNodeId != nil {
                map["RootNodeId"] = self.rootNodeId!
            }
            if self.teamId != nil {
                map["TeamId"] = self.teamId!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.workspaceId != nil {
                map["WorkspaceId"] = self.workspaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["Cover"] as? String {
                self.cover = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Icon"] as? [String: Any?] {
                var model = GetMineWorkspaceResponseBody.Workspace.Icon()
                model.fromMap(value)
                self.icon = model
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PermissionRole"] as? String {
                self.permissionRole = value
            }
            if let value = dict["RootNodeId"] as? String {
                self.rootNodeId = value
            }
            if let value = dict["TeamId"] as? String {
                self.teamId = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["WorkspaceId"] as? String {
                self.workspaceId = value
            }
        }
    }
    public var requestId: String?

    public var workspace: GetMineWorkspaceResponseBody.Workspace?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.workspace?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.workspace != nil {
            map["workspace"] = self.workspace?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["workspace"] as? [String: Any?] {
            var model = GetMineWorkspaceResponseBody.Workspace()
            model.fromMap(value)
            self.workspace = model
        }
    }
}

public class GetMineWorkspaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMineWorkspaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMineWorkspaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMultiDimTableAllFieldsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetMultiDimTableAllFieldsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetMultiDimTableAllFieldsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetMultiDimTableAllFieldsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetMultiDimTableAllFieldsRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var baseId: String?

    public var sheetIdOrName: String?

    public var tenantContext: GetMultiDimTableAllFieldsRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetMultiDimTableAllFieldsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetMultiDimTableAllFieldsShrinkRequest : Tea.TeaModel {
    public var baseId: String?

    public var sheetIdOrName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetMultiDimTableAllFieldsResponseBody : Tea.TeaModel {
    public class Value : Tea.TeaModel {
        public var id: String?

        public var name: String?

        public var property: [String: Any]?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.property != nil {
                map["Property"] = self.property!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Property"] as? [String: Any] {
                self.property = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var requestId: String?

    public var value: [GetMultiDimTableAllFieldsResponseBody.Value]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.value != nil {
            var tmp : [Any] = []
            for k in self.value! {
                tmp.append(k.toMap())
            }
            map["value"] = tmp
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["value"] as? [Any?] {
            var tmp : [GetMultiDimTableAllFieldsResponseBody.Value] = []
            for v in value {
                if v != nil {
                    var model = GetMultiDimTableAllFieldsResponseBody.Value()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.value = tmp
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetMultiDimTableAllFieldsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMultiDimTableAllFieldsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMultiDimTableAllFieldsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMultiDimTableAllSheetsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetMultiDimTableAllSheetsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetMultiDimTableAllSheetsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetMultiDimTableAllSheetsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetMultiDimTableAllSheetsRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var baseId: String?

    public var tenantContext: GetMultiDimTableAllSheetsRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetMultiDimTableAllSheetsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetMultiDimTableAllSheetsShrinkRequest : Tea.TeaModel {
    public var baseId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetMultiDimTableAllSheetsResponseBody : Tea.TeaModel {
    public class Value : Tea.TeaModel {
        public var id: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var requestId: String?

    public var value: [GetMultiDimTableAllSheetsResponseBody.Value]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.value != nil {
            var tmp : [Any] = []
            for k in self.value! {
                tmp.append(k.toMap())
            }
            map["value"] = tmp
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["value"] as? [Any?] {
            var tmp : [GetMultiDimTableAllSheetsResponseBody.Value] = []
            for v in value {
                if v != nil {
                    var model = GetMultiDimTableAllSheetsResponseBody.Value()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.value = tmp
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetMultiDimTableAllSheetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMultiDimTableAllSheetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMultiDimTableAllSheetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMultiDimTableRecordHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetMultiDimTableRecordHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetMultiDimTableRecordHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetMultiDimTableRecordShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetMultiDimTableRecordRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var baseId: String?

    public var recordId: String?

    public var sheetIdOrName: String?

    public var tenantContext: GetMultiDimTableRecordRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.recordId != nil {
            map["RecordId"] = self.recordId!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["RecordId"] as? String {
            self.recordId = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetMultiDimTableRecordRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetMultiDimTableRecordShrinkRequest : Tea.TeaModel {
    public var baseId: String?

    public var recordId: String?

    public var sheetIdOrName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.recordId != nil {
            map["RecordId"] = self.recordId!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["RecordId"] as? String {
            self.recordId = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetMultiDimTableRecordResponseBody : Tea.TeaModel {
    public class CreatedBy : Tea.TeaModel {
        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public class LastModifiedBy : Tea.TeaModel {
        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var createdBy: GetMultiDimTableRecordResponseBody.CreatedBy?

    public var createdTime: Int64?

    public var fields: [String: Any]?

    public var id: String?

    public var lastModifiedBy: GetMultiDimTableRecordResponseBody.LastModifiedBy?

    public var lastModifiedTime: Int64?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createdBy?.validate()
        try self.lastModifiedBy?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createdBy != nil {
            map["CreatedBy"] = self.createdBy?.toMap()
        }
        if self.createdTime != nil {
            map["CreatedTime"] = self.createdTime!
        }
        if self.fields != nil {
            map["Fields"] = self.fields!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.lastModifiedBy != nil {
            map["LastModifiedBy"] = self.lastModifiedBy?.toMap()
        }
        if self.lastModifiedTime != nil {
            map["LastModifiedTime"] = self.lastModifiedTime!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreatedBy"] as? [String: Any?] {
            var model = GetMultiDimTableRecordResponseBody.CreatedBy()
            model.fromMap(value)
            self.createdBy = model
        }
        if let value = dict["CreatedTime"] as? Int64 {
            self.createdTime = value
        }
        if let value = dict["Fields"] as? [String: Any] {
            self.fields = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["LastModifiedBy"] as? [String: Any?] {
            var model = GetMultiDimTableRecordResponseBody.LastModifiedBy()
            model.fromMap(value)
            self.lastModifiedBy = model
        }
        if let value = dict["LastModifiedTime"] as? Int64 {
            self.lastModifiedTime = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetMultiDimTableRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMultiDimTableRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMultiDimTableRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMultiDimTableSheetHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetMultiDimTableSheetHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetMultiDimTableSheetHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetMultiDimTableSheetShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetMultiDimTableSheetRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var baseId: String?

    public var sheetIdOrName: String?

    public var tenantContext: GetMultiDimTableSheetRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetMultiDimTableSheetRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetMultiDimTableSheetShrinkRequest : Tea.TeaModel {
    public var baseId: String?

    public var sheetIdOrName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetMultiDimTableSheetResponseBody : Tea.TeaModel {
    public var id: String?

    public var name: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetMultiDimTableSheetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMultiDimTableSheetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMultiDimTableSheetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMultipartFileUploadInfosHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetMultipartFileUploadInfosHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetMultipartFileUploadInfosHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetMultipartFileUploadInfosShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetMultipartFileUploadInfosRequest : Tea.TeaModel {
    public class Option : Tea.TeaModel {
        public var preferIntranet: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.preferIntranet != nil {
                map["PreferIntranet"] = self.preferIntranet!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PreferIntranet"] as? Bool {
                self.preferIntranet = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var option: GetMultipartFileUploadInfosRequest.Option?

    public var partNumbers: [Int32]?

    public var tenantContext: GetMultipartFileUploadInfosRequest.TenantContext?

    public var uploadKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.option?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.option != nil {
            map["Option"] = self.option?.toMap()
        }
        if self.partNumbers != nil {
            map["PartNumbers"] = self.partNumbers!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.uploadKey != nil {
            map["UploadKey"] = self.uploadKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Option"] as? [String: Any?] {
            var model = GetMultipartFileUploadInfosRequest.Option()
            model.fromMap(value)
            self.option = model
        }
        if let value = dict["PartNumbers"] as? [Int32] {
            self.partNumbers = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetMultipartFileUploadInfosRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["UploadKey"] as? String {
            self.uploadKey = value
        }
    }
}

public class GetMultipartFileUploadInfosShrinkRequest : Tea.TeaModel {
    public var optionShrink: String?

    public var partNumbersShrink: String?

    public var tenantContextShrink: String?

    public var uploadKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.optionShrink != nil {
            map["Option"] = self.optionShrink!
        }
        if self.partNumbersShrink != nil {
            map["PartNumbers"] = self.partNumbersShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.uploadKey != nil {
            map["UploadKey"] = self.uploadKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Option"] as? String {
            self.optionShrink = value
        }
        if let value = dict["PartNumbers"] as? String {
            self.partNumbersShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["UploadKey"] as? String {
            self.uploadKey = value
        }
    }
}

public class GetMultipartFileUploadInfosResponseBody : Tea.TeaModel {
    public class MultipartHeaderSignatureInfos : Tea.TeaModel {
        public class HeaderSignatureInfo : Tea.TeaModel {
            public var expirationSeconds: Int32?

            public var headers: [String: String]?

            public var internalResourceUrls: [String]?

            public var region: String?

            public var resourceUrls: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.expirationSeconds != nil {
                    map["ExpirationSeconds"] = self.expirationSeconds!
                }
                if self.headers != nil {
                    map["Headers"] = self.headers!
                }
                if self.internalResourceUrls != nil {
                    map["InternalResourceUrls"] = self.internalResourceUrls!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.resourceUrls != nil {
                    map["ResourceUrls"] = self.resourceUrls!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ExpirationSeconds"] as? Int32 {
                    self.expirationSeconds = value
                }
                if let value = dict["Headers"] as? [String: String] {
                    self.headers = value
                }
                if let value = dict["InternalResourceUrls"] as? [String] {
                    self.internalResourceUrls = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["ResourceUrls"] as? [String] {
                    self.resourceUrls = value
                }
            }
        }
        public var headerSignatureInfo: GetMultipartFileUploadInfosResponseBody.MultipartHeaderSignatureInfos.HeaderSignatureInfo?

        public var partNumber: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.headerSignatureInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.headerSignatureInfo != nil {
                map["HeaderSignatureInfo"] = self.headerSignatureInfo?.toMap()
            }
            if self.partNumber != nil {
                map["PartNumber"] = self.partNumber!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HeaderSignatureInfo"] as? [String: Any?] {
                var model = GetMultipartFileUploadInfosResponseBody.MultipartHeaderSignatureInfos.HeaderSignatureInfo()
                model.fromMap(value)
                self.headerSignatureInfo = model
            }
            if let value = dict["PartNumber"] as? Int32 {
                self.partNumber = value
            }
        }
    }
    public var multipartHeaderSignatureInfos: [GetMultipartFileUploadInfosResponseBody.MultipartHeaderSignatureInfos]?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.multipartHeaderSignatureInfos != nil {
            var tmp : [Any] = []
            for k in self.multipartHeaderSignatureInfos! {
                tmp.append(k.toMap())
            }
            map["multipartHeaderSignatureInfos"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["multipartHeaderSignatureInfos"] as? [Any?] {
            var tmp : [GetMultipartFileUploadInfosResponseBody.MultipartHeaderSignatureInfos] = []
            for v in value {
                if v != nil {
                    var model = GetMultipartFileUploadInfosResponseBody.MultipartHeaderSignatureInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.multipartHeaderSignatureInfos = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetMultipartFileUploadInfosResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMultipartFileUploadInfosResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMultipartFileUploadInfosResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetNewestInnerGroupsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetNewestInnerGroupsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetNewestInnerGroupsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetNewestInnerGroupsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetNewestInnerGroupsRequest : Tea.TeaModel {
    public var request: [String: Any]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.request != nil {
            map["Request"] = self.request!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Request"] as? [String: Any] {
            self.request = value
        }
    }
}

public class GetNewestInnerGroupsShrinkRequest : Tea.TeaModel {
    public var requestShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestShrink != nil {
            map["Request"] = self.requestShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Request"] as? String {
            self.requestShrink = value
        }
    }
}

public class GetNewestInnerGroupsResponseBody : Tea.TeaModel {
    public class GroupInfos : Tea.TeaModel {
        public var icon: String?

        public var memberAmount: String?

        public var openConversationId: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.icon != nil {
                map["Icon"] = self.icon!
            }
            if self.memberAmount != nil {
                map["MemberAmount"] = self.memberAmount!
            }
            if self.openConversationId != nil {
                map["OpenConversationId"] = self.openConversationId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Icon"] as? String {
                self.icon = value
            }
            if let value = dict["MemberAmount"] as? String {
                self.memberAmount = value
            }
            if let value = dict["OpenConversationId"] as? String {
                self.openConversationId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var groupInfos: [GetNewestInnerGroupsResponseBody.GroupInfos]?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupInfos != nil {
            var tmp : [Any] = []
            for k in self.groupInfos! {
                tmp.append(k.toMap())
            }
            map["groupInfos"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["groupInfos"] as? [Any?] {
            var tmp : [GetNewestInnerGroupsResponseBody.GroupInfos] = []
            for v in value {
                if v != nil {
                    var model = GetNewestInnerGroupsResponseBody.GroupInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.groupInfos = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetNewestInnerGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetNewestInnerGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetNewestInnerGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetNodeHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetNodeHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetNodeHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetNodeShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetNodeRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var nodeId: String?

    public var tenantContext: GetNodeRequest.TenantContext?

    public var withPermissionRole: Bool?

    public var withStatisticalInfo: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nodeId != nil {
            map["NodeId"] = self.nodeId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.withPermissionRole != nil {
            map["WithPermissionRole"] = self.withPermissionRole!
        }
        if self.withStatisticalInfo != nil {
            map["WithStatisticalInfo"] = self.withStatisticalInfo!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NodeId"] as? String {
            self.nodeId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetNodeRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WithPermissionRole"] as? Bool {
            self.withPermissionRole = value
        }
        if let value = dict["WithStatisticalInfo"] as? Bool {
            self.withStatisticalInfo = value
        }
    }
}

public class GetNodeShrinkRequest : Tea.TeaModel {
    public var nodeId: String?

    public var tenantContextShrink: String?

    public var withPermissionRole: Bool?

    public var withStatisticalInfo: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nodeId != nil {
            map["NodeId"] = self.nodeId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.withPermissionRole != nil {
            map["WithPermissionRole"] = self.withPermissionRole!
        }
        if self.withStatisticalInfo != nil {
            map["WithStatisticalInfo"] = self.withStatisticalInfo!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NodeId"] as? String {
            self.nodeId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WithPermissionRole"] as? Bool {
            self.withPermissionRole = value
        }
        if let value = dict["WithStatisticalInfo"] as? Bool {
            self.withStatisticalInfo = value
        }
    }
}

public class GetNodeResponseBody : Tea.TeaModel {
    public class Node : Tea.TeaModel {
        public class StatisticalInfo : Tea.TeaModel {
            public var wordCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.wordCount != nil {
                    map["WordCount"] = self.wordCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["WordCount"] as? Int64 {
                    self.wordCount = value
                }
            }
        }
        public var category: String?

        public var createTime: String?

        public var creatorId: String?

        public var extension_: String?

        public var hasChildren: Bool?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var nodeId: String?

        public var permissionRole: String?

        public var size: Int64?

        public var statisticalInfo: GetNodeResponseBody.Node.StatisticalInfo?

        public var type: String?

        public var url: String?

        public var workspaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.statisticalInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.hasChildren != nil {
                map["HasChildren"] = self.hasChildren!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nodeId != nil {
                map["NodeId"] = self.nodeId!
            }
            if self.permissionRole != nil {
                map["PermissionRole"] = self.permissionRole!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.statisticalInfo != nil {
                map["StatisticalInfo"] = self.statisticalInfo?.toMap()
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.workspaceId != nil {
                map["WorkspaceId"] = self.workspaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["HasChildren"] as? Bool {
                self.hasChildren = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NodeId"] as? String {
                self.nodeId = value
            }
            if let value = dict["PermissionRole"] as? String {
                self.permissionRole = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["StatisticalInfo"] as? [String: Any?] {
                var model = GetNodeResponseBody.Node.StatisticalInfo()
                model.fromMap(value)
                self.statisticalInfo = model
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["WorkspaceId"] as? String {
                self.workspaceId = value
            }
        }
    }
    public var node: GetNodeResponseBody.Node?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.node?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.node != nil {
            map["node"] = self.node?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["node"] as? [String: Any?] {
            var model = GetNodeResponseBody.Node()
            model.fromMap(value)
            self.node = model
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetNodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetNodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetNodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetNodeByUrlHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetNodeByUrlHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetNodeByUrlHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetNodeByUrlShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetNodeByUrlRequest : Tea.TeaModel {
    public class Option : Tea.TeaModel {
        public var withPermissionRole: Bool?

        public var withStatisticalInfo: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.withPermissionRole != nil {
                map["WithPermissionRole"] = self.withPermissionRole!
            }
            if self.withStatisticalInfo != nil {
                map["WithStatisticalInfo"] = self.withStatisticalInfo!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["WithPermissionRole"] as? Bool {
                self.withPermissionRole = value
            }
            if let value = dict["WithStatisticalInfo"] as? Bool {
                self.withStatisticalInfo = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var option: GetNodeByUrlRequest.Option?

    public var tenantContext: GetNodeByUrlRequest.TenantContext?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.option?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.option != nil {
            map["Option"] = self.option?.toMap()
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Option"] as? [String: Any?] {
            var model = GetNodeByUrlRequest.Option()
            model.fromMap(value)
            self.option = model
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetNodeByUrlRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class GetNodeByUrlShrinkRequest : Tea.TeaModel {
    public var optionShrink: String?

    public var tenantContextShrink: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.optionShrink != nil {
            map["Option"] = self.optionShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Option"] as? String {
            self.optionShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class GetNodeByUrlResponseBody : Tea.TeaModel {
    public class Node : Tea.TeaModel {
        public class StatisticalInfo : Tea.TeaModel {
            public var wordCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.wordCount != nil {
                    map["WordCount"] = self.wordCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["WordCount"] as? Int64 {
                    self.wordCount = value
                }
            }
        }
        public var category: String?

        public var createTime: String?

        public var creatorId: String?

        public var extension_: String?

        public var hasChildren: Bool?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var nodeId: String?

        public var permissionRole: String?

        public var size: Int64?

        public var statisticalInfo: GetNodeByUrlResponseBody.Node.StatisticalInfo?

        public var type: String?

        public var url: String?

        public var workspaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.statisticalInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.hasChildren != nil {
                map["HasChildren"] = self.hasChildren!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nodeId != nil {
                map["NodeId"] = self.nodeId!
            }
            if self.permissionRole != nil {
                map["PermissionRole"] = self.permissionRole!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.statisticalInfo != nil {
                map["StatisticalInfo"] = self.statisticalInfo?.toMap()
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.workspaceId != nil {
                map["WorkspaceId"] = self.workspaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["HasChildren"] as? Bool {
                self.hasChildren = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NodeId"] as? String {
                self.nodeId = value
            }
            if let value = dict["PermissionRole"] as? String {
                self.permissionRole = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["StatisticalInfo"] as? [String: Any?] {
                var model = GetNodeByUrlResponseBody.Node.StatisticalInfo()
                model.fromMap(value)
                self.statisticalInfo = model
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["WorkspaceId"] as? String {
                self.workspaceId = value
            }
        }
    }
    public var node: GetNodeByUrlResponseBody.Node?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.node?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.node != nil {
            map["node"] = self.node?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["node"] as? [String: Any?] {
            var model = GetNodeByUrlResponseBody.Node()
            model.fromMap(value)
            self.node = model
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetNodeByUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetNodeByUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetNodeByUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetNodesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetNodesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetNodesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetNodesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetNodesRequest : Tea.TeaModel {
    public class Option : Tea.TeaModel {
        public var withPermissionRole: Bool?

        public var withStatisticalInfo: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.withPermissionRole != nil {
                map["WithPermissionRole"] = self.withPermissionRole!
            }
            if self.withStatisticalInfo != nil {
                map["WithStatisticalInfo"] = self.withStatisticalInfo!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["WithPermissionRole"] as? Bool {
                self.withPermissionRole = value
            }
            if let value = dict["WithStatisticalInfo"] as? Bool {
                self.withStatisticalInfo = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var nodeIds: [String]?

    public var option: GetNodesRequest.Option?

    public var tenantContext: GetNodesRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.option?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nodeIds != nil {
            map["NodeIds"] = self.nodeIds!
        }
        if self.option != nil {
            map["Option"] = self.option?.toMap()
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NodeIds"] as? [String] {
            self.nodeIds = value
        }
        if let value = dict["Option"] as? [String: Any?] {
            var model = GetNodesRequest.Option()
            model.fromMap(value)
            self.option = model
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetNodesRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetNodesShrinkRequest : Tea.TeaModel {
    public var nodeIdsShrink: String?

    public var optionShrink: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nodeIdsShrink != nil {
            map["NodeIds"] = self.nodeIdsShrink!
        }
        if self.optionShrink != nil {
            map["Option"] = self.optionShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NodeIds"] as? String {
            self.nodeIdsShrink = value
        }
        if let value = dict["Option"] as? String {
            self.optionShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetNodesResponseBody : Tea.TeaModel {
    public class Nodes : Tea.TeaModel {
        public class StatisticalInfo : Tea.TeaModel {
            public var wordCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.wordCount != nil {
                    map["WordCount"] = self.wordCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["WordCount"] as? Int64 {
                    self.wordCount = value
                }
            }
        }
        public var category: String?

        public var createTime: String?

        public var creatorId: String?

        public var extension_: String?

        public var hasChildren: Bool?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var nodeId: String?

        public var permissionRole: String?

        public var size: Int64?

        public var statisticalInfo: GetNodesResponseBody.Nodes.StatisticalInfo?

        public var type: String?

        public var url: String?

        public var workspaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.statisticalInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.hasChildren != nil {
                map["HasChildren"] = self.hasChildren!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nodeId != nil {
                map["NodeId"] = self.nodeId!
            }
            if self.permissionRole != nil {
                map["PermissionRole"] = self.permissionRole!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.statisticalInfo != nil {
                map["StatisticalInfo"] = self.statisticalInfo?.toMap()
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.workspaceId != nil {
                map["WorkspaceId"] = self.workspaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["HasChildren"] as? Bool {
                self.hasChildren = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NodeId"] as? String {
                self.nodeId = value
            }
            if let value = dict["PermissionRole"] as? String {
                self.permissionRole = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["StatisticalInfo"] as? [String: Any?] {
                var model = GetNodesResponseBody.Nodes.StatisticalInfo()
                model.fromMap(value)
                self.statisticalInfo = model
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["WorkspaceId"] as? String {
                self.workspaceId = value
            }
        }
    }
    public var nodes: [GetNodesResponseBody.Nodes]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nodes != nil {
            var tmp : [Any] = []
            for k in self.nodes! {
                tmp.append(k.toMap())
            }
            map["nodes"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["nodes"] as? [Any?] {
            var tmp : [GetNodesResponseBody.Nodes] = []
            for v in value {
                if v != nil {
                    var model = GetNodesResponseBody.Nodes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.nodes = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetNodesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetNodesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetNodesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetNotifyMeHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetNotifyMeHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetNotifyMeHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetNotifyMeShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetNotifyMeRequest : Tea.TeaModel {
    public var appTypes: String?

    public var corpId: String?

    public var createFromTimeGMT: Int64?

    public var createToTimeGMT: Int64?

    public var instanceCreateFromTimeGMT: Int64?

    public var instanceCreateToTimeGMT: Int64?

    public var keyword: String?

    public var language: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var processCodes: String?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appTypes != nil {
            map["AppTypes"] = self.appTypes!
        }
        if self.corpId != nil {
            map["CorpId"] = self.corpId!
        }
        if self.createFromTimeGMT != nil {
            map["CreateFromTimeGMT"] = self.createFromTimeGMT!
        }
        if self.createToTimeGMT != nil {
            map["CreateToTimeGMT"] = self.createToTimeGMT!
        }
        if self.instanceCreateFromTimeGMT != nil {
            map["InstanceCreateFromTimeGMT"] = self.instanceCreateFromTimeGMT!
        }
        if self.instanceCreateToTimeGMT != nil {
            map["InstanceCreateToTimeGMT"] = self.instanceCreateToTimeGMT!
        }
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.processCodes != nil {
            map["ProcessCodes"] = self.processCodes!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppTypes"] as? String {
            self.appTypes = value
        }
        if let value = dict["CorpId"] as? String {
            self.corpId = value
        }
        if let value = dict["CreateFromTimeGMT"] as? Int64 {
            self.createFromTimeGMT = value
        }
        if let value = dict["CreateToTimeGMT"] as? Int64 {
            self.createToTimeGMT = value
        }
        if let value = dict["InstanceCreateFromTimeGMT"] as? Int64 {
            self.instanceCreateFromTimeGMT = value
        }
        if let value = dict["InstanceCreateToTimeGMT"] as? Int64 {
            self.instanceCreateToTimeGMT = value
        }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProcessCodes"] as? String {
            self.processCodes = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class GetNotifyMeResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var activityId: String?

        public var appType: String?

        public var corpId: String?

        public var createTimeGMT: String?

        public var creatorUserId: String?

        public var formInstanceId: String?

        public var instStatus: String?

        public var mobileUrl: String?

        public var modifiedTimeGMT: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.activityId != nil {
                map["ActivityId"] = self.activityId!
            }
            if self.appType != nil {
                map["AppType"] = self.appType!
            }
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.createTimeGMT != nil {
                map["CreateTimeGMT"] = self.createTimeGMT!
            }
            if self.creatorUserId != nil {
                map["CreatorUserId"] = self.creatorUserId!
            }
            if self.formInstanceId != nil {
                map["FormInstanceId"] = self.formInstanceId!
            }
            if self.instStatus != nil {
                map["InstStatus"] = self.instStatus!
            }
            if self.mobileUrl != nil {
                map["MobileUrl"] = self.mobileUrl!
            }
            if self.modifiedTimeGMT != nil {
                map["ModifiedTimeGMT"] = self.modifiedTimeGMT!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActivityId"] as? String {
                self.activityId = value
            }
            if let value = dict["AppType"] as? String {
                self.appType = value
            }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["CreateTimeGMT"] as? String {
                self.createTimeGMT = value
            }
            if let value = dict["CreatorUserId"] as? String {
                self.creatorUserId = value
            }
            if let value = dict["FormInstanceId"] as? String {
                self.formInstanceId = value
            }
            if let value = dict["InstStatus"] as? String {
                self.instStatus = value
            }
            if let value = dict["MobileUrl"] as? String {
                self.mobileUrl = value
            }
            if let value = dict["ModifiedTimeGMT"] as? String {
                self.modifiedTimeGMT = value
            }
        }
    }
    public var data: [GetNotifyMeResponseBody.Data]?

    public var pageNumber: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["data"] = tmp
        }
        if self.pageNumber != nil {
            map["pageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? [Any?] {
            var tmp : [GetNotifyMeResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetNotifyMeResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["pageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetNotifyMeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetNotifyMeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetNotifyMeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOpenUrlHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetOpenUrlHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetOpenUrlHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetOpenUrlShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetOpenUrlRequest : Tea.TeaModel {
    public var appType: String?

    public var fileUrl: String?

    public var language: String?

    public var systemToken: String?

    public var timeout: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.timeout != nil {
            map["Timeout"] = self.timeout!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["Timeout"] as? Int64 {
            self.timeout = value
        }
    }
}

public class GetOpenUrlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? String {
            self.result = value
        }
    }
}

public class GetOpenUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOpenUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOpenUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOperationRecordsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetOperationRecordsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetOperationRecordsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetOperationRecordsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetOperationRecordsRequest : Tea.TeaModel {
    public var appType: String?

    public var language: String?

    public var processInstanceId: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.processInstanceId != nil {
            map["ProcessInstanceId"] = self.processInstanceId!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ProcessInstanceId"] as? String {
            self.processInstanceId = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class GetOperationRecordsResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var action: String?

        public var actionExit: String?

        public var activeTimeGMT: String?

        public var activityId: String?

        public var dataId: Int64?

        public var digitalSign: String?

        public var files: String?

        public var operateTimeGMT: String?

        public var operateType: String?

        public var operatorDisplayName: String?

        public var operatorName: String?

        public var operatorNickName: String?

        public var operatorPhotoUrl: String?

        public var operatorStatus: String?

        public var operatorUserId: String?

        public var processInstanceId: String?

        public var remark: String?

        public var showName: String?

        public var size: Int32?

        public var taskExecuteType: String?

        public var taskHoldTimeGMT: Int64?

        public var taskId: String?

        public var taskType: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.action != nil {
                map["Action"] = self.action!
            }
            if self.actionExit != nil {
                map["ActionExit"] = self.actionExit!
            }
            if self.activeTimeGMT != nil {
                map["ActiveTimeGMT"] = self.activeTimeGMT!
            }
            if self.activityId != nil {
                map["ActivityId"] = self.activityId!
            }
            if self.dataId != nil {
                map["DataId"] = self.dataId!
            }
            if self.digitalSign != nil {
                map["DigitalSign"] = self.digitalSign!
            }
            if self.files != nil {
                map["Files"] = self.files!
            }
            if self.operateTimeGMT != nil {
                map["OperateTimeGMT"] = self.operateTimeGMT!
            }
            if self.operateType != nil {
                map["OperateType"] = self.operateType!
            }
            if self.operatorDisplayName != nil {
                map["OperatorDisplayName"] = self.operatorDisplayName!
            }
            if self.operatorName != nil {
                map["OperatorName"] = self.operatorName!
            }
            if self.operatorNickName != nil {
                map["OperatorNickName"] = self.operatorNickName!
            }
            if self.operatorPhotoUrl != nil {
                map["OperatorPhotoUrl"] = self.operatorPhotoUrl!
            }
            if self.operatorStatus != nil {
                map["OperatorStatus"] = self.operatorStatus!
            }
            if self.operatorUserId != nil {
                map["OperatorUserId"] = self.operatorUserId!
            }
            if self.processInstanceId != nil {
                map["ProcessInstanceId"] = self.processInstanceId!
            }
            if self.remark != nil {
                map["Remark"] = self.remark!
            }
            if self.showName != nil {
                map["ShowName"] = self.showName!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.taskExecuteType != nil {
                map["TaskExecuteType"] = self.taskExecuteType!
            }
            if self.taskHoldTimeGMT != nil {
                map["TaskHoldTimeGMT"] = self.taskHoldTimeGMT!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Action"] as? String {
                self.action = value
            }
            if let value = dict["ActionExit"] as? String {
                self.actionExit = value
            }
            if let value = dict["ActiveTimeGMT"] as? String {
                self.activeTimeGMT = value
            }
            if let value = dict["ActivityId"] as? String {
                self.activityId = value
            }
            if let value = dict["DataId"] as? Int64 {
                self.dataId = value
            }
            if let value = dict["DigitalSign"] as? String {
                self.digitalSign = value
            }
            if let value = dict["Files"] as? String {
                self.files = value
            }
            if let value = dict["OperateTimeGMT"] as? String {
                self.operateTimeGMT = value
            }
            if let value = dict["OperateType"] as? String {
                self.operateType = value
            }
            if let value = dict["OperatorDisplayName"] as? String {
                self.operatorDisplayName = value
            }
            if let value = dict["OperatorName"] as? String {
                self.operatorName = value
            }
            if let value = dict["OperatorNickName"] as? String {
                self.operatorNickName = value
            }
            if let value = dict["OperatorPhotoUrl"] as? String {
                self.operatorPhotoUrl = value
            }
            if let value = dict["OperatorStatus"] as? String {
                self.operatorStatus = value
            }
            if let value = dict["OperatorUserId"] as? String {
                self.operatorUserId = value
            }
            if let value = dict["ProcessInstanceId"] as? String {
                self.processInstanceId = value
            }
            if let value = dict["Remark"] as? String {
                self.remark = value
            }
            if let value = dict["ShowName"] as? String {
                self.showName = value
            }
            if let value = dict["Size"] as? Int32 {
                self.size = value
            }
            if let value = dict["TaskExecuteType"] as? String {
                self.taskExecuteType = value
            }
            if let value = dict["TaskHoldTimeGMT"] as? Int64 {
                self.taskHoldTimeGMT = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskType"] as? String {
                self.taskType = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var requestId: String?

    public var result: [GetOperationRecordsResponseBody.Result]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["result"] = tmp
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [Any?] {
            var tmp : [GetOperationRecordsResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = GetOperationRecordsResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetOperationRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOperationRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOperationRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOrgLiveListHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetOrgLiveListHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetOrgLiveListHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetOrgLiveListShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetOrgLiveListRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var corpId: String?

    public var endTime: Int64?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var startTime: Int64?

    public var tenantContext: GetOrgLiveListRequest.TenantContext?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.corpId != nil {
            map["CorpId"] = self.corpId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CorpId"] as? String {
            self.corpId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetOrgLiveListRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class GetOrgLiveListShrinkRequest : Tea.TeaModel {
    public var corpId: String?

    public var endTime: Int64?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var startTime: Int64?

    public var tenantContextShrink: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.corpId != nil {
            map["CorpId"] = self.corpId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CorpId"] as? String {
            self.corpId = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["UserId"] as? String {
            self.userId = value
        }
    }
}

public class GetOrgLiveListResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public class NewLive : Tea.TeaModel {
            public class LiveList : Tea.TeaModel {
                public var anchorNickname: String?

                public var anchorUnionId: String?

                public var anchorUserId: String?

                public var liveEndTime: Int64?

                public var liveStartTime: Int64?

                public var liveUuid: String?

                public var shareOpenConversationIds: [String]?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.anchorNickname != nil {
                        map["AnchorNickname"] = self.anchorNickname!
                    }
                    if self.anchorUnionId != nil {
                        map["AnchorUnionId"] = self.anchorUnionId!
                    }
                    if self.anchorUserId != nil {
                        map["AnchorUserId"] = self.anchorUserId!
                    }
                    if self.liveEndTime != nil {
                        map["LiveEndTime"] = self.liveEndTime!
                    }
                    if self.liveStartTime != nil {
                        map["LiveStartTime"] = self.liveStartTime!
                    }
                    if self.liveUuid != nil {
                        map["LiveUuid"] = self.liveUuid!
                    }
                    if self.shareOpenConversationIds != nil {
                        map["ShareOpenConversationIds"] = self.shareOpenConversationIds!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AnchorNickname"] as? String {
                        self.anchorNickname = value
                    }
                    if let value = dict["AnchorUnionId"] as? String {
                        self.anchorUnionId = value
                    }
                    if let value = dict["AnchorUserId"] as? String {
                        self.anchorUserId = value
                    }
                    if let value = dict["LiveEndTime"] as? Int64 {
                        self.liveEndTime = value
                    }
                    if let value = dict["LiveStartTime"] as? Int64 {
                        self.liveStartTime = value
                    }
                    if let value = dict["LiveUuid"] as? String {
                        self.liveUuid = value
                    }
                    if let value = dict["ShareOpenConversationIds"] as? [String] {
                        self.shareOpenConversationIds = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                }
            }
            public var hasMore: Bool?

            public var liveList: [GetOrgLiveListResponseBody.Result.NewLive.LiveList]?

            public var pageNumber: Int64?

            public var pageSize: Int64?

            public var totalCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.hasMore != nil {
                    map["HasMore"] = self.hasMore!
                }
                if self.liveList != nil {
                    var tmp : [Any] = []
                    for k in self.liveList! {
                        tmp.append(k.toMap())
                    }
                    map["LiveList"] = tmp
                }
                if self.pageNumber != nil {
                    map["PageNumber"] = self.pageNumber!
                }
                if self.pageSize != nil {
                    map["PageSize"] = self.pageSize!
                }
                if self.totalCount != nil {
                    map["TotalCount"] = self.totalCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["HasMore"] as? Bool {
                    self.hasMore = value
                }
                if let value = dict["LiveList"] as? [Any?] {
                    var tmp : [GetOrgLiveListResponseBody.Result.NewLive.LiveList] = []
                    for v in value {
                        if v != nil {
                            var model = GetOrgLiveListResponseBody.Result.NewLive.LiveList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.liveList = tmp
                }
                if let value = dict["PageNumber"] as? Int64 {
                    self.pageNumber = value
                }
                if let value = dict["PageSize"] as? Int64 {
                    self.pageSize = value
                }
                if let value = dict["TotalCount"] as? Int64 {
                    self.totalCount = value
                }
            }
        }
        public class UpdateLive : Tea.TeaModel {
            public class LiveList : Tea.TeaModel {
                public var anchorNickname: String?

                public var anchorUnionId: String?

                public var anchorUserId: String?

                public var liveEndTime: Int64?

                public var liveStartTime: Int64?

                public var liveUuid: String?

                public var title: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.anchorNickname != nil {
                        map["AnchorNickname"] = self.anchorNickname!
                    }
                    if self.anchorUnionId != nil {
                        map["AnchorUnionId"] = self.anchorUnionId!
                    }
                    if self.anchorUserId != nil {
                        map["AnchorUserId"] = self.anchorUserId!
                    }
                    if self.liveEndTime != nil {
                        map["LiveEndTime"] = self.liveEndTime!
                    }
                    if self.liveStartTime != nil {
                        map["LiveStartTime"] = self.liveStartTime!
                    }
                    if self.liveUuid != nil {
                        map["LiveUuid"] = self.liveUuid!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AnchorNickname"] as? String {
                        self.anchorNickname = value
                    }
                    if let value = dict["AnchorUnionId"] as? String {
                        self.anchorUnionId = value
                    }
                    if let value = dict["AnchorUserId"] as? String {
                        self.anchorUserId = value
                    }
                    if let value = dict["LiveEndTime"] as? Int64 {
                        self.liveEndTime = value
                    }
                    if let value = dict["LiveStartTime"] as? Int64 {
                        self.liveStartTime = value
                    }
                    if let value = dict["LiveUuid"] as? String {
                        self.liveUuid = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                }
            }
            public var hasMore: Bool?

            public var liveList: [GetOrgLiveListResponseBody.Result.UpdateLive.LiveList]?

            public var pageNumber: Int64?

            public var pageSize: Int64?

            public var totalCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.hasMore != nil {
                    map["HasMore"] = self.hasMore!
                }
                if self.liveList != nil {
                    var tmp : [Any] = []
                    for k in self.liveList! {
                        tmp.append(k.toMap())
                    }
                    map["LiveList"] = tmp
                }
                if self.pageNumber != nil {
                    map["PageNumber"] = self.pageNumber!
                }
                if self.pageSize != nil {
                    map["PageSize"] = self.pageSize!
                }
                if self.totalCount != nil {
                    map["TotalCount"] = self.totalCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["HasMore"] as? Bool {
                    self.hasMore = value
                }
                if let value = dict["LiveList"] as? [Any?] {
                    var tmp : [GetOrgLiveListResponseBody.Result.UpdateLive.LiveList] = []
                    for v in value {
                        if v != nil {
                            var model = GetOrgLiveListResponseBody.Result.UpdateLive.LiveList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.liveList = tmp
                }
                if let value = dict["PageNumber"] as? Int64 {
                    self.pageNumber = value
                }
                if let value = dict["PageSize"] as? Int64 {
                    self.pageSize = value
                }
                if let value = dict["TotalCount"] as? Int64 {
                    self.totalCount = value
                }
            }
        }
        public var newLive: GetOrgLiveListResponseBody.Result.NewLive?

        public var updateLive: GetOrgLiveListResponseBody.Result.UpdateLive?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.newLive?.validate()
            try self.updateLive?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.newLive != nil {
                map["NewLive"] = self.newLive?.toMap()
            }
            if self.updateLive != nil {
                map["UpdateLive"] = self.updateLive?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NewLive"] as? [String: Any?] {
                var model = GetOrgLiveListResponseBody.Result.NewLive()
                model.fromMap(value)
                self.newLive = model
            }
            if let value = dict["UpdateLive"] as? [String: Any?] {
                var model = GetOrgLiveListResponseBody.Result.UpdateLive()
                model.fromMap(value)
                self.updateLive = model
            }
        }
    }
    public var requestId: String?

    public var result: GetOrgLiveListResponseBody.Result?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.result?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result?.toMap()
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [String: Any?] {
            var model = GetOrgLiveListResponseBody.Result()
            model.fromMap(value)
            self.result = model
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetOrgLiveListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOrgLiveListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOrgLiveListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOrgOrWebOpenDocContentTaskIdHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetOrgOrWebOpenDocContentTaskIdHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetOrgOrWebOpenDocContentTaskIdHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetOrgOrWebOpenDocContentTaskIdShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetOrgOrWebOpenDocContentTaskIdRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dentryUuid: String?

    public var generateCp: Bool?

    public var scopeType: Int32?

    public var targetFormat: String?

    public var tenantContext: GetOrgOrWebOpenDocContentTaskIdRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.generateCp != nil {
            map["GenerateCp"] = self.generateCp!
        }
        if self.scopeType != nil {
            map["ScopeType"] = self.scopeType!
        }
        if self.targetFormat != nil {
            map["TargetFormat"] = self.targetFormat!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["GenerateCp"] as? Bool {
            self.generateCp = value
        }
        if let value = dict["ScopeType"] as? Int32 {
            self.scopeType = value
        }
        if let value = dict["TargetFormat"] as? String {
            self.targetFormat = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetOrgOrWebOpenDocContentTaskIdRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetOrgOrWebOpenDocContentTaskIdShrinkRequest : Tea.TeaModel {
    public var dentryUuid: String?

    public var generateCp: Bool?

    public var scopeType: Int32?

    public var targetFormat: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.generateCp != nil {
            map["GenerateCp"] = self.generateCp!
        }
        if self.scopeType != nil {
            map["ScopeType"] = self.scopeType!
        }
        if self.targetFormat != nil {
            map["TargetFormat"] = self.targetFormat!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["GenerateCp"] as? Bool {
            self.generateCp = value
        }
        if let value = dict["ScopeType"] as? Int32 {
            self.scopeType = value
        }
        if let value = dict["TargetFormat"] as? String {
            self.targetFormat = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetOrgOrWebOpenDocContentTaskIdResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var taskId: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["taskId"] as? Int64 {
            self.taskId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetOrgOrWebOpenDocContentTaskIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOrgOrWebOpenDocContentTaskIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOrgOrWebOpenDocContentTaskIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetProcessDefinitionHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetProcessDefinitionHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetProcessDefinitionHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetProcessDefinitionShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetProcessDefinitionRequest : Tea.TeaModel {
    public var appType: String?

    public var corpId: String?

    public var groupId: String?

    public var language: String?

    public var nameSpace: String?

    public var orderNumber: String?

    public var processInstanceId: String?

    public var systemToken: String?

    public var systemType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.corpId != nil {
            map["CorpId"] = self.corpId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.nameSpace != nil {
            map["NameSpace"] = self.nameSpace!
        }
        if self.orderNumber != nil {
            map["OrderNumber"] = self.orderNumber!
        }
        if self.processInstanceId != nil {
            map["ProcessInstanceId"] = self.processInstanceId!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.systemType != nil {
            map["SystemType"] = self.systemType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["CorpId"] as? String {
            self.corpId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["NameSpace"] as? String {
            self.nameSpace = value
        }
        if let value = dict["OrderNumber"] as? String {
            self.orderNumber = value
        }
        if let value = dict["ProcessInstanceId"] as? String {
            self.processInstanceId = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["SystemType"] as? String {
            self.systemType = value
        }
    }
}

public class GetProcessDefinitionResponseBody : Tea.TeaModel {
    public class Originator : Tea.TeaModel {
        public class MasterDataDepartments : Tea.TeaModel {
            public var deptName: String?

            public var deptNameInEnglish: String?

            public var deptNo: String?

            public var deptPath: String?

            public var humanSourceGroupOrderNumber: String?

            public var humanSourceGroupWorkNo: String?

            public var id: Int64?

            public var masterWorkNo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.deptName != nil {
                    map["DeptName"] = self.deptName!
                }
                if self.deptNameInEnglish != nil {
                    map["DeptNameInEnglish"] = self.deptNameInEnglish!
                }
                if self.deptNo != nil {
                    map["DeptNo"] = self.deptNo!
                }
                if self.deptPath != nil {
                    map["DeptPath"] = self.deptPath!
                }
                if self.humanSourceGroupOrderNumber != nil {
                    map["HumanSourceGroupOrderNumber"] = self.humanSourceGroupOrderNumber!
                }
                if self.humanSourceGroupWorkNo != nil {
                    map["HumanSourceGroupWorkNo"] = self.humanSourceGroupWorkNo!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.masterWorkNo != nil {
                    map["MasterWorkNo"] = self.masterWorkNo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DeptName"] as? String {
                    self.deptName = value
                }
                if let value = dict["DeptNameInEnglish"] as? String {
                    self.deptNameInEnglish = value
                }
                if let value = dict["DeptNo"] as? String {
                    self.deptNo = value
                }
                if let value = dict["DeptPath"] as? String {
                    self.deptPath = value
                }
                if let value = dict["HumanSourceGroupOrderNumber"] as? String {
                    self.humanSourceGroupOrderNumber = value
                }
                if let value = dict["HumanSourceGroupWorkNo"] as? String {
                    self.humanSourceGroupWorkNo = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["MasterWorkNo"] as? String {
                    self.masterWorkNo = value
                }
            }
        }
        public var departmentDescription: String?

        public var displayEnName: String?

        public var displayName: String?

        public var masterDataDepartments: [GetProcessDefinitionResponseBody.Originator.MasterDataDepartments]?

        public var orderNumber: String?

        public var personalPhoto: String?

        public var status: String?

        public var tbWang: String?

        public var userId: String?

        public var userInfo: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.departmentDescription != nil {
                map["DepartmentDescription"] = self.departmentDescription!
            }
            if self.displayEnName != nil {
                map["DisplayEnName"] = self.displayEnName!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.masterDataDepartments != nil {
                var tmp : [Any] = []
                for k in self.masterDataDepartments! {
                    tmp.append(k.toMap())
                }
                map["MasterDataDepartments"] = tmp
            }
            if self.orderNumber != nil {
                map["OrderNumber"] = self.orderNumber!
            }
            if self.personalPhoto != nil {
                map["PersonalPhoto"] = self.personalPhoto!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tbWang != nil {
                map["TbWang"] = self.tbWang!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.userInfo != nil {
                map["UserInfo"] = self.userInfo!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DepartmentDescription"] as? String {
                self.departmentDescription = value
            }
            if let value = dict["DisplayEnName"] as? String {
                self.displayEnName = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["MasterDataDepartments"] as? [Any?] {
                var tmp : [GetProcessDefinitionResponseBody.Originator.MasterDataDepartments] = []
                for v in value {
                    if v != nil {
                        var model = GetProcessDefinitionResponseBody.Originator.MasterDataDepartments()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.masterDataDepartments = tmp
            }
            if let value = dict["OrderNumber"] as? String {
                self.orderNumber = value
            }
            if let value = dict["PersonalPhoto"] as? String {
                self.personalPhoto = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TbWang"] as? String {
                self.tbWang = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["UserInfo"] as? String {
                self.userInfo = value
            }
        }
    }
    public class Owners : Tea.TeaModel {
        public class MasterDataDepartments : Tea.TeaModel {
            public var deptName: String?

            public var deptNameInEnglish: String?

            public var deptNo: String?

            public var deptPath: String?

            public var humanSourceGroupOrderNumber: String?

            public var humanSourceGroupWorkNo: String?

            public var id: Int64?

            public var masterWorkNo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.deptName != nil {
                    map["DeptName"] = self.deptName!
                }
                if self.deptNameInEnglish != nil {
                    map["DeptNameInEnglish"] = self.deptNameInEnglish!
                }
                if self.deptNo != nil {
                    map["DeptNo"] = self.deptNo!
                }
                if self.deptPath != nil {
                    map["DeptPath"] = self.deptPath!
                }
                if self.humanSourceGroupOrderNumber != nil {
                    map["HumanSourceGroupOrderNumber"] = self.humanSourceGroupOrderNumber!
                }
                if self.humanSourceGroupWorkNo != nil {
                    map["HumanSourceGroupWorkNo"] = self.humanSourceGroupWorkNo!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.masterWorkNo != nil {
                    map["MasterWorkNo"] = self.masterWorkNo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DeptName"] as? String {
                    self.deptName = value
                }
                if let value = dict["DeptNameInEnglish"] as? String {
                    self.deptNameInEnglish = value
                }
                if let value = dict["DeptNo"] as? String {
                    self.deptNo = value
                }
                if let value = dict["DeptPath"] as? String {
                    self.deptPath = value
                }
                if let value = dict["HumanSourceGroupOrderNumber"] as? String {
                    self.humanSourceGroupOrderNumber = value
                }
                if let value = dict["HumanSourceGroupWorkNo"] as? String {
                    self.humanSourceGroupWorkNo = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["MasterWorkNo"] as? String {
                    self.masterWorkNo = value
                }
            }
        }
        public var departmentDescription: String?

        public var displayEnName: String?

        public var displayName: String?

        public var masterDataDepartments: [GetProcessDefinitionResponseBody.Owners.MasterDataDepartments]?

        public var orderNumber: String?

        public var personalPhoto: String?

        public var status: String?

        public var tbWang: String?

        public var userId: String?

        public var userInfo: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.departmentDescription != nil {
                map["DepartmentDescription"] = self.departmentDescription!
            }
            if self.displayEnName != nil {
                map["DisplayEnName"] = self.displayEnName!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.masterDataDepartments != nil {
                var tmp : [Any] = []
                for k in self.masterDataDepartments! {
                    tmp.append(k.toMap())
                }
                map["MasterDataDepartments"] = tmp
            }
            if self.orderNumber != nil {
                map["OrderNumber"] = self.orderNumber!
            }
            if self.personalPhoto != nil {
                map["PersonalPhoto"] = self.personalPhoto!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tbWang != nil {
                map["TbWang"] = self.tbWang!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.userInfo != nil {
                map["UserInfo"] = self.userInfo!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DepartmentDescription"] as? String {
                self.departmentDescription = value
            }
            if let value = dict["DisplayEnName"] as? String {
                self.displayEnName = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["MasterDataDepartments"] as? [Any?] {
                var tmp : [GetProcessDefinitionResponseBody.Owners.MasterDataDepartments] = []
                for v in value {
                    if v != nil {
                        var model = GetProcessDefinitionResponseBody.Owners.MasterDataDepartments()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.masterDataDepartments = tmp
            }
            if let value = dict["OrderNumber"] as? String {
                self.orderNumber = value
            }
            if let value = dict["PersonalPhoto"] as? String {
                self.personalPhoto = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TbWang"] as? String {
                self.tbWang = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["UserInfo"] as? String {
                self.userInfo = value
            }
        }
    }
    public class Tasks : Tea.TeaModel {
        public class Activity : Tea.TeaModel {
            public var activityId: String?

            public var activityInstanceStatus: String?

            public var activityName: String?

            public var activityNameInEnglish: String?

            public var id: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.activityId != nil {
                    map["ActivityId"] = self.activityId!
                }
                if self.activityInstanceStatus != nil {
                    map["ActivityInstanceStatus"] = self.activityInstanceStatus!
                }
                if self.activityName != nil {
                    map["ActivityName"] = self.activityName!
                }
                if self.activityNameInEnglish != nil {
                    map["ActivityNameInEnglish"] = self.activityNameInEnglish!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ActivityId"] as? String {
                    self.activityId = value
                }
                if let value = dict["ActivityInstanceStatus"] as? String {
                    self.activityInstanceStatus = value
                }
                if let value = dict["ActivityName"] as? String {
                    self.activityName = value
                }
                if let value = dict["ActivityNameInEnglish"] as? String {
                    self.activityNameInEnglish = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
            }
        }
        public var actionerId: String?

        public var activity: GetProcessDefinitionResponseBody.Tasks.Activity?

        public var status: String?

        public var taskId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.activity?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actionerId != nil {
                map["ActionerId"] = self.actionerId!
            }
            if self.activity != nil {
                map["Activity"] = self.activity?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActionerId"] as? String {
                self.actionerId = value
            }
            if let value = dict["Activity"] as? [String: Any?] {
                var model = GetProcessDefinitionResponseBody.Tasks.Activity()
                model.fromMap(value)
                self.activity = model
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskId"] as? Int64 {
                self.taskId = value
            }
        }
    }
    public var formUuid: String?

    public var originator: GetProcessDefinitionResponseBody.Originator?

    public var outResult: String?

    public var owners: [GetProcessDefinitionResponseBody.Owners]?

    public var processId: String?

    public var processInstanceId: String?

    public var requestId: String?

    public var status: String?

    public var tasks: [GetProcessDefinitionResponseBody.Tasks]?

    public var title: String?

    public var variables: [String: Any]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.originator?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.formUuid != nil {
            map["formUuid"] = self.formUuid!
        }
        if self.originator != nil {
            map["originator"] = self.originator?.toMap()
        }
        if self.outResult != nil {
            map["outResult"] = self.outResult!
        }
        if self.owners != nil {
            var tmp : [Any] = []
            for k in self.owners! {
                tmp.append(k.toMap())
            }
            map["owners"] = tmp
        }
        if self.processId != nil {
            map["processId"] = self.processId!
        }
        if self.processInstanceId != nil {
            map["processInstanceId"] = self.processInstanceId!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.tasks != nil {
            var tmp : [Any] = []
            for k in self.tasks! {
                tmp.append(k.toMap())
            }
            map["tasks"] = tmp
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.variables != nil {
            map["variables"] = self.variables!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["formUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["originator"] as? [String: Any?] {
            var model = GetProcessDefinitionResponseBody.Originator()
            model.fromMap(value)
            self.originator = model
        }
        if let value = dict["outResult"] as? String {
            self.outResult = value
        }
        if let value = dict["owners"] as? [Any?] {
            var tmp : [GetProcessDefinitionResponseBody.Owners] = []
            for v in value {
                if v != nil {
                    var model = GetProcessDefinitionResponseBody.Owners()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.owners = tmp
        }
        if let value = dict["processId"] as? String {
            self.processId = value
        }
        if let value = dict["processInstanceId"] as? String {
            self.processInstanceId = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
        if let value = dict["tasks"] as? [Any?] {
            var tmp : [GetProcessDefinitionResponseBody.Tasks] = []
            for v in value {
                if v != nil {
                    var model = GetProcessDefinitionResponseBody.Tasks()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tasks = tmp
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
        if let value = dict["variables"] as? [String: Any] {
            self.variables = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetProcessDefinitionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetProcessDefinitionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetProcessDefinitionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRangeHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetRangeHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetRangeHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetRangeShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetRangeRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var rangeAddress: String?

    public var select: String?

    public var sheetId: String?

    public var tenantContext: GetRangeRequest.TenantContext?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.rangeAddress != nil {
            map["RangeAddress"] = self.rangeAddress!
        }
        if self.select != nil {
            map["Select"] = self.select!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RangeAddress"] as? String {
            self.rangeAddress = value
        }
        if let value = dict["Select"] as? String {
            self.select = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetRangeRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class GetRangeShrinkRequest : Tea.TeaModel {
    public var rangeAddress: String?

    public var select: String?

    public var sheetId: String?

    public var tenantContextShrink: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.rangeAddress != nil {
            map["RangeAddress"] = self.rangeAddress!
        }
        if self.select != nil {
            map["Select"] = self.select!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RangeAddress"] as? String {
            self.rangeAddress = value
        }
        if let value = dict["Select"] as? String {
            self.select = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class GetRangeResponseBody : Tea.TeaModel {
    public class BackgroundColors : Tea.TeaModel {
        public var red: Int32?

        public var green: Int32?

        public var blue: Int32?

        public var hexString: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.red != nil {
                map["Red"] = self.red!
            }
            if self.green != nil {
                map["Green"] = self.green!
            }
            if self.blue != nil {
                map["Blue"] = self.blue!
            }
            if self.hexString != nil {
                map["HexString"] = self.hexString!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Red"] as? Int32 {
                self.red = value
            }
            if let value = dict["Green"] as? Int32 {
                self.green = value
            }
            if let value = dict["Blue"] as? Int32 {
                self.blue = value
            }
            if let value = dict["HexString"] as? String {
                self.hexString = value
            }
        }
    }
    public class Hyperlinks : Tea.TeaModel {
        public var type: String?

        public var link: String?

        public var text: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.type != nil {
                map["type"] = self.type!
            }
            if self.link != nil {
                map["link"] = self.link!
            }
            if self.text != nil {
                map["text"] = self.text!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["type"] as? String {
                self.type = value
            }
            if let value = dict["link"] as? String {
                self.link = value
            }
            if let value = dict["text"] as? String {
                self.text = value
            }
        }
    }
    public var backgroundColors: [[GetRangeResponseBody.BackgroundColors]]?

    public var displayValues: [[String]]?

    public var formulas: [[String]]?

    public var hyperlinks: [[GetRangeResponseBody.Hyperlinks]]?

    public var requestId: String?

    public var values: [[Any]]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backgroundColors != nil {
            var tmp : [Any] = []
            for k in self.backgroundColors! {
                var l1 : [Any] = []
                for k1 in k {
                    l1.append(k1.toMap())
                }
                tmp.append(l1)
            }
            map["backgroundColors"] = tmp
        }
        if self.displayValues != nil {
            map["displayValues"] = self.displayValues!
        }
        if self.formulas != nil {
            map["formulas"] = self.formulas!
        }
        if self.hyperlinks != nil {
            var tmp : [Any] = []
            for k in self.hyperlinks! {
                var l1 : [Any] = []
                for k1 in k {
                    l1.append(k1.toMap())
                }
                tmp.append(l1)
            }
            map["hyperlinks"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.values != nil {
            map["values"] = self.values!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["backgroundColors"] as? [Any?] {
            var tmp : [[GetRangeResponseBody.BackgroundColors]] = []
            for v in value {
                if v != nil {
                    var l1 : [GetRangeResponseBody.BackgroundColors] = []
                    for v1 in v as! [Any?] {
                        if v1 != nil {
                            var model = GetRangeResponseBody.BackgroundColors()
                            if v1 != nil {
                                model.fromMap(v1 as? [String: Any?])
                            }
                            l1.append(model)
                        }
                    }
                    tmp.append(l1)
                }
            }
            self.backgroundColors = tmp
        }
        if let value = dict["displayValues"] as? [[String]] {
            self.displayValues = value
        }
        if let value = dict["formulas"] as? [[String]] {
            self.formulas = value
        }
        if let value = dict["hyperlinks"] as? [Any?] {
            var tmp : [[GetRangeResponseBody.Hyperlinks]] = []
            for v in value {
                if v != nil {
                    var l1 : [GetRangeResponseBody.Hyperlinks] = []
                    for v1 in v as! [Any?] {
                        if v1 != nil {
                            var model = GetRangeResponseBody.Hyperlinks()
                            if v1 != nil {
                                model.fromMap(v1 as? [String: Any?])
                            }
                            l1.append(model)
                        }
                    }
                    tmp.append(l1)
                }
            }
            self.hyperlinks = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["values"] as? [[Any]] {
            self.values = value
        }
    }
}

public class GetRangeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRangeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRangeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRelatedWorkspacesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetRelatedWorkspacesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetRelatedWorkspacesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetRelatedWorkspacesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetRelatedWorkspacesRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var includeRecent: Bool?

    public var tenantContext: GetRelatedWorkspacesRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.includeRecent != nil {
            map["IncludeRecent"] = self.includeRecent!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IncludeRecent"] as? Bool {
            self.includeRecent = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetRelatedWorkspacesRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetRelatedWorkspacesShrinkRequest : Tea.TeaModel {
    public var includeRecent: Bool?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.includeRecent != nil {
            map["IncludeRecent"] = self.includeRecent!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IncludeRecent"] as? Bool {
            self.includeRecent = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetRelatedWorkspacesResponseBody : Tea.TeaModel {
    public class Workspaces : Tea.TeaModel {
        public class RecentList : Tea.TeaModel {
            public var lastEditTime: Int64?

            public var name: String?

            public var nodeId: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.lastEditTime != nil {
                    map["LastEditTime"] = self.lastEditTime!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.nodeId != nil {
                    map["NodeId"] = self.nodeId!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["LastEditTime"] as? Int64 {
                    self.lastEditTime = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NodeId"] as? String {
                    self.nodeId = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var createTime: Int64?

        public var deleted: Bool?

        public var name: String?

        public var owner: String?

        public var recentList: [GetRelatedWorkspacesResponseBody.Workspaces.RecentList]?

        public var role: String?

        public var url: String?

        public var workspaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.deleted != nil {
                map["Deleted"] = self.deleted!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.owner != nil {
                map["Owner"] = self.owner!
            }
            if self.recentList != nil {
                var tmp : [Any] = []
                for k in self.recentList! {
                    tmp.append(k.toMap())
                }
                map["RecentList"] = tmp
            }
            if self.role != nil {
                map["Role"] = self.role!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.workspaceId != nil {
                map["WorkspaceId"] = self.workspaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["Deleted"] as? Bool {
                self.deleted = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Owner"] as? String {
                self.owner = value
            }
            if let value = dict["RecentList"] as? [Any?] {
                var tmp : [GetRelatedWorkspacesResponseBody.Workspaces.RecentList] = []
                for v in value {
                    if v != nil {
                        var model = GetRelatedWorkspacesResponseBody.Workspaces.RecentList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.recentList = tmp
            }
            if let value = dict["Role"] as? String {
                self.role = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["WorkspaceId"] as? String {
                self.workspaceId = value
            }
        }
    }
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public var workspaces: [GetRelatedWorkspacesResponseBody.Workspaces]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        if self.workspaces != nil {
            var tmp : [Any] = []
            for k in self.workspaces! {
                tmp.append(k.toMap())
            }
            map["workspaces"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
        if let value = dict["workspaces"] as? [Any?] {
            var tmp : [GetRelatedWorkspacesResponseBody.Workspaces] = []
            for v in value {
                if v != nil {
                    var model = GetRelatedWorkspacesResponseBody.Workspaces()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.workspaces = tmp
        }
    }
}

public class GetRelatedWorkspacesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRelatedWorkspacesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRelatedWorkspacesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetReportTemplateByNameHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetReportTemplateByNameHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetReportTemplateByNameHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetReportTemplateByNameShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetReportTemplateByNameRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var templateName: String?

    public var tenantContext: GetReportTemplateByNameRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetReportTemplateByNameRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetReportTemplateByNameShrinkRequest : Tea.TeaModel {
    public var templateName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetReportTemplateByNameResponseBody : Tea.TeaModel {
    public class DefaultReceivedConvs : Tea.TeaModel {
        public var conversationId: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.conversationId != nil {
                map["ConversationId"] = self.conversationId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConversationId"] as? String {
                self.conversationId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public class DefaultReceivers : Tea.TeaModel {
        public var userName: String?

        public var userid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userName != nil {
                map["UserName"] = self.userName!
            }
            if self.userid != nil {
                map["Userid"] = self.userid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UserName"] as? String {
                self.userName = value
            }
            if let value = dict["Userid"] as? String {
                self.userid = value
            }
        }
    }
    public class Fields : Tea.TeaModel {
        public var fieldName: String?

        public var sort: Int64?

        public var type: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fieldName != nil {
                map["FieldName"] = self.fieldName!
            }
            if self.sort != nil {
                map["Sort"] = self.sort!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FieldName"] as? String {
                self.fieldName = value
            }
            if let value = dict["Sort"] as? Int64 {
                self.sort = value
            }
            if let value = dict["Type"] as? Int64 {
                self.type = value
            }
        }
    }
    public var defaultReceivedConvs: [GetReportTemplateByNameResponseBody.DefaultReceivedConvs]?

    public var defaultReceivers: [GetReportTemplateByNameResponseBody.DefaultReceivers]?

    public var fields: [GetReportTemplateByNameResponseBody.Fields]?

    public var id: String?

    public var name: String?

    public var requestId: String?

    public var userName: String?

    public var userid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.defaultReceivedConvs != nil {
            var tmp : [Any] = []
            for k in self.defaultReceivedConvs! {
                tmp.append(k.toMap())
            }
            map["defaultReceivedConvs"] = tmp
        }
        if self.defaultReceivers != nil {
            var tmp : [Any] = []
            for k in self.defaultReceivers! {
                tmp.append(k.toMap())
            }
            map["defaultReceivers"] = tmp
        }
        if self.fields != nil {
            var tmp : [Any] = []
            for k in self.fields! {
                tmp.append(k.toMap())
            }
            map["fields"] = tmp
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.userName != nil {
            map["userName"] = self.userName!
        }
        if self.userid != nil {
            map["userid"] = self.userid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["defaultReceivedConvs"] as? [Any?] {
            var tmp : [GetReportTemplateByNameResponseBody.DefaultReceivedConvs] = []
            for v in value {
                if v != nil {
                    var model = GetReportTemplateByNameResponseBody.DefaultReceivedConvs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.defaultReceivedConvs = tmp
        }
        if let value = dict["defaultReceivers"] as? [Any?] {
            var tmp : [GetReportTemplateByNameResponseBody.DefaultReceivers] = []
            for v in value {
                if v != nil {
                    var model = GetReportTemplateByNameResponseBody.DefaultReceivers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.defaultReceivers = tmp
        }
        if let value = dict["fields"] as? [Any?] {
            var tmp : [GetReportTemplateByNameResponseBody.Fields] = []
            for v in value {
                if v != nil {
                    var model = GetReportTemplateByNameResponseBody.Fields()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.fields = tmp
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["userName"] as? String {
            self.userName = value
        }
        if let value = dict["userid"] as? String {
            self.userid = value
        }
    }
}

public class GetReportTemplateByNameResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetReportTemplateByNameResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetReportTemplateByNameResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetReportUnReadCountHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetReportUnReadCountHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetReportUnReadCountHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetReportUnReadCountShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetReportUnReadCountRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var request: [String: Any]?

    public var tenantContext: GetReportUnReadCountRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.request != nil {
            map["Request"] = self.request!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Request"] as? [String: Any] {
            self.request = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetReportUnReadCountRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetReportUnReadCountShrinkRequest : Tea.TeaModel {
    public var requestShrink: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestShrink != nil {
            map["Request"] = self.requestShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Request"] as? String {
            self.requestShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetReportUnReadCountResponseBody : Tea.TeaModel {
    public var count: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.count != nil {
            map["count"] = self.count!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["count"] as? Int64 {
            self.count = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetReportUnReadCountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetReportUnReadCountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetReportUnReadCountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRunningTasksHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetRunningTasksHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetRunningTasksHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetRunningTasksShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetRunningTasksRequest : Tea.TeaModel {
    public var appType: String?

    public var language: String?

    public var processCodes: String?

    public var processInstanceId: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.processCodes != nil {
            map["ProcessCodes"] = self.processCodes!
        }
        if self.processInstanceId != nil {
            map["ProcessInstanceId"] = self.processInstanceId!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ProcessCodes"] as? String {
            self.processCodes = value
        }
        if let value = dict["ProcessInstanceId"] as? String {
            self.processInstanceId = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class GetRunningTasksResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var activeTimeGMT: String?

        public var activityId: String?

        public var actualActionerId: String?

        public var createTimeGMT: String?

        public var finishTimeGMT: String?

        public var originatorId: String?

        public var processInstanceId: String?

        public var status: String?

        public var taskId: String?

        public var taskType: String?

        public var title: String?

        public var titleInEnglish: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.activeTimeGMT != nil {
                map["ActiveTimeGMT"] = self.activeTimeGMT!
            }
            if self.activityId != nil {
                map["ActivityId"] = self.activityId!
            }
            if self.actualActionerId != nil {
                map["ActualActionerId"] = self.actualActionerId!
            }
            if self.createTimeGMT != nil {
                map["CreateTimeGMT"] = self.createTimeGMT!
            }
            if self.finishTimeGMT != nil {
                map["FinishTimeGMT"] = self.finishTimeGMT!
            }
            if self.originatorId != nil {
                map["OriginatorId"] = self.originatorId!
            }
            if self.processInstanceId != nil {
                map["ProcessInstanceId"] = self.processInstanceId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.titleInEnglish != nil {
                map["TitleInEnglish"] = self.titleInEnglish!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActiveTimeGMT"] as? String {
                self.activeTimeGMT = value
            }
            if let value = dict["ActivityId"] as? String {
                self.activityId = value
            }
            if let value = dict["ActualActionerId"] as? String {
                self.actualActionerId = value
            }
            if let value = dict["CreateTimeGMT"] as? String {
                self.createTimeGMT = value
            }
            if let value = dict["FinishTimeGMT"] as? String {
                self.finishTimeGMT = value
            }
            if let value = dict["OriginatorId"] as? String {
                self.originatorId = value
            }
            if let value = dict["ProcessInstanceId"] as? String {
                self.processInstanceId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskType"] as? String {
                self.taskType = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["TitleInEnglish"] as? String {
                self.titleInEnglish = value
            }
        }
    }
    public var requestId: String?

    public var result: [GetRunningTasksResponseBody.Result]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["result"] = tmp
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [Any?] {
            var tmp : [GetRunningTasksResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = GetRunningTasksResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetRunningTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRunningTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRunningTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetScheduleHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetScheduleHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetScheduleHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetScheduleShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetScheduleRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var endTime: String?

    public var startTime: String?

    public var tenantContext: GetScheduleRequest.TenantContext?

    public var userIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.userIds != nil {
            map["UserIds"] = self.userIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetScheduleRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["UserIds"] as? [String] {
            self.userIds = value
        }
    }
}

public class GetScheduleShrinkRequest : Tea.TeaModel {
    public var endTime: String?

    public var startTime: String?

    public var tenantContextShrink: String?

    public var userIdsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.userIdsShrink != nil {
            map["UserIds"] = self.userIdsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["UserIds"] as? String {
            self.userIdsShrink = value
        }
    }
}

public class GetScheduleResponseBody : Tea.TeaModel {
    public class ScheduleInformation : Tea.TeaModel {
        public class ScheduleItems : Tea.TeaModel {
            public class End : Tea.TeaModel {
                public var date: String?

                public var dateTime: String?

                public var timeZone: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.date != nil {
                        map["Date"] = self.date!
                    }
                    if self.dateTime != nil {
                        map["DateTime"] = self.dateTime!
                    }
                    if self.timeZone != nil {
                        map["TimeZone"] = self.timeZone!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Date"] as? String {
                        self.date = value
                    }
                    if let value = dict["DateTime"] as? String {
                        self.dateTime = value
                    }
                    if let value = dict["TimeZone"] as? String {
                        self.timeZone = value
                    }
                }
            }
            public class Start : Tea.TeaModel {
                public var date: String?

                public var dateTime: String?

                public var timeZone: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.date != nil {
                        map["Date"] = self.date!
                    }
                    if self.dateTime != nil {
                        map["DateTime"] = self.dateTime!
                    }
                    if self.timeZone != nil {
                        map["TimeZone"] = self.timeZone!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Date"] as? String {
                        self.date = value
                    }
                    if let value = dict["DateTime"] as? String {
                        self.dateTime = value
                    }
                    if let value = dict["TimeZone"] as? String {
                        self.timeZone = value
                    }
                }
            }
            public var end: GetScheduleResponseBody.ScheduleInformation.ScheduleItems.End?

            public var start: GetScheduleResponseBody.ScheduleInformation.ScheduleItems.Start?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.end?.validate()
                try self.start?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.end != nil {
                    map["End"] = self.end?.toMap()
                }
                if self.start != nil {
                    map["Start"] = self.start?.toMap()
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["End"] as? [String: Any?] {
                    var model = GetScheduleResponseBody.ScheduleInformation.ScheduleItems.End()
                    model.fromMap(value)
                    self.end = model
                }
                if let value = dict["Start"] as? [String: Any?] {
                    var model = GetScheduleResponseBody.ScheduleInformation.ScheduleItems.Start()
                    model.fromMap(value)
                    self.start = model
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var error: String?

        public var scheduleItems: [GetScheduleResponseBody.ScheduleInformation.ScheduleItems]?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.error != nil {
                map["Error"] = self.error!
            }
            if self.scheduleItems != nil {
                var tmp : [Any] = []
                for k in self.scheduleItems! {
                    tmp.append(k.toMap())
                }
                map["ScheduleItems"] = tmp
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Error"] as? String {
                self.error = value
            }
            if let value = dict["ScheduleItems"] as? [Any?] {
                var tmp : [GetScheduleResponseBody.ScheduleInformation.ScheduleItems] = []
                for v in value {
                    if v != nil {
                        var model = GetScheduleResponseBody.ScheduleInformation.ScheduleItems()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.scheduleItems = tmp
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var requestId: String?

    public var scheduleInformation: [GetScheduleResponseBody.ScheduleInformation]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.scheduleInformation != nil {
            var tmp : [Any] = []
            for k in self.scheduleInformation! {
                tmp.append(k.toMap())
            }
            map["scheduleInformation"] = tmp
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["scheduleInformation"] as? [Any?] {
            var tmp : [GetScheduleResponseBody.ScheduleInformation] = []
            for v in value {
                if v != nil {
                    var model = GetScheduleResponseBody.ScheduleInformation()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.scheduleInformation = tmp
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetScheduleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetScheduleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetScheduleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSheetHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetSheetHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetSheetHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetSheetShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetSheetRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var sheetId: String?

    public var tenantContext: GetSheetRequest.TenantContext?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetSheetRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class GetSheetShrinkRequest : Tea.TeaModel {
    public var sheetId: String?

    public var tenantContextShrink: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class GetSheetResponseBody : Tea.TeaModel {
    public var columnCount: Int64?

    public var id: String?

    public var lastNonEmptyColumn: Int64?

    public var lastNonEmptyRow: Int64?

    public var name: String?

    public var requestId: String?

    public var rowCount: Int64?

    public var visibility: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.columnCount != nil {
            map["columnCount"] = self.columnCount!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.lastNonEmptyColumn != nil {
            map["lastNonEmptyColumn"] = self.lastNonEmptyColumn!
        }
        if self.lastNonEmptyRow != nil {
            map["lastNonEmptyRow"] = self.lastNonEmptyRow!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.rowCount != nil {
            map["rowCount"] = self.rowCount!
        }
        if self.visibility != nil {
            map["visibility"] = self.visibility!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["columnCount"] as? Int64 {
            self.columnCount = value
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["lastNonEmptyColumn"] as? Int64 {
            self.lastNonEmptyColumn = value
        }
        if let value = dict["lastNonEmptyRow"] as? Int64 {
            self.lastNonEmptyRow = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["rowCount"] as? Int64 {
            self.rowCount = value
        }
        if let value = dict["visibility"] as? String {
            self.visibility = value
        }
    }
}

public class GetSheetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSheetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSheetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSheetContentJobIdHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetSheetContentJobIdHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetSheetContentJobIdHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetSheetContentJobIdShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetSheetContentJobIdRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dentryUuid: String?

    public var exportType: String?

    public var tenantContext: GetSheetContentJobIdRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.exportType != nil {
            map["ExportType"] = self.exportType!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["ExportType"] as? String {
            self.exportType = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetSheetContentJobIdRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetSheetContentJobIdShrinkRequest : Tea.TeaModel {
    public var dentryUuid: String?

    public var exportType: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.exportType != nil {
            map["ExportType"] = self.exportType!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["ExportType"] as? String {
            self.exportType = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetSheetContentJobIdResponseBody : Tea.TeaModel {
    public var jobId: String?

    public var requestId: String?

    public var status: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobId != nil {
            map["jobId"] = self.jobId!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["jobId"] as? String {
            self.jobId = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetSheetContentJobIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSheetContentJobIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSheetContentJobIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSpaceDirectoriesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetSpaceDirectoriesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetSpaceDirectoriesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetSpaceDirectoriesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetSpaceDirectoriesRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dentryId: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var spaceId: String?

    public var tenantContext: GetSpaceDirectoriesRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryId != nil {
            map["DentryId"] = self.dentryId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetSpaceDirectoriesRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetSpaceDirectoriesShrinkRequest : Tea.TeaModel {
    public var dentryId: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var spaceId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryId != nil {
            map["DentryId"] = self.dentryId!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetSpaceDirectoriesResponseBody : Tea.TeaModel {
    public class Children : Tea.TeaModel {
        public class Creator : Tea.TeaModel {
            public var name: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class LinkSourceInfo : Tea.TeaModel {
            public class IconUrl : Tea.TeaModel {
                public var line: String?

                public var small: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.line != nil {
                        map["Line"] = self.line!
                    }
                    if self.small != nil {
                        map["Small"] = self.small!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Line"] as? String {
                        self.line = value
                    }
                    if let value = dict["Small"] as? String {
                        self.small = value
                    }
                }
            }
            public var extension_: String?

            public var iconUrl: GetSpaceDirectoriesResponseBody.Children.LinkSourceInfo.IconUrl?

            public var id: String?

            public var linkType: Int64?

            public var spaceId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.iconUrl?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.iconUrl != nil {
                    map["IconUrl"] = self.iconUrl?.toMap()
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.linkType != nil {
                    map["LinkType"] = self.linkType!
                }
                if self.spaceId != nil {
                    map["SpaceId"] = self.spaceId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["IconUrl"] as? [String: Any?] {
                    var model = GetSpaceDirectoriesResponseBody.Children.LinkSourceInfo.IconUrl()
                    model.fromMap(value)
                    self.iconUrl = model
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["LinkType"] as? Int64 {
                    self.linkType = value
                }
                if let value = dict["SpaceId"] as? String {
                    self.spaceId = value
                }
            }
        }
        public class Space : Tea.TeaModel {
            public class HdIconVO : Tea.TeaModel {
                public var icon: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.icon != nil {
                        map["Icon"] = self.icon!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Icon"] as? String {
                        self.icon = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class IconVO : Tea.TeaModel {
                public var icon: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.icon != nil {
                        map["Icon"] = self.icon!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Icon"] as? String {
                        self.icon = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class Owner : Tea.TeaModel {
                public var name: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public class VisitorInfo : Tea.TeaModel {
                public var dentryActions: [String]?

                public var roleCode: String?

                public var spaceActions: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dentryActions != nil {
                        map["DentryActions"] = self.dentryActions!
                    }
                    if self.roleCode != nil {
                        map["RoleCode"] = self.roleCode!
                    }
                    if self.spaceActions != nil {
                        map["SpaceActions"] = self.spaceActions!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DentryActions"] as? [String] {
                        self.dentryActions = value
                    }
                    if let value = dict["RoleCode"] as? String {
                        self.roleCode = value
                    }
                    if let value = dict["SpaceActions"] as? [String] {
                        self.spaceActions = value
                    }
                }
            }
            public var cover: String?

            public var description_: String?

            public var hdIconVO: GetSpaceDirectoriesResponseBody.Children.Space.HdIconVO?

            public var iconVO: GetSpaceDirectoriesResponseBody.Children.Space.IconVO?

            public var id: String?

            public var name: String?

            public var owner: GetSpaceDirectoriesResponseBody.Children.Space.Owner?

            public var recentList: [Any]?

            public var type: Int32?

            public var url: String?

            public var visitorInfo: GetSpaceDirectoriesResponseBody.Children.Space.VisitorInfo?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.hdIconVO?.validate()
                try self.iconVO?.validate()
                try self.owner?.validate()
                try self.visitorInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cover != nil {
                    map["Cover"] = self.cover!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.hdIconVO != nil {
                    map["HdIconVO"] = self.hdIconVO?.toMap()
                }
                if self.iconVO != nil {
                    map["IconVO"] = self.iconVO?.toMap()
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.owner != nil {
                    map["Owner"] = self.owner?.toMap()
                }
                if self.recentList != nil {
                    map["RecentList"] = self.recentList!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                if self.visitorInfo != nil {
                    map["VisitorInfo"] = self.visitorInfo?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Cover"] as? String {
                    self.cover = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["HdIconVO"] as? [String: Any?] {
                    var model = GetSpaceDirectoriesResponseBody.Children.Space.HdIconVO()
                    model.fromMap(value)
                    self.hdIconVO = model
                }
                if let value = dict["IconVO"] as? [String: Any?] {
                    var model = GetSpaceDirectoriesResponseBody.Children.Space.IconVO()
                    model.fromMap(value)
                    self.iconVO = model
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Owner"] as? [String: Any?] {
                    var model = GetSpaceDirectoriesResponseBody.Children.Space.Owner()
                    model.fromMap(value)
                    self.owner = model
                }
                if let value = dict["RecentList"] as? [Any] {
                    self.recentList = value
                }
                if let value = dict["Type"] as? Int32 {
                    self.type = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
                if let value = dict["VisitorInfo"] as? [String: Any?] {
                    var model = GetSpaceDirectoriesResponseBody.Children.Space.VisitorInfo()
                    model.fromMap(value)
                    self.visitorInfo = model
                }
            }
        }
        public class StatisticalInfo : Tea.TeaModel {
            public var wordCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.wordCount != nil {
                    map["WordCount"] = self.wordCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["WordCount"] as? Int64 {
                    self.wordCount = value
                }
            }
        }
        public class Updater : Tea.TeaModel {
            public var name: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class VisitorInfo : Tea.TeaModel {
            public var dentryActions: [String]?

            public var roleCode: String?

            public var spaceActions: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dentryActions != nil {
                    map["DentryActions"] = self.dentryActions!
                }
                if self.roleCode != nil {
                    map["RoleCode"] = self.roleCode!
                }
                if self.spaceActions != nil {
                    map["SpaceActions"] = self.spaceActions!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DentryActions"] as? [String] {
                    self.dentryActions = value
                }
                if let value = dict["RoleCode"] as? String {
                    self.roleCode = value
                }
                if let value = dict["SpaceActions"] as? [String] {
                    self.spaceActions = value
                }
            }
        }
        public var contentType: String?

        public var createdTime: Int64?

        public var creator: GetSpaceDirectoriesResponseBody.Children.Creator?

        public var dentryId: String?

        public var dentryType: String?

        public var dentryUuid: String?

        public var docKey: String?

        public var extension_: String?

        public var hasChildren: Bool?

        public var linkSourceInfo: GetSpaceDirectoriesResponseBody.Children.LinkSourceInfo?

        public var name: String?

        public var path: String?

        public var space: GetSpaceDirectoriesResponseBody.Children.Space?

        public var spaceId: String?

        public var statisticalInfo: GetSpaceDirectoriesResponseBody.Children.StatisticalInfo?

        public var updatedTime: Int64?

        public var updater: GetSpaceDirectoriesResponseBody.Children.Updater?

        public var url: String?

        public var visitorInfo: GetSpaceDirectoriesResponseBody.Children.VisitorInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.creator?.validate()
            try self.linkSourceInfo?.validate()
            try self.space?.validate()
            try self.statisticalInfo?.validate()
            try self.updater?.validate()
            try self.visitorInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contentType != nil {
                map["ContentType"] = self.contentType!
            }
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.creator != nil {
                map["Creator"] = self.creator?.toMap()
            }
            if self.dentryId != nil {
                map["DentryId"] = self.dentryId!
            }
            if self.dentryType != nil {
                map["DentryType"] = self.dentryType!
            }
            if self.dentryUuid != nil {
                map["DentryUuid"] = self.dentryUuid!
            }
            if self.docKey != nil {
                map["DocKey"] = self.docKey!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.hasChildren != nil {
                map["HasChildren"] = self.hasChildren!
            }
            if self.linkSourceInfo != nil {
                map["LinkSourceInfo"] = self.linkSourceInfo?.toMap()
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.path != nil {
                map["Path"] = self.path!
            }
            if self.space != nil {
                map["Space"] = self.space?.toMap()
            }
            if self.spaceId != nil {
                map["SpaceId"] = self.spaceId!
            }
            if self.statisticalInfo != nil {
                map["StatisticalInfo"] = self.statisticalInfo?.toMap()
            }
            if self.updatedTime != nil {
                map["UpdatedTime"] = self.updatedTime!
            }
            if self.updater != nil {
                map["Updater"] = self.updater?.toMap()
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.visitorInfo != nil {
                map["VisitorInfo"] = self.visitorInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContentType"] as? String {
                self.contentType = value
            }
            if let value = dict["CreatedTime"] as? Int64 {
                self.createdTime = value
            }
            if let value = dict["Creator"] as? [String: Any?] {
                var model = GetSpaceDirectoriesResponseBody.Children.Creator()
                model.fromMap(value)
                self.creator = model
            }
            if let value = dict["DentryId"] as? String {
                self.dentryId = value
            }
            if let value = dict["DentryType"] as? String {
                self.dentryType = value
            }
            if let value = dict["DentryUuid"] as? String {
                self.dentryUuid = value
            }
            if let value = dict["DocKey"] as? String {
                self.docKey = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["HasChildren"] as? Bool {
                self.hasChildren = value
            }
            if let value = dict["LinkSourceInfo"] as? [String: Any?] {
                var model = GetSpaceDirectoriesResponseBody.Children.LinkSourceInfo()
                model.fromMap(value)
                self.linkSourceInfo = model
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Path"] as? String {
                self.path = value
            }
            if let value = dict["Space"] as? [String: Any?] {
                var model = GetSpaceDirectoriesResponseBody.Children.Space()
                model.fromMap(value)
                self.space = model
            }
            if let value = dict["SpaceId"] as? String {
                self.spaceId = value
            }
            if let value = dict["StatisticalInfo"] as? [String: Any?] {
                var model = GetSpaceDirectoriesResponseBody.Children.StatisticalInfo()
                model.fromMap(value)
                self.statisticalInfo = model
            }
            if let value = dict["UpdatedTime"] as? Int64 {
                self.updatedTime = value
            }
            if let value = dict["Updater"] as? [String: Any?] {
                var model = GetSpaceDirectoriesResponseBody.Children.Updater()
                model.fromMap(value)
                self.updater = model
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["VisitorInfo"] as? [String: Any?] {
                var model = GetSpaceDirectoriesResponseBody.Children.VisitorInfo()
                model.fromMap(value)
                self.visitorInfo = model
            }
        }
    }
    public var children: [GetSpaceDirectoriesResponseBody.Children]?

    public var hasMore: Bool?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.children != nil {
            var tmp : [Any] = []
            for k in self.children! {
                tmp.append(k.toMap())
            }
            map["children"] = tmp
        }
        if self.hasMore != nil {
            map["hasMore"] = self.hasMore!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["children"] as? [Any?] {
            var tmp : [GetSpaceDirectoriesResponseBody.Children] = []
            for v in value {
                if v != nil {
                    var model = GetSpaceDirectoriesResponseBody.Children()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.children = tmp
        }
        if let value = dict["hasMore"] as? Bool {
            self.hasMore = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetSpaceDirectoriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSpaceDirectoriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSpaceDirectoriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSubscribedCalendarHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetSubscribedCalendarHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetSubscribedCalendarHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetSubscribedCalendarShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetSubscribedCalendarRequest : Tea.TeaModel {
    public var calendarId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
    }
}

public class GetSubscribedCalendarResponseBody : Tea.TeaModel {
    public class SubscribeScope : Tea.TeaModel {
        public var corpIds: [String]?

        public var openConversationIds: [String]?

        public var userIds: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpIds != nil {
                map["CorpIds"] = self.corpIds!
            }
            if self.openConversationIds != nil {
                map["OpenConversationIds"] = self.openConversationIds!
            }
            if self.userIds != nil {
                map["UserIds"] = self.userIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpIds"] as? [String] {
                self.corpIds = value
            }
            if let value = dict["OpenConversationIds"] as? [String] {
                self.openConversationIds = value
            }
            if let value = dict["UserIds"] as? [String] {
                self.userIds = value
            }
        }
    }
    public var author: String?

    public var calendarId: String?

    public var description_: String?

    public var managers: [String]?

    public var name: String?

    public var requestId: String?

    public var subscribeScope: GetSubscribedCalendarResponseBody.SubscribeScope?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.subscribeScope?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.author != nil {
            map["author"] = self.author!
        }
        if self.calendarId != nil {
            map["calendarId"] = self.calendarId!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.managers != nil {
            map["managers"] = self.managers!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.subscribeScope != nil {
            map["subscribeScope"] = self.subscribeScope?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["author"] as? String {
            self.author = value
        }
        if let value = dict["calendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["managers"] as? [String] {
            self.managers = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["subscribeScope"] as? [String: Any?] {
            var model = GetSubscribedCalendarResponseBody.SubscribeScope()
            model.fromMap(value)
            self.subscribeScope = model
        }
    }
}

public class GetSubscribedCalendarResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSubscribedCalendarResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSubscribedCalendarResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTaskCopiesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetTaskCopiesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetTaskCopiesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetTaskCopiesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetTaskCopiesRequest : Tea.TeaModel {
    public var appType: String?

    public var createFromTimeGMT: Int64?

    public var createToTimeGMT: Int64?

    public var keyword: String?

    public var language: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var processCodes: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.createFromTimeGMT != nil {
            map["CreateFromTimeGMT"] = self.createFromTimeGMT!
        }
        if self.createToTimeGMT != nil {
            map["CreateToTimeGMT"] = self.createToTimeGMT!
        }
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.processCodes != nil {
            map["ProcessCodes"] = self.processCodes!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["CreateFromTimeGMT"] as? Int64 {
            self.createFromTimeGMT = value
        }
        if let value = dict["CreateToTimeGMT"] as? Int64 {
            self.createToTimeGMT = value
        }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProcessCodes"] as? String {
            self.processCodes = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class GetTaskCopiesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CurrentActivityInstances : Tea.TeaModel {
            public var activityId: String?

            public var activityInstanceStatus: String?

            public var activityName: String?

            public var activityNameInEnglish: String?

            public var id: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.activityId != nil {
                    map["ActivityId"] = self.activityId!
                }
                if self.activityInstanceStatus != nil {
                    map["ActivityInstanceStatus"] = self.activityInstanceStatus!
                }
                if self.activityName != nil {
                    map["ActivityName"] = self.activityName!
                }
                if self.activityNameInEnglish != nil {
                    map["ActivityNameInEnglish"] = self.activityNameInEnglish!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ActivityId"] as? String {
                    self.activityId = value
                }
                if let value = dict["ActivityInstanceStatus"] as? String {
                    self.activityInstanceStatus = value
                }
                if let value = dict["ActivityName"] as? String {
                    self.activityName = value
                }
                if let value = dict["ActivityNameInEnglish"] as? String {
                    self.activityNameInEnglish = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
            }
        }
        public var actionExecutorId: [String]?

        public var actionExecutorName: [String]?

        public var appType: String?

        public var carbonActivityId: String?

        public var createTimeGMT: String?

        public var currentActivityInstances: [GetTaskCopiesResponseBody.Data.CurrentActivityInstances]?

        public var dataMap: [String: Any]?

        public var dataType: String?

        public var finishTimeGMT: String?

        public var formInstanceId: String?

        public var formUuid: String?

        public var instanceValue: String?

        public var modifiedTimeGMT: String?

        public var originatorAvatar: String?

        public var originatorDisplayName: String?

        public var originatorId: String?

        public var processApprovedResult: String?

        public var processApprovedResultText: String?

        public var processCode: String?

        public var processId: Int64?

        public var processInstanceId: String?

        public var processInstanceStatus: String?

        public var processInstanceStatusText: String?

        public var processName: String?

        public var serialNumber: String?

        public var title: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actionExecutorId != nil {
                map["ActionExecutorId"] = self.actionExecutorId!
            }
            if self.actionExecutorName != nil {
                map["ActionExecutorName"] = self.actionExecutorName!
            }
            if self.appType != nil {
                map["AppType"] = self.appType!
            }
            if self.carbonActivityId != nil {
                map["CarbonActivityId"] = self.carbonActivityId!
            }
            if self.createTimeGMT != nil {
                map["CreateTimeGMT"] = self.createTimeGMT!
            }
            if self.currentActivityInstances != nil {
                var tmp : [Any] = []
                for k in self.currentActivityInstances! {
                    tmp.append(k.toMap())
                }
                map["CurrentActivityInstances"] = tmp
            }
            if self.dataMap != nil {
                map["DataMap"] = self.dataMap!
            }
            if self.dataType != nil {
                map["DataType"] = self.dataType!
            }
            if self.finishTimeGMT != nil {
                map["FinishTimeGMT"] = self.finishTimeGMT!
            }
            if self.formInstanceId != nil {
                map["FormInstanceId"] = self.formInstanceId!
            }
            if self.formUuid != nil {
                map["FormUuid"] = self.formUuid!
            }
            if self.instanceValue != nil {
                map["InstanceValue"] = self.instanceValue!
            }
            if self.modifiedTimeGMT != nil {
                map["ModifiedTimeGMT"] = self.modifiedTimeGMT!
            }
            if self.originatorAvatar != nil {
                map["OriginatorAvatar"] = self.originatorAvatar!
            }
            if self.originatorDisplayName != nil {
                map["OriginatorDisplayName"] = self.originatorDisplayName!
            }
            if self.originatorId != nil {
                map["OriginatorId"] = self.originatorId!
            }
            if self.processApprovedResult != nil {
                map["ProcessApprovedResult"] = self.processApprovedResult!
            }
            if self.processApprovedResultText != nil {
                map["ProcessApprovedResultText"] = self.processApprovedResultText!
            }
            if self.processCode != nil {
                map["ProcessCode"] = self.processCode!
            }
            if self.processId != nil {
                map["ProcessId"] = self.processId!
            }
            if self.processInstanceId != nil {
                map["ProcessInstanceId"] = self.processInstanceId!
            }
            if self.processInstanceStatus != nil {
                map["ProcessInstanceStatus"] = self.processInstanceStatus!
            }
            if self.processInstanceStatusText != nil {
                map["ProcessInstanceStatusText"] = self.processInstanceStatusText!
            }
            if self.processName != nil {
                map["ProcessName"] = self.processName!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActionExecutorId"] as? [String] {
                self.actionExecutorId = value
            }
            if let value = dict["ActionExecutorName"] as? [String] {
                self.actionExecutorName = value
            }
            if let value = dict["AppType"] as? String {
                self.appType = value
            }
            if let value = dict["CarbonActivityId"] as? String {
                self.carbonActivityId = value
            }
            if let value = dict["CreateTimeGMT"] as? String {
                self.createTimeGMT = value
            }
            if let value = dict["CurrentActivityInstances"] as? [Any?] {
                var tmp : [GetTaskCopiesResponseBody.Data.CurrentActivityInstances] = []
                for v in value {
                    if v != nil {
                        var model = GetTaskCopiesResponseBody.Data.CurrentActivityInstances()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.currentActivityInstances = tmp
            }
            if let value = dict["DataMap"] as? [String: Any] {
                self.dataMap = value
            }
            if let value = dict["DataType"] as? String {
                self.dataType = value
            }
            if let value = dict["FinishTimeGMT"] as? String {
                self.finishTimeGMT = value
            }
            if let value = dict["FormInstanceId"] as? String {
                self.formInstanceId = value
            }
            if let value = dict["FormUuid"] as? String {
                self.formUuid = value
            }
            if let value = dict["InstanceValue"] as? String {
                self.instanceValue = value
            }
            if let value = dict["ModifiedTimeGMT"] as? String {
                self.modifiedTimeGMT = value
            }
            if let value = dict["OriginatorAvatar"] as? String {
                self.originatorAvatar = value
            }
            if let value = dict["OriginatorDisplayName"] as? String {
                self.originatorDisplayName = value
            }
            if let value = dict["OriginatorId"] as? String {
                self.originatorId = value
            }
            if let value = dict["ProcessApprovedResult"] as? String {
                self.processApprovedResult = value
            }
            if let value = dict["ProcessApprovedResultText"] as? String {
                self.processApprovedResultText = value
            }
            if let value = dict["ProcessCode"] as? String {
                self.processCode = value
            }
            if let value = dict["ProcessId"] as? Int64 {
                self.processId = value
            }
            if let value = dict["ProcessInstanceId"] as? String {
                self.processInstanceId = value
            }
            if let value = dict["ProcessInstanceStatus"] as? String {
                self.processInstanceStatus = value
            }
            if let value = dict["ProcessInstanceStatusText"] as? String {
                self.processInstanceStatusText = value
            }
            if let value = dict["ProcessName"] as? String {
                self.processName = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var data: [GetTaskCopiesResponseBody.Data]?

    public var pageNumber: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["data"] = tmp
        }
        if self.pageNumber != nil {
            map["pageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? [Any?] {
            var tmp : [GetTaskCopiesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetTaskCopiesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["pageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetTaskCopiesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTaskCopiesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTaskCopiesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTemplateListByUserIdHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetTemplateListByUserIdHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetTemplateListByUserIdHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetTemplateListByUserIdShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetTemplateListByUserIdRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var offset: Int64?

    public var size: Int64?

    public var tenantContext: GetTemplateListByUserIdRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.offset != nil {
            map["Offset"] = self.offset!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Offset"] as? Int64 {
            self.offset = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetTemplateListByUserIdRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetTemplateListByUserIdShrinkRequest : Tea.TeaModel {
    public var offset: Int64?

    public var size: Int64?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.offset != nil {
            map["Offset"] = self.offset!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Offset"] as? Int64 {
            self.offset = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetTemplateListByUserIdResponseBody : Tea.TeaModel {
    public class TemplateList : Tea.TeaModel {
        public var iconUrl: String?

        public var name: String?

        public var reportCode: String?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.iconUrl != nil {
                map["IconUrl"] = self.iconUrl!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.reportCode != nil {
                map["ReportCode"] = self.reportCode!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IconUrl"] as? String {
                self.iconUrl = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ReportCode"] as? String {
                self.reportCode = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var nextCursor: Int64?

    public var requestId: String?

    public var templateList: [GetTemplateListByUserIdResponseBody.TemplateList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextCursor != nil {
            map["nextCursor"] = self.nextCursor!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.templateList != nil {
            var tmp : [Any] = []
            for k in self.templateList! {
                tmp.append(k.toMap())
            }
            map["templateList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["nextCursor"] as? Int64 {
            self.nextCursor = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["templateList"] as? [Any?] {
            var tmp : [GetTemplateListByUserIdResponseBody.TemplateList] = []
            for v in value {
                if v != nil {
                    var model = GetTemplateListByUserIdResponseBody.TemplateList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.templateList = tmp
        }
    }
}

public class GetTemplateListByUserIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTemplateListByUserIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTemplateListByUserIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTicketHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetTicketHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetTicketHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetTicketShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetTicketRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var openTeamId: String?

    public var openTicketId: String?

    public var tenantContext: GetTicketRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTicketId != nil {
            map["OpenTicketId"] = self.openTicketId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetTicketRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetTicketShrinkRequest : Tea.TeaModel {
    public var openTeamId: String?

    public var openTicketId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTicketId != nil {
            map["OpenTicketId"] = self.openTicketId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetTicketResponseBody : Tea.TeaModel {
    public class Creator : Tea.TeaModel {
        public var nickName: String?

        public var unionId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nickName != nil {
                map["NickName"] = self.nickName!
            }
            if self.unionId != nil {
                map["UnionId"] = self.unionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NickName"] as? String {
                self.nickName = value
            }
            if let value = dict["UnionId"] as? String {
                self.unionId = value
            }
        }
    }
    public class Processor : Tea.TeaModel {
        public var nickName: String?

        public var unionId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nickName != nil {
                map["NickName"] = self.nickName!
            }
            if self.unionId != nil {
                map["UnionId"] = self.unionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NickName"] as? String {
                self.nickName = value
            }
            if let value = dict["UnionId"] as? String {
                self.unionId = value
            }
        }
    }
    public class Takers : Tea.TeaModel {
        public var nickName: String?

        public var unionId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nickName != nil {
                map["NickName"] = self.nickName!
            }
            if self.unionId != nil {
                map["UnionId"] = self.unionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NickName"] as? String {
                self.nickName = value
            }
            if let value = dict["UnionId"] as? String {
                self.unionId = value
            }
        }
    }
    public class Template : Tea.TeaModel {
        public var openTemplateBizId: String?

        public var openTemplateId: String?

        public var templateName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.openTemplateBizId != nil {
                map["OpenTemplateBizId"] = self.openTemplateBizId!
            }
            if self.openTemplateId != nil {
                map["OpenTemplateId"] = self.openTemplateId!
            }
            if self.templateName != nil {
                map["TemplateName"] = self.templateName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OpenTemplateBizId"] as? String {
                self.openTemplateBizId = value
            }
            if let value = dict["OpenTemplateId"] as? String {
                self.openTemplateId = value
            }
            if let value = dict["TemplateName"] as? String {
                self.templateName = value
            }
        }
    }
    public var createTime: String?

    public var creator: GetTicketResponseBody.Creator?

    public var customFields: String?

    public var openConversationId: String?

    public var openTicketId: String?

    public var processor: GetTicketResponseBody.Processor?

    public var requestId: String?

    public var scene: String?

    public var sceneContext: String?

    public var stage: String?

    public var takers: [GetTicketResponseBody.Takers]?

    public var template: GetTicketResponseBody.Template?

    public var title: String?

    public var updateTime: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.creator?.validate()
        try self.processor?.validate()
        try self.template?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTime != nil {
            map["createTime"] = self.createTime!
        }
        if self.creator != nil {
            map["creator"] = self.creator?.toMap()
        }
        if self.customFields != nil {
            map["customFields"] = self.customFields!
        }
        if self.openConversationId != nil {
            map["openConversationId"] = self.openConversationId!
        }
        if self.openTicketId != nil {
            map["openTicketId"] = self.openTicketId!
        }
        if self.processor != nil {
            map["processor"] = self.processor?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.scene != nil {
            map["scene"] = self.scene!
        }
        if self.sceneContext != nil {
            map["sceneContext"] = self.sceneContext!
        }
        if self.stage != nil {
            map["stage"] = self.stage!
        }
        if self.takers != nil {
            var tmp : [Any] = []
            for k in self.takers! {
                tmp.append(k.toMap())
            }
            map["takers"] = tmp
        }
        if self.template != nil {
            map["template"] = self.template?.toMap()
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.updateTime != nil {
            map["updateTime"] = self.updateTime!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["createTime"] as? String {
            self.createTime = value
        }
        if let value = dict["creator"] as? [String: Any?] {
            var model = GetTicketResponseBody.Creator()
            model.fromMap(value)
            self.creator = model
        }
        if let value = dict["customFields"] as? String {
            self.customFields = value
        }
        if let value = dict["openConversationId"] as? String {
            self.openConversationId = value
        }
        if let value = dict["openTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["processor"] as? [String: Any?] {
            var model = GetTicketResponseBody.Processor()
            model.fromMap(value)
            self.processor = model
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["scene"] as? String {
            self.scene = value
        }
        if let value = dict["sceneContext"] as? String {
            self.sceneContext = value
        }
        if let value = dict["stage"] as? String {
            self.stage = value
        }
        if let value = dict["takers"] as? [Any?] {
            var tmp : [GetTicketResponseBody.Takers] = []
            for v in value {
                if v != nil {
                    var model = GetTicketResponseBody.Takers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.takers = tmp
        }
        if let value = dict["template"] as? [String: Any?] {
            var model = GetTicketResponseBody.Template()
            model.fromMap(value)
            self.template = model
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
        if let value = dict["updateTime"] as? String {
            self.updateTime = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTodoTaskHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetTodoTaskHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetTodoTaskHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetTodoTaskShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetTodoTaskRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var taskId: String?

    public var tenantContext: GetTodoTaskRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetTodoTaskRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetTodoTaskShrinkRequest : Tea.TeaModel {
    public var taskId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetTodoTaskResponseBody : Tea.TeaModel {
    public class DetailUrl : Tea.TeaModel {
        public var appUrl: String?

        public var pcUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appUrl != nil {
                map["AppUrl"] = self.appUrl!
            }
            if self.pcUrl != nil {
                map["PcUrl"] = self.pcUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppUrl"] as? String {
                self.appUrl = value
            }
            if let value = dict["PcUrl"] as? String {
                self.pcUrl = value
            }
        }
    }
    public var bizTag: String?

    public var cardTypeId: String?

    public var createdTime: Int64?

    public var creatorId: String?

    public var description_: String?

    public var detailUrl: GetTodoTaskResponseBody.DetailUrl?

    public var done: Bool?

    public var dueTime: Int64?

    public var executorIds: [String]?

    public var finishTime: Int64?

    public var id: String?

    public var isOnlyShowExecutor: Bool?

    public var modifiedTime: Int64?

    public var modifierId: String?

    public var participantIds: [String]?

    public var priority: Int32?

    public var requestId: String?

    public var source: String?

    public var sourceId: String?

    public var startTime: Int64?

    public var subject: String?

    public var tenantId: String?

    public var tenantType: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.detailUrl?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizTag != nil {
            map["bizTag"] = self.bizTag!
        }
        if self.cardTypeId != nil {
            map["cardTypeId"] = self.cardTypeId!
        }
        if self.createdTime != nil {
            map["createdTime"] = self.createdTime!
        }
        if self.creatorId != nil {
            map["creatorId"] = self.creatorId!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.detailUrl != nil {
            map["detailUrl"] = self.detailUrl?.toMap()
        }
        if self.done != nil {
            map["done"] = self.done!
        }
        if self.dueTime != nil {
            map["dueTime"] = self.dueTime!
        }
        if self.executorIds != nil {
            map["executorIds"] = self.executorIds!
        }
        if self.finishTime != nil {
            map["finishTime"] = self.finishTime!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.isOnlyShowExecutor != nil {
            map["isOnlyShowExecutor"] = self.isOnlyShowExecutor!
        }
        if self.modifiedTime != nil {
            map["modifiedTime"] = self.modifiedTime!
        }
        if self.modifierId != nil {
            map["modifierId"] = self.modifierId!
        }
        if self.participantIds != nil {
            map["participantIds"] = self.participantIds!
        }
        if self.priority != nil {
            map["priority"] = self.priority!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.source != nil {
            map["source"] = self.source!
        }
        if self.sourceId != nil {
            map["sourceId"] = self.sourceId!
        }
        if self.startTime != nil {
            map["startTime"] = self.startTime!
        }
        if self.subject != nil {
            map["subject"] = self.subject!
        }
        if self.tenantId != nil {
            map["tenantId"] = self.tenantId!
        }
        if self.tenantType != nil {
            map["tenantType"] = self.tenantType!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["bizTag"] as? String {
            self.bizTag = value
        }
        if let value = dict["cardTypeId"] as? String {
            self.cardTypeId = value
        }
        if let value = dict["createdTime"] as? Int64 {
            self.createdTime = value
        }
        if let value = dict["creatorId"] as? String {
            self.creatorId = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["detailUrl"] as? [String: Any?] {
            var model = GetTodoTaskResponseBody.DetailUrl()
            model.fromMap(value)
            self.detailUrl = model
        }
        if let value = dict["done"] as? Bool {
            self.done = value
        }
        if let value = dict["dueTime"] as? Int64 {
            self.dueTime = value
        }
        if let value = dict["executorIds"] as? [String] {
            self.executorIds = value
        }
        if let value = dict["finishTime"] as? Int64 {
            self.finishTime = value
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["isOnlyShowExecutor"] as? Bool {
            self.isOnlyShowExecutor = value
        }
        if let value = dict["modifiedTime"] as? Int64 {
            self.modifiedTime = value
        }
        if let value = dict["modifierId"] as? String {
            self.modifierId = value
        }
        if let value = dict["participantIds"] as? [String] {
            self.participantIds = value
        }
        if let value = dict["priority"] as? Int32 {
            self.priority = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["source"] as? String {
            self.source = value
        }
        if let value = dict["sourceId"] as? String {
            self.sourceId = value
        }
        if let value = dict["startTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["subject"] as? String {
            self.subject = value
        }
        if let value = dict["tenantId"] as? String {
            self.tenantId = value
        }
        if let value = dict["tenantType"] as? String {
            self.tenantType = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetTodoTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTodoTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTodoTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUserHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetUserHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetUserHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetUserShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetUserRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: GetUserRequest.TenantContext?

    public var language: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.language != nil {
            map["language"] = self.language!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetUserRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["language"] as? String {
            self.language = value
        }
    }
}

public class GetUserShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var language: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.language != nil {
            map["language"] = self.language!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["language"] as? String {
            self.language = value
        }
    }
}

public class GetUserResponseBody : Tea.TeaModel {
    public class DeptOrderList : Tea.TeaModel {
        public var deptId: Int64?

        public var order: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deptId != nil {
                map["deptId"] = self.deptId!
            }
            if self.order != nil {
                map["order"] = self.order!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["deptId"] as? Int64 {
                self.deptId = value
            }
            if let value = dict["order"] as? Int64 {
                self.order = value
            }
        }
    }
    public class LeaderInDept : Tea.TeaModel {
        public var deptId: Int64?

        public var leader: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deptId != nil {
                map["deptId"] = self.deptId!
            }
            if self.leader != nil {
                map["leader"] = self.leader!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["deptId"] as? Int64 {
                self.deptId = value
            }
            if let value = dict["leader"] as? Bool {
                self.leader = value
            }
        }
    }
    public class RoleList : Tea.TeaModel {
        public var groupName: String?

        public var id: Int64?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.groupName != nil {
                map["groupName"] = self.groupName!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.name != nil {
                map["name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["groupName"] as? String {
                self.groupName = value
            }
            if let value = dict["id"] as? Int64 {
                self.id = value
            }
            if let value = dict["name"] as? String {
                self.name = value
            }
        }
    }
    public class UnionEmpExt : Tea.TeaModel {
        public class UnionEmpMapList : Tea.TeaModel {
            public var cropId: String?

            public var userid: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cropId != nil {
                    map["cropId"] = self.cropId!
                }
                if self.userid != nil {
                    map["userid"] = self.userid!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["cropId"] as? String {
                    self.cropId = value
                }
                if let value = dict["userid"] as? String {
                    self.userid = value
                }
            }
        }
        public var corpId: String?

        public var unionEmpMapList: [GetUserResponseBody.UnionEmpExt.UnionEmpMapList]?

        public var userid: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpId != nil {
                map["corpId"] = self.corpId!
            }
            if self.unionEmpMapList != nil {
                var tmp : [Any] = []
                for k in self.unionEmpMapList! {
                    tmp.append(k.toMap())
                }
                map["unionEmpMapList"] = tmp
            }
            if self.userid != nil {
                map["userid"] = self.userid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["corpId"] as? String {
                self.corpId = value
            }
            if let value = dict["unionEmpMapList"] as? [Any?] {
                var tmp : [GetUserResponseBody.UnionEmpExt.UnionEmpMapList] = []
                for v in value {
                    if v != nil {
                        var model = GetUserResponseBody.UnionEmpExt.UnionEmpMapList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.unionEmpMapList = tmp
            }
            if let value = dict["userid"] as? String {
                self.userid = value
            }
        }
    }
    public var active: Bool?

    public var admin: Bool?

    public var avatar: String?

    public var boss: Bool?

    public var deptIdList: [Int64]?

    public var deptOrderList: [GetUserResponseBody.DeptOrderList]?

    public var email: String?

    public var exclusiveAccount: Bool?

    public var exclusiveAccountCorpId: String?

    public var exclusiveAccountCorpName: String?

    public var exclusiveAccountType: String?

    public var extension_: String?

    public var hideMobile: Bool?

    public var hiredDate: Int64?

    public var jobNumber: String?

    public var leaderInDept: [GetUserResponseBody.LeaderInDept]?

    public var loginId: String?

    public var managerUserid: String?

    public var mobile: String?

    public var name: String?

    public var nickname: String?

    public var orgEmail: String?

    public var realAuthed: Bool?

    public var remark: String?

    public var requestId: String?

    public var roleList: [GetUserResponseBody.RoleList]?

    public var senior: Bool?

    public var stateCode: String?

    public var telephone: String?

    public var title: String?

    public var unionEmpExt: GetUserResponseBody.UnionEmpExt?

    public var unionid: String?

    public var userid: String?

    public var workPlace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.unionEmpExt?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.active != nil {
            map["active"] = self.active!
        }
        if self.admin != nil {
            map["admin"] = self.admin!
        }
        if self.avatar != nil {
            map["avatar"] = self.avatar!
        }
        if self.boss != nil {
            map["boss"] = self.boss!
        }
        if self.deptIdList != nil {
            map["deptIdList"] = self.deptIdList!
        }
        if self.deptOrderList != nil {
            var tmp : [Any] = []
            for k in self.deptOrderList! {
                tmp.append(k.toMap())
            }
            map["deptOrderList"] = tmp
        }
        if self.email != nil {
            map["email"] = self.email!
        }
        if self.exclusiveAccount != nil {
            map["exclusiveAccount"] = self.exclusiveAccount!
        }
        if self.exclusiveAccountCorpId != nil {
            map["exclusiveAccountCorpId"] = self.exclusiveAccountCorpId!
        }
        if self.exclusiveAccountCorpName != nil {
            map["exclusiveAccountCorpName"] = self.exclusiveAccountCorpName!
        }
        if self.exclusiveAccountType != nil {
            map["exclusiveAccountType"] = self.exclusiveAccountType!
        }
        if self.extension_ != nil {
            map["extension"] = self.extension_!
        }
        if self.hideMobile != nil {
            map["hideMobile"] = self.hideMobile!
        }
        if self.hiredDate != nil {
            map["hiredDate"] = self.hiredDate!
        }
        if self.jobNumber != nil {
            map["jobNumber"] = self.jobNumber!
        }
        if self.leaderInDept != nil {
            var tmp : [Any] = []
            for k in self.leaderInDept! {
                tmp.append(k.toMap())
            }
            map["leaderInDept"] = tmp
        }
        if self.loginId != nil {
            map["loginId"] = self.loginId!
        }
        if self.managerUserid != nil {
            map["managerUserid"] = self.managerUserid!
        }
        if self.mobile != nil {
            map["mobile"] = self.mobile!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.nickname != nil {
            map["nickname"] = self.nickname!
        }
        if self.orgEmail != nil {
            map["orgEmail"] = self.orgEmail!
        }
        if self.realAuthed != nil {
            map["realAuthed"] = self.realAuthed!
        }
        if self.remark != nil {
            map["remark"] = self.remark!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.roleList != nil {
            var tmp : [Any] = []
            for k in self.roleList! {
                tmp.append(k.toMap())
            }
            map["roleList"] = tmp
        }
        if self.senior != nil {
            map["senior"] = self.senior!
        }
        if self.stateCode != nil {
            map["stateCode"] = self.stateCode!
        }
        if self.telephone != nil {
            map["telephone"] = self.telephone!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.unionEmpExt != nil {
            map["unionEmpExt"] = self.unionEmpExt?.toMap()
        }
        if self.unionid != nil {
            map["unionid"] = self.unionid!
        }
        if self.userid != nil {
            map["userid"] = self.userid!
        }
        if self.workPlace != nil {
            map["workPlace"] = self.workPlace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["active"] as? Bool {
            self.active = value
        }
        if let value = dict["admin"] as? Bool {
            self.admin = value
        }
        if let value = dict["avatar"] as? String {
            self.avatar = value
        }
        if let value = dict["boss"] as? Bool {
            self.boss = value
        }
        if let value = dict["deptIdList"] as? [Int64] {
            self.deptIdList = value
        }
        if let value = dict["deptOrderList"] as? [Any?] {
            var tmp : [GetUserResponseBody.DeptOrderList] = []
            for v in value {
                if v != nil {
                    var model = GetUserResponseBody.DeptOrderList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.deptOrderList = tmp
        }
        if let value = dict["email"] as? String {
            self.email = value
        }
        if let value = dict["exclusiveAccount"] as? Bool {
            self.exclusiveAccount = value
        }
        if let value = dict["exclusiveAccountCorpId"] as? String {
            self.exclusiveAccountCorpId = value
        }
        if let value = dict["exclusiveAccountCorpName"] as? String {
            self.exclusiveAccountCorpName = value
        }
        if let value = dict["exclusiveAccountType"] as? String {
            self.exclusiveAccountType = value
        }
        if let value = dict["extension"] as? String {
            self.extension_ = value
        }
        if let value = dict["hideMobile"] as? Bool {
            self.hideMobile = value
        }
        if let value = dict["hiredDate"] as? Int64 {
            self.hiredDate = value
        }
        if let value = dict["jobNumber"] as? String {
            self.jobNumber = value
        }
        if let value = dict["leaderInDept"] as? [Any?] {
            var tmp : [GetUserResponseBody.LeaderInDept] = []
            for v in value {
                if v != nil {
                    var model = GetUserResponseBody.LeaderInDept()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.leaderInDept = tmp
        }
        if let value = dict["loginId"] as? String {
            self.loginId = value
        }
        if let value = dict["managerUserid"] as? String {
            self.managerUserid = value
        }
        if let value = dict["mobile"] as? String {
            self.mobile = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["nickname"] as? String {
            self.nickname = value
        }
        if let value = dict["orgEmail"] as? String {
            self.orgEmail = value
        }
        if let value = dict["realAuthed"] as? Bool {
            self.realAuthed = value
        }
        if let value = dict["remark"] as? String {
            self.remark = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["roleList"] as? [Any?] {
            var tmp : [GetUserResponseBody.RoleList] = []
            for v in value {
                if v != nil {
                    var model = GetUserResponseBody.RoleList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.roleList = tmp
        }
        if let value = dict["senior"] as? Bool {
            self.senior = value
        }
        if let value = dict["stateCode"] as? String {
            self.stateCode = value
        }
        if let value = dict["telephone"] as? String {
            self.telephone = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
        if let value = dict["unionEmpExt"] as? [String: Any?] {
            var model = GetUserResponseBody.UnionEmpExt()
            model.fromMap(value)
            self.unionEmpExt = model
        }
        if let value = dict["unionid"] as? String {
            self.unionid = value
        }
        if let value = dict["userid"] as? String {
            self.userid = value
        }
        if let value = dict["workPlace"] as? String {
            self.workPlace = value
        }
    }
}

public class GetUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUserIdHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetUserIdHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetUserIdHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetUserIdShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetUserIdRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: GetUserIdRequest.TenantContext?

    public var unionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.unionId != nil {
            map["UnionId"] = self.unionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetUserIdRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["UnionId"] as? String {
            self.unionId = value
        }
    }
}

public class GetUserIdShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var unionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.unionId != nil {
            map["UnionId"] = self.unionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["UnionId"] as? String {
            self.unionId = value
        }
    }
}

public class GetUserIdResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var userId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetUserIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUserIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUserIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUserIdByOrgIdAndStaffIdHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetUserIdByOrgIdAndStaffIdHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetUserIdByOrgIdAndStaffIdHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetUserIdByOrgIdAndStaffIdShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetUserIdByOrgIdAndStaffIdRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var orgId: Int64?

    public var tenantContext: GetUserIdByOrgIdAndStaffIdRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orgId != nil {
            map["OrgId"] = self.orgId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetUserIdByOrgIdAndStaffIdRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetUserIdByOrgIdAndStaffIdShrinkRequest : Tea.TeaModel {
    public var orgId: Int64?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orgId != nil {
            map["OrgId"] = self.orgId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetUserIdByOrgIdAndStaffIdResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var userId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetUserIdByOrgIdAndStaffIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUserIdByOrgIdAndStaffIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUserIdByOrgIdAndStaffIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUserLatestPlanHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetUserLatestPlanHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetUserLatestPlanHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetUserLatestPlanShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetUserLatestPlanRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: GetUserLatestPlanRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetUserLatestPlanRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class GetUserLatestPlanShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class GetUserLatestPlanResponseBody : Tea.TeaModel {
    public var accountHandleStatus: Int32?

    public var accountHandleTime: String?

    public var accountType: Int32?

    public var agreementFirstSignTime: String?

    public var agreementLastSignTime: String?

    public var agreementStatus: Int32?

    public var dataHandleEndTime: String?

    public var dataHandleStartTime: String?

    public var dataHandleStatus: Int32?

    public var exclusivePlan: Int32?

    public var newAccountUid: Int64?

    public var requestId: String?

    public var status: Int32?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accountHandleStatus != nil {
            map["accountHandleStatus"] = self.accountHandleStatus!
        }
        if self.accountHandleTime != nil {
            map["accountHandleTime"] = self.accountHandleTime!
        }
        if self.accountType != nil {
            map["accountType"] = self.accountType!
        }
        if self.agreementFirstSignTime != nil {
            map["agreementFirstSignTime"] = self.agreementFirstSignTime!
        }
        if self.agreementLastSignTime != nil {
            map["agreementLastSignTime"] = self.agreementLastSignTime!
        }
        if self.agreementStatus != nil {
            map["agreementStatus"] = self.agreementStatus!
        }
        if self.dataHandleEndTime != nil {
            map["dataHandleEndTime"] = self.dataHandleEndTime!
        }
        if self.dataHandleStartTime != nil {
            map["dataHandleStartTime"] = self.dataHandleStartTime!
        }
        if self.dataHandleStatus != nil {
            map["dataHandleStatus"] = self.dataHandleStatus!
        }
        if self.exclusivePlan != nil {
            map["exclusivePlan"] = self.exclusivePlan!
        }
        if self.newAccountUid != nil {
            map["newAccountUid"] = self.newAccountUid!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["accountHandleStatus"] as? Int32 {
            self.accountHandleStatus = value
        }
        if let value = dict["accountHandleTime"] as? String {
            self.accountHandleTime = value
        }
        if let value = dict["accountType"] as? Int32 {
            self.accountType = value
        }
        if let value = dict["agreementFirstSignTime"] as? String {
            self.agreementFirstSignTime = value
        }
        if let value = dict["agreementLastSignTime"] as? String {
            self.agreementLastSignTime = value
        }
        if let value = dict["agreementStatus"] as? Int32 {
            self.agreementStatus = value
        }
        if let value = dict["dataHandleEndTime"] as? String {
            self.dataHandleEndTime = value
        }
        if let value = dict["dataHandleStartTime"] as? String {
            self.dataHandleStartTime = value
        }
        if let value = dict["dataHandleStatus"] as? Int32 {
            self.dataHandleStatus = value
        }
        if let value = dict["exclusivePlan"] as? Int32 {
            self.exclusivePlan = value
        }
        if let value = dict["newAccountUid"] as? Int64 {
            self.newAccountUid = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["status"] as? Int32 {
            self.status = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class GetUserLatestPlanResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUserLatestPlanResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUserLatestPlanResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetWorkspaceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetWorkspaceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetWorkspaceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetWorkspaceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetWorkspaceRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: GetWorkspaceRequest.TenantContext?

    public var withPermissionRole: Bool?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.withPermissionRole != nil {
            map["WithPermissionRole"] = self.withPermissionRole!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetWorkspaceRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WithPermissionRole"] as? Bool {
            self.withPermissionRole = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetWorkspaceShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var withPermissionRole: Bool?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.withPermissionRole != nil {
            map["WithPermissionRole"] = self.withPermissionRole!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WithPermissionRole"] as? Bool {
            self.withPermissionRole = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class GetWorkspaceResponseBody : Tea.TeaModel {
    public class Workspace : Tea.TeaModel {
        public class Icon : Tea.TeaModel {
            public var type: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var corpId: String?

        public var cover: String?

        public var createTime: String?

        public var creatorId: String?

        public var description_: String?

        public var icon: GetWorkspaceResponseBody.Workspace.Icon?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var permissionRole: String?

        public var rootNodeId: String?

        public var teamId: String?

        public var type: String?

        public var url: String?

        public var workspaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.icon?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.cover != nil {
                map["Cover"] = self.cover!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.icon != nil {
                map["Icon"] = self.icon?.toMap()
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.permissionRole != nil {
                map["PermissionRole"] = self.permissionRole!
            }
            if self.rootNodeId != nil {
                map["RootNodeId"] = self.rootNodeId!
            }
            if self.teamId != nil {
                map["TeamId"] = self.teamId!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.workspaceId != nil {
                map["WorkspaceId"] = self.workspaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["Cover"] as? String {
                self.cover = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Icon"] as? [String: Any?] {
                var model = GetWorkspaceResponseBody.Workspace.Icon()
                model.fromMap(value)
                self.icon = model
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PermissionRole"] as? String {
                self.permissionRole = value
            }
            if let value = dict["RootNodeId"] as? String {
                self.rootNodeId = value
            }
            if let value = dict["TeamId"] as? String {
                self.teamId = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["WorkspaceId"] as? String {
                self.workspaceId = value
            }
        }
    }
    public var requestId: String?

    public var workspace: GetWorkspaceResponseBody.Workspace?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.workspace?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.workspace != nil {
            map["workspace"] = self.workspace?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["workspace"] as? [String: Any?] {
            var model = GetWorkspaceResponseBody.Workspace()
            model.fromMap(value)
            self.workspace = model
        }
    }
}

public class GetWorkspaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetWorkspaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetWorkspaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetWorkspacesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GetWorkspacesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GetWorkspacesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GetWorkspacesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GetWorkspacesRequest : Tea.TeaModel {
    public class Option : Tea.TeaModel {
        public var withPermissionRole: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.withPermissionRole != nil {
                map["WithPermissionRole"] = self.withPermissionRole!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["WithPermissionRole"] as? Bool {
                self.withPermissionRole = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var option: GetWorkspacesRequest.Option?

    public var tenantContext: GetWorkspacesRequest.TenantContext?

    public var workspaceIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.option?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.option != nil {
            map["Option"] = self.option?.toMap()
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workspaceIds != nil {
            map["WorkspaceIds"] = self.workspaceIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Option"] as? [String: Any?] {
            var model = GetWorkspacesRequest.Option()
            model.fromMap(value)
            self.option = model
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GetWorkspacesRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkspaceIds"] as? [String] {
            self.workspaceIds = value
        }
    }
}

public class GetWorkspacesShrinkRequest : Tea.TeaModel {
    public var optionShrink: String?

    public var tenantContextShrink: String?

    public var workspaceIdsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.optionShrink != nil {
            map["Option"] = self.optionShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workspaceIdsShrink != nil {
            map["WorkspaceIds"] = self.workspaceIdsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Option"] as? String {
            self.optionShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkspaceIds"] as? String {
            self.workspaceIdsShrink = value
        }
    }
}

public class GetWorkspacesResponseBody : Tea.TeaModel {
    public class Workspace : Tea.TeaModel {
        public class Icon : Tea.TeaModel {
            public var type: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var corpId: String?

        public var cover: String?

        public var createTime: String?

        public var creatorId: String?

        public var description_: String?

        public var icon: GetWorkspacesResponseBody.Workspace.Icon?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var permissionRole: String?

        public var rootNodeId: String?

        public var teamId: String?

        public var type: String?

        public var url: String?

        public var workspaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.icon?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.cover != nil {
                map["Cover"] = self.cover!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.icon != nil {
                map["Icon"] = self.icon?.toMap()
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.permissionRole != nil {
                map["PermissionRole"] = self.permissionRole!
            }
            if self.rootNodeId != nil {
                map["RootNodeId"] = self.rootNodeId!
            }
            if self.teamId != nil {
                map["TeamId"] = self.teamId!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.workspaceId != nil {
                map["WorkspaceId"] = self.workspaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["Cover"] as? String {
                self.cover = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Icon"] as? [String: Any?] {
                var model = GetWorkspacesResponseBody.Workspace.Icon()
                model.fromMap(value)
                self.icon = model
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PermissionRole"] as? String {
                self.permissionRole = value
            }
            if let value = dict["RootNodeId"] as? String {
                self.rootNodeId = value
            }
            if let value = dict["TeamId"] as? String {
                self.teamId = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["WorkspaceId"] as? String {
                self.workspaceId = value
            }
        }
    }
    public var requestId: String?

    public var workspace: [GetWorkspacesResponseBody.Workspace]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.workspace != nil {
            var tmp : [Any] = []
            for k in self.workspace! {
                tmp.append(k.toMap())
            }
            map["workspace"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["workspace"] as? [Any?] {
            var tmp : [GetWorkspacesResponseBody.Workspace] = []
            for v in value {
                if v != nil {
                    var model = GetWorkspacesResponseBody.Workspace()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.workspace = tmp
        }
    }
}

public class GetWorkspacesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetWorkspacesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetWorkspacesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GrantHonorHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: GrantHonorHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = GrantHonorHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class GrantHonorShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class GrantHonorRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: GrantHonorRequest.TenantContext?

    public var expirationTime: Int64?

    public var grantReason: String?

    public var granterName: String?

    public var honorId: String?

    public var noticeAnnouncer: Bool?

    public var noticeSingle: Bool?

    public var openConversationIds: [String]?

    public var orgId: Int64?

    public var receiverUserIds: [String]?

    public var senderUserId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.expirationTime != nil {
            map["expirationTime"] = self.expirationTime!
        }
        if self.grantReason != nil {
            map["grantReason"] = self.grantReason!
        }
        if self.granterName != nil {
            map["granterName"] = self.granterName!
        }
        if self.honorId != nil {
            map["honorId"] = self.honorId!
        }
        if self.noticeAnnouncer != nil {
            map["noticeAnnouncer"] = self.noticeAnnouncer!
        }
        if self.noticeSingle != nil {
            map["noticeSingle"] = self.noticeSingle!
        }
        if self.openConversationIds != nil {
            map["openConversationIds"] = self.openConversationIds!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.receiverUserIds != nil {
            map["receiverUserIds"] = self.receiverUserIds!
        }
        if self.senderUserId != nil {
            map["senderUserId"] = self.senderUserId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = GrantHonorRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["expirationTime"] as? Int64 {
            self.expirationTime = value
        }
        if let value = dict["grantReason"] as? String {
            self.grantReason = value
        }
        if let value = dict["granterName"] as? String {
            self.granterName = value
        }
        if let value = dict["honorId"] as? String {
            self.honorId = value
        }
        if let value = dict["noticeAnnouncer"] as? Bool {
            self.noticeAnnouncer = value
        }
        if let value = dict["noticeSingle"] as? Bool {
            self.noticeSingle = value
        }
        if let value = dict["openConversationIds"] as? [String] {
            self.openConversationIds = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["receiverUserIds"] as? [String] {
            self.receiverUserIds = value
        }
        if let value = dict["senderUserId"] as? String {
            self.senderUserId = value
        }
    }
}

public class GrantHonorShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var expirationTime: Int64?

    public var grantReason: String?

    public var granterName: String?

    public var honorId: String?

    public var noticeAnnouncer: Bool?

    public var noticeSingle: Bool?

    public var openConversationIdsShrink: String?

    public var orgId: Int64?

    public var receiverUserIdsShrink: String?

    public var senderUserId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.expirationTime != nil {
            map["expirationTime"] = self.expirationTime!
        }
        if self.grantReason != nil {
            map["grantReason"] = self.grantReason!
        }
        if self.granterName != nil {
            map["granterName"] = self.granterName!
        }
        if self.honorId != nil {
            map["honorId"] = self.honorId!
        }
        if self.noticeAnnouncer != nil {
            map["noticeAnnouncer"] = self.noticeAnnouncer!
        }
        if self.noticeSingle != nil {
            map["noticeSingle"] = self.noticeSingle!
        }
        if self.openConversationIdsShrink != nil {
            map["openConversationIds"] = self.openConversationIdsShrink!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.receiverUserIdsShrink != nil {
            map["receiverUserIds"] = self.receiverUserIdsShrink!
        }
        if self.senderUserId != nil {
            map["senderUserId"] = self.senderUserId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["expirationTime"] as? Int64 {
            self.expirationTime = value
        }
        if let value = dict["grantReason"] as? String {
            self.grantReason = value
        }
        if let value = dict["granterName"] as? String {
            self.granterName = value
        }
        if let value = dict["honorId"] as? String {
            self.honorId = value
        }
        if let value = dict["noticeAnnouncer"] as? Bool {
            self.noticeAnnouncer = value
        }
        if let value = dict["noticeSingle"] as? Bool {
            self.noticeSingle = value
        }
        if let value = dict["openConversationIds"] as? String {
            self.openConversationIdsShrink = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["receiverUserIds"] as? String {
            self.receiverUserIdsShrink = value
        }
        if let value = dict["senderUserId"] as? String {
            self.senderUserId = value
        }
    }
}

public class GrantHonorResponseBody : Tea.TeaModel {
    public var failedUserIds: [String]?

    public var requestId: String?

    public var successUserIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failedUserIds != nil {
            map["failedUserIds"] = self.failedUserIds!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.successUserIds != nil {
            map["successUserIds"] = self.successUserIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["failedUserIds"] as? [String] {
            self.failedUserIds = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["successUserIds"] as? [String] {
            self.successUserIds = value
        }
    }
}

public class GrantHonorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GrantHonorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GrantHonorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InitMultipartFileUploadHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: InitMultipartFileUploadHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = InitMultipartFileUploadHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class InitMultipartFileUploadShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class InitMultipartFileUploadRequest : Tea.TeaModel {
    public class Option : Tea.TeaModel {
        public class PreCheckParam : Tea.TeaModel {
            public var md5: String?

            public var name: String?

            public var parentId: String?

            public var size: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.md5 != nil {
                    map["Md5"] = self.md5!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.parentId != nil {
                    map["ParentId"] = self.parentId!
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Md5"] as? String {
                    self.md5 = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["ParentId"] as? String {
                    self.parentId = value
                }
                if let value = dict["Size"] as? Int64 {
                    self.size = value
                }
            }
        }
        public var preCheckParam: InitMultipartFileUploadRequest.Option.PreCheckParam?

        public var preferRegion: String?

        public var storageDriver: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.preCheckParam?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.preCheckParam != nil {
                map["PreCheckParam"] = self.preCheckParam?.toMap()
            }
            if self.preferRegion != nil {
                map["PreferRegion"] = self.preferRegion!
            }
            if self.storageDriver != nil {
                map["StorageDriver"] = self.storageDriver!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PreCheckParam"] as? [String: Any?] {
                var model = InitMultipartFileUploadRequest.Option.PreCheckParam()
                model.fromMap(value)
                self.preCheckParam = model
            }
            if let value = dict["PreferRegion"] as? String {
                self.preferRegion = value
            }
            if let value = dict["StorageDriver"] as? String {
                self.storageDriver = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var option: InitMultipartFileUploadRequest.Option?

    public var parentDentryUuid: String?

    public var tenantContext: InitMultipartFileUploadRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.option?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.option != nil {
            map["Option"] = self.option?.toMap()
        }
        if self.parentDentryUuid != nil {
            map["ParentDentryUuid"] = self.parentDentryUuid!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Option"] as? [String: Any?] {
            var model = InitMultipartFileUploadRequest.Option()
            model.fromMap(value)
            self.option = model
        }
        if let value = dict["ParentDentryUuid"] as? String {
            self.parentDentryUuid = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = InitMultipartFileUploadRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class InitMultipartFileUploadShrinkRequest : Tea.TeaModel {
    public var optionShrink: String?

    public var parentDentryUuid: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.optionShrink != nil {
            map["Option"] = self.optionShrink!
        }
        if self.parentDentryUuid != nil {
            map["ParentDentryUuid"] = self.parentDentryUuid!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Option"] as? String {
            self.optionShrink = value
        }
        if let value = dict["ParentDentryUuid"] as? String {
            self.parentDentryUuid = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class InitMultipartFileUploadResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var storageDriver: String?

    public var uploadKey: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.storageDriver != nil {
            map["storageDriver"] = self.storageDriver!
        }
        if self.uploadKey != nil {
            map["uploadKey"] = self.uploadKey!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["storageDriver"] as? String {
            self.storageDriver = value
        }
        if let value = dict["uploadKey"] as? String {
            self.uploadKey = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class InitMultipartFileUploadResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InitMultipartFileUploadResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InitMultipartFileUploadResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InsertColumnsBeforeHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: InsertColumnsBeforeHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = InsertColumnsBeforeHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class InsertColumnsBeforeShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class InsertColumnsBeforeRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var column: Int64?

    public var columnCount: Int64?

    public var sheetId: String?

    public var tenantContext: InsertColumnsBeforeRequest.TenantContext?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.column != nil {
            map["Column"] = self.column!
        }
        if self.columnCount != nil {
            map["ColumnCount"] = self.columnCount!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Column"] as? Int64 {
            self.column = value
        }
        if let value = dict["ColumnCount"] as? Int64 {
            self.columnCount = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = InsertColumnsBeforeRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class InsertColumnsBeforeShrinkRequest : Tea.TeaModel {
    public var column: Int64?

    public var columnCount: Int64?

    public var sheetId: String?

    public var tenantContextShrink: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.column != nil {
            map["Column"] = self.column!
        }
        if self.columnCount != nil {
            map["ColumnCount"] = self.columnCount!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Column"] as? Int64 {
            self.column = value
        }
        if let value = dict["ColumnCount"] as? Int64 {
            self.columnCount = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class InsertColumnsBeforeResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class InsertColumnsBeforeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsertColumnsBeforeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InsertColumnsBeforeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InsertContentWithOptionsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: InsertContentWithOptionsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = InsertContentWithOptionsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class InsertContentWithOptionsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class InsertContentWithOptionsRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var content: [String: Any]?

    public var documentId: String?

    public var index: Int32?

    public var operatorId: String?

    public var path: [Int32]?

    public var tenantContext: InsertContentWithOptionsRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.documentId != nil {
            map["DocumentId"] = self.documentId!
        }
        if self.index != nil {
            map["Index"] = self.index!
        }
        if self.operatorId != nil {
            map["OperatorId"] = self.operatorId!
        }
        if self.path != nil {
            map["Path"] = self.path!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? [String: Any] {
            self.content = value
        }
        if let value = dict["DocumentId"] as? String {
            self.documentId = value
        }
        if let value = dict["Index"] as? Int32 {
            self.index = value
        }
        if let value = dict["OperatorId"] as? String {
            self.operatorId = value
        }
        if let value = dict["Path"] as? [Int32] {
            self.path = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = InsertContentWithOptionsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class InsertContentWithOptionsShrinkRequest : Tea.TeaModel {
    public var contentShrink: String?

    public var documentId: String?

    public var index: Int32?

    public var operatorId: String?

    public var pathShrink: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contentShrink != nil {
            map["Content"] = self.contentShrink!
        }
        if self.documentId != nil {
            map["DocumentId"] = self.documentId!
        }
        if self.index != nil {
            map["Index"] = self.index!
        }
        if self.operatorId != nil {
            map["OperatorId"] = self.operatorId!
        }
        if self.pathShrink != nil {
            map["Path"] = self.pathShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.contentShrink = value
        }
        if let value = dict["DocumentId"] as? String {
            self.documentId = value
        }
        if let value = dict["Index"] as? Int32 {
            self.index = value
        }
        if let value = dict["OperatorId"] as? String {
            self.operatorId = value
        }
        if let value = dict["Path"] as? String {
            self.pathShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class InsertContentWithOptionsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class InsertContentWithOptionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsertContentWithOptionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InsertContentWithOptionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InsertMultiDimTableRecordHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: InsertMultiDimTableRecordHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = InsertMultiDimTableRecordHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class InsertMultiDimTableRecordShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class InsertMultiDimTableRecordRequest : Tea.TeaModel {
    public class Records : Tea.TeaModel {
        public var fields: [String: Any]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fields != nil {
                map["Fields"] = self.fields!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Fields"] as? [String: Any] {
                self.fields = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var baseId: String?

    public var records: [InsertMultiDimTableRecordRequest.Records]?

    public var sheetIdOrName: String?

    public var tenantContext: InsertMultiDimTableRecordRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.records != nil {
            var tmp : [Any] = []
            for k in self.records! {
                tmp.append(k.toMap())
            }
            map["Records"] = tmp
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["Records"] as? [Any?] {
            var tmp : [InsertMultiDimTableRecordRequest.Records] = []
            for v in value {
                if v != nil {
                    var model = InsertMultiDimTableRecordRequest.Records()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.records = tmp
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = InsertMultiDimTableRecordRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class InsertMultiDimTableRecordShrinkRequest : Tea.TeaModel {
    public var baseId: String?

    public var recordsShrink: String?

    public var sheetIdOrName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.recordsShrink != nil {
            map["Records"] = self.recordsShrink!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["Records"] as? String {
            self.recordsShrink = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class InsertMultiDimTableRecordResponseBody : Tea.TeaModel {
    public class Value : Tea.TeaModel {
        public var id: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? String {
                self.id = value
            }
        }
    }
    public var value: [InsertMultiDimTableRecordResponseBody.Value]?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.value != nil {
            var tmp : [Any] = []
            for k in self.value! {
                tmp.append(k.toMap())
            }
            map["Value"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Value"] as? [Any?] {
            var tmp : [InsertMultiDimTableRecordResponseBody.Value] = []
            for v in value {
                if v != nil {
                    var model = InsertMultiDimTableRecordResponseBody.Value()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.value = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class InsertMultiDimTableRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsertMultiDimTableRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InsertMultiDimTableRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InsertRowsBeforeHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: InsertRowsBeforeHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = InsertRowsBeforeHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class InsertRowsBeforeShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class InsertRowsBeforeRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var row: Int64?

    public var rowCount: Int64?

    public var sheetId: String?

    public var tenantContext: InsertRowsBeforeRequest.TenantContext?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.row != nil {
            map["Row"] = self.row!
        }
        if self.rowCount != nil {
            map["RowCount"] = self.rowCount!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Row"] as? Int64 {
            self.row = value
        }
        if let value = dict["RowCount"] as? Int64 {
            self.rowCount = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = InsertRowsBeforeRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class InsertRowsBeforeShrinkRequest : Tea.TeaModel {
    public var row: Int64?

    public var rowCount: Int64?

    public var sheetId: String?

    public var tenantContextShrink: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.row != nil {
            map["Row"] = self.row!
        }
        if self.rowCount != nil {
            map["RowCount"] = self.rowCount!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Row"] as? Int64 {
            self.row = value
        }
        if let value = dict["RowCount"] as? Int64 {
            self.rowCount = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class InsertRowsBeforeResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class InsertRowsBeforeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InsertRowsBeforeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InsertRowsBeforeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InviteUsersHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: InviteUsersHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = InviteUsersHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class InviteUsersShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class InviteUsersRequest : Tea.TeaModel {
    public class InviteeList : Tea.TeaModel {
        public var nick: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nick != nil {
                map["Nick"] = self.nick!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Nick"] as? String {
                self.nick = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public class PhoneInviteeList : Tea.TeaModel {
        public var inviteClient: Bool?

        public var nick: String?

        public var phoneNumber: String?

        public var statusCode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.inviteClient != nil {
                map["InviteClient"] = self.inviteClient!
            }
            if self.nick != nil {
                map["Nick"] = self.nick!
            }
            if self.phoneNumber != nil {
                map["PhoneNumber"] = self.phoneNumber!
            }
            if self.statusCode != nil {
                map["StatusCode"] = self.statusCode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InviteClient"] as? Bool {
                self.inviteClient = value
            }
            if let value = dict["Nick"] as? String {
                self.nick = value
            }
            if let value = dict["PhoneNumber"] as? String {
                self.phoneNumber = value
            }
            if let value = dict["StatusCode"] as? String {
                self.statusCode = value
            }
        }
    }
    public var inviteeList: [InviteUsersRequest.InviteeList]?

    public var tenantContext: InviteUsersRequest.TenantContext?

    public var conferenceId: String?

    public var phoneInviteeList: [InviteUsersRequest.PhoneInviteeList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.inviteeList != nil {
            var tmp : [Any] = []
            for k in self.inviteeList! {
                tmp.append(k.toMap())
            }
            map["InviteeList"] = tmp
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        if self.phoneInviteeList != nil {
            var tmp : [Any] = []
            for k in self.phoneInviteeList! {
                tmp.append(k.toMap())
            }
            map["phoneInviteeList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InviteeList"] as? [Any?] {
            var tmp : [InviteUsersRequest.InviteeList] = []
            for v in value {
                if v != nil {
                    var model = InviteUsersRequest.InviteeList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.inviteeList = tmp
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = InviteUsersRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["phoneInviteeList"] as? [Any?] {
            var tmp : [InviteUsersRequest.PhoneInviteeList] = []
            for v in value {
                if v != nil {
                    var model = InviteUsersRequest.PhoneInviteeList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.phoneInviteeList = tmp
        }
    }
}

public class InviteUsersShrinkRequest : Tea.TeaModel {
    public var inviteeListShrink: String?

    public var tenantContextShrink: String?

    public var conferenceId: String?

    public var phoneInviteeListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.inviteeListShrink != nil {
            map["InviteeList"] = self.inviteeListShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        if self.phoneInviteeListShrink != nil {
            map["phoneInviteeList"] = self.phoneInviteeListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InviteeList"] as? String {
            self.inviteeListShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["phoneInviteeList"] as? String {
            self.phoneInviteeListShrink = value
        }
    }
}

public class InviteUsersResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class InviteUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InviteUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InviteUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InvokeAssistantHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountId != nil {
            map["accountId"] = self.accountId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["accountId"] as? String {
            self.accountId = value
        }
    }
}

public class InvokeAssistantRequest : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public class CardCallback : Tea.TeaModel {
            public var content: String?

            public var templateId: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["content"] = self.content!
                }
                if self.templateId != nil {
                    map["templateId"] = self.templateId!
                }
                if self.userId != nil {
                    map["userId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["content"] as? String {
                    self.content = value
                }
                if let value = dict["templateId"] as? String {
                    self.templateId = value
                }
                if let value = dict["userId"] as? String {
                    self.userId = value
                }
            }
        }
        public class DingCard : Tea.TeaModel {
            public var cardDesc: String?

            public var content: String?

            public var contentType: String?

            public var finished: Bool?

            public var templateId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cardDesc != nil {
                    map["cardDesc"] = self.cardDesc!
                }
                if self.content != nil {
                    map["content"] = self.content!
                }
                if self.contentType != nil {
                    map["contentType"] = self.contentType!
                }
                if self.finished != nil {
                    map["finished"] = self.finished!
                }
                if self.templateId != nil {
                    map["templateId"] = self.templateId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["cardDesc"] as? String {
                    self.cardDesc = value
                }
                if let value = dict["content"] as? String {
                    self.content = value
                }
                if let value = dict["contentType"] as? String {
                    self.contentType = value
                }
                if let value = dict["finished"] as? Bool {
                    self.finished = value
                }
                if let value = dict["templateId"] as? String {
                    self.templateId = value
                }
            }
        }
        public class ImageUrl : Tea.TeaModel {
            public var detail: String?

            public var imageDesc: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.detail != nil {
                    map["detail"] = self.detail!
                }
                if self.imageDesc != nil {
                    map["imageDesc"] = self.imageDesc!
                }
                if self.url != nil {
                    map["url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["detail"] as? String {
                    self.detail = value
                }
                if let value = dict["imageDesc"] as? String {
                    self.imageDesc = value
                }
                if let value = dict["url"] as? String {
                    self.url = value
                }
            }
        }
        public class Markdown : Tea.TeaModel {
            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.value != nil {
                    map["value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["value"] as? String {
                    self.value = value
                }
            }
        }
        public class Text : Tea.TeaModel {
            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.value != nil {
                    map["value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["value"] as? String {
                    self.value = value
                }
            }
        }
        public var cardCallback: InvokeAssistantRequest.Content.CardCallback?

        public var dingCard: InvokeAssistantRequest.Content.DingCard?

        public var imageUrl: InvokeAssistantRequest.Content.ImageUrl?

        public var markdown: InvokeAssistantRequest.Content.Markdown?

        public var text: InvokeAssistantRequest.Content.Text?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.cardCallback?.validate()
            try self.dingCard?.validate()
            try self.imageUrl?.validate()
            try self.markdown?.validate()
            try self.text?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cardCallback != nil {
                map["cardCallback"] = self.cardCallback?.toMap()
            }
            if self.dingCard != nil {
                map["dingCard"] = self.dingCard?.toMap()
            }
            if self.imageUrl != nil {
                map["imageUrl"] = self.imageUrl?.toMap()
            }
            if self.markdown != nil {
                map["markdown"] = self.markdown?.toMap()
            }
            if self.text != nil {
                map["text"] = self.text?.toMap()
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["cardCallback"] as? [String: Any?] {
                var model = InvokeAssistantRequest.Content.CardCallback()
                model.fromMap(value)
                self.cardCallback = model
            }
            if let value = dict["dingCard"] as? [String: Any?] {
                var model = InvokeAssistantRequest.Content.DingCard()
                model.fromMap(value)
                self.dingCard = model
            }
            if let value = dict["imageUrl"] as? [String: Any?] {
                var model = InvokeAssistantRequest.Content.ImageUrl()
                model.fromMap(value)
                self.imageUrl = model
            }
            if let value = dict["markdown"] as? [String: Any?] {
                var model = InvokeAssistantRequest.Content.Markdown()
                model.fromMap(value)
                self.markdown = model
            }
            if let value = dict["text"] as? [String: Any?] {
                var model = InvokeAssistantRequest.Content.Text()
                model.fromMap(value)
                self.text = model
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public class History : Tea.TeaModel {
        public class Content : Tea.TeaModel {
            public class CardCallback : Tea.TeaModel {
                public var content: String?

                public var templateId: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["content"] = self.content!
                    }
                    if self.templateId != nil {
                        map["templateId"] = self.templateId!
                    }
                    if self.userId != nil {
                        map["userId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["content"] as? String {
                        self.content = value
                    }
                    if let value = dict["templateId"] as? String {
                        self.templateId = value
                    }
                    if let value = dict["userId"] as? String {
                        self.userId = value
                    }
                }
            }
            public class DingCard : Tea.TeaModel {
                public var cardDesc: String?

                public var content: String?

                public var contentType: String?

                public var finished: Bool?

                public var templateId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cardDesc != nil {
                        map["cardDesc"] = self.cardDesc!
                    }
                    if self.content != nil {
                        map["content"] = self.content!
                    }
                    if self.contentType != nil {
                        map["contentType"] = self.contentType!
                    }
                    if self.finished != nil {
                        map["finished"] = self.finished!
                    }
                    if self.templateId != nil {
                        map["templateId"] = self.templateId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["cardDesc"] as? String {
                        self.cardDesc = value
                    }
                    if let value = dict["content"] as? String {
                        self.content = value
                    }
                    if let value = dict["contentType"] as? String {
                        self.contentType = value
                    }
                    if let value = dict["finished"] as? Bool {
                        self.finished = value
                    }
                    if let value = dict["templateId"] as? String {
                        self.templateId = value
                    }
                }
            }
            public class ImageUrl : Tea.TeaModel {
                public var detail: String?

                public var imageDesc: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.detail != nil {
                        map["detail"] = self.detail!
                    }
                    if self.imageDesc != nil {
                        map["imageDesc"] = self.imageDesc!
                    }
                    if self.url != nil {
                        map["url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["detail"] as? String {
                        self.detail = value
                    }
                    if let value = dict["imageDesc"] as? String {
                        self.imageDesc = value
                    }
                    if let value = dict["url"] as? String {
                        self.url = value
                    }
                }
            }
            public class Markdown : Tea.TeaModel {
                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.value != nil {
                        map["value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Text : Tea.TeaModel {
                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.value != nil {
                        map["value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["value"] as? String {
                        self.value = value
                    }
                }
            }
            public var cardCallback: InvokeAssistantRequest.History.Content.CardCallback?

            public var dingCard: InvokeAssistantRequest.History.Content.DingCard?

            public var imageUrl: InvokeAssistantRequest.History.Content.ImageUrl?

            public var markdown: InvokeAssistantRequest.History.Content.Markdown?

            public var text: InvokeAssistantRequest.History.Content.Text?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.cardCallback?.validate()
                try self.dingCard?.validate()
                try self.imageUrl?.validate()
                try self.markdown?.validate()
                try self.text?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cardCallback != nil {
                    map["cardCallback"] = self.cardCallback?.toMap()
                }
                if self.dingCard != nil {
                    map["dingCard"] = self.dingCard?.toMap()
                }
                if self.imageUrl != nil {
                    map["imageUrl"] = self.imageUrl?.toMap()
                }
                if self.markdown != nil {
                    map["markdown"] = self.markdown?.toMap()
                }
                if self.text != nil {
                    map["text"] = self.text?.toMap()
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["cardCallback"] as? [String: Any?] {
                    var model = InvokeAssistantRequest.History.Content.CardCallback()
                    model.fromMap(value)
                    self.cardCallback = model
                }
                if let value = dict["dingCard"] as? [String: Any?] {
                    var model = InvokeAssistantRequest.History.Content.DingCard()
                    model.fromMap(value)
                    self.dingCard = model
                }
                if let value = dict["imageUrl"] as? [String: Any?] {
                    var model = InvokeAssistantRequest.History.Content.ImageUrl()
                    model.fromMap(value)
                    self.imageUrl = model
                }
                if let value = dict["markdown"] as? [String: Any?] {
                    var model = InvokeAssistantRequest.History.Content.Markdown()
                    model.fromMap(value)
                    self.markdown = model
                }
                if let value = dict["text"] as? [String: Any?] {
                    var model = InvokeAssistantRequest.History.Content.Text()
                    model.fromMap(value)
                    self.text = model
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
            }
        }
        public var content: [InvokeAssistantRequest.History.Content]?

        public var role: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                var tmp : [Any] = []
                for k in self.content! {
                    tmp.append(k.toMap())
                }
                map["content"] = tmp
            }
            if self.role != nil {
                map["role"] = self.role!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["content"] as? [Any?] {
                var tmp : [InvokeAssistantRequest.History.Content] = []
                for v in value {
                    if v != nil {
                        var model = InvokeAssistantRequest.History.Content()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.content = tmp
            }
            if let value = dict["role"] as? String {
                self.role = value
            }
        }
    }
    public var assistantId: String?

    public var content: [InvokeAssistantRequest.Content]?

    public var history: [InvokeAssistantRequest.History]?

    public var sessionId: String?

    public var stream: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assistantId != nil {
            map["assistantId"] = self.assistantId!
        }
        if self.content != nil {
            var tmp : [Any] = []
            for k in self.content! {
                tmp.append(k.toMap())
            }
            map["content"] = tmp
        }
        if self.history != nil {
            var tmp : [Any] = []
            for k in self.history! {
                tmp.append(k.toMap())
            }
            map["history"] = tmp
        }
        if self.sessionId != nil {
            map["sessionId"] = self.sessionId!
        }
        if self.stream != nil {
            map["stream"] = self.stream!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["assistantId"] as? String {
            self.assistantId = value
        }
        if let value = dict["content"] as? [Any?] {
            var tmp : [InvokeAssistantRequest.Content] = []
            for v in value {
                if v != nil {
                    var model = InvokeAssistantRequest.Content()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.content = tmp
        }
        if let value = dict["history"] as? [Any?] {
            var tmp : [InvokeAssistantRequest.History] = []
            for v in value {
                if v != nil {
                    var model = InvokeAssistantRequest.History()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.history = tmp
        }
        if let value = dict["sessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["stream"] as? Bool {
            self.stream = value
        }
    }
}

public class InvokeAssistantResponseBody : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public class CardCallback : Tea.TeaModel {
            public var content: String?

            public var templateId: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["content"] = self.content!
                }
                if self.templateId != nil {
                    map["templateId"] = self.templateId!
                }
                if self.userId != nil {
                    map["userId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["content"] as? String {
                    self.content = value
                }
                if let value = dict["templateId"] as? String {
                    self.templateId = value
                }
                if let value = dict["userId"] as? String {
                    self.userId = value
                }
            }
        }
        public class DingCard : Tea.TeaModel {
            public var cardDesc: String?

            public var content: String?

            public var contentType: String?

            public var finished: Bool?

            public var templateId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cardDesc != nil {
                    map["cardDesc"] = self.cardDesc!
                }
                if self.content != nil {
                    map["content"] = self.content!
                }
                if self.contentType != nil {
                    map["contentType"] = self.contentType!
                }
                if self.finished != nil {
                    map["finished"] = self.finished!
                }
                if self.templateId != nil {
                    map["templateId"] = self.templateId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["cardDesc"] as? String {
                    self.cardDesc = value
                }
                if let value = dict["content"] as? String {
                    self.content = value
                }
                if let value = dict["contentType"] as? String {
                    self.contentType = value
                }
                if let value = dict["finished"] as? Bool {
                    self.finished = value
                }
                if let value = dict["templateId"] as? String {
                    self.templateId = value
                }
            }
        }
        public class ImageUrl : Tea.TeaModel {
            public var detail: String?

            public var imageDesc: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.detail != nil {
                    map["detail"] = self.detail!
                }
                if self.imageDesc != nil {
                    map["imageDesc"] = self.imageDesc!
                }
                if self.url != nil {
                    map["url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["detail"] as? String {
                    self.detail = value
                }
                if let value = dict["imageDesc"] as? String {
                    self.imageDesc = value
                }
                if let value = dict["url"] as? String {
                    self.url = value
                }
            }
        }
        public class Markdown : Tea.TeaModel {
            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.value != nil {
                    map["value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["value"] as? String {
                    self.value = value
                }
            }
        }
        public class Text : Tea.TeaModel {
            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.value != nil {
                    map["value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["value"] as? String {
                    self.value = value
                }
            }
        }
        public var cardCallback: InvokeAssistantResponseBody.Content.CardCallback?

        public var dingCard: InvokeAssistantResponseBody.Content.DingCard?

        public var imageUrl: InvokeAssistantResponseBody.Content.ImageUrl?

        public var markdown: InvokeAssistantResponseBody.Content.Markdown?

        public var text: InvokeAssistantResponseBody.Content.Text?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.cardCallback?.validate()
            try self.dingCard?.validate()
            try self.imageUrl?.validate()
            try self.markdown?.validate()
            try self.text?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cardCallback != nil {
                map["cardCallback"] = self.cardCallback?.toMap()
            }
            if self.dingCard != nil {
                map["dingCard"] = self.dingCard?.toMap()
            }
            if self.imageUrl != nil {
                map["imageUrl"] = self.imageUrl?.toMap()
            }
            if self.markdown != nil {
                map["markdown"] = self.markdown?.toMap()
            }
            if self.text != nil {
                map["text"] = self.text?.toMap()
            }
            if self.type != nil {
                map["type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["cardCallback"] as? [String: Any?] {
                var model = InvokeAssistantResponseBody.Content.CardCallback()
                model.fromMap(value)
                self.cardCallback = model
            }
            if let value = dict["dingCard"] as? [String: Any?] {
                var model = InvokeAssistantResponseBody.Content.DingCard()
                model.fromMap(value)
                self.dingCard = model
            }
            if let value = dict["imageUrl"] as? [String: Any?] {
                var model = InvokeAssistantResponseBody.Content.ImageUrl()
                model.fromMap(value)
                self.imageUrl = model
            }
            if let value = dict["markdown"] as? [String: Any?] {
                var model = InvokeAssistantResponseBody.Content.Markdown()
                model.fromMap(value)
                self.markdown = model
            }
            if let value = dict["text"] as? [String: Any?] {
                var model = InvokeAssistantResponseBody.Content.Text()
                model.fromMap(value)
                self.text = model
            }
            if let value = dict["type"] as? String {
                self.type = value
            }
        }
    }
    public var content: [InvokeAssistantResponseBody.Content]?

    public var requestId: String?

    public var sessionId: String?

    public var streamEnd: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            var tmp : [Any] = []
            for k in self.content! {
                tmp.append(k.toMap())
            }
            map["content"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.sessionId != nil {
            map["sessionId"] = self.sessionId!
        }
        if self.streamEnd != nil {
            map["streamEnd"] = self.streamEnd!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["content"] as? [Any?] {
            var tmp : [InvokeAssistantResponseBody.Content] = []
            for v in value {
                if v != nil {
                    var model = InvokeAssistantResponseBody.Content()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.content = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["sessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["streamEnd"] as? Bool {
            self.streamEnd = value
        }
    }
}

public class InvokeAssistantResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InvokeAssistantResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InvokeAssistantResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class InvokeSkillHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: InvokeSkillHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = InvokeSkillHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class InvokeSkillShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class InvokeSkillRequest : Tea.TeaModel {
    public var params: [String: Any]?

    public var skillId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.params != nil {
            map["Params"] = self.params!
        }
        if self.skillId != nil {
            map["SkillId"] = self.skillId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Params"] as? [String: Any] {
            self.params = value
        }
        if let value = dict["SkillId"] as? String {
            self.skillId = value
        }
    }
}

public class InvokeSkillShrinkRequest : Tea.TeaModel {
    public var paramsShrink: String?

    public var skillId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.paramsShrink != nil {
            map["Params"] = self.paramsShrink!
        }
        if self.skillId != nil {
            map["SkillId"] = self.skillId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Params"] as? String {
            self.paramsShrink = value
        }
        if let value = dict["SkillId"] as? String {
            self.skillId = value
        }
    }
}

public class InvokeSkillResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var data: [String: Any]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.data != nil {
            map["data"] = self.data!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["data"] as? [String: Any] {
            self.data = value
        }
    }
}

public class InvokeSkillResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: InvokeSkillResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = InvokeSkillResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListApplicationHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListApplicationHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListApplicationHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListApplicationShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListApplicationRequest : Tea.TeaModel {
    public var appFilter: String?

    public var appNameSearchKeyword: String?

    public var corpId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appFilter != nil {
            map["AppFilter"] = self.appFilter!
        }
        if self.appNameSearchKeyword != nil {
            map["AppNameSearchKeyword"] = self.appNameSearchKeyword!
        }
        if self.corpId != nil {
            map["CorpId"] = self.corpId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppFilter"] as? String {
            self.appFilter = value
        }
        if let value = dict["AppNameSearchKeyword"] as? String {
            self.appNameSearchKeyword = value
        }
        if let value = dict["CorpId"] as? String {
            self.corpId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class ListApplicationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var appConfig: String?

        public var appType: String?

        public var applicationStatus: String?

        public var corpId: String?

        public var creatorUserId: String?

        public var description_: String?

        public var icon: String?

        public var inexistence: String?

        public var name: String?

        public var subCorpId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appConfig != nil {
                map["AppConfig"] = self.appConfig!
            }
            if self.appType != nil {
                map["AppType"] = self.appType!
            }
            if self.applicationStatus != nil {
                map["ApplicationStatus"] = self.applicationStatus!
            }
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.creatorUserId != nil {
                map["CreatorUserId"] = self.creatorUserId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.icon != nil {
                map["Icon"] = self.icon!
            }
            if self.inexistence != nil {
                map["Inexistence"] = self.inexistence!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.subCorpId != nil {
                map["SubCorpId"] = self.subCorpId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppConfig"] as? String {
                self.appConfig = value
            }
            if let value = dict["AppType"] as? String {
                self.appType = value
            }
            if let value = dict["ApplicationStatus"] as? String {
                self.applicationStatus = value
            }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["CreatorUserId"] as? String {
                self.creatorUserId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Icon"] as? String {
                self.icon = value
            }
            if let value = dict["Inexistence"] as? String {
                self.inexistence = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["SubCorpId"] as? String {
                self.subCorpId = value
            }
        }
    }
    public var data: [ListApplicationResponseBody.Data]?

    public var pageNumber: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["data"] = tmp
        }
        if self.pageNumber != nil {
            map["pageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? [Any?] {
            var tmp : [ListApplicationResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListApplicationResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["pageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ListApplicationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListApplicationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListApplicationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCalendarsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListCalendarsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListCalendarsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListCalendarsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListCalendarsRequest : Tea.TeaModel {
    public var request: [String: Any]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.request != nil {
            map["Request"] = self.request!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Request"] as? [String: Any] {
            self.request = value
        }
    }
}

public class ListCalendarsShrinkRequest : Tea.TeaModel {
    public var requestShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestShrink != nil {
            map["Request"] = self.requestShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Request"] as? String {
            self.requestShrink = value
        }
    }
}

public class ListCalendarsResponseBody : Tea.TeaModel {
    public class Response : Tea.TeaModel {
        public class Calendars : Tea.TeaModel {
            public var description_: String?

            public var ETag: String?

            public var id: String?

            public var privilege: String?

            public var summary: String?

            public var timeZone: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.ETag != nil {
                    map["ETag"] = self.ETag!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.privilege != nil {
                    map["Privilege"] = self.privilege!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                if self.timeZone != nil {
                    map["TimeZone"] = self.timeZone!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["ETag"] as? String {
                    self.ETag = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Privilege"] as? String {
                    self.privilege = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
                if let value = dict["TimeZone"] as? String {
                    self.timeZone = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var calendars: [ListCalendarsResponseBody.Response.Calendars]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.calendars != nil {
                var tmp : [Any] = []
                for k in self.calendars! {
                    tmp.append(k.toMap())
                }
                map["Calendars"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Calendars"] as? [Any?] {
                var tmp : [ListCalendarsResponseBody.Response.Calendars] = []
                for v in value {
                    if v != nil {
                        var model = ListCalendarsResponseBody.Response.Calendars()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.calendars = tmp
            }
        }
    }
    public var requestId: String?

    public var response: ListCalendarsResponseBody.Response?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.response?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.response != nil {
            map["response"] = self.response?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["response"] as? [String: Any?] {
            var model = ListCalendarsResponseBody.Response()
            model.fromMap(value)
            self.response = model
        }
    }
}

public class ListCalendarsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCalendarsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCalendarsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDentriesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListDentriesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListDentriesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListDentriesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListDentriesRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var maxResults: Int32?

    public var nextToken: String?

    public var order: String?

    public var orderBy: String?

    public var parentId: String?

    public var spaceId: String?

    public var tenantContext: ListDentriesRequest.TenantContext?

    public var withThumbnail: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.order != nil {
            map["Order"] = self.order!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.parentId != nil {
            map["ParentId"] = self.parentId!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.withThumbnail != nil {
            map["WithThumbnail"] = self.withThumbnail!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Order"] as? String {
            self.order = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["ParentId"] as? String {
            self.parentId = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ListDentriesRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WithThumbnail"] as? Bool {
            self.withThumbnail = value
        }
    }
}

public class ListDentriesShrinkRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var order: String?

    public var orderBy: String?

    public var parentId: String?

    public var spaceId: String?

    public var tenantContextShrink: String?

    public var withThumbnail: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.order != nil {
            map["Order"] = self.order!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.parentId != nil {
            map["ParentId"] = self.parentId!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.withThumbnail != nil {
            map["WithThumbnail"] = self.withThumbnail!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["Order"] as? String {
            self.order = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["ParentId"] as? String {
            self.parentId = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WithThumbnail"] as? Bool {
            self.withThumbnail = value
        }
    }
}

public class ListDentriesResponseBody : Tea.TeaModel {
    public class Dentries : Tea.TeaModel {
        public class Properties : Tea.TeaModel {
            public var readOnly: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.readOnly != nil {
                    map["ReadOnly"] = self.readOnly!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ReadOnly"] as? Bool {
                    self.readOnly = value
                }
            }
        }
        public class Thumbnail : Tea.TeaModel {
            public var height: Int32?

            public var url: String?

            public var width: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Height"] as? Int32 {
                    self.height = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
                if let value = dict["Width"] as? Int32 {
                    self.width = value
                }
            }
        }
        public var appProperties: [String: [DentriesAppPropertiesValue]]?

        public var createTime: String?

        public var creatorId: String?

        public var extension_: String?

        public var id: String?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var parentId: String?

        public var partitionType: String?

        public var path: String?

        public var properties: ListDentriesResponseBody.Dentries.Properties?

        public var size: Int64?

        public var spaceId: String?

        public var status: String?

        public var storageDriver: String?

        public var thumbnail: ListDentriesResponseBody.Dentries.Thumbnail?

        public var type: String?

        public var uuid: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.properties?.validate()
            try self.thumbnail?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appProperties != nil {
                var tmp : [String: Any] = [:]
                for (k, v) in self.appProperties! {
                    var l1 : [Any] = []
                    for k1 in v {
                        l1.append(k1.toMap())
                    }
                    tmp[k] = l1
                }
                map["AppProperties"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.parentId != nil {
                map["ParentId"] = self.parentId!
            }
            if self.partitionType != nil {
                map["PartitionType"] = self.partitionType!
            }
            if self.path != nil {
                map["Path"] = self.path!
            }
            if self.properties != nil {
                map["Properties"] = self.properties?.toMap()
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.spaceId != nil {
                map["SpaceId"] = self.spaceId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageDriver != nil {
                map["StorageDriver"] = self.storageDriver!
            }
            if self.thumbnail != nil {
                map["Thumbnail"] = self.thumbnail?.toMap()
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.uuid != nil {
                map["Uuid"] = self.uuid!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppProperties"] as? [String: Any?] {
                var tmp : [String: [DentriesAppPropertiesValue]] = [:]
                for (k, v) in value {
                    var l1 : [DentriesAppPropertiesValue] = []
                    for v1 in v as! [Any?] {
                        if v1 != nil {
                            var model = DentriesAppPropertiesValue()
                            if v1 != nil {
                                model.fromMap(v1 as? [String: Any?])
                            }
                            l1.append(model)
                        }
                    }
                    tmp[k] = l1
                }
                self.appProperties = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ParentId"] as? String {
                self.parentId = value
            }
            if let value = dict["PartitionType"] as? String {
                self.partitionType = value
            }
            if let value = dict["Path"] as? String {
                self.path = value
            }
            if let value = dict["Properties"] as? [String: Any?] {
                var model = ListDentriesResponseBody.Dentries.Properties()
                model.fromMap(value)
                self.properties = model
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["SpaceId"] as? String {
                self.spaceId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StorageDriver"] as? String {
                self.storageDriver = value
            }
            if let value = dict["Thumbnail"] as? [String: Any?] {
                var model = ListDentriesResponseBody.Dentries.Thumbnail()
                model.fromMap(value)
                self.thumbnail = model
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Uuid"] as? String {
                self.uuid = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var dentries: [ListDentriesResponseBody.Dentries]?

    public var nextToken: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentries != nil {
            var tmp : [Any] = []
            for k in self.dentries! {
                tmp.append(k.toMap())
            }
            map["dentries"] = tmp
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["dentries"] as? [Any?] {
            var tmp : [ListDentriesResponseBody.Dentries] = []
            for v in value {
                if v != nil {
                    var model = ListDentriesResponseBody.Dentries()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dentries = tmp
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ListDentriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDentriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDentriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDriveSpacesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListDriveSpacesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListDriveSpacesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListDriveSpacesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListDriveSpacesRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var maxResults: Int32?

    public var nextToken: String?

    public var spaceType: String?

    public var tenantContext: ListDriveSpacesRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.spaceType != nil {
            map["SpaceType"] = self.spaceType!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["SpaceType"] as? String {
            self.spaceType = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ListDriveSpacesRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class ListDriveSpacesShrinkRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var spaceType: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.spaceType != nil {
            map["SpaceType"] = self.spaceType!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["SpaceType"] as? String {
            self.spaceType = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class ListDriveSpacesResponseBody : Tea.TeaModel {
    public class Spaces : Tea.TeaModel {
        public var createTime: String?

        public var modifyTime: String?

        public var permissionMode: String?

        public var quota: Int64?

        public var spaceId: String?

        public var spaceName: String?

        public var spaceType: String?

        public var usedQuota: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.modifyTime != nil {
                map["ModifyTime"] = self.modifyTime!
            }
            if self.permissionMode != nil {
                map["PermissionMode"] = self.permissionMode!
            }
            if self.quota != nil {
                map["Quota"] = self.quota!
            }
            if self.spaceId != nil {
                map["SpaceId"] = self.spaceId!
            }
            if self.spaceName != nil {
                map["SpaceName"] = self.spaceName!
            }
            if self.spaceType != nil {
                map["SpaceType"] = self.spaceType!
            }
            if self.usedQuota != nil {
                map["UsedQuota"] = self.usedQuota!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["ModifyTime"] as? String {
                self.modifyTime = value
            }
            if let value = dict["PermissionMode"] as? String {
                self.permissionMode = value
            }
            if let value = dict["Quota"] as? Int64 {
                self.quota = value
            }
            if let value = dict["SpaceId"] as? String {
                self.spaceId = value
            }
            if let value = dict["SpaceName"] as? String {
                self.spaceName = value
            }
            if let value = dict["SpaceType"] as? String {
                self.spaceType = value
            }
            if let value = dict["UsedQuota"] as? Int64 {
                self.usedQuota = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var spaces: [ListDriveSpacesResponseBody.Spaces]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.spaces != nil {
            var tmp : [Any] = []
            for k in self.spaces! {
                tmp.append(k.toMap())
            }
            map["spaces"] = tmp
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["spaces"] as? [Any?] {
            var tmp : [ListDriveSpacesResponseBody.Spaces] = []
            for v in value {
                if v != nil {
                    var model = ListDriveSpacesResponseBody.Spaces()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.spaces = tmp
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ListDriveSpacesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDriveSpacesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDriveSpacesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEventsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListEventsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListEventsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListEventsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListEventsRequest : Tea.TeaModel {
    public var calendarId: String?

    public var maxAttendees: Int32?

    public var maxResults: Int32?

    public var nextToken: String?

    public var seriesMasterId: String?

    public var showDeleted: Bool?

    public var syncToken: String?

    public var timeMax: String?

    public var timeMin: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.maxAttendees != nil {
            map["MaxAttendees"] = self.maxAttendees!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.seriesMasterId != nil {
            map["SeriesMasterId"] = self.seriesMasterId!
        }
        if self.showDeleted != nil {
            map["ShowDeleted"] = self.showDeleted!
        }
        if self.syncToken != nil {
            map["SyncToken"] = self.syncToken!
        }
        if self.timeMax != nil {
            map["TimeMax"] = self.timeMax!
        }
        if self.timeMin != nil {
            map["TimeMin"] = self.timeMin!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["MaxAttendees"] as? Int32 {
            self.maxAttendees = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["SeriesMasterId"] as? String {
            self.seriesMasterId = value
        }
        if let value = dict["ShowDeleted"] as? Bool {
            self.showDeleted = value
        }
        if let value = dict["SyncToken"] as? String {
            self.syncToken = value
        }
        if let value = dict["TimeMax"] as? String {
            self.timeMax = value
        }
        if let value = dict["TimeMin"] as? String {
            self.timeMin = value
        }
    }
}

public class ListEventsResponseBody : Tea.TeaModel {
    public class Events : Tea.TeaModel {
        public class Attendees : Tea.TeaModel {
            public var displayName: String?

            public var isOptional: Bool?

            public var responseStatus: String?

            public var self_: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.isOptional != nil {
                    map["IsOptional"] = self.isOptional!
                }
                if self.responseStatus != nil {
                    map["ResponseStatus"] = self.responseStatus!
                }
                if self.self_ != nil {
                    map["Self"] = self.self_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["IsOptional"] as? Bool {
                    self.isOptional = value
                }
                if let value = dict["ResponseStatus"] as? String {
                    self.responseStatus = value
                }
                if let value = dict["Self"] as? Bool {
                    self.self_ = value
                }
            }
        }
        public class Categories : Tea.TeaModel {
            public var displayName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
            }
        }
        public class End : Tea.TeaModel {
            public var date: String?

            public var dateTime: String?

            public var timeZone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.date != nil {
                    map["Date"] = self.date!
                }
                if self.dateTime != nil {
                    map["DateTime"] = self.dateTime!
                }
                if self.timeZone != nil {
                    map["TimeZone"] = self.timeZone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Date"] as? String {
                    self.date = value
                }
                if let value = dict["DateTime"] as? String {
                    self.dateTime = value
                }
                if let value = dict["TimeZone"] as? String {
                    self.timeZone = value
                }
            }
        }
        public class ExtendedProperties : Tea.TeaModel {
            public class SharedProperties : Tea.TeaModel {
                public var belongCorpId: String?

                public var sourceOpenCid: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.belongCorpId != nil {
                        map["BelongCorpId"] = self.belongCorpId!
                    }
                    if self.sourceOpenCid != nil {
                        map["SourceOpenCid"] = self.sourceOpenCid!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BelongCorpId"] as? String {
                        self.belongCorpId = value
                    }
                    if let value = dict["SourceOpenCid"] as? String {
                        self.sourceOpenCid = value
                    }
                }
            }
            public var sharedProperties: ListEventsResponseBody.Events.ExtendedProperties.SharedProperties?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.sharedProperties?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.sharedProperties != nil {
                    map["SharedProperties"] = self.sharedProperties?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SharedProperties"] as? [String: Any?] {
                    var model = ListEventsResponseBody.Events.ExtendedProperties.SharedProperties()
                    model.fromMap(value)
                    self.sharedProperties = model
                }
            }
        }
        public class Location : Tea.TeaModel {
            public var displayName: String?

            public var meetingRooms: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.meetingRooms != nil {
                    map["MeetingRooms"] = self.meetingRooms!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["MeetingRooms"] as? [String] {
                    self.meetingRooms = value
                }
            }
        }
        public class MeetingRooms : Tea.TeaModel {
            public var displayName: String?

            public var responseStatus: String?

            public var roomId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.responseStatus != nil {
                    map["ResponseStatus"] = self.responseStatus!
                }
                if self.roomId != nil {
                    map["RoomId"] = self.roomId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["ResponseStatus"] as? String {
                    self.responseStatus = value
                }
                if let value = dict["RoomId"] as? String {
                    self.roomId = value
                }
            }
        }
        public class OnlineMeetingInfo : Tea.TeaModel {
            public var conferenceId: String?

            public var extraInfo: [String: Any]?

            public var type: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.conferenceId != nil {
                    map["ConferenceId"] = self.conferenceId!
                }
                if self.extraInfo != nil {
                    map["ExtraInfo"] = self.extraInfo!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConferenceId"] as? String {
                    self.conferenceId = value
                }
                if let value = dict["ExtraInfo"] as? [String: Any] {
                    self.extraInfo = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public class Organizer : Tea.TeaModel {
            public var displayName: String?

            public var responseStatus: String?

            public var self_: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.responseStatus != nil {
                    map["ResponseStatus"] = self.responseStatus!
                }
                if self.self_ != nil {
                    map["Self"] = self.self_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["ResponseStatus"] as? String {
                    self.responseStatus = value
                }
                if let value = dict["Self"] as? Bool {
                    self.self_ = value
                }
            }
        }
        public class OriginStart : Tea.TeaModel {
            public var dateTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dateTime != nil {
                    map["DateTime"] = self.dateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DateTime"] as? String {
                    self.dateTime = value
                }
            }
        }
        public class Recurrence : Tea.TeaModel {
            public class Pattern : Tea.TeaModel {
                public var dayOfMonth: Int32?

                public var daysOfWeek: String?

                public var index: String?

                public var interval: Int32?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dayOfMonth != nil {
                        map["DayOfMonth"] = self.dayOfMonth!
                    }
                    if self.daysOfWeek != nil {
                        map["DaysOfWeek"] = self.daysOfWeek!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.interval != nil {
                        map["Interval"] = self.interval!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DayOfMonth"] as? Int32 {
                        self.dayOfMonth = value
                    }
                    if let value = dict["DaysOfWeek"] as? String {
                        self.daysOfWeek = value
                    }
                    if let value = dict["Index"] as? String {
                        self.index = value
                    }
                    if let value = dict["Interval"] as? Int32 {
                        self.interval = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class Range : Tea.TeaModel {
                public var endDate: String?

                public var numberOfOccurrences: Int32?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.endDate != nil {
                        map["EndDate"] = self.endDate!
                    }
                    if self.numberOfOccurrences != nil {
                        map["NumberOfOccurrences"] = self.numberOfOccurrences!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EndDate"] as? String {
                        self.endDate = value
                    }
                    if let value = dict["NumberOfOccurrences"] as? Int32 {
                        self.numberOfOccurrences = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var pattern: ListEventsResponseBody.Events.Recurrence.Pattern?

            public var range: ListEventsResponseBody.Events.Recurrence.Range?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.pattern?.validate()
                try self.range?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.pattern != nil {
                    map["Pattern"] = self.pattern?.toMap()
                }
                if self.range != nil {
                    map["Range"] = self.range?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Pattern"] as? [String: Any?] {
                    var model = ListEventsResponseBody.Events.Recurrence.Pattern()
                    model.fromMap(value)
                    self.pattern = model
                }
                if let value = dict["Range"] as? [String: Any?] {
                    var model = ListEventsResponseBody.Events.Recurrence.Range()
                    model.fromMap(value)
                    self.range = model
                }
            }
        }
        public class Reminders : Tea.TeaModel {
            public var method: String?

            public var minutes: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.minutes != nil {
                    map["Minutes"] = self.minutes!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["Minutes"] as? String {
                    self.minutes = value
                }
            }
        }
        public class RichTextDescription : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Start : Tea.TeaModel {
            public var date: String?

            public var dateTime: String?

            public var timeZone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.date != nil {
                    map["Date"] = self.date!
                }
                if self.dateTime != nil {
                    map["DateTime"] = self.dateTime!
                }
                if self.timeZone != nil {
                    map["TimeZone"] = self.timeZone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Date"] as? String {
                    self.date = value
                }
                if let value = dict["DateTime"] as? String {
                    self.dateTime = value
                }
                if let value = dict["TimeZone"] as? String {
                    self.timeZone = value
                }
            }
        }
        public var attendees: [ListEventsResponseBody.Events.Attendees]?

        public var categories: [ListEventsResponseBody.Events.Categories]?

        public var createTime: String?

        public var description_: String?

        public var end: ListEventsResponseBody.Events.End?

        public var extendedProperties: ListEventsResponseBody.Events.ExtendedProperties?

        public var id: String?

        public var isAllDay: Bool?

        public var location: ListEventsResponseBody.Events.Location?

        public var meetingRooms: [ListEventsResponseBody.Events.MeetingRooms]?

        public var onlineMeetingInfo: ListEventsResponseBody.Events.OnlineMeetingInfo?

        public var organizer: ListEventsResponseBody.Events.Organizer?

        public var originStart: ListEventsResponseBody.Events.OriginStart?

        public var recurrence: ListEventsResponseBody.Events.Recurrence?

        public var reminders: [ListEventsResponseBody.Events.Reminders]?

        public var richTextDescription: ListEventsResponseBody.Events.RichTextDescription?

        public var seriesMasterId: String?

        public var start: ListEventsResponseBody.Events.Start?

        public var status: String?

        public var summary: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.end?.validate()
            try self.extendedProperties?.validate()
            try self.location?.validate()
            try self.onlineMeetingInfo?.validate()
            try self.organizer?.validate()
            try self.originStart?.validate()
            try self.recurrence?.validate()
            try self.richTextDescription?.validate()
            try self.start?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attendees != nil {
                var tmp : [Any] = []
                for k in self.attendees! {
                    tmp.append(k.toMap())
                }
                map["Attendees"] = tmp
            }
            if self.categories != nil {
                var tmp : [Any] = []
                for k in self.categories! {
                    tmp.append(k.toMap())
                }
                map["Categories"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.end != nil {
                map["End"] = self.end?.toMap()
            }
            if self.extendedProperties != nil {
                map["ExtendedProperties"] = self.extendedProperties?.toMap()
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.isAllDay != nil {
                map["IsAllDay"] = self.isAllDay!
            }
            if self.location != nil {
                map["Location"] = self.location?.toMap()
            }
            if self.meetingRooms != nil {
                var tmp : [Any] = []
                for k in self.meetingRooms! {
                    tmp.append(k.toMap())
                }
                map["MeetingRooms"] = tmp
            }
            if self.onlineMeetingInfo != nil {
                map["OnlineMeetingInfo"] = self.onlineMeetingInfo?.toMap()
            }
            if self.organizer != nil {
                map["Organizer"] = self.organizer?.toMap()
            }
            if self.originStart != nil {
                map["OriginStart"] = self.originStart?.toMap()
            }
            if self.recurrence != nil {
                map["Recurrence"] = self.recurrence?.toMap()
            }
            if self.reminders != nil {
                var tmp : [Any] = []
                for k in self.reminders! {
                    tmp.append(k.toMap())
                }
                map["Reminders"] = tmp
            }
            if self.richTextDescription != nil {
                map["RichTextDescription"] = self.richTextDescription?.toMap()
            }
            if self.seriesMasterId != nil {
                map["SeriesMasterId"] = self.seriesMasterId!
            }
            if self.start != nil {
                map["Start"] = self.start?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attendees"] as? [Any?] {
                var tmp : [ListEventsResponseBody.Events.Attendees] = []
                for v in value {
                    if v != nil {
                        var model = ListEventsResponseBody.Events.Attendees()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.attendees = tmp
            }
            if let value = dict["Categories"] as? [Any?] {
                var tmp : [ListEventsResponseBody.Events.Categories] = []
                for v in value {
                    if v != nil {
                        var model = ListEventsResponseBody.Events.Categories()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.categories = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["End"] as? [String: Any?] {
                var model = ListEventsResponseBody.Events.End()
                model.fromMap(value)
                self.end = model
            }
            if let value = dict["ExtendedProperties"] as? [String: Any?] {
                var model = ListEventsResponseBody.Events.ExtendedProperties()
                model.fromMap(value)
                self.extendedProperties = model
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["IsAllDay"] as? Bool {
                self.isAllDay = value
            }
            if let value = dict["Location"] as? [String: Any?] {
                var model = ListEventsResponseBody.Events.Location()
                model.fromMap(value)
                self.location = model
            }
            if let value = dict["MeetingRooms"] as? [Any?] {
                var tmp : [ListEventsResponseBody.Events.MeetingRooms] = []
                for v in value {
                    if v != nil {
                        var model = ListEventsResponseBody.Events.MeetingRooms()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.meetingRooms = tmp
            }
            if let value = dict["OnlineMeetingInfo"] as? [String: Any?] {
                var model = ListEventsResponseBody.Events.OnlineMeetingInfo()
                model.fromMap(value)
                self.onlineMeetingInfo = model
            }
            if let value = dict["Organizer"] as? [String: Any?] {
                var model = ListEventsResponseBody.Events.Organizer()
                model.fromMap(value)
                self.organizer = model
            }
            if let value = dict["OriginStart"] as? [String: Any?] {
                var model = ListEventsResponseBody.Events.OriginStart()
                model.fromMap(value)
                self.originStart = model
            }
            if let value = dict["Recurrence"] as? [String: Any?] {
                var model = ListEventsResponseBody.Events.Recurrence()
                model.fromMap(value)
                self.recurrence = model
            }
            if let value = dict["Reminders"] as? [Any?] {
                var tmp : [ListEventsResponseBody.Events.Reminders] = []
                for v in value {
                    if v != nil {
                        var model = ListEventsResponseBody.Events.Reminders()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.reminders = tmp
            }
            if let value = dict["RichTextDescription"] as? [String: Any?] {
                var model = ListEventsResponseBody.Events.RichTextDescription()
                model.fromMap(value)
                self.richTextDescription = model
            }
            if let value = dict["SeriesMasterId"] as? String {
                self.seriesMasterId = value
            }
            if let value = dict["Start"] as? [String: Any?] {
                var model = ListEventsResponseBody.Events.Start()
                model.fromMap(value)
                self.start = model
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var events: [ListEventsResponseBody.Events]?

    public var nextToken: String?

    public var requestId: String?

    public var syncToken: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.events != nil {
            var tmp : [Any] = []
            for k in self.events! {
                tmp.append(k.toMap())
            }
            map["events"] = tmp
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.syncToken != nil {
            map["syncToken"] = self.syncToken!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["events"] as? [Any?] {
            var tmp : [ListEventsResponseBody.Events] = []
            for v in value {
                if v != nil {
                    var model = ListEventsResponseBody.Events()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.events = tmp
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["syncToken"] as? String {
            self.syncToken = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ListEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEventsViewHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListEventsViewHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListEventsViewHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListEventsViewShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListEventsViewRequest : Tea.TeaModel {
    public var calendarId: String?

    public var maxAttendees: Int32?

    public var maxResults: Int32?

    public var nextToken: String?

    public var timeMax: String?

    public var timeMin: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.maxAttendees != nil {
            map["MaxAttendees"] = self.maxAttendees!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.timeMax != nil {
            map["TimeMax"] = self.timeMax!
        }
        if self.timeMin != nil {
            map["TimeMin"] = self.timeMin!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["MaxAttendees"] as? Int32 {
            self.maxAttendees = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["TimeMax"] as? String {
            self.timeMax = value
        }
        if let value = dict["TimeMin"] as? String {
            self.timeMin = value
        }
    }
}

public class ListEventsViewResponseBody : Tea.TeaModel {
    public class Events : Tea.TeaModel {
        public class Attendees : Tea.TeaModel {
            public var displayName: String?

            public var id: String?

            public var isOptional: Bool?

            public var responseStatus: String?

            public var self_: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.isOptional != nil {
                    map["IsOptional"] = self.isOptional!
                }
                if self.responseStatus != nil {
                    map["ResponseStatus"] = self.responseStatus!
                }
                if self.self_ != nil {
                    map["Self"] = self.self_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["IsOptional"] as? Bool {
                    self.isOptional = value
                }
                if let value = dict["ResponseStatus"] as? String {
                    self.responseStatus = value
                }
                if let value = dict["Self"] as? Bool {
                    self.self_ = value
                }
            }
        }
        public class Categories : Tea.TeaModel {
            public var displayName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
            }
        }
        public class End : Tea.TeaModel {
            public var date: String?

            public var dateTime: String?

            public var timeZone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.date != nil {
                    map["Date"] = self.date!
                }
                if self.dateTime != nil {
                    map["DateTime"] = self.dateTime!
                }
                if self.timeZone != nil {
                    map["TimeZone"] = self.timeZone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Date"] as? String {
                    self.date = value
                }
                if let value = dict["DateTime"] as? String {
                    self.dateTime = value
                }
                if let value = dict["TimeZone"] as? String {
                    self.timeZone = value
                }
            }
        }
        public class ExtendedProperties : Tea.TeaModel {
            public class SharedProperties : Tea.TeaModel {
                public var belongCorpId: String?

                public var sourceOpenCid: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.belongCorpId != nil {
                        map["BelongCorpId"] = self.belongCorpId!
                    }
                    if self.sourceOpenCid != nil {
                        map["SourceOpenCid"] = self.sourceOpenCid!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BelongCorpId"] as? String {
                        self.belongCorpId = value
                    }
                    if let value = dict["SourceOpenCid"] as? String {
                        self.sourceOpenCid = value
                    }
                }
            }
            public var sharedProperties: ListEventsViewResponseBody.Events.ExtendedProperties.SharedProperties?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.sharedProperties?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.sharedProperties != nil {
                    map["SharedProperties"] = self.sharedProperties?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SharedProperties"] as? [String: Any?] {
                    var model = ListEventsViewResponseBody.Events.ExtendedProperties.SharedProperties()
                    model.fromMap(value)
                    self.sharedProperties = model
                }
            }
        }
        public class Location : Tea.TeaModel {
            public var displayName: String?

            public var meetingRooms: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.meetingRooms != nil {
                    map["MeetingRooms"] = self.meetingRooms!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["MeetingRooms"] as? [String] {
                    self.meetingRooms = value
                }
            }
        }
        public class MeetingRooms : Tea.TeaModel {
            public var displayName: String?

            public var responseStatus: String?

            public var roomId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.responseStatus != nil {
                    map["ResponseStatus"] = self.responseStatus!
                }
                if self.roomId != nil {
                    map["RoomId"] = self.roomId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["ResponseStatus"] as? String {
                    self.responseStatus = value
                }
                if let value = dict["RoomId"] as? String {
                    self.roomId = value
                }
            }
        }
        public class OnlineMeetingInfo : Tea.TeaModel {
            public var conferenceId: String?

            public var extraInfo: [String: Any]?

            public var type: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.conferenceId != nil {
                    map["ConferenceId"] = self.conferenceId!
                }
                if self.extraInfo != nil {
                    map["ExtraInfo"] = self.extraInfo!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConferenceId"] as? String {
                    self.conferenceId = value
                }
                if let value = dict["ExtraInfo"] as? [String: Any] {
                    self.extraInfo = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public class Organizer : Tea.TeaModel {
            public var displayName: String?

            public var id: String?

            public var responseStatus: String?

            public var self_: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.responseStatus != nil {
                    map["ResponseStatus"] = self.responseStatus!
                }
                if self.self_ != nil {
                    map["Self"] = self.self_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["ResponseStatus"] as? String {
                    self.responseStatus = value
                }
                if let value = dict["Self"] as? Bool {
                    self.self_ = value
                }
            }
        }
        public class OriginStart : Tea.TeaModel {
            public var dateTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dateTime != nil {
                    map["DateTime"] = self.dateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DateTime"] as? String {
                    self.dateTime = value
                }
            }
        }
        public class Recurrence : Tea.TeaModel {
            public class Pattern : Tea.TeaModel {
                public var dayOfMonth: Int32?

                public var daysOfWeek: String?

                public var index: String?

                public var interval: Int32?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dayOfMonth != nil {
                        map["DayOfMonth"] = self.dayOfMonth!
                    }
                    if self.daysOfWeek != nil {
                        map["DaysOfWeek"] = self.daysOfWeek!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.interval != nil {
                        map["Interval"] = self.interval!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DayOfMonth"] as? Int32 {
                        self.dayOfMonth = value
                    }
                    if let value = dict["DaysOfWeek"] as? String {
                        self.daysOfWeek = value
                    }
                    if let value = dict["Index"] as? String {
                        self.index = value
                    }
                    if let value = dict["Interval"] as? Int32 {
                        self.interval = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class Range : Tea.TeaModel {
                public var endDate: String?

                public var numberOfOccurrences: Int32?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.endDate != nil {
                        map["EndDate"] = self.endDate!
                    }
                    if self.numberOfOccurrences != nil {
                        map["NumberOfOccurrences"] = self.numberOfOccurrences!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EndDate"] as? String {
                        self.endDate = value
                    }
                    if let value = dict["NumberOfOccurrences"] as? Int32 {
                        self.numberOfOccurrences = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var pattern: ListEventsViewResponseBody.Events.Recurrence.Pattern?

            public var range: ListEventsViewResponseBody.Events.Recurrence.Range?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.pattern?.validate()
                try self.range?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.pattern != nil {
                    map["Pattern"] = self.pattern?.toMap()
                }
                if self.range != nil {
                    map["Range"] = self.range?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Pattern"] as? [String: Any?] {
                    var model = ListEventsViewResponseBody.Events.Recurrence.Pattern()
                    model.fromMap(value)
                    self.pattern = model
                }
                if let value = dict["Range"] as? [String: Any?] {
                    var model = ListEventsViewResponseBody.Events.Recurrence.Range()
                    model.fromMap(value)
                    self.range = model
                }
            }
        }
        public class RichTextDescription : Tea.TeaModel {
            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class Start : Tea.TeaModel {
            public var date: String?

            public var dateTime: String?

            public var timeZone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.date != nil {
                    map["Date"] = self.date!
                }
                if self.dateTime != nil {
                    map["DateTime"] = self.dateTime!
                }
                if self.timeZone != nil {
                    map["TimeZone"] = self.timeZone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Date"] as? String {
                    self.date = value
                }
                if let value = dict["DateTime"] as? String {
                    self.dateTime = value
                }
                if let value = dict["TimeZone"] as? String {
                    self.timeZone = value
                }
            }
        }
        public var attendees: [ListEventsViewResponseBody.Events.Attendees]?

        public var categories: [ListEventsViewResponseBody.Events.Categories]?

        public var createTime: String?

        public var description_: String?

        public var end: ListEventsViewResponseBody.Events.End?

        public var extendedProperties: ListEventsViewResponseBody.Events.ExtendedProperties?

        public var id: String?

        public var isAllDay: Bool?

        public var location: ListEventsViewResponseBody.Events.Location?

        public var meetingRooms: [ListEventsViewResponseBody.Events.MeetingRooms]?

        public var onlineMeetingInfo: ListEventsViewResponseBody.Events.OnlineMeetingInfo?

        public var organizer: ListEventsViewResponseBody.Events.Organizer?

        public var originStart: ListEventsViewResponseBody.Events.OriginStart?

        public var recurrence: ListEventsViewResponseBody.Events.Recurrence?

        public var richTextDescription: ListEventsViewResponseBody.Events.RichTextDescription?

        public var seriesMasterId: String?

        public var start: ListEventsViewResponseBody.Events.Start?

        public var status: String?

        public var summary: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.end?.validate()
            try self.extendedProperties?.validate()
            try self.location?.validate()
            try self.onlineMeetingInfo?.validate()
            try self.organizer?.validate()
            try self.originStart?.validate()
            try self.recurrence?.validate()
            try self.richTextDescription?.validate()
            try self.start?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attendees != nil {
                var tmp : [Any] = []
                for k in self.attendees! {
                    tmp.append(k.toMap())
                }
                map["Attendees"] = tmp
            }
            if self.categories != nil {
                var tmp : [Any] = []
                for k in self.categories! {
                    tmp.append(k.toMap())
                }
                map["Categories"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.end != nil {
                map["End"] = self.end?.toMap()
            }
            if self.extendedProperties != nil {
                map["ExtendedProperties"] = self.extendedProperties?.toMap()
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.isAllDay != nil {
                map["IsAllDay"] = self.isAllDay!
            }
            if self.location != nil {
                map["Location"] = self.location?.toMap()
            }
            if self.meetingRooms != nil {
                var tmp : [Any] = []
                for k in self.meetingRooms! {
                    tmp.append(k.toMap())
                }
                map["MeetingRooms"] = tmp
            }
            if self.onlineMeetingInfo != nil {
                map["OnlineMeetingInfo"] = self.onlineMeetingInfo?.toMap()
            }
            if self.organizer != nil {
                map["Organizer"] = self.organizer?.toMap()
            }
            if self.originStart != nil {
                map["OriginStart"] = self.originStart?.toMap()
            }
            if self.recurrence != nil {
                map["Recurrence"] = self.recurrence?.toMap()
            }
            if self.richTextDescription != nil {
                map["RichTextDescription"] = self.richTextDescription?.toMap()
            }
            if self.seriesMasterId != nil {
                map["SeriesMasterId"] = self.seriesMasterId!
            }
            if self.start != nil {
                map["Start"] = self.start?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.summary != nil {
                map["Summary"] = self.summary!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attendees"] as? [Any?] {
                var tmp : [ListEventsViewResponseBody.Events.Attendees] = []
                for v in value {
                    if v != nil {
                        var model = ListEventsViewResponseBody.Events.Attendees()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.attendees = tmp
            }
            if let value = dict["Categories"] as? [Any?] {
                var tmp : [ListEventsViewResponseBody.Events.Categories] = []
                for v in value {
                    if v != nil {
                        var model = ListEventsViewResponseBody.Events.Categories()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.categories = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["End"] as? [String: Any?] {
                var model = ListEventsViewResponseBody.Events.End()
                model.fromMap(value)
                self.end = model
            }
            if let value = dict["ExtendedProperties"] as? [String: Any?] {
                var model = ListEventsViewResponseBody.Events.ExtendedProperties()
                model.fromMap(value)
                self.extendedProperties = model
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["IsAllDay"] as? Bool {
                self.isAllDay = value
            }
            if let value = dict["Location"] as? [String: Any?] {
                var model = ListEventsViewResponseBody.Events.Location()
                model.fromMap(value)
                self.location = model
            }
            if let value = dict["MeetingRooms"] as? [Any?] {
                var tmp : [ListEventsViewResponseBody.Events.MeetingRooms] = []
                for v in value {
                    if v != nil {
                        var model = ListEventsViewResponseBody.Events.MeetingRooms()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.meetingRooms = tmp
            }
            if let value = dict["OnlineMeetingInfo"] as? [String: Any?] {
                var model = ListEventsViewResponseBody.Events.OnlineMeetingInfo()
                model.fromMap(value)
                self.onlineMeetingInfo = model
            }
            if let value = dict["Organizer"] as? [String: Any?] {
                var model = ListEventsViewResponseBody.Events.Organizer()
                model.fromMap(value)
                self.organizer = model
            }
            if let value = dict["OriginStart"] as? [String: Any?] {
                var model = ListEventsViewResponseBody.Events.OriginStart()
                model.fromMap(value)
                self.originStart = model
            }
            if let value = dict["Recurrence"] as? [String: Any?] {
                var model = ListEventsViewResponseBody.Events.Recurrence()
                model.fromMap(value)
                self.recurrence = model
            }
            if let value = dict["RichTextDescription"] as? [String: Any?] {
                var model = ListEventsViewResponseBody.Events.RichTextDescription()
                model.fromMap(value)
                self.richTextDescription = model
            }
            if let value = dict["SeriesMasterId"] as? String {
                self.seriesMasterId = value
            }
            if let value = dict["Start"] as? [String: Any?] {
                var model = ListEventsViewResponseBody.Events.Start()
                model.fromMap(value)
                self.start = model
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Summary"] as? String {
                self.summary = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var events: [ListEventsViewResponseBody.Events]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.events != nil {
            var tmp : [Any] = []
            for k in self.events! {
                tmp.append(k.toMap())
            }
            map["events"] = tmp
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["events"] as? [Any?] {
            var tmp : [ListEventsViewResponseBody.Events] = []
            for v in value {
                if v != nil {
                    var model = ListEventsViewResponseBody.Events()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.events = tmp
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListEventsViewResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEventsViewResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEventsViewResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListFormRemarksHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListFormRemarksHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListFormRemarksHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListFormRemarksShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListFormRemarksRequest : Tea.TeaModel {
    public var appType: String?

    public var formInstanceIdList: [String]?

    public var formUuid: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formInstanceIdList != nil {
            map["FormInstanceIdList"] = self.formInstanceIdList!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormInstanceIdList"] as? [String] {
            self.formInstanceIdList = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class ListFormRemarksShrinkRequest : Tea.TeaModel {
    public var appType: String?

    public var formInstanceIdListShrink: String?

    public var formUuid: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formInstanceIdListShrink != nil {
            map["FormInstanceIdList"] = self.formInstanceIdListShrink!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormInstanceIdList"] as? String {
            self.formInstanceIdListShrink = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class ListFormRemarksResponseBody : Tea.TeaModel {
    public var formRemarkVoMap: [String: Any]?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.formRemarkVoMap != nil {
            map["formRemarkVoMap"] = self.formRemarkVoMap!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["formRemarkVoMap"] as? [String: Any] {
            self.formRemarkVoMap = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ListFormRemarksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListFormRemarksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListFormRemarksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListMessageHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountId != nil {
            map["accountId"] = self.accountId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["accountId"] as? String {
            self.accountId = value
        }
    }
}

public class ListMessageRequest : Tea.TeaModel {
    public var assistantId: String?

    public var limit: Int32?

    public var order: String?

    public var originalAssistantid: String?

    public var runId: String?

    public var threadId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assistantId != nil {
            map["assistantId"] = self.assistantId!
        }
        if self.limit != nil {
            map["limit"] = self.limit!
        }
        if self.order != nil {
            map["order"] = self.order!
        }
        if self.originalAssistantid != nil {
            map["originalAssistantid"] = self.originalAssistantid!
        }
        if self.runId != nil {
            map["runId"] = self.runId!
        }
        if self.threadId != nil {
            map["threadId"] = self.threadId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["assistantId"] as? String {
            self.assistantId = value
        }
        if let value = dict["limit"] as? Int32 {
            self.limit = value
        }
        if let value = dict["order"] as? String {
            self.order = value
        }
        if let value = dict["originalAssistantid"] as? String {
            self.originalAssistantid = value
        }
        if let value = dict["runId"] as? String {
            self.runId = value
        }
        if let value = dict["threadId"] as? String {
            self.threadId = value
        }
    }
}

public class ListMessageResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Content : Tea.TeaModel {
            public class CardCallback : Tea.TeaModel {
                public var content: String?

                public var templateId: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["content"] = self.content!
                    }
                    if self.templateId != nil {
                        map["templateId"] = self.templateId!
                    }
                    if self.userId != nil {
                        map["userId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["content"] as? String {
                        self.content = value
                    }
                    if let value = dict["templateId"] as? String {
                        self.templateId = value
                    }
                    if let value = dict["userId"] as? String {
                        self.userId = value
                    }
                }
            }
            public class DingCard : Tea.TeaModel {
                public var cardDesc: String?

                public var content: String?

                public var contentType: String?

                public var finished: Bool?

                public var templateId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cardDesc != nil {
                        map["cardDesc"] = self.cardDesc!
                    }
                    if self.content != nil {
                        map["content"] = self.content!
                    }
                    if self.contentType != nil {
                        map["contentType"] = self.contentType!
                    }
                    if self.finished != nil {
                        map["finished"] = self.finished!
                    }
                    if self.templateId != nil {
                        map["templateId"] = self.templateId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["cardDesc"] as? String {
                        self.cardDesc = value
                    }
                    if let value = dict["content"] as? String {
                        self.content = value
                    }
                    if let value = dict["contentType"] as? String {
                        self.contentType = value
                    }
                    if let value = dict["finished"] as? Bool {
                        self.finished = value
                    }
                    if let value = dict["templateId"] as? String {
                        self.templateId = value
                    }
                }
            }
            public class ImageUrl : Tea.TeaModel {
                public var detail: String?

                public var imageDesc: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.detail != nil {
                        map["detail"] = self.detail!
                    }
                    if self.imageDesc != nil {
                        map["imageDesc"] = self.imageDesc!
                    }
                    if self.url != nil {
                        map["url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["detail"] as? String {
                        self.detail = value
                    }
                    if let value = dict["imageDesc"] as? String {
                        self.imageDesc = value
                    }
                    if let value = dict["url"] as? String {
                        self.url = value
                    }
                }
            }
            public class Markdown : Tea.TeaModel {
                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.value != nil {
                        map["value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Text : Tea.TeaModel {
                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.value != nil {
                        map["value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["value"] as? String {
                        self.value = value
                    }
                }
            }
            public var cardCallback: ListMessageResponseBody.Data.Content.CardCallback?

            public var dingCard: ListMessageResponseBody.Data.Content.DingCard?

            public var imageUrl: ListMessageResponseBody.Data.Content.ImageUrl?

            public var markdown: ListMessageResponseBody.Data.Content.Markdown?

            public var text: ListMessageResponseBody.Data.Content.Text?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.cardCallback?.validate()
                try self.dingCard?.validate()
                try self.imageUrl?.validate()
                try self.markdown?.validate()
                try self.text?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cardCallback != nil {
                    map["cardCallback"] = self.cardCallback?.toMap()
                }
                if self.dingCard != nil {
                    map["dingCard"] = self.dingCard?.toMap()
                }
                if self.imageUrl != nil {
                    map["imageUrl"] = self.imageUrl?.toMap()
                }
                if self.markdown != nil {
                    map["markdown"] = self.markdown?.toMap()
                }
                if self.text != nil {
                    map["text"] = self.text?.toMap()
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["cardCallback"] as? [String: Any?] {
                    var model = ListMessageResponseBody.Data.Content.CardCallback()
                    model.fromMap(value)
                    self.cardCallback = model
                }
                if let value = dict["dingCard"] as? [String: Any?] {
                    var model = ListMessageResponseBody.Data.Content.DingCard()
                    model.fromMap(value)
                    self.dingCard = model
                }
                if let value = dict["imageUrl"] as? [String: Any?] {
                    var model = ListMessageResponseBody.Data.Content.ImageUrl()
                    model.fromMap(value)
                    self.imageUrl = model
                }
                if let value = dict["markdown"] as? [String: Any?] {
                    var model = ListMessageResponseBody.Data.Content.Markdown()
                    model.fromMap(value)
                    self.markdown = model
                }
                if let value = dict["text"] as? [String: Any?] {
                    var model = ListMessageResponseBody.Data.Content.Text()
                    model.fromMap(value)
                    self.text = model
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
            }
        }
        public var content: [ListMessageResponseBody.Data.Content]?

        public var createAt: Int64?

        public var id: String?

        public var metadata: [String: Any]?

        public var object: String?

        public var role: String?

        public var runId: String?

        public var threadId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                var tmp : [Any] = []
                for k in self.content! {
                    tmp.append(k.toMap())
                }
                map["content"] = tmp
            }
            if self.createAt != nil {
                map["createAt"] = self.createAt!
            }
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.metadata != nil {
                map["metadata"] = self.metadata!
            }
            if self.object != nil {
                map["object"] = self.object!
            }
            if self.role != nil {
                map["role"] = self.role!
            }
            if self.runId != nil {
                map["runId"] = self.runId!
            }
            if self.threadId != nil {
                map["threadId"] = self.threadId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["content"] as? [Any?] {
                var tmp : [ListMessageResponseBody.Data.Content] = []
                for v in value {
                    if v != nil {
                        var model = ListMessageResponseBody.Data.Content()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.content = tmp
            }
            if let value = dict["createAt"] as? Int64 {
                self.createAt = value
            }
            if let value = dict["id"] as? String {
                self.id = value
            }
            if let value = dict["metadata"] as? [String: Any] {
                self.metadata = value
            }
            if let value = dict["object"] as? String {
                self.object = value
            }
            if let value = dict["role"] as? String {
                self.role = value
            }
            if let value = dict["runId"] as? String {
                self.runId = value
            }
            if let value = dict["threadId"] as? String {
                self.threadId = value
            }
        }
    }
    public var data: [ListMessageResponseBody.Data]?

    public var object: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["data"] = tmp
        }
        if self.object != nil {
            map["object"] = self.object!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? [Any?] {
            var tmp : [ListMessageResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = ListMessageResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["object"] as? String {
            self.object = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListMessageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListMessageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListMessageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListMultiDimTableRecordsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListMultiDimTableRecordsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListMultiDimTableRecordsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListMultiDimTableRecordsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListMultiDimTableRecordsRequest : Tea.TeaModel {
    public class Filter : Tea.TeaModel {
        public class Conditions : Tea.TeaModel {
            public var field: String?

            public var operator_: String?

            public var value: [Any]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.field != nil {
                    map["Field"] = self.field!
                }
                if self.operator_ != nil {
                    map["Operator"] = self.operator_!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Field"] as? String {
                    self.field = value
                }
                if let value = dict["Operator"] as? String {
                    self.operator_ = value
                }
                if let value = dict["Value"] as? [Any] {
                    self.value = value
                }
            }
        }
        public var combination: String?

        public var conditions: [ListMultiDimTableRecordsRequest.Filter.Conditions]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.combination != nil {
                map["Combination"] = self.combination!
            }
            if self.conditions != nil {
                var tmp : [Any] = []
                for k in self.conditions! {
                    tmp.append(k.toMap())
                }
                map["Conditions"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Combination"] as? String {
                self.combination = value
            }
            if let value = dict["Conditions"] as? [Any?] {
                var tmp : [ListMultiDimTableRecordsRequest.Filter.Conditions] = []
                for v in value {
                    if v != nil {
                        var model = ListMultiDimTableRecordsRequest.Filter.Conditions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.conditions = tmp
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var baseId: String?

    public var filter: ListMultiDimTableRecordsRequest.Filter?

    public var maxResults: Int32?

    public var nextToken: String?

    public var sheetIdOrName: String?

    public var tenantContext: ListMultiDimTableRecordsRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.filter?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.filter != nil {
            map["Filter"] = self.filter?.toMap()
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["Filter"] as? [String: Any?] {
            var model = ListMultiDimTableRecordsRequest.Filter()
            model.fromMap(value)
            self.filter = model
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ListMultiDimTableRecordsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class ListMultiDimTableRecordsShrinkRequest : Tea.TeaModel {
    public var baseId: String?

    public var filterShrink: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var sheetIdOrName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.filterShrink != nil {
            map["Filter"] = self.filterShrink!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["Filter"] as? String {
            self.filterShrink = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class ListMultiDimTableRecordsResponseBody : Tea.TeaModel {
    public class Records : Tea.TeaModel {
        public class CreatedBy : Tea.TeaModel {
            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class LastModifiedBy : Tea.TeaModel {
            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var createdBy: ListMultiDimTableRecordsResponseBody.Records.CreatedBy?

        public var createdTime: Int64?

        public var fields: [String: Any]?

        public var id: String?

        public var lastModifiedBy: ListMultiDimTableRecordsResponseBody.Records.LastModifiedBy?

        public var lastModifiedTime: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.createdBy?.validate()
            try self.lastModifiedBy?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createdBy != nil {
                map["CreatedBy"] = self.createdBy?.toMap()
            }
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.fields != nil {
                map["Fields"] = self.fields!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.lastModifiedBy != nil {
                map["LastModifiedBy"] = self.lastModifiedBy?.toMap()
            }
            if self.lastModifiedTime != nil {
                map["LastModifiedTime"] = self.lastModifiedTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreatedBy"] as? [String: Any?] {
                var model = ListMultiDimTableRecordsResponseBody.Records.CreatedBy()
                model.fromMap(value)
                self.createdBy = model
            }
            if let value = dict["CreatedTime"] as? Int64 {
                self.createdTime = value
            }
            if let value = dict["Fields"] as? [String: Any] {
                self.fields = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["LastModifiedBy"] as? [String: Any?] {
                var model = ListMultiDimTableRecordsResponseBody.Records.LastModifiedBy()
                model.fromMap(value)
                self.lastModifiedBy = model
            }
            if let value = dict["LastModifiedTime"] as? Int64 {
                self.lastModifiedTime = value
            }
        }
    }
    public var hasMore: Bool?

    public var nextToken: String?

    public var records: [ListMultiDimTableRecordsResponseBody.Records]?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hasMore != nil {
            map["hasMore"] = self.hasMore!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.records != nil {
            var tmp : [Any] = []
            for k in self.records! {
                tmp.append(k.toMap())
            }
            map["records"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["hasMore"] as? Bool {
            self.hasMore = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["records"] as? [Any?] {
            var tmp : [ListMultiDimTableRecordsResponseBody.Records] = []
            for v in value {
                if v != nil {
                    var model = ListMultiDimTableRecordsResponseBody.Records()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.records = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ListMultiDimTableRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListMultiDimTableRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListMultiDimTableRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListNavigationByFormTypeHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListNavigationByFormTypeHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListNavigationByFormTypeHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListNavigationByFormTypeShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListNavigationByFormTypeRequest : Tea.TeaModel {
    public var appType: String?

    public var formType: String?

    public var language: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formType != nil {
            map["FormType"] = self.formType!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormType"] as? String {
            self.formType = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class ListNavigationByFormTypeResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public class Title : Tea.TeaModel {
            public var nameInChinese: String?

            public var nameInEnglish: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.nameInChinese != nil {
                    map["NameInChinese"] = self.nameInChinese!
                }
                if self.nameInEnglish != nil {
                    map["NameInEnglish"] = self.nameInEnglish!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NameInChinese"] as? String {
                    self.nameInChinese = value
                }
                if let value = dict["NameInEnglish"] as? String {
                    self.nameInEnglish = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var formUuid: String?

        public var processCode: String?

        public var title: ListNavigationByFormTypeResponseBody.Result.Title?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.title?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.formUuid != nil {
                map["FormUuid"] = self.formUuid!
            }
            if self.processCode != nil {
                map["ProcessCode"] = self.processCode!
            }
            if self.title != nil {
                map["Title"] = self.title?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FormUuid"] as? String {
                self.formUuid = value
            }
            if let value = dict["ProcessCode"] as? String {
                self.processCode = value
            }
            if let value = dict["Title"] as? [String: Any?] {
                var model = ListNavigationByFormTypeResponseBody.Result.Title()
                model.fromMap(value)
                self.title = model
            }
        }
    }
    public var requestId: String?

    public var result: [ListNavigationByFormTypeResponseBody.Result]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["result"] = tmp
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [Any?] {
            var tmp : [ListNavigationByFormTypeResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = ListNavigationByFormTypeResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ListNavigationByFormTypeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListNavigationByFormTypeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListNavigationByFormTypeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListNodesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListNodesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListNodesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListNodesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListNodesRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var maxResults: Int32?

    public var nextToken: String?

    public var parentNodeId: String?

    public var tenantContext: ListNodesRequest.TenantContext?

    public var withPermissionRole: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.parentNodeId != nil {
            map["ParentNodeId"] = self.parentNodeId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.withPermissionRole != nil {
            map["WithPermissionRole"] = self.withPermissionRole!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["ParentNodeId"] as? String {
            self.parentNodeId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ListNodesRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WithPermissionRole"] as? Bool {
            self.withPermissionRole = value
        }
    }
}

public class ListNodesShrinkRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var parentNodeId: String?

    public var tenantContextShrink: String?

    public var withPermissionRole: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.parentNodeId != nil {
            map["ParentNodeId"] = self.parentNodeId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.withPermissionRole != nil {
            map["WithPermissionRole"] = self.withPermissionRole!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["ParentNodeId"] as? String {
            self.parentNodeId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WithPermissionRole"] as? Bool {
            self.withPermissionRole = value
        }
    }
}

public class ListNodesResponseBody : Tea.TeaModel {
    public class Nodes : Tea.TeaModel {
        public class StatisticalInfo : Tea.TeaModel {
            public var wordCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.wordCount != nil {
                    map["WordCount"] = self.wordCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["WordCount"] as? Int64 {
                    self.wordCount = value
                }
            }
        }
        public var category: String?

        public var createTime: String?

        public var creatorId: String?

        public var extension_: String?

        public var hasChildren: Bool?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var nodeId: String?

        public var permissionRole: String?

        public var size: Int64?

        public var statisticalInfo: ListNodesResponseBody.Nodes.StatisticalInfo?

        public var type: String?

        public var url: String?

        public var workspaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.statisticalInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.hasChildren != nil {
                map["HasChildren"] = self.hasChildren!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nodeId != nil {
                map["NodeId"] = self.nodeId!
            }
            if self.permissionRole != nil {
                map["PermissionRole"] = self.permissionRole!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.statisticalInfo != nil {
                map["StatisticalInfo"] = self.statisticalInfo?.toMap()
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.workspaceId != nil {
                map["WorkspaceId"] = self.workspaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["HasChildren"] as? Bool {
                self.hasChildren = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NodeId"] as? String {
                self.nodeId = value
            }
            if let value = dict["PermissionRole"] as? String {
                self.permissionRole = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["StatisticalInfo"] as? [String: Any?] {
                var model = ListNodesResponseBody.Nodes.StatisticalInfo()
                model.fromMap(value)
                self.statisticalInfo = model
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["WorkspaceId"] as? String {
                self.workspaceId = value
            }
        }
    }
    public var nextToken: String?

    public var nodes: [ListNodesResponseBody.Nodes]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.nodes != nil {
            var tmp : [Any] = []
            for k in self.nodes! {
                tmp.append(k.toMap())
            }
            map["nodes"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["nodes"] as? [Any?] {
            var tmp : [ListNodesResponseBody.Nodes] = []
            for v in value {
                if v != nil {
                    var model = ListNodesResponseBody.Nodes()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.nodes = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListNodesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListNodesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListNodesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPermissionsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListPermissionsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListPermissionsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListPermissionsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListPermissionsRequest : Tea.TeaModel {
    public class Option : Tea.TeaModel {
        public var filterRoleIds: [String]?

        public var maxResults: Int32?

        public var nextToken: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.filterRoleIds != nil {
                map["FilterRoleIds"] = self.filterRoleIds!
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FilterRoleIds"] as? [String] {
                self.filterRoleIds = value
            }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dentryUuid: String?

    public var option: ListPermissionsRequest.Option?

    public var tenantContext: ListPermissionsRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.option?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.option != nil {
            map["Option"] = self.option?.toMap()
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["Option"] as? [String: Any?] {
            var model = ListPermissionsRequest.Option()
            model.fromMap(value)
            self.option = model
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ListPermissionsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class ListPermissionsShrinkRequest : Tea.TeaModel {
    public var dentryUuid: String?

    public var optionShrink: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.optionShrink != nil {
            map["Option"] = self.optionShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["Option"] as? String {
            self.optionShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class ListPermissionsResponseBody : Tea.TeaModel {
    public class Permissions : Tea.TeaModel {
        public class Member : Tea.TeaModel {
            public var corpId: String?

            public var id: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.corpId != nil {
                    map["CorpId"] = self.corpId!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CorpId"] as? String {
                    self.corpId = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class Role : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var dentryUuid: String?

        public var member: ListPermissionsResponseBody.Permissions.Member?

        public var role: ListPermissionsResponseBody.Permissions.Role?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.member?.validate()
            try self.role?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dentryUuid != nil {
                map["DentryUuid"] = self.dentryUuid!
            }
            if self.member != nil {
                map["Member"] = self.member?.toMap()
            }
            if self.role != nil {
                map["Role"] = self.role?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DentryUuid"] as? String {
                self.dentryUuid = value
            }
            if let value = dict["Member"] as? [String: Any?] {
                var model = ListPermissionsResponseBody.Permissions.Member()
                model.fromMap(value)
                self.member = model
            }
            if let value = dict["Role"] as? [String: Any?] {
                var model = ListPermissionsResponseBody.Permissions.Role()
                model.fromMap(value)
                self.role = model
            }
        }
    }
    public var duration: Int64?

    public var nextToken: String?

    public var permissions: [ListPermissionsResponseBody.Permissions]?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.duration != nil {
            map["duration"] = self.duration!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.permissions != nil {
            var tmp : [Any] = []
            for k in self.permissions! {
                tmp.append(k.toMap())
            }
            map["permissions"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["duration"] as? Int64 {
            self.duration = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["permissions"] as? [Any?] {
            var tmp : [ListPermissionsResponseBody.Permissions] = []
            for v in value {
                if v != nil {
                    var model = ListPermissionsResponseBody.Permissions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.permissions = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ListPermissionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPermissionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPermissionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListReportHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListReportHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListReportHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListReportShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListReportRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var cursor: Int64?

    public var endTime: Int64?

    public var modifiedEndTime: Int64?

    public var modifiedStartTime: Int64?

    public var size: Int64?

    public var startTime: Int64?

    public var templateName: String?

    public var tenantContext: ListReportRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cursor != nil {
            map["Cursor"] = self.cursor!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.modifiedEndTime != nil {
            map["ModifiedEndTime"] = self.modifiedEndTime!
        }
        if self.modifiedStartTime != nil {
            map["ModifiedStartTime"] = self.modifiedStartTime!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Cursor"] as? Int64 {
            self.cursor = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ModifiedEndTime"] as? Int64 {
            self.modifiedEndTime = value
        }
        if let value = dict["ModifiedStartTime"] as? Int64 {
            self.modifiedStartTime = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ListReportRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class ListReportShrinkRequest : Tea.TeaModel {
    public var cursor: Int64?

    public var endTime: Int64?

    public var modifiedEndTime: Int64?

    public var modifiedStartTime: Int64?

    public var size: Int64?

    public var startTime: Int64?

    public var templateName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cursor != nil {
            map["Cursor"] = self.cursor!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.modifiedEndTime != nil {
            map["ModifiedEndTime"] = self.modifiedEndTime!
        }
        if self.modifiedStartTime != nil {
            map["ModifiedStartTime"] = self.modifiedStartTime!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Cursor"] as? Int64 {
            self.cursor = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ModifiedEndTime"] as? Int64 {
            self.modifiedEndTime = value
        }
        if let value = dict["ModifiedStartTime"] as? Int64 {
            self.modifiedStartTime = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class ListReportResponseBody : Tea.TeaModel {
    public class DataList : Tea.TeaModel {
        public class Contents : Tea.TeaModel {
            public var key: String?

            public var sort: String?

            public var type: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.sort != nil {
                    map["Sort"] = self.sort!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Sort"] as? String {
                    self.sort = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var contents: [ListReportResponseBody.DataList.Contents]?

        public var createTime: Int64?

        public var creatorId: String?

        public var creatorName: String?

        public var deptName: String?

        public var images: [String]?

        public var latitude: String?

        public var longitude: String?

        public var modifiedTime: Int64?

        public var remark: String?

        public var reportId: String?

        public var templateName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contents != nil {
                var tmp : [Any] = []
                for k in self.contents! {
                    tmp.append(k.toMap())
                }
                map["Contents"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.creatorName != nil {
                map["CreatorName"] = self.creatorName!
            }
            if self.deptName != nil {
                map["DeptName"] = self.deptName!
            }
            if self.images != nil {
                map["Images"] = self.images!
            }
            if self.latitude != nil {
                map["Latitude"] = self.latitude!
            }
            if self.longitude != nil {
                map["Longitude"] = self.longitude!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.remark != nil {
                map["Remark"] = self.remark!
            }
            if self.reportId != nil {
                map["ReportId"] = self.reportId!
            }
            if self.templateName != nil {
                map["TemplateName"] = self.templateName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Contents"] as? [Any?] {
                var tmp : [ListReportResponseBody.DataList.Contents] = []
                for v in value {
                    if v != nil {
                        var model = ListReportResponseBody.DataList.Contents()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.contents = tmp
            }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["CreatorName"] as? String {
                self.creatorName = value
            }
            if let value = dict["DeptName"] as? String {
                self.deptName = value
            }
            if let value = dict["Images"] as? [String] {
                self.images = value
            }
            if let value = dict["Latitude"] as? String {
                self.latitude = value
            }
            if let value = dict["Longitude"] as? String {
                self.longitude = value
            }
            if let value = dict["ModifiedTime"] as? Int64 {
                self.modifiedTime = value
            }
            if let value = dict["Remark"] as? String {
                self.remark = value
            }
            if let value = dict["ReportId"] as? String {
                self.reportId = value
            }
            if let value = dict["TemplateName"] as? String {
                self.templateName = value
            }
        }
    }
    public var dataList: [ListReportResponseBody.DataList]?

    public var hasMore: Bool?

    public var nextCursor: Int64?

    public var requestId: String?

    public var size: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataList != nil {
            var tmp : [Any] = []
            for k in self.dataList! {
                tmp.append(k.toMap())
            }
            map["dataList"] = tmp
        }
        if self.hasMore != nil {
            map["hasMore"] = self.hasMore!
        }
        if self.nextCursor != nil {
            map["nextCursor"] = self.nextCursor!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.size != nil {
            map["size"] = self.size!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["dataList"] as? [Any?] {
            var tmp : [ListReportResponseBody.DataList] = []
            for v in value {
                if v != nil {
                    var model = ListReportResponseBody.DataList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dataList = tmp
        }
        if let value = dict["hasMore"] as? Bool {
            self.hasMore = value
        }
        if let value = dict["nextCursor"] as? Int64 {
            self.nextCursor = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["size"] as? Int64 {
            self.size = value
        }
    }
}

public class ListReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTableDataByFormInstanceIdTableIdHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListTableDataByFormInstanceIdTableIdHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListTableDataByFormInstanceIdTableIdHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListTableDataByFormInstanceIdTableIdShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListTableDataByFormInstanceIdTableIdRequest : Tea.TeaModel {
    public var appType: String?

    public var formInstanceId: String?

    public var formUuid: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var systemToken: String?

    public var tableFieldId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formInstanceId != nil {
            map["FormInstanceId"] = self.formInstanceId!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.tableFieldId != nil {
            map["TableFieldId"] = self.tableFieldId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormInstanceId"] as? String {
            self.formInstanceId = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["TableFieldId"] as? String {
            self.tableFieldId = value
        }
    }
}

public class ListTableDataByFormInstanceIdTableIdResponseBody : Tea.TeaModel {
    public var data: [String]?

    public var pageNumber: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["data"] = self.data!
        }
        if self.pageNumber != nil {
            map["pageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? [String] {
            self.data = value
        }
        if let value = dict["pageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ListTableDataByFormInstanceIdTableIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTableDataByFormInstanceIdTableIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTableDataByFormInstanceIdTableIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTeamsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListTeamsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListTeamsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListTeamsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListTeamsRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var maxResults: Int32?

    public var nextToken: String?

    public var tenantContext: ListTeamsRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ListTeamsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class ListTeamsShrinkRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class ListTeamsResponseBody : Tea.TeaModel {
    public class Teams : Tea.TeaModel {
        public class Icon : Tea.TeaModel {
            public var type: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var corpId: String?

        public var cover: String?

        public var createTime: String?

        public var creatorId: String?

        public var description_: String?

        public var icon: ListTeamsResponseBody.Teams.Icon?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var teamId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.icon?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.cover != nil {
                map["Cover"] = self.cover!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.icon != nil {
                map["Icon"] = self.icon?.toMap()
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.teamId != nil {
                map["TeamId"] = self.teamId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["Cover"] as? String {
                self.cover = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Icon"] as? [String: Any?] {
                var model = ListTeamsResponseBody.Teams.Icon()
                model.fromMap(value)
                self.icon = model
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["TeamId"] as? String {
                self.teamId = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var teams: [ListTeamsResponseBody.Teams]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.teams != nil {
            var tmp : [Any] = []
            for k in self.teams! {
                tmp.append(k.toMap())
            }
            map["teams"] = tmp
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["teams"] as? [Any?] {
            var tmp : [ListTeamsResponseBody.Teams] = []
            for v in value {
                if v != nil {
                    var model = ListTeamsResponseBody.Teams()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.teams = tmp
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ListTeamsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTeamsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTeamsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTemplateHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListTemplateHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListTemplateHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListTemplateShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListTemplateRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var maxResults: Int32?

    public var nextToken: String?

    public var templateType: String?

    public var tenantContext: ListTemplateRequest.TenantContext?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.templateType != nil {
            map["TemplateType"] = self.templateType!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["TemplateType"] as? String {
            self.templateType = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ListTemplateRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListTemplateShrinkRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var templateType: String?

    public var tenantContextShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.templateType != nil {
            map["TemplateType"] = self.templateType!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["TemplateType"] as? String {
            self.templateType = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class ListTemplateResponseBody : Tea.TeaModel {
    public class TemplateList : Tea.TeaModel {
        public var coverUrl: String?

        public var createTime: Int64?

        public var docType: String?

        public var id: String?

        public var templateType: String?

        public var title: String?

        public var updateTime: Int64?

        public var workspaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.coverUrl != nil {
                map["CoverUrl"] = self.coverUrl!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.docType != nil {
                map["DocType"] = self.docType!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.templateType != nil {
                map["TemplateType"] = self.templateType!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.workspaceId != nil {
                map["WorkspaceId"] = self.workspaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CoverUrl"] as? String {
                self.coverUrl = value
            }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["DocType"] as? String {
                self.docType = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["TemplateType"] as? String {
                self.templateType = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UpdateTime"] as? Int64 {
                self.updateTime = value
            }
            if let value = dict["WorkspaceId"] as? String {
                self.workspaceId = value
            }
        }
    }
    public var hasMore: Bool?

    public var nextToken: String?

    public var requestId: String?

    public var templateList: [ListTemplateResponseBody.TemplateList]?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hasMore != nil {
            map["hasMore"] = self.hasMore!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.templateList != nil {
            var tmp : [Any] = []
            for k in self.templateList! {
                tmp.append(k.toMap())
            }
            map["templateList"] = tmp
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["hasMore"] as? Bool {
            self.hasMore = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["templateList"] as? [Any?] {
            var tmp : [ListTemplateResponseBody.TemplateList] = []
            for v in value {
                if v != nil {
                    var model = ListTemplateResponseBody.TemplateList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.templateList = tmp
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ListTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTicketOperateRecordHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListTicketOperateRecordHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListTicketOperateRecordHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListTicketOperateRecordShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListTicketOperateRecordRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var openTeamId: String?

    public var openTicketId: String?

    public var tenantContext: ListTicketOperateRecordRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTicketId != nil {
            map["OpenTicketId"] = self.openTicketId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ListTicketOperateRecordRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class ListTicketOperateRecordShrinkRequest : Tea.TeaModel {
    public var openTeamId: String?

    public var openTicketId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTicketId != nil {
            map["OpenTicketId"] = self.openTicketId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class ListTicketOperateRecordResponseBody : Tea.TeaModel {
    public class Records : Tea.TeaModel {
        public class Operator_ : Tea.TeaModel {
            public var nickName: String?

            public var unionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.nickName != nil {
                    map["NickName"] = self.nickName!
                }
                if self.unionId != nil {
                    map["UnionId"] = self.unionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NickName"] as? String {
                    self.nickName = value
                }
                if let value = dict["UnionId"] as? String {
                    self.unionId = value
                }
            }
        }
        public class TicketMemo : Tea.TeaModel {
            public class Attachments : Tea.TeaModel {
                public var fileName: String?

                public var key: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.fileName != nil {
                        map["FileName"] = self.fileName!
                    }
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["FileName"] as? String {
                        self.fileName = value
                    }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                }
            }
            public var attachments: [ListTicketOperateRecordResponseBody.Records.TicketMemo.Attachments]?

            public var memo: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.attachments != nil {
                    var tmp : [Any] = []
                    for k in self.attachments! {
                        tmp.append(k.toMap())
                    }
                    map["Attachments"] = tmp
                }
                if self.memo != nil {
                    map["Memo"] = self.memo!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Attachments"] as? [Any?] {
                    var tmp : [ListTicketOperateRecordResponseBody.Records.TicketMemo.Attachments] = []
                    for v in value {
                        if v != nil {
                            var model = ListTicketOperateRecordResponseBody.Records.TicketMemo.Attachments()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.attachments = tmp
                }
                if let value = dict["Memo"] as? String {
                    self.memo = value
                }
            }
        }
        public var openTicketId: String?

        public var operateData: String?

        public var operateTime: String?

        public var operation: String?

        public var operationDisplayName: String?

        public var operator_: ListTicketOperateRecordResponseBody.Records.Operator_?

        public var ticketMemo: ListTicketOperateRecordResponseBody.Records.TicketMemo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.operator_?.validate()
            try self.ticketMemo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.openTicketId != nil {
                map["OpenTicketId"] = self.openTicketId!
            }
            if self.operateData != nil {
                map["OperateData"] = self.operateData!
            }
            if self.operateTime != nil {
                map["OperateTime"] = self.operateTime!
            }
            if self.operation != nil {
                map["Operation"] = self.operation!
            }
            if self.operationDisplayName != nil {
                map["OperationDisplayName"] = self.operationDisplayName!
            }
            if self.operator_ != nil {
                map["Operator"] = self.operator_?.toMap()
            }
            if self.ticketMemo != nil {
                map["TicketMemo"] = self.ticketMemo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OpenTicketId"] as? String {
                self.openTicketId = value
            }
            if let value = dict["OperateData"] as? String {
                self.operateData = value
            }
            if let value = dict["OperateTime"] as? String {
                self.operateTime = value
            }
            if let value = dict["Operation"] as? String {
                self.operation = value
            }
            if let value = dict["OperationDisplayName"] as? String {
                self.operationDisplayName = value
            }
            if let value = dict["Operator"] as? [String: Any?] {
                var model = ListTicketOperateRecordResponseBody.Records.Operator_()
                model.fromMap(value)
                self.operator_ = model
            }
            if let value = dict["TicketMemo"] as? [String: Any?] {
                var model = ListTicketOperateRecordResponseBody.Records.TicketMemo()
                model.fromMap(value)
                self.ticketMemo = model
            }
        }
    }
    public var records: [ListTicketOperateRecordResponseBody.Records]?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.records != nil {
            var tmp : [Any] = []
            for k in self.records! {
                tmp.append(k.toMap())
            }
            map["records"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["records"] as? [Any?] {
            var tmp : [ListTicketOperateRecordResponseBody.Records] = []
            for v in value {
                if v != nil {
                    var model = ListTicketOperateRecordResponseBody.Records()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.records = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class ListTicketOperateRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTicketOperateRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTicketOperateRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWorkspacesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ListWorkspacesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ListWorkspacesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ListWorkspacesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ListWorkspacesRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var maxResults: Int32?

    public var nextToken: String?

    public var orderBy: String?

    public var teamId: String?

    public var tenantContext: ListWorkspacesRequest.TenantContext?

    public var withPermissionRole: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.teamId != nil {
            map["TeamId"] = self.teamId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.withPermissionRole != nil {
            map["WithPermissionRole"] = self.withPermissionRole!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["TeamId"] as? String {
            self.teamId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ListWorkspacesRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WithPermissionRole"] as? Bool {
            self.withPermissionRole = value
        }
    }
}

public class ListWorkspacesShrinkRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var orderBy: String?

    public var teamId: String?

    public var tenantContextShrink: String?

    public var withPermissionRole: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.teamId != nil {
            map["TeamId"] = self.teamId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.withPermissionRole != nil {
            map["WithPermissionRole"] = self.withPermissionRole!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["TeamId"] as? String {
            self.teamId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WithPermissionRole"] as? Bool {
            self.withPermissionRole = value
        }
    }
}

public class ListWorkspacesResponseBody : Tea.TeaModel {
    public class Workspaces : Tea.TeaModel {
        public class Icon : Tea.TeaModel {
            public var type: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var corpId: String?

        public var cover: String?

        public var createTime: String?

        public var creatorId: String?

        public var description_: String?

        public var icon: ListWorkspacesResponseBody.Workspaces.Icon?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var permissionRole: String?

        public var rootNodeId: String?

        public var teamId: String?

        public var type: String?

        public var url: String?

        public var workspaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.icon?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.cover != nil {
                map["Cover"] = self.cover!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.icon != nil {
                map["Icon"] = self.icon?.toMap()
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.permissionRole != nil {
                map["PermissionRole"] = self.permissionRole!
            }
            if self.rootNodeId != nil {
                map["RootNodeId"] = self.rootNodeId!
            }
            if self.teamId != nil {
                map["TeamId"] = self.teamId!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.workspaceId != nil {
                map["WorkspaceId"] = self.workspaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["Cover"] as? String {
                self.cover = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Icon"] as? [String: Any?] {
                var model = ListWorkspacesResponseBody.Workspaces.Icon()
                model.fromMap(value)
                self.icon = model
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PermissionRole"] as? String {
                self.permissionRole = value
            }
            if let value = dict["RootNodeId"] as? String {
                self.rootNodeId = value
            }
            if let value = dict["TeamId"] as? String {
                self.teamId = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["WorkspaceId"] as? String {
                self.workspaceId = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var workspaces: [ListWorkspacesResponseBody.Workspaces]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.workspaces != nil {
            var tmp : [Any] = []
            for k in self.workspaces! {
                tmp.append(k.toMap())
            }
            map["workspaces"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["workspaces"] as? [Any?] {
            var tmp : [ListWorkspacesResponseBody.Workspaces] = []
            for v in value {
                if v != nil {
                    var model = ListWorkspacesResponseBody.Workspaces()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.workspaces = tmp
        }
    }
}

public class ListWorkspacesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWorkspacesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWorkspacesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PatchEventHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: PatchEventHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = PatchEventHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class PatchEventShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class PatchEventRequest : Tea.TeaModel {
    public class Attendees : Tea.TeaModel {
        public var id: String?

        public var isOptional: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.isOptional != nil {
                map["isOptional"] = self.isOptional!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["id"] as? String {
                self.id = value
            }
            if let value = dict["isOptional"] as? Bool {
                self.isOptional = value
            }
        }
    }
    public class CardInstances : Tea.TeaModel {
        public var outTrackId: String?

        public var scenario: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.outTrackId != nil {
                map["OutTrackId"] = self.outTrackId!
            }
            if self.scenario != nil {
                map["Scenario"] = self.scenario!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OutTrackId"] as? String {
                self.outTrackId = value
            }
            if let value = dict["Scenario"] as? String {
                self.scenario = value
            }
        }
    }
    public class End : Tea.TeaModel {
        public var date: String?

        public var dateTime: String?

        public var timeZone: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.date != nil {
                map["date"] = self.date!
            }
            if self.dateTime != nil {
                map["dateTime"] = self.dateTime!
            }
            if self.timeZone != nil {
                map["timeZone"] = self.timeZone!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["date"] as? String {
                self.date = value
            }
            if let value = dict["dateTime"] as? String {
                self.dateTime = value
            }
            if let value = dict["timeZone"] as? String {
                self.timeZone = value
            }
        }
    }
    public class Location : Tea.TeaModel {
        public var displayName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["displayName"] = self.displayName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["displayName"] as? String {
                self.displayName = value
            }
        }
    }
    public class Recurrence : Tea.TeaModel {
        public class Pattern : Tea.TeaModel {
            public var dayOfMonth: Int32?

            public var daysOfWeek: String?

            public var index: String?

            public var interval: Int32?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dayOfMonth != nil {
                    map["dayOfMonth"] = self.dayOfMonth!
                }
                if self.daysOfWeek != nil {
                    map["daysOfWeek"] = self.daysOfWeek!
                }
                if self.index != nil {
                    map["index"] = self.index!
                }
                if self.interval != nil {
                    map["interval"] = self.interval!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["dayOfMonth"] as? Int32 {
                    self.dayOfMonth = value
                }
                if let value = dict["daysOfWeek"] as? String {
                    self.daysOfWeek = value
                }
                if let value = dict["index"] as? String {
                    self.index = value
                }
                if let value = dict["interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
            }
        }
        public class Range : Tea.TeaModel {
            public var endDate: String?

            public var numberOfOccurrences: Int32?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["endDate"] = self.endDate!
                }
                if self.numberOfOccurrences != nil {
                    map["numberOfOccurrences"] = self.numberOfOccurrences!
                }
                if self.type != nil {
                    map["type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["endDate"] as? String {
                    self.endDate = value
                }
                if let value = dict["numberOfOccurrences"] as? Int32 {
                    self.numberOfOccurrences = value
                }
                if let value = dict["type"] as? String {
                    self.type = value
                }
            }
        }
        public var pattern: PatchEventRequest.Recurrence.Pattern?

        public var range: PatchEventRequest.Recurrence.Range?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.pattern?.validate()
            try self.range?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pattern != nil {
                map["pattern"] = self.pattern?.toMap()
            }
            if self.range != nil {
                map["range"] = self.range?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["pattern"] as? [String: Any?] {
                var model = PatchEventRequest.Recurrence.Pattern()
                model.fromMap(value)
                self.pattern = model
            }
            if let value = dict["range"] as? [String: Any?] {
                var model = PatchEventRequest.Recurrence.Range()
                model.fromMap(value)
                self.range = model
            }
        }
    }
    public class Reminders : Tea.TeaModel {
        public var method: String?

        public var minutes: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.method != nil {
                map["method"] = self.method!
            }
            if self.minutes != nil {
                map["minutes"] = self.minutes!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["method"] as? String {
                self.method = value
            }
            if let value = dict["minutes"] as? Int32 {
                self.minutes = value
            }
        }
    }
    public class Start : Tea.TeaModel {
        public var date: String?

        public var dateTime: String?

        public var timeZone: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.date != nil {
                map["date"] = self.date!
            }
            if self.dateTime != nil {
                map["dateTime"] = self.dateTime!
            }
            if self.timeZone != nil {
                map["timeZone"] = self.timeZone!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["date"] as? String {
                self.date = value
            }
            if let value = dict["dateTime"] as? String {
                self.dateTime = value
            }
            if let value = dict["timeZone"] as? String {
                self.timeZone = value
            }
        }
    }
    public var attendees: [PatchEventRequest.Attendees]?

    public var calendarId: String?

    public var cardInstances: [PatchEventRequest.CardInstances]?

    public var description_: String?

    public var end: PatchEventRequest.End?

    public var eventId: String?

    public var extra: [String: String]?

    public var isAllDay: Bool?

    public var location: PatchEventRequest.Location?

    public var recurrence: PatchEventRequest.Recurrence?

    public var reminders: [PatchEventRequest.Reminders]?

    public var start: PatchEventRequest.Start?

    public var summary: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.end?.validate()
        try self.location?.validate()
        try self.recurrence?.validate()
        try self.start?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attendees != nil {
            var tmp : [Any] = []
            for k in self.attendees! {
                tmp.append(k.toMap())
            }
            map["Attendees"] = tmp
        }
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.cardInstances != nil {
            var tmp : [Any] = []
            for k in self.cardInstances! {
                tmp.append(k.toMap())
            }
            map["CardInstances"] = tmp
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.end != nil {
            map["End"] = self.end?.toMap()
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.extra != nil {
            map["Extra"] = self.extra!
        }
        if self.isAllDay != nil {
            map["IsAllDay"] = self.isAllDay!
        }
        if self.location != nil {
            map["Location"] = self.location?.toMap()
        }
        if self.recurrence != nil {
            map["Recurrence"] = self.recurrence?.toMap()
        }
        if self.reminders != nil {
            var tmp : [Any] = []
            for k in self.reminders! {
                tmp.append(k.toMap())
            }
            map["Reminders"] = tmp
        }
        if self.start != nil {
            map["Start"] = self.start?.toMap()
        }
        if self.summary != nil {
            map["Summary"] = self.summary!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Attendees"] as? [Any?] {
            var tmp : [PatchEventRequest.Attendees] = []
            for v in value {
                if v != nil {
                    var model = PatchEventRequest.Attendees()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.attendees = tmp
        }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["CardInstances"] as? [Any?] {
            var tmp : [PatchEventRequest.CardInstances] = []
            for v in value {
                if v != nil {
                    var model = PatchEventRequest.CardInstances()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.cardInstances = tmp
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["End"] as? [String: Any?] {
            var model = PatchEventRequest.End()
            model.fromMap(value)
            self.end = model
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["Extra"] as? [String: String] {
            self.extra = value
        }
        if let value = dict["IsAllDay"] as? Bool {
            self.isAllDay = value
        }
        if let value = dict["Location"] as? [String: Any?] {
            var model = PatchEventRequest.Location()
            model.fromMap(value)
            self.location = model
        }
        if let value = dict["Recurrence"] as? [String: Any?] {
            var model = PatchEventRequest.Recurrence()
            model.fromMap(value)
            self.recurrence = model
        }
        if let value = dict["Reminders"] as? [Any?] {
            var tmp : [PatchEventRequest.Reminders] = []
            for v in value {
                if v != nil {
                    var model = PatchEventRequest.Reminders()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.reminders = tmp
        }
        if let value = dict["Start"] as? [String: Any?] {
            var model = PatchEventRequest.Start()
            model.fromMap(value)
            self.start = model
        }
        if let value = dict["Summary"] as? String {
            self.summary = value
        }
    }
}

public class PatchEventShrinkRequest : Tea.TeaModel {
    public var attendeesShrink: String?

    public var calendarId: String?

    public var cardInstancesShrink: String?

    public var description_: String?

    public var endShrink: String?

    public var eventId: String?

    public var extraShrink: String?

    public var isAllDay: Bool?

    public var locationShrink: String?

    public var recurrenceShrink: String?

    public var remindersShrink: String?

    public var startShrink: String?

    public var summary: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attendeesShrink != nil {
            map["Attendees"] = self.attendeesShrink!
        }
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.cardInstancesShrink != nil {
            map["CardInstances"] = self.cardInstancesShrink!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.endShrink != nil {
            map["End"] = self.endShrink!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.extraShrink != nil {
            map["Extra"] = self.extraShrink!
        }
        if self.isAllDay != nil {
            map["IsAllDay"] = self.isAllDay!
        }
        if self.locationShrink != nil {
            map["Location"] = self.locationShrink!
        }
        if self.recurrenceShrink != nil {
            map["Recurrence"] = self.recurrenceShrink!
        }
        if self.remindersShrink != nil {
            map["Reminders"] = self.remindersShrink!
        }
        if self.startShrink != nil {
            map["Start"] = self.startShrink!
        }
        if self.summary != nil {
            map["Summary"] = self.summary!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Attendees"] as? String {
            self.attendeesShrink = value
        }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["CardInstances"] as? String {
            self.cardInstancesShrink = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["End"] as? String {
            self.endShrink = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["Extra"] as? String {
            self.extraShrink = value
        }
        if let value = dict["IsAllDay"] as? Bool {
            self.isAllDay = value
        }
        if let value = dict["Location"] as? String {
            self.locationShrink = value
        }
        if let value = dict["Recurrence"] as? String {
            self.recurrenceShrink = value
        }
        if let value = dict["Reminders"] as? String {
            self.remindersShrink = value
        }
        if let value = dict["Start"] as? String {
            self.startShrink = value
        }
        if let value = dict["Summary"] as? String {
            self.summary = value
        }
    }
}

public class PatchEventResponseBody : Tea.TeaModel {
    public class Attendees : Tea.TeaModel {
        public var displayName: String?

        public var id: String?

        public var isOptional: Bool?

        public var responseStatus: String?

        public var self_: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.isOptional != nil {
                map["IsOptional"] = self.isOptional!
            }
            if self.responseStatus != nil {
                map["ResponseStatus"] = self.responseStatus!
            }
            if self.self_ != nil {
                map["Self"] = self.self_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["IsOptional"] as? Bool {
                self.isOptional = value
            }
            if let value = dict["ResponseStatus"] as? String {
                self.responseStatus = value
            }
            if let value = dict["Self"] as? Bool {
                self.self_ = value
            }
        }
    }
    public class End : Tea.TeaModel {
        public var date: String?

        public var dateTime: String?

        public var timeZone: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.date != nil {
                map["Date"] = self.date!
            }
            if self.dateTime != nil {
                map["DateTime"] = self.dateTime!
            }
            if self.timeZone != nil {
                map["TimeZone"] = self.timeZone!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Date"] as? String {
                self.date = value
            }
            if let value = dict["DateTime"] as? String {
                self.dateTime = value
            }
            if let value = dict["TimeZone"] as? String {
                self.timeZone = value
            }
        }
    }
    public class Location : Tea.TeaModel {
        public var displayName: String?

        public var meetingRooms: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.meetingRooms != nil {
                map["MeetingRooms"] = self.meetingRooms!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["MeetingRooms"] as? [String] {
                self.meetingRooms = value
            }
        }
    }
    public class Organizer : Tea.TeaModel {
        public var displayName: String?

        public var id: String?

        public var responseStatus: String?

        public var self_: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.responseStatus != nil {
                map["ResponseStatus"] = self.responseStatus!
            }
            if self.self_ != nil {
                map["Self"] = self.self_!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["ResponseStatus"] as? String {
                self.responseStatus = value
            }
            if let value = dict["Self"] as? Bool {
                self.self_ = value
            }
        }
    }
    public class Recurrence : Tea.TeaModel {
        public class Pattern : Tea.TeaModel {
            public var dayOfMonth: Int32?

            public var daysOfWeek: String?

            public var index: String?

            public var interval: Int32?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dayOfMonth != nil {
                    map["DayOfMonth"] = self.dayOfMonth!
                }
                if self.daysOfWeek != nil {
                    map["DaysOfWeek"] = self.daysOfWeek!
                }
                if self.index != nil {
                    map["Index"] = self.index!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DayOfMonth"] as? Int32 {
                    self.dayOfMonth = value
                }
                if let value = dict["DaysOfWeek"] as? String {
                    self.daysOfWeek = value
                }
                if let value = dict["Index"] as? String {
                    self.index = value
                }
                if let value = dict["Interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class Range : Tea.TeaModel {
            public var endDate: String?

            public var numberOfOccurrences: Int32?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endDate != nil {
                    map["EndDate"] = self.endDate!
                }
                if self.numberOfOccurrences != nil {
                    map["NumberOfOccurrences"] = self.numberOfOccurrences!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndDate"] as? String {
                    self.endDate = value
                }
                if let value = dict["NumberOfOccurrences"] as? Int32 {
                    self.numberOfOccurrences = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var pattern: PatchEventResponseBody.Recurrence.Pattern?

        public var range: PatchEventResponseBody.Recurrence.Range?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.pattern?.validate()
            try self.range?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pattern != nil {
                map["Pattern"] = self.pattern?.toMap()
            }
            if self.range != nil {
                map["Range"] = self.range?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Pattern"] as? [String: Any?] {
                var model = PatchEventResponseBody.Recurrence.Pattern()
                model.fromMap(value)
                self.pattern = model
            }
            if let value = dict["Range"] as? [String: Any?] {
                var model = PatchEventResponseBody.Recurrence.Range()
                model.fromMap(value)
                self.range = model
            }
        }
    }
    public class Reminders : Tea.TeaModel {
        public var method: String?

        public var minutes: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.method != nil {
                map["Method"] = self.method!
            }
            if self.minutes != nil {
                map["Minutes"] = self.minutes!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Method"] as? String {
                self.method = value
            }
            if let value = dict["Minutes"] as? String {
                self.minutes = value
            }
        }
    }
    public class Start : Tea.TeaModel {
        public var date: String?

        public var dateTime: String?

        public var timeZone: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.date != nil {
                map["Date"] = self.date!
            }
            if self.dateTime != nil {
                map["DateTime"] = self.dateTime!
            }
            if self.timeZone != nil {
                map["TimeZone"] = self.timeZone!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Date"] as? String {
                self.date = value
            }
            if let value = dict["DateTime"] as? String {
                self.dateTime = value
            }
            if let value = dict["TimeZone"] as? String {
                self.timeZone = value
            }
        }
    }
    public var attendees: [PatchEventResponseBody.Attendees]?

    public var createTime: String?

    public var description_: String?

    public var end: PatchEventResponseBody.End?

    public var id: String?

    public var isAllDay: Bool?

    public var location: PatchEventResponseBody.Location?

    public var organizer: PatchEventResponseBody.Organizer?

    public var recurrence: PatchEventResponseBody.Recurrence?

    public var reminders: [PatchEventResponseBody.Reminders]?

    public var requestId: String?

    public var start: PatchEventResponseBody.Start?

    public var summary: String?

    public var updateTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.end?.validate()
        try self.location?.validate()
        try self.organizer?.validate()
        try self.recurrence?.validate()
        try self.start?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attendees != nil {
            var tmp : [Any] = []
            for k in self.attendees! {
                tmp.append(k.toMap())
            }
            map["attendees"] = tmp
        }
        if self.createTime != nil {
            map["createTime"] = self.createTime!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.end != nil {
            map["end"] = self.end?.toMap()
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.isAllDay != nil {
            map["isAllDay"] = self.isAllDay!
        }
        if self.location != nil {
            map["location"] = self.location?.toMap()
        }
        if self.organizer != nil {
            map["organizer"] = self.organizer?.toMap()
        }
        if self.recurrence != nil {
            map["recurrence"] = self.recurrence?.toMap()
        }
        if self.reminders != nil {
            var tmp : [Any] = []
            for k in self.reminders! {
                tmp.append(k.toMap())
            }
            map["reminders"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.start != nil {
            map["start"] = self.start?.toMap()
        }
        if self.summary != nil {
            map["summary"] = self.summary!
        }
        if self.updateTime != nil {
            map["updateTime"] = self.updateTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["attendees"] as? [Any?] {
            var tmp : [PatchEventResponseBody.Attendees] = []
            for v in value {
                if v != nil {
                    var model = PatchEventResponseBody.Attendees()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.attendees = tmp
        }
        if let value = dict["createTime"] as? String {
            self.createTime = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["end"] as? [String: Any?] {
            var model = PatchEventResponseBody.End()
            model.fromMap(value)
            self.end = model
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["isAllDay"] as? Bool {
            self.isAllDay = value
        }
        if let value = dict["location"] as? [String: Any?] {
            var model = PatchEventResponseBody.Location()
            model.fromMap(value)
            self.location = model
        }
        if let value = dict["organizer"] as? [String: Any?] {
            var model = PatchEventResponseBody.Organizer()
            model.fromMap(value)
            self.organizer = model
        }
        if let value = dict["recurrence"] as? [String: Any?] {
            var model = PatchEventResponseBody.Recurrence()
            model.fromMap(value)
            self.recurrence = model
        }
        if let value = dict["reminders"] as? [Any?] {
            var tmp : [PatchEventResponseBody.Reminders] = []
            for v in value {
                if v != nil {
                    var model = PatchEventResponseBody.Reminders()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.reminders = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["start"] as? [String: Any?] {
            var model = PatchEventResponseBody.Start()
            model.fromMap(value)
            self.start = model
        }
        if let value = dict["summary"] as? String {
            self.summary = value
        }
        if let value = dict["updateTime"] as? String {
            self.updateTime = value
        }
    }
}

public class PatchEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PatchEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PatchEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCloudRecordTextHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryCloudRecordTextHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryCloudRecordTextHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryCloudRecordTextShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryCloudRecordTextRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var direction: String?

    public var maxResults: Int64?

    public var nextToken: Int64?

    public var startTime: Int64?

    public var tenantContext: QueryCloudRecordTextRequest.TenantContext?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.direction != nil {
            map["Direction"] = self.direction!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Direction"] as? String {
            self.direction = value
        }
        if let value = dict["MaxResults"] as? Int64 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? Int64 {
            self.nextToken = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryCloudRecordTextRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class QueryCloudRecordTextShrinkRequest : Tea.TeaModel {
    public var direction: String?

    public var maxResults: Int64?

    public var nextToken: Int64?

    public var startTime: Int64?

    public var tenantContextShrink: String?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.direction != nil {
            map["Direction"] = self.direction!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Direction"] as? String {
            self.direction = value
        }
        if let value = dict["MaxResults"] as? Int64 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? Int64 {
            self.nextToken = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class QueryCloudRecordTextResponseBody : Tea.TeaModel {
    public class ParagraphList : Tea.TeaModel {
        public class SentenceList : Tea.TeaModel {
            public class WordList : Tea.TeaModel {
                public var endTime: Int64?

                public var startTime: Int64?

                public var word: String?

                public var wordId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.endTime != nil {
                        map["EndTime"] = self.endTime!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    if self.word != nil {
                        map["Word"] = self.word!
                    }
                    if self.wordId != nil {
                        map["WordId"] = self.wordId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EndTime"] as? Int64 {
                        self.endTime = value
                    }
                    if let value = dict["StartTime"] as? Int64 {
                        self.startTime = value
                    }
                    if let value = dict["Word"] as? String {
                        self.word = value
                    }
                    if let value = dict["WordId"] as? String {
                        self.wordId = value
                    }
                }
            }
            public var endTime: Int64?

            public var sentence: String?

            public var startTime: Int64?

            public var userId: String?

            public var wordList: [QueryCloudRecordTextResponseBody.ParagraphList.SentenceList.WordList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.sentence != nil {
                    map["Sentence"] = self.sentence!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.wordList != nil {
                    var tmp : [Any] = []
                    for k in self.wordList! {
                        tmp.append(k.toMap())
                    }
                    map["WordList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndTime"] as? Int64 {
                    self.endTime = value
                }
                if let value = dict["Sentence"] as? String {
                    self.sentence = value
                }
                if let value = dict["StartTime"] as? Int64 {
                    self.startTime = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["WordList"] as? [Any?] {
                    var tmp : [QueryCloudRecordTextResponseBody.ParagraphList.SentenceList.WordList] = []
                    for v in value {
                        if v != nil {
                            var model = QueryCloudRecordTextResponseBody.ParagraphList.SentenceList.WordList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.wordList = tmp
                }
            }
        }
        public var endTime: Int64?

        public var nextTtoken: Int64?

        public var nickName: String?

        public var paragraph: String?

        public var recordId: Int64?

        public var sentenceList: [QueryCloudRecordTextResponseBody.ParagraphList.SentenceList]?

        public var startTime: Int64?

        public var status: Int64?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.nextTtoken != nil {
                map["NextTtoken"] = self.nextTtoken!
            }
            if self.nickName != nil {
                map["NickName"] = self.nickName!
            }
            if self.paragraph != nil {
                map["Paragraph"] = self.paragraph!
            }
            if self.recordId != nil {
                map["RecordId"] = self.recordId!
            }
            if self.sentenceList != nil {
                var tmp : [Any] = []
                for k in self.sentenceList! {
                    tmp.append(k.toMap())
                }
                map["SentenceList"] = tmp
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndTime"] as? Int64 {
                self.endTime = value
            }
            if let value = dict["NextTtoken"] as? Int64 {
                self.nextTtoken = value
            }
            if let value = dict["NickName"] as? String {
                self.nickName = value
            }
            if let value = dict["Paragraph"] as? String {
                self.paragraph = value
            }
            if let value = dict["RecordId"] as? Int64 {
                self.recordId = value
            }
            if let value = dict["SentenceList"] as? [Any?] {
                var tmp : [QueryCloudRecordTextResponseBody.ParagraphList.SentenceList] = []
                for v in value {
                    if v != nil {
                        var model = QueryCloudRecordTextResponseBody.ParagraphList.SentenceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.sentenceList = tmp
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
            if let value = dict["Status"] as? Int64 {
                self.status = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var hasMore: Bool?

    public var paragraphList: [QueryCloudRecordTextResponseBody.ParagraphList]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hasMore != nil {
            map["hasMore"] = self.hasMore!
        }
        if self.paragraphList != nil {
            var tmp : [Any] = []
            for k in self.paragraphList! {
                tmp.append(k.toMap())
            }
            map["paragraphList"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["hasMore"] as? Bool {
            self.hasMore = value
        }
        if let value = dict["paragraphList"] as? [Any?] {
            var tmp : [QueryCloudRecordTextResponseBody.ParagraphList] = []
            for v in value {
                if v != nil {
                    var model = QueryCloudRecordTextResponseBody.ParagraphList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.paragraphList = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryCloudRecordTextResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCloudRecordTextResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCloudRecordTextResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCloudRecordVideoHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryCloudRecordVideoHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryCloudRecordVideoHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryCloudRecordVideoShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryCloudRecordVideoRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: QueryCloudRecordVideoRequest.TenantContext?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryCloudRecordVideoRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class QueryCloudRecordVideoShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class QueryCloudRecordVideoResponseBody : Tea.TeaModel {
    public class VideoList : Tea.TeaModel {
        public var duration: Int64?

        public var endTime: Int64?

        public var fileSize: Int64?

        public var mediaId: String?

        public var recordId: String?

        public var recordType: Int64?

        public var regionId: String?

        public var startTime: Int64?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.fileSize != nil {
                map["FileSize"] = self.fileSize!
            }
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.recordId != nil {
                map["RecordId"] = self.recordId!
            }
            if self.recordType != nil {
                map["RecordType"] = self.recordType!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Duration"] as? Int64 {
                self.duration = value
            }
            if let value = dict["EndTime"] as? Int64 {
                self.endTime = value
            }
            if let value = dict["FileSize"] as? Int64 {
                self.fileSize = value
            }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["RecordId"] as? String {
                self.recordId = value
            }
            if let value = dict["RecordType"] as? Int64 {
                self.recordType = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var requestId: String?

    public var videoList: [QueryCloudRecordVideoResponseBody.VideoList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.videoList != nil {
            var tmp : [Any] = []
            for k in self.videoList! {
                tmp.append(k.toMap())
            }
            map["videoList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["videoList"] as? [Any?] {
            var tmp : [QueryCloudRecordVideoResponseBody.VideoList] = []
            for v in value {
                if v != nil {
                    var model = QueryCloudRecordVideoResponseBody.VideoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.videoList = tmp
        }
    }
}

public class QueryCloudRecordVideoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCloudRecordVideoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCloudRecordVideoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryCloudRecordVideoPlayInfoHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryCloudRecordVideoPlayInfoHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryCloudRecordVideoPlayInfoHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryCloudRecordVideoPlayInfoShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryCloudRecordVideoPlayInfoRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var conferenceId: String?

    public var mediaId: String?

    public var regionId: String?

    public var tenantContext: QueryCloudRecordVideoPlayInfoRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.conferenceId != nil {
            map["ConferenceId"] = self.conferenceId!
        }
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryCloudRecordVideoPlayInfoRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class QueryCloudRecordVideoPlayInfoShrinkRequest : Tea.TeaModel {
    public var conferenceId: String?

    public var mediaId: String?

    public var regionId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.conferenceId != nil {
            map["ConferenceId"] = self.conferenceId!
        }
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class QueryCloudRecordVideoPlayInfoResponseBody : Tea.TeaModel {
    public var duration: Int64?

    public var fileSize: Int64?

    public var mp4FileUrl: String?

    public var playUrl: String?

    public var requestId: String?

    public var status: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.duration != nil {
            map["duration"] = self.duration!
        }
        if self.fileSize != nil {
            map["fileSize"] = self.fileSize!
        }
        if self.mp4FileUrl != nil {
            map["mp4FileUrl"] = self.mp4FileUrl!
        }
        if self.playUrl != nil {
            map["playUrl"] = self.playUrl!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["duration"] as? Int64 {
            self.duration = value
        }
        if let value = dict["fileSize"] as? Int64 {
            self.fileSize = value
        }
        if let value = dict["mp4FileUrl"] as? String {
            self.mp4FileUrl = value
        }
        if let value = dict["playUrl"] as? String {
            self.playUrl = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["status"] as? Int64 {
            self.status = value
        }
    }
}

public class QueryCloudRecordVideoPlayInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryCloudRecordVideoPlayInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryCloudRecordVideoPlayInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryConferenceInfoHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryConferenceInfoHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryConferenceInfoHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryConferenceInfoShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryConferenceInfoRequest : Tea.TeaModel {
    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class QueryConferenceInfoResponseBody : Tea.TeaModel {
    public class ConfInfo : Tea.TeaModel {
        public var activeNum: Int32?

        public var attendNum: Int32?

        public var confDuration: Int64?

        public var conferenceId: String?

        public var creatorId: String?

        public var creatorNick: String?

        public var endTime: Int64?

        public var externalLinkUrl: String?

        public var invitedNum: Int32?

        public var roomCode: String?

        public var startTime: Int64?

        public var status: Int32?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.activeNum != nil {
                map["ActiveNum"] = self.activeNum!
            }
            if self.attendNum != nil {
                map["AttendNum"] = self.attendNum!
            }
            if self.confDuration != nil {
                map["ConfDuration"] = self.confDuration!
            }
            if self.conferenceId != nil {
                map["ConferenceId"] = self.conferenceId!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.creatorNick != nil {
                map["CreatorNick"] = self.creatorNick!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.externalLinkUrl != nil {
                map["ExternalLinkUrl"] = self.externalLinkUrl!
            }
            if self.invitedNum != nil {
                map["InvitedNum"] = self.invitedNum!
            }
            if self.roomCode != nil {
                map["RoomCode"] = self.roomCode!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActiveNum"] as? Int32 {
                self.activeNum = value
            }
            if let value = dict["AttendNum"] as? Int32 {
                self.attendNum = value
            }
            if let value = dict["ConfDuration"] as? Int64 {
                self.confDuration = value
            }
            if let value = dict["ConferenceId"] as? String {
                self.conferenceId = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["CreatorNick"] as? String {
                self.creatorNick = value
            }
            if let value = dict["EndTime"] as? Int64 {
                self.endTime = value
            }
            if let value = dict["ExternalLinkUrl"] as? String {
                self.externalLinkUrl = value
            }
            if let value = dict["InvitedNum"] as? Int32 {
                self.invitedNum = value
            }
            if let value = dict["RoomCode"] as? String {
                self.roomCode = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var confInfo: QueryConferenceInfoResponseBody.ConfInfo?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.confInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.confInfo != nil {
            map["confInfo"] = self.confInfo?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["confInfo"] as? [String: Any?] {
            var model = QueryConferenceInfoResponseBody.ConfInfo()
            model.fromMap(value)
            self.confInfo = model
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryConferenceInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryConferenceInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryConferenceInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryConferenceInfoByRoomCodeHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryConferenceInfoByRoomCodeHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryConferenceInfoByRoomCodeHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryConferenceInfoByRoomCodeShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryConferenceInfoByRoomCodeRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: QueryConferenceInfoByRoomCodeRequest.TenantContext?

    public var maxResults: Int32?

    public var nextToken: String?

    public var roomCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.maxResults != nil {
            map["maxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.roomCode != nil {
            map["roomCode"] = self.roomCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryConferenceInfoByRoomCodeRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["maxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["roomCode"] as? String {
            self.roomCode = value
        }
    }
}

public class QueryConferenceInfoByRoomCodeShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var roomCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.maxResults != nil {
            map["maxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.roomCode != nil {
            map["roomCode"] = self.roomCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["maxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["roomCode"] as? String {
            self.roomCode = value
        }
    }
}

public class QueryConferenceInfoByRoomCodeResponseBody : Tea.TeaModel {
    public class ConferenceList : Tea.TeaModel {
        public var bizType: String?

        public var confDuration: Int64?

        public var conferenceId: String?

        public var creatorId: String?

        public var creatorNick: String?

        public var endTime: Int64?

        public var externalLinkUrl: String?

        public var roomCode: String?

        public var scheduleConferenceId: String?

        public var startTime: Int64?

        public var status: Int32?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizType != nil {
                map["BizType"] = self.bizType!
            }
            if self.confDuration != nil {
                map["ConfDuration"] = self.confDuration!
            }
            if self.conferenceId != nil {
                map["ConferenceId"] = self.conferenceId!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.creatorNick != nil {
                map["CreatorNick"] = self.creatorNick!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.externalLinkUrl != nil {
                map["ExternalLinkUrl"] = self.externalLinkUrl!
            }
            if self.roomCode != nil {
                map["RoomCode"] = self.roomCode!
            }
            if self.scheduleConferenceId != nil {
                map["ScheduleConferenceId"] = self.scheduleConferenceId!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizType"] as? String {
                self.bizType = value
            }
            if let value = dict["ConfDuration"] as? Int64 {
                self.confDuration = value
            }
            if let value = dict["ConferenceId"] as? String {
                self.conferenceId = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["CreatorNick"] as? String {
                self.creatorNick = value
            }
            if let value = dict["EndTime"] as? Int64 {
                self.endTime = value
            }
            if let value = dict["ExternalLinkUrl"] as? String {
                self.externalLinkUrl = value
            }
            if let value = dict["RoomCode"] as? String {
                self.roomCode = value
            }
            if let value = dict["ScheduleConferenceId"] as? String {
                self.scheduleConferenceId = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var conferenceList: [QueryConferenceInfoByRoomCodeResponseBody.ConferenceList]?

    public var dingtalkRequestId: String?

    public var hasMore: Bool?

    public var nextToken: String?

    public var requestId: String?

    public var totalCount: Int32?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.conferenceList != nil {
            var tmp : [Any] = []
            for k in self.conferenceList! {
                tmp.append(k.toMap())
            }
            map["conferenceList"] = tmp
        }
        if self.dingtalkRequestId != nil {
            map["dingtalkRequestId"] = self.dingtalkRequestId!
        }
        if self.hasMore != nil {
            map["hasMore"] = self.hasMore!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["conferenceList"] as? [Any?] {
            var tmp : [QueryConferenceInfoByRoomCodeResponseBody.ConferenceList] = []
            for v in value {
                if v != nil {
                    var model = QueryConferenceInfoByRoomCodeResponseBody.ConferenceList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.conferenceList = tmp
        }
        if let value = dict["dingtalkRequestId"] as? String {
            self.dingtalkRequestId = value
        }
        if let value = dict["hasMore"] as? Bool {
            self.hasMore = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class QueryConferenceInfoByRoomCodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryConferenceInfoByRoomCodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryConferenceInfoByRoomCodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryConferenceMembersHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryConferenceMembersHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryConferenceMembersHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryConferenceMembersShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryConferenceMembersRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var maxResults: Int32?

    public var nextToken: String?

    public var tenantContext: QueryConferenceMembersRequest.TenantContext?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryConferenceMembersRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class QueryConferenceMembersShrinkRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var tenantContextShrink: String?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class QueryConferenceMembersResponseBody : Tea.TeaModel {
    public class MemberModels : Tea.TeaModel {
        public var attendStatus: Int32?

        public var coHost: Bool?

        public var conferenceId: String?

        public var duration: Int64?

        public var host: Bool?

        public var joinTime: Int64?

        public var leaveTime: Int64?

        public var outerOrgMember: Bool?

        public var pstnJoin: Bool?

        public var userId: String?

        public var userNick: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attendStatus != nil {
                map["AttendStatus"] = self.attendStatus!
            }
            if self.coHost != nil {
                map["CoHost"] = self.coHost!
            }
            if self.conferenceId != nil {
                map["ConferenceId"] = self.conferenceId!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.host != nil {
                map["Host"] = self.host!
            }
            if self.joinTime != nil {
                map["JoinTime"] = self.joinTime!
            }
            if self.leaveTime != nil {
                map["LeaveTime"] = self.leaveTime!
            }
            if self.outerOrgMember != nil {
                map["OuterOrgMember"] = self.outerOrgMember!
            }
            if self.pstnJoin != nil {
                map["PstnJoin"] = self.pstnJoin!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.userNick != nil {
                map["UserNick"] = self.userNick!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AttendStatus"] as? Int32 {
                self.attendStatus = value
            }
            if let value = dict["CoHost"] as? Bool {
                self.coHost = value
            }
            if let value = dict["ConferenceId"] as? String {
                self.conferenceId = value
            }
            if let value = dict["Duration"] as? Int64 {
                self.duration = value
            }
            if let value = dict["Host"] as? Bool {
                self.host = value
            }
            if let value = dict["JoinTime"] as? Int64 {
                self.joinTime = value
            }
            if let value = dict["LeaveTime"] as? Int64 {
                self.leaveTime = value
            }
            if let value = dict["OuterOrgMember"] as? Bool {
                self.outerOrgMember = value
            }
            if let value = dict["PstnJoin"] as? Bool {
                self.pstnJoin = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["UserNick"] as? String {
                self.userNick = value
            }
        }
    }
    public var memberModels: [QueryConferenceMembersResponseBody.MemberModels]?

    public var nextToken: String?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.memberModels != nil {
            var tmp : [Any] = []
            for k in self.memberModels! {
                tmp.append(k.toMap())
            }
            map["memberModels"] = tmp
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["memberModels"] as? [Any?] {
            var tmp : [QueryConferenceMembersResponseBody.MemberModels] = []
            for v in value {
                if v != nil {
                    var model = QueryConferenceMembersResponseBody.MemberModels()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.memberModels = tmp
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class QueryConferenceMembersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryConferenceMembersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryConferenceMembersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryDentriesInfoHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryDentriesInfoHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryDentriesInfoHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryDentriesInfoShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryDentriesInfoRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var appIdsForAppProperties: [String]?

    public var dentryId: String?

    public var spaceId: String?

    public var tenantContext: QueryDentriesInfoRequest.TenantContext?

    public var unionId: String?

    public var withThumbnail: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appIdsForAppProperties != nil {
            map["AppIdsForAppProperties"] = self.appIdsForAppProperties!
        }
        if self.dentryId != nil {
            map["DentryId"] = self.dentryId!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.unionId != nil {
            map["UnionId"] = self.unionId!
        }
        if self.withThumbnail != nil {
            map["WithThumbnail"] = self.withThumbnail!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppIdsForAppProperties"] as? [String] {
            self.appIdsForAppProperties = value
        }
        if let value = dict["DentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryDentriesInfoRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["UnionId"] as? String {
            self.unionId = value
        }
        if let value = dict["WithThumbnail"] as? Bool {
            self.withThumbnail = value
        }
    }
}

public class QueryDentriesInfoShrinkRequest : Tea.TeaModel {
    public var appIdsForAppPropertiesShrink: String?

    public var dentryId: String?

    public var spaceId: String?

    public var tenantContextShrink: String?

    public var unionId: String?

    public var withThumbnail: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appIdsForAppPropertiesShrink != nil {
            map["AppIdsForAppProperties"] = self.appIdsForAppPropertiesShrink!
        }
        if self.dentryId != nil {
            map["DentryId"] = self.dentryId!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.unionId != nil {
            map["UnionId"] = self.unionId!
        }
        if self.withThumbnail != nil {
            map["WithThumbnail"] = self.withThumbnail!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppIdsForAppProperties"] as? String {
            self.appIdsForAppPropertiesShrink = value
        }
        if let value = dict["DentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["UnionId"] as? String {
            self.unionId = value
        }
        if let value = dict["WithThumbnail"] as? Bool {
            self.withThumbnail = value
        }
    }
}

public class QueryDentriesInfoResponseBody : Tea.TeaModel {
    public class Dentry : Tea.TeaModel {
        public class Properties : Tea.TeaModel {
            public var readOnly: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.readOnly != nil {
                    map["ReadOnly"] = self.readOnly!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ReadOnly"] as? Bool {
                    self.readOnly = value
                }
            }
        }
        public class Thumbnail : Tea.TeaModel {
            public var height: Int32?

            public var url: String?

            public var width: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Height"] as? Int32 {
                    self.height = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
                if let value = dict["Width"] as? Int32 {
                    self.width = value
                }
            }
        }
        public var appProperties: [String: [DentryAppPropertiesValue]]?

        public var createTime: String?

        public var creatorId: String?

        public var extension_: String?

        public var id: String?

        public var modifiedTime: String?

        public var modifierId: String?

        public var name: String?

        public var parentId: String?

        public var partitionType: String?

        public var path: String?

        public var properties: QueryDentriesInfoResponseBody.Dentry.Properties?

        public var size: Int64?

        public var spaceId: String?

        public var status: String?

        public var storageDriver: String?

        public var thumbnail: QueryDentriesInfoResponseBody.Dentry.Thumbnail?

        public var type: String?

        public var uuid: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.properties?.validate()
            try self.thumbnail?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appProperties != nil {
                var tmp : [String: Any] = [:]
                for (k, v) in self.appProperties! {
                    var l1 : [Any] = []
                    for k1 in v {
                        l1.append(k1.toMap())
                    }
                    tmp[k] = l1
                }
                map["AppProperties"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.parentId != nil {
                map["ParentId"] = self.parentId!
            }
            if self.partitionType != nil {
                map["PartitionType"] = self.partitionType!
            }
            if self.path != nil {
                map["Path"] = self.path!
            }
            if self.properties != nil {
                map["Properties"] = self.properties?.toMap()
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.spaceId != nil {
                map["SpaceId"] = self.spaceId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageDriver != nil {
                map["StorageDriver"] = self.storageDriver!
            }
            if self.thumbnail != nil {
                map["Thumbnail"] = self.thumbnail?.toMap()
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.uuid != nil {
                map["Uuid"] = self.uuid!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppProperties"] as? [String: Any?] {
                var tmp : [String: [DentryAppPropertiesValue]] = [:]
                for (k, v) in value {
                    var l1 : [DentryAppPropertiesValue] = []
                    for v1 in v as! [Any?] {
                        if v1 != nil {
                            var model = DentryAppPropertiesValue()
                            if v1 != nil {
                                model.fromMap(v1 as? [String: Any?])
                            }
                            l1.append(model)
                        }
                    }
                    tmp[k] = l1
                }
                self.appProperties = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ParentId"] as? String {
                self.parentId = value
            }
            if let value = dict["PartitionType"] as? String {
                self.partitionType = value
            }
            if let value = dict["Path"] as? String {
                self.path = value
            }
            if let value = dict["Properties"] as? [String: Any?] {
                var model = QueryDentriesInfoResponseBody.Dentry.Properties()
                model.fromMap(value)
                self.properties = model
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["SpaceId"] as? String {
                self.spaceId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StorageDriver"] as? String {
                self.storageDriver = value
            }
            if let value = dict["Thumbnail"] as? [String: Any?] {
                var model = QueryDentriesInfoResponseBody.Dentry.Thumbnail()
                model.fromMap(value)
                self.thumbnail = model
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Uuid"] as? String {
                self.uuid = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var dentry: QueryDentriesInfoResponseBody.Dentry?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.dentry?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentry != nil {
            map["Dentry"] = self.dentry?.toMap()
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Dentry"] as? [String: Any?] {
            var model = QueryDentriesInfoResponseBody.Dentry()
            model.fromMap(value)
            self.dentry = model
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class QueryDentriesInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryDentriesInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryDentriesInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryDentryHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryDentryHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryDentryHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryDentryShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryDentryRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dentryId: String?

    public var includeSpace: Bool?

    public var spaceId: String?

    public var tenantContext: QueryDentryRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryId != nil {
            map["DentryId"] = self.dentryId!
        }
        if self.includeSpace != nil {
            map["IncludeSpace"] = self.includeSpace!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["IncludeSpace"] as? Bool {
            self.includeSpace = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryDentryRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class QueryDentryShrinkRequest : Tea.TeaModel {
    public var dentryId: String?

    public var includeSpace: Bool?

    public var spaceId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryId != nil {
            map["DentryId"] = self.dentryId!
        }
        if self.includeSpace != nil {
            map["IncludeSpace"] = self.includeSpace!
        }
        if self.spaceId != nil {
            map["SpaceId"] = self.spaceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["IncludeSpace"] as? Bool {
            self.includeSpace = value
        }
        if let value = dict["SpaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class QueryDentryResponseBody : Tea.TeaModel {
    public class Creator : Tea.TeaModel {
        public var name: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public class LinkSourceInfo : Tea.TeaModel {
        public class IconUrl : Tea.TeaModel {
            public var line: String?

            public var small: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.line != nil {
                    map["Line"] = self.line!
                }
                if self.small != nil {
                    map["Small"] = self.small!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Line"] as? String {
                    self.line = value
                }
                if let value = dict["Small"] as? String {
                    self.small = value
                }
            }
        }
        public var extension_: String?

        public var iconUrl: QueryDentryResponseBody.LinkSourceInfo.IconUrl?

        public var id: String?

        public var linkType: Int64?

        public var spaceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.iconUrl?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.iconUrl != nil {
                map["IconUrl"] = self.iconUrl?.toMap()
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.linkType != nil {
                map["LinkType"] = self.linkType!
            }
            if self.spaceId != nil {
                map["SpaceId"] = self.spaceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Extension"] as? String {
                self.extension_ = value
            }
            if let value = dict["IconUrl"] as? [String: Any?] {
                var model = QueryDentryResponseBody.LinkSourceInfo.IconUrl()
                model.fromMap(value)
                self.iconUrl = model
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["LinkType"] as? Int64 {
                self.linkType = value
            }
            if let value = dict["SpaceId"] as? String {
                self.spaceId = value
            }
        }
    }
    public class Space : Tea.TeaModel {
        public class HdIconVO : Tea.TeaModel {
            public var icon: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.icon != nil {
                    map["Icon"] = self.icon!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Icon"] as? String {
                    self.icon = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class IconVO : Tea.TeaModel {
            public var icon: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.icon != nil {
                    map["Icon"] = self.icon!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Icon"] as? String {
                    self.icon = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class Owner : Tea.TeaModel {
            public var name: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class RecentList : Tea.TeaModel {
            public class Creator : Tea.TeaModel {
                public var name: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public class LinkSourceInfo : Tea.TeaModel {
                public class IconUrl : Tea.TeaModel {
                    public var line: String?

                    public var small: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.line != nil {
                            map["Line"] = self.line!
                        }
                        if self.small != nil {
                            map["Small"] = self.small!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Line"] as? String {
                            self.line = value
                        }
                        if let value = dict["Small"] as? String {
                            self.small = value
                        }
                    }
                }
                public var extension_: String?

                public var iconUrl: QueryDentryResponseBody.Space.RecentList.LinkSourceInfo.IconUrl?

                public var id: String?

                public var linkType: Int64?

                public var spaceId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.iconUrl?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.extension_ != nil {
                        map["Extension"] = self.extension_!
                    }
                    if self.iconUrl != nil {
                        map["IconUrl"] = self.iconUrl?.toMap()
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.linkType != nil {
                        map["LinkType"] = self.linkType!
                    }
                    if self.spaceId != nil {
                        map["SpaceId"] = self.spaceId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Extension"] as? String {
                        self.extension_ = value
                    }
                    if let value = dict["IconUrl"] as? [String: Any?] {
                        var model = QueryDentryResponseBody.Space.RecentList.LinkSourceInfo.IconUrl()
                        model.fromMap(value)
                        self.iconUrl = model
                    }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["LinkType"] as? Int64 {
                        self.linkType = value
                    }
                    if let value = dict["SpaceId"] as? String {
                        self.spaceId = value
                    }
                }
            }
            public class StatisticalInfo : Tea.TeaModel {
                public var wordCount: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.wordCount != nil {
                        map["WordCount"] = self.wordCount!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["WordCount"] as? Int64 {
                        self.wordCount = value
                    }
                }
            }
            public class Updater : Tea.TeaModel {
                public var name: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["UserId"] as? String {
                        self.userId = value
                    }
                }
            }
            public class VisitorInfo : Tea.TeaModel {
                public var dentryActions: [String]?

                public var roleCode: String?

                public var spaceActions: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dentryActions != nil {
                        map["DentryActions"] = self.dentryActions!
                    }
                    if self.roleCode != nil {
                        map["RoleCode"] = self.roleCode!
                    }
                    if self.spaceActions != nil {
                        map["SpaceActions"] = self.spaceActions!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DentryActions"] as? [String] {
                        self.dentryActions = value
                    }
                    if let value = dict["RoleCode"] as? String {
                        self.roleCode = value
                    }
                    if let value = dict["SpaceActions"] as? [String] {
                        self.spaceActions = value
                    }
                }
            }
            public var contentType: String?

            public var createdTime: Int64?

            public var creator: QueryDentryResponseBody.Space.RecentList.Creator?

            public var dentryId: String?

            public var dentryType: String?

            public var dentryUuid: String?

            public var docKey: String?

            public var extension_: String?

            public var hasChildren: Bool?

            public var linkSourceInfo: QueryDentryResponseBody.Space.RecentList.LinkSourceInfo?

            public var name: String?

            public var path: String?

            public var space: Any?

            public var spaceId: String?

            public var statisticalInfo: QueryDentryResponseBody.Space.RecentList.StatisticalInfo?

            public var updatedTime: Int64?

            public var updater: QueryDentryResponseBody.Space.RecentList.Updater?

            public var url: String?

            public var visitorInfo: QueryDentryResponseBody.Space.RecentList.VisitorInfo?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.creator?.validate()
                try self.linkSourceInfo?.validate()
                try self.statisticalInfo?.validate()
                try self.updater?.validate()
                try self.visitorInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contentType != nil {
                    map["ContentType"] = self.contentType!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator?.toMap()
                }
                if self.dentryId != nil {
                    map["DentryId"] = self.dentryId!
                }
                if self.dentryType != nil {
                    map["DentryType"] = self.dentryType!
                }
                if self.dentryUuid != nil {
                    map["DentryUuid"] = self.dentryUuid!
                }
                if self.docKey != nil {
                    map["DocKey"] = self.docKey!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.hasChildren != nil {
                    map["HasChildren"] = self.hasChildren!
                }
                if self.linkSourceInfo != nil {
                    map["LinkSourceInfo"] = self.linkSourceInfo?.toMap()
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.space != nil {
                    map["Space"] = self.space!
                }
                if self.spaceId != nil {
                    map["SpaceId"] = self.spaceId!
                }
                if self.statisticalInfo != nil {
                    map["StatisticalInfo"] = self.statisticalInfo?.toMap()
                }
                if self.updatedTime != nil {
                    map["UpdatedTime"] = self.updatedTime!
                }
                if self.updater != nil {
                    map["Updater"] = self.updater?.toMap()
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                if self.visitorInfo != nil {
                    map["VisitorInfo"] = self.visitorInfo?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContentType"] as? String {
                    self.contentType = value
                }
                if let value = dict["CreatedTime"] as? Int64 {
                    self.createdTime = value
                }
                if let value = dict["Creator"] as? [String: Any?] {
                    var model = QueryDentryResponseBody.Space.RecentList.Creator()
                    model.fromMap(value)
                    self.creator = model
                }
                if let value = dict["DentryId"] as? String {
                    self.dentryId = value
                }
                if let value = dict["DentryType"] as? String {
                    self.dentryType = value
                }
                if let value = dict["DentryUuid"] as? String {
                    self.dentryUuid = value
                }
                if let value = dict["DocKey"] as? String {
                    self.docKey = value
                }
                if let value = dict["Extension"] as? String {
                    self.extension_ = value
                }
                if let value = dict["HasChildren"] as? Bool {
                    self.hasChildren = value
                }
                if let value = dict["LinkSourceInfo"] as? [String: Any?] {
                    var model = QueryDentryResponseBody.Space.RecentList.LinkSourceInfo()
                    model.fromMap(value)
                    self.linkSourceInfo = model
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["Space"] as? Any {
                    self.space = value
                }
                if let value = dict["SpaceId"] as? String {
                    self.spaceId = value
                }
                if let value = dict["StatisticalInfo"] as? [String: Any?] {
                    var model = QueryDentryResponseBody.Space.RecentList.StatisticalInfo()
                    model.fromMap(value)
                    self.statisticalInfo = model
                }
                if let value = dict["UpdatedTime"] as? Int64 {
                    self.updatedTime = value
                }
                if let value = dict["Updater"] as? [String: Any?] {
                    var model = QueryDentryResponseBody.Space.RecentList.Updater()
                    model.fromMap(value)
                    self.updater = model
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
                if let value = dict["VisitorInfo"] as? [String: Any?] {
                    var model = QueryDentryResponseBody.Space.RecentList.VisitorInfo()
                    model.fromMap(value)
                    self.visitorInfo = model
                }
            }
        }
        public class VisitorInfo : Tea.TeaModel {
            public var dentryActions: [String]?

            public var roleCode: String?

            public var spaceActions: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dentryActions != nil {
                    map["DentryActions"] = self.dentryActions!
                }
                if self.roleCode != nil {
                    map["RoleCode"] = self.roleCode!
                }
                if self.spaceActions != nil {
                    map["SpaceActions"] = self.spaceActions!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DentryActions"] as? [String] {
                    self.dentryActions = value
                }
                if let value = dict["RoleCode"] as? String {
                    self.roleCode = value
                }
                if let value = dict["SpaceActions"] as? [String] {
                    self.spaceActions = value
                }
            }
        }
        public var cover: String?

        public var description_: String?

        public var hdIconVO: QueryDentryResponseBody.Space.HdIconVO?

        public var iconVO: QueryDentryResponseBody.Space.IconVO?

        public var id: String?

        public var name: String?

        public var owner: QueryDentryResponseBody.Space.Owner?

        public var recentList: [QueryDentryResponseBody.Space.RecentList]?

        public var type: Int32?

        public var url: String?

        public var visitorInfo: QueryDentryResponseBody.Space.VisitorInfo?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.hdIconVO?.validate()
            try self.iconVO?.validate()
            try self.owner?.validate()
            try self.visitorInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cover != nil {
                map["Cover"] = self.cover!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.hdIconVO != nil {
                map["HdIconVO"] = self.hdIconVO?.toMap()
            }
            if self.iconVO != nil {
                map["IconVO"] = self.iconVO?.toMap()
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.owner != nil {
                map["Owner"] = self.owner?.toMap()
            }
            if self.recentList != nil {
                var tmp : [Any] = []
                for k in self.recentList! {
                    tmp.append(k.toMap())
                }
                map["RecentList"] = tmp
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            if self.visitorInfo != nil {
                map["VisitorInfo"] = self.visitorInfo?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Cover"] as? String {
                self.cover = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["HdIconVO"] as? [String: Any?] {
                var model = QueryDentryResponseBody.Space.HdIconVO()
                model.fromMap(value)
                self.hdIconVO = model
            }
            if let value = dict["IconVO"] as? [String: Any?] {
                var model = QueryDentryResponseBody.Space.IconVO()
                model.fromMap(value)
                self.iconVO = model
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Owner"] as? [String: Any?] {
                var model = QueryDentryResponseBody.Space.Owner()
                model.fromMap(value)
                self.owner = model
            }
            if let value = dict["RecentList"] as? [Any?] {
                var tmp : [QueryDentryResponseBody.Space.RecentList] = []
                for v in value {
                    if v != nil {
                        var model = QueryDentryResponseBody.Space.RecentList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.recentList = tmp
            }
            if let value = dict["Type"] as? Int32 {
                self.type = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
            if let value = dict["VisitorInfo"] as? [String: Any?] {
                var model = QueryDentryResponseBody.Space.VisitorInfo()
                model.fromMap(value)
                self.visitorInfo = model
            }
        }
    }
    public class Updater : Tea.TeaModel {
        public var name: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public class VisitorInfo : Tea.TeaModel {
        public var dentryActions: [String]?

        public var roleCode: String?

        public var spaceActions: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dentryActions != nil {
                map["DentryActions"] = self.dentryActions!
            }
            if self.roleCode != nil {
                map["RoleCode"] = self.roleCode!
            }
            if self.spaceActions != nil {
                map["SpaceActions"] = self.spaceActions!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DentryActions"] as? [String] {
                self.dentryActions = value
            }
            if let value = dict["RoleCode"] as? String {
                self.roleCode = value
            }
            if let value = dict["SpaceActions"] as? [String] {
                self.spaceActions = value
            }
        }
    }
    public var contentType: String?

    public var createdTime: Int64?

    public var creator: QueryDentryResponseBody.Creator?

    public var dentryId: String?

    public var dentryType: String?

    public var dentryUuid: String?

    public var docKey: String?

    public var extension_: String?

    public var hasChildren: Bool?

    public var linkSourceInfo: QueryDentryResponseBody.LinkSourceInfo?

    public var name: String?

    public var path: String?

    public var requestId: String?

    public var space: QueryDentryResponseBody.Space?

    public var spaceId: String?

    public var updatedTime: Int64?

    public var updater: QueryDentryResponseBody.Updater?

    public var url: String?

    public var visitorInfo: QueryDentryResponseBody.VisitorInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.creator?.validate()
        try self.linkSourceInfo?.validate()
        try self.space?.validate()
        try self.updater?.validate()
        try self.visitorInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contentType != nil {
            map["contentType"] = self.contentType!
        }
        if self.createdTime != nil {
            map["createdTime"] = self.createdTime!
        }
        if self.creator != nil {
            map["creator"] = self.creator?.toMap()
        }
        if self.dentryId != nil {
            map["dentryId"] = self.dentryId!
        }
        if self.dentryType != nil {
            map["dentryType"] = self.dentryType!
        }
        if self.dentryUuid != nil {
            map["dentryUuid"] = self.dentryUuid!
        }
        if self.docKey != nil {
            map["docKey"] = self.docKey!
        }
        if self.extension_ != nil {
            map["extension"] = self.extension_!
        }
        if self.hasChildren != nil {
            map["hasChildren"] = self.hasChildren!
        }
        if self.linkSourceInfo != nil {
            map["linkSourceInfo"] = self.linkSourceInfo?.toMap()
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.path != nil {
            map["path"] = self.path!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.space != nil {
            map["space"] = self.space?.toMap()
        }
        if self.spaceId != nil {
            map["spaceId"] = self.spaceId!
        }
        if self.updatedTime != nil {
            map["updatedTime"] = self.updatedTime!
        }
        if self.updater != nil {
            map["updater"] = self.updater?.toMap()
        }
        if self.url != nil {
            map["url"] = self.url!
        }
        if self.visitorInfo != nil {
            map["visitorInfo"] = self.visitorInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["contentType"] as? String {
            self.contentType = value
        }
        if let value = dict["createdTime"] as? Int64 {
            self.createdTime = value
        }
        if let value = dict["creator"] as? [String: Any?] {
            var model = QueryDentryResponseBody.Creator()
            model.fromMap(value)
            self.creator = model
        }
        if let value = dict["dentryId"] as? String {
            self.dentryId = value
        }
        if let value = dict["dentryType"] as? String {
            self.dentryType = value
        }
        if let value = dict["dentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["docKey"] as? String {
            self.docKey = value
        }
        if let value = dict["extension"] as? String {
            self.extension_ = value
        }
        if let value = dict["hasChildren"] as? Bool {
            self.hasChildren = value
        }
        if let value = dict["linkSourceInfo"] as? [String: Any?] {
            var model = QueryDentryResponseBody.LinkSourceInfo()
            model.fromMap(value)
            self.linkSourceInfo = model
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["path"] as? String {
            self.path = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["space"] as? [String: Any?] {
            var model = QueryDentryResponseBody.Space()
            model.fromMap(value)
            self.space = model
        }
        if let value = dict["spaceId"] as? String {
            self.spaceId = value
        }
        if let value = dict["updatedTime"] as? Int64 {
            self.updatedTime = value
        }
        if let value = dict["updater"] as? [String: Any?] {
            var model = QueryDentryResponseBody.Updater()
            model.fromMap(value)
            self.updater = model
        }
        if let value = dict["url"] as? String {
            self.url = value
        }
        if let value = dict["visitorInfo"] as? [String: Any?] {
            var model = QueryDentryResponseBody.VisitorInfo()
            model.fromMap(value)
            self.visitorInfo = model
        }
    }
}

public class QueryDentryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryDentryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryDentryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryGroupLiveInfoHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryGroupLiveInfoHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryGroupLiveInfoHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryGroupLiveInfoShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryGroupLiveInfoRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var anchorUnionId: String?

    public var liveUuid: String?

    public var tenantContext: QueryGroupLiveInfoRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.anchorUnionId != nil {
            map["AnchorUnionId"] = self.anchorUnionId!
        }
        if self.liveUuid != nil {
            map["LiveUuid"] = self.liveUuid!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AnchorUnionId"] as? String {
            self.anchorUnionId = value
        }
        if let value = dict["LiveUuid"] as? String {
            self.liveUuid = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryGroupLiveInfoRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class QueryGroupLiveInfoShrinkRequest : Tea.TeaModel {
    public var anchorUnionId: String?

    public var liveUuid: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.anchorUnionId != nil {
            map["AnchorUnionId"] = self.anchorUnionId!
        }
        if self.liveUuid != nil {
            map["LiveUuid"] = self.liveUuid!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AnchorUnionId"] as? String {
            self.anchorUnionId = value
        }
        if let value = dict["LiveUuid"] as? String {
            self.liveUuid = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class QueryGroupLiveInfoResponseBody : Tea.TeaModel {
    public var coverUrl: String?

    public var duration: Int64?

    public var endTime: Int64?

    public var introduction: String?

    public var liveId: String?

    public var livePlayUrl: String?

    public var liveStatus: Int32?

    public var playbackDuration: Int64?

    public var replayUrl: String?

    public var requestId: String?

    public var staffId: String?

    public var startTime: Int64?

    public var subscribeCount: Int32?

    public var title: String?

    public var uv: Int32?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coverUrl != nil {
            map["coverUrl"] = self.coverUrl!
        }
        if self.duration != nil {
            map["duration"] = self.duration!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.introduction != nil {
            map["introduction"] = self.introduction!
        }
        if self.liveId != nil {
            map["liveId"] = self.liveId!
        }
        if self.livePlayUrl != nil {
            map["livePlayUrl"] = self.livePlayUrl!
        }
        if self.liveStatus != nil {
            map["liveStatus"] = self.liveStatus!
        }
        if self.playbackDuration != nil {
            map["playbackDuration"] = self.playbackDuration!
        }
        if self.replayUrl != nil {
            map["replayUrl"] = self.replayUrl!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.staffId != nil {
            map["staffId"] = self.staffId!
        }
        if self.startTime != nil {
            map["startTime"] = self.startTime!
        }
        if self.subscribeCount != nil {
            map["subscribeCount"] = self.subscribeCount!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.uv != nil {
            map["uv"] = self.uv!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["coverUrl"] as? String {
            self.coverUrl = value
        }
        if let value = dict["duration"] as? Int64 {
            self.duration = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["introduction"] as? String {
            self.introduction = value
        }
        if let value = dict["liveId"] as? String {
            self.liveId = value
        }
        if let value = dict["livePlayUrl"] as? String {
            self.livePlayUrl = value
        }
        if let value = dict["liveStatus"] as? Int32 {
            self.liveStatus = value
        }
        if let value = dict["playbackDuration"] as? Int64 {
            self.playbackDuration = value
        }
        if let value = dict["replayUrl"] as? String {
            self.replayUrl = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["staffId"] as? String {
            self.staffId = value
        }
        if let value = dict["startTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["subscribeCount"] as? Int32 {
            self.subscribeCount = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
        if let value = dict["uv"] as? Int32 {
            self.uv = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class QueryGroupLiveInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryGroupLiveInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryGroupLiveInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryLiveInfoHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryLiveInfoHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryLiveInfoHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryLiveInfoShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryLiveInfoRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var liveId: String?

    public var tenantContext: QueryLiveInfoRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.liveId != nil {
            map["LiveId"] = self.liveId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LiveId"] as? String {
            self.liveId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryLiveInfoRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class QueryLiveInfoShrinkRequest : Tea.TeaModel {
    public var liveId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.liveId != nil {
            map["LiveId"] = self.liveId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LiveId"] as? String {
            self.liveId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class QueryLiveInfoResponseBody : Tea.TeaModel {
    public var coverUrl: String?

    public var duration: Int64?

    public var endTime: Int64?

    public var introduction: String?

    public var liveId: String?

    public var livePlayUrl: String?

    public var liveStatus: Int32?

    public var playbackDuration: Int64?

    public var requestId: String?

    public var startTime: Int64?

    public var subscribeCount: Int32?

    public var title: String?

    public var uv: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coverUrl != nil {
            map["coverUrl"] = self.coverUrl!
        }
        if self.duration != nil {
            map["duration"] = self.duration!
        }
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.introduction != nil {
            map["introduction"] = self.introduction!
        }
        if self.liveId != nil {
            map["liveId"] = self.liveId!
        }
        if self.livePlayUrl != nil {
            map["livePlayUrl"] = self.livePlayUrl!
        }
        if self.liveStatus != nil {
            map["liveStatus"] = self.liveStatus!
        }
        if self.playbackDuration != nil {
            map["playbackDuration"] = self.playbackDuration!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.startTime != nil {
            map["startTime"] = self.startTime!
        }
        if self.subscribeCount != nil {
            map["subscribeCount"] = self.subscribeCount!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.uv != nil {
            map["uv"] = self.uv!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["coverUrl"] as? String {
            self.coverUrl = value
        }
        if let value = dict["duration"] as? Int64 {
            self.duration = value
        }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["introduction"] as? String {
            self.introduction = value
        }
        if let value = dict["liveId"] as? String {
            self.liveId = value
        }
        if let value = dict["livePlayUrl"] as? String {
            self.livePlayUrl = value
        }
        if let value = dict["liveStatus"] as? Int32 {
            self.liveStatus = value
        }
        if let value = dict["playbackDuration"] as? Int64 {
            self.playbackDuration = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["startTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["subscribeCount"] as? Int32 {
            self.subscribeCount = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
        if let value = dict["uv"] as? Int32 {
            self.uv = value
        }
    }
}

public class QueryLiveInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryLiveInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryLiveInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryLiveWatchDetailHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryLiveWatchDetailHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryLiveWatchDetailHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryLiveWatchDetailShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryLiveWatchDetailRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var liveId: String?

    public var tenantContext: QueryLiveWatchDetailRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.liveId != nil {
            map["LiveId"] = self.liveId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LiveId"] as? String {
            self.liveId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryLiveWatchDetailRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class QueryLiveWatchDetailShrinkRequest : Tea.TeaModel {
    public var liveId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.liveId != nil {
            map["LiveId"] = self.liveId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LiveId"] as? String {
            self.liveId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class QueryLiveWatchDetailResponseBody : Tea.TeaModel {
    public var avgWatchTime: Int64?

    public var liveUv: Int32?

    public var msgCount: Int32?

    public var playbackUv: Int32?

    public var praiseCount: Int32?

    public var pv: Int32?

    public var requestId: String?

    public var totalWatchTime: Int64?

    public var uv: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.avgWatchTime != nil {
            map["avgWatchTime"] = self.avgWatchTime!
        }
        if self.liveUv != nil {
            map["liveUv"] = self.liveUv!
        }
        if self.msgCount != nil {
            map["msgCount"] = self.msgCount!
        }
        if self.playbackUv != nil {
            map["playbackUv"] = self.playbackUv!
        }
        if self.praiseCount != nil {
            map["praiseCount"] = self.praiseCount!
        }
        if self.pv != nil {
            map["pv"] = self.pv!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalWatchTime != nil {
            map["totalWatchTime"] = self.totalWatchTime!
        }
        if self.uv != nil {
            map["uv"] = self.uv!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["avgWatchTime"] as? Int64 {
            self.avgWatchTime = value
        }
        if let value = dict["liveUv"] as? Int32 {
            self.liveUv = value
        }
        if let value = dict["msgCount"] as? Int32 {
            self.msgCount = value
        }
        if let value = dict["playbackUv"] as? Int32 {
            self.playbackUv = value
        }
        if let value = dict["praiseCount"] as? Int32 {
            self.praiseCount = value
        }
        if let value = dict["pv"] as? Int32 {
            self.pv = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalWatchTime"] as? Int64 {
            self.totalWatchTime = value
        }
        if let value = dict["uv"] as? Int32 {
            self.uv = value
        }
    }
}

public class QueryLiveWatchDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryLiveWatchDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryLiveWatchDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryLiveWatchUserListHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryLiveWatchUserListHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryLiveWatchUserListHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryLiveWatchUserListShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryLiveWatchUserListRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var liveId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var tenantContext: QueryLiveWatchUserListRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.liveId != nil {
            map["LiveId"] = self.liveId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LiveId"] as? String {
            self.liveId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryLiveWatchUserListRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class QueryLiveWatchUserListShrinkRequest : Tea.TeaModel {
    public var liveId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.liveId != nil {
            map["LiveId"] = self.liveId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LiveId"] as? String {
            self.liveId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class QueryLiveWatchUserListResponseBody : Tea.TeaModel {
    public class OrgUsesList : Tea.TeaModel {
        public var deptName: String?

        public var name: String?

        public var userId: String?

        public var watchLiveTime: Int64?

        public var watchPlaybackTime: Int64?

        public var watchProgressMs: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deptName != nil {
                map["DeptName"] = self.deptName!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.watchLiveTime != nil {
                map["WatchLiveTime"] = self.watchLiveTime!
            }
            if self.watchPlaybackTime != nil {
                map["WatchPlaybackTime"] = self.watchPlaybackTime!
            }
            if self.watchProgressMs != nil {
                map["WatchProgressMs"] = self.watchProgressMs!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeptName"] as? String {
                self.deptName = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
            if let value = dict["WatchLiveTime"] as? Int64 {
                self.watchLiveTime = value
            }
            if let value = dict["WatchPlaybackTime"] as? Int64 {
                self.watchPlaybackTime = value
            }
            if let value = dict["WatchProgressMs"] as? Int64 {
                self.watchProgressMs = value
            }
        }
    }
    public class OutOrgUserList : Tea.TeaModel {
        public var name: String?

        public var watchLiveTime: Int64?

        public var watchPlaybackTime: Int64?

        public var watchProgressMs: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.watchLiveTime != nil {
                map["WatchLiveTime"] = self.watchLiveTime!
            }
            if self.watchPlaybackTime != nil {
                map["WatchPlaybackTime"] = self.watchPlaybackTime!
            }
            if self.watchProgressMs != nil {
                map["WatchProgressMs"] = self.watchProgressMs!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["WatchLiveTime"] as? Int64 {
                self.watchLiveTime = value
            }
            if let value = dict["WatchPlaybackTime"] as? Int64 {
                self.watchPlaybackTime = value
            }
            if let value = dict["WatchProgressMs"] as? Int64 {
                self.watchProgressMs = value
            }
        }
    }
    public var orgUsesList: [QueryLiveWatchUserListResponseBody.OrgUsesList]?

    public var outOrgUserList: [QueryLiveWatchUserListResponseBody.OutOrgUserList]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orgUsesList != nil {
            var tmp : [Any] = []
            for k in self.orgUsesList! {
                tmp.append(k.toMap())
            }
            map["orgUsesList"] = tmp
        }
        if self.outOrgUserList != nil {
            var tmp : [Any] = []
            for k in self.outOrgUserList! {
                tmp.append(k.toMap())
            }
            map["outOrgUserList"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["orgUsesList"] as? [Any?] {
            var tmp : [QueryLiveWatchUserListResponseBody.OrgUsesList] = []
            for v in value {
                if v != nil {
                    var model = QueryLiveWatchUserListResponseBody.OrgUsesList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.orgUsesList = tmp
        }
        if let value = dict["outOrgUserList"] as? [Any?] {
            var tmp : [QueryLiveWatchUserListResponseBody.OutOrgUserList] = []
            for v in value {
                if v != nil {
                    var model = QueryLiveWatchUserListResponseBody.OutOrgUserList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.outOrgUserList = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryLiveWatchUserListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryLiveWatchUserListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryLiveWatchUserListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMeetingRoomHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryMeetingRoomHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryMeetingRoomHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryMeetingRoomShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryMeetingRoomRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var roomId: String?

    public var tenantContext: QueryMeetingRoomRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.roomId != nil {
            map["RoomId"] = self.roomId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RoomId"] as? String {
            self.roomId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryMeetingRoomRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class QueryMeetingRoomShrinkRequest : Tea.TeaModel {
    public var roomId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.roomId != nil {
            map["RoomId"] = self.roomId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RoomId"] as? String {
            self.roomId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class QueryMeetingRoomResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public class ReservationAuthority : Tea.TeaModel {
            public class AuthorizedMembers : Tea.TeaModel {
                public var memberId: String?

                public var memberName: String?

                public var memberType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.memberId != nil {
                        map["MemberId"] = self.memberId!
                    }
                    if self.memberName != nil {
                        map["MemberName"] = self.memberName!
                    }
                    if self.memberType != nil {
                        map["MemberType"] = self.memberType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["MemberId"] as? String {
                        self.memberId = value
                    }
                    if let value = dict["MemberName"] as? String {
                        self.memberName = value
                    }
                    if let value = dict["MemberType"] as? String {
                        self.memberType = value
                    }
                }
            }
            public var authorizedMembers: [QueryMeetingRoomResponseBody.Result.ReservationAuthority.AuthorizedMembers]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authorizedMembers != nil {
                    var tmp : [Any] = []
                    for k in self.authorizedMembers! {
                        tmp.append(k.toMap())
                    }
                    map["AuthorizedMembers"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthorizedMembers"] as? [Any?] {
                    var tmp : [QueryMeetingRoomResponseBody.Result.ReservationAuthority.AuthorizedMembers] = []
                    for v in value {
                        if v != nil {
                            var model = QueryMeetingRoomResponseBody.Result.ReservationAuthority.AuthorizedMembers()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.authorizedMembers = tmp
                }
            }
        }
        public class RoomGroup : Tea.TeaModel {
            public var groupId: Int64?

            public var groupName: String?

            public var parentId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.parentId != nil {
                    map["ParentId"] = self.parentId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["GroupId"] as? Int64 {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["ParentId"] as? Int64 {
                    self.parentId = value
                }
            }
        }
        public class RoomLabels : Tea.TeaModel {
            public var labelId: Int64?

            public var labelName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.labelId != nil {
                    map["LabelId"] = self.labelId!
                }
                if self.labelName != nil {
                    map["LabelName"] = self.labelName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["LabelId"] as? Int64 {
                    self.labelId = value
                }
                if let value = dict["LabelName"] as? String {
                    self.labelName = value
                }
            }
        }
        public class RoomLocation : Tea.TeaModel {
            public var desc: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.desc != nil {
                    map["Desc"] = self.desc!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Desc"] as? String {
                    self.desc = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public var corpId: String?

        public var deviceUnionIds: [String]?

        public var enableCycleReservation: Bool?

        public var isvRoomId: String?

        public var reservationAuthority: QueryMeetingRoomResponseBody.Result.ReservationAuthority?

        public var roomCapacity: Int32?

        public var roomGroup: QueryMeetingRoomResponseBody.Result.RoomGroup?

        public var roomId: String?

        public var roomLabels: [QueryMeetingRoomResponseBody.Result.RoomLabels]?

        public var roomLocation: QueryMeetingRoomResponseBody.Result.RoomLocation?

        public var roomName: String?

        public var roomPicture: String?

        public var roomStaffId: String?

        public var roomStatus: Int32?

        public var roomUnionId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.reservationAuthority?.validate()
            try self.roomGroup?.validate()
            try self.roomLocation?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.deviceUnionIds != nil {
                map["DeviceUnionIds"] = self.deviceUnionIds!
            }
            if self.enableCycleReservation != nil {
                map["EnableCycleReservation"] = self.enableCycleReservation!
            }
            if self.isvRoomId != nil {
                map["IsvRoomId"] = self.isvRoomId!
            }
            if self.reservationAuthority != nil {
                map["ReservationAuthority"] = self.reservationAuthority?.toMap()
            }
            if self.roomCapacity != nil {
                map["RoomCapacity"] = self.roomCapacity!
            }
            if self.roomGroup != nil {
                map["RoomGroup"] = self.roomGroup?.toMap()
            }
            if self.roomId != nil {
                map["RoomId"] = self.roomId!
            }
            if self.roomLabels != nil {
                var tmp : [Any] = []
                for k in self.roomLabels! {
                    tmp.append(k.toMap())
                }
                map["RoomLabels"] = tmp
            }
            if self.roomLocation != nil {
                map["RoomLocation"] = self.roomLocation?.toMap()
            }
            if self.roomName != nil {
                map["RoomName"] = self.roomName!
            }
            if self.roomPicture != nil {
                map["RoomPicture"] = self.roomPicture!
            }
            if self.roomStaffId != nil {
                map["RoomStaffId"] = self.roomStaffId!
            }
            if self.roomStatus != nil {
                map["RoomStatus"] = self.roomStatus!
            }
            if self.roomUnionId != nil {
                map["RoomUnionId"] = self.roomUnionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["DeviceUnionIds"] as? [String] {
                self.deviceUnionIds = value
            }
            if let value = dict["EnableCycleReservation"] as? Bool {
                self.enableCycleReservation = value
            }
            if let value = dict["IsvRoomId"] as? String {
                self.isvRoomId = value
            }
            if let value = dict["ReservationAuthority"] as? [String: Any?] {
                var model = QueryMeetingRoomResponseBody.Result.ReservationAuthority()
                model.fromMap(value)
                self.reservationAuthority = model
            }
            if let value = dict["RoomCapacity"] as? Int32 {
                self.roomCapacity = value
            }
            if let value = dict["RoomGroup"] as? [String: Any?] {
                var model = QueryMeetingRoomResponseBody.Result.RoomGroup()
                model.fromMap(value)
                self.roomGroup = model
            }
            if let value = dict["RoomId"] as? String {
                self.roomId = value
            }
            if let value = dict["RoomLabels"] as? [Any?] {
                var tmp : [QueryMeetingRoomResponseBody.Result.RoomLabels] = []
                for v in value {
                    if v != nil {
                        var model = QueryMeetingRoomResponseBody.Result.RoomLabels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.roomLabels = tmp
            }
            if let value = dict["RoomLocation"] as? [String: Any?] {
                var model = QueryMeetingRoomResponseBody.Result.RoomLocation()
                model.fromMap(value)
                self.roomLocation = model
            }
            if let value = dict["RoomName"] as? String {
                self.roomName = value
            }
            if let value = dict["RoomPicture"] as? String {
                self.roomPicture = value
            }
            if let value = dict["RoomStaffId"] as? String {
                self.roomStaffId = value
            }
            if let value = dict["RoomStatus"] as? Int32 {
                self.roomStatus = value
            }
            if let value = dict["RoomUnionId"] as? String {
                self.roomUnionId = value
            }
        }
    }
    public var requestId: String?

    public var result: QueryMeetingRoomResponseBody.Result?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.result?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result?.toMap()
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [String: Any?] {
            var model = QueryMeetingRoomResponseBody.Result()
            model.fromMap(value)
            self.result = model
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class QueryMeetingRoomResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMeetingRoomResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMeetingRoomResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMeetingRoomGroupHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryMeetingRoomGroupHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryMeetingRoomGroupHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryMeetingRoomGroupShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryMeetingRoomGroupRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var groupId: String?

    public var tenantContext: QueryMeetingRoomGroupRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryMeetingRoomGroupRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class QueryMeetingRoomGroupShrinkRequest : Tea.TeaModel {
    public var groupId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class QueryMeetingRoomGroupResponseBody : Tea.TeaModel {
    public var groupId: Int64?

    public var groupName: String?

    public var parentId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["groupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["groupName"] = self.groupName!
        }
        if self.parentId != nil {
            map["parentId"] = self.parentId!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["groupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["groupName"] as? String {
            self.groupName = value
        }
        if let value = dict["parentId"] as? Int64 {
            self.parentId = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryMeetingRoomGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMeetingRoomGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMeetingRoomGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMeetingRoomGroupListHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryMeetingRoomGroupListHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryMeetingRoomGroupListHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryMeetingRoomGroupListShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryMeetingRoomGroupListRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var request: [String: Any]?

    public var tenantContext: QueryMeetingRoomGroupListRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.request != nil {
            map["Request"] = self.request!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Request"] as? [String: Any] {
            self.request = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryMeetingRoomGroupListRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class QueryMeetingRoomGroupListShrinkRequest : Tea.TeaModel {
    public var requestShrink: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestShrink != nil {
            map["Request"] = self.requestShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Request"] as? String {
            self.requestShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class QueryMeetingRoomGroupListResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var groupId: Int64?

        public var groupName: String?

        public var parentId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.groupName != nil {
                map["GroupName"] = self.groupName!
            }
            if self.parentId != nil {
                map["ParentId"] = self.parentId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["GroupId"] as? Int64 {
                self.groupId = value
            }
            if let value = dict["GroupName"] as? String {
                self.groupName = value
            }
            if let value = dict["ParentId"] as? Int64 {
                self.parentId = value
            }
        }
    }
    public var requestId: String?

    public var result: [QueryMeetingRoomGroupListResponseBody.Result]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["result"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [Any?] {
            var tmp : [QueryMeetingRoomGroupListResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = QueryMeetingRoomGroupListResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
    }
}

public class QueryMeetingRoomGroupListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMeetingRoomGroupListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMeetingRoomGroupListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMeetingRoomListHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryMeetingRoomListHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryMeetingRoomListHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryMeetingRoomListShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryMeetingRoomListRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var maxResults: Int32?

    public var nextToken: Int64?

    public var tenantContext: QueryMeetingRoomListRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? Int64 {
            self.nextToken = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryMeetingRoomListRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class QueryMeetingRoomListShrinkRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: Int64?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? Int64 {
            self.nextToken = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class QueryMeetingRoomListResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public class RoomGroup : Tea.TeaModel {
            public var groupId: Int64?

            public var groupName: String?

            public var parentId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.parentId != nil {
                    map["ParentId"] = self.parentId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["GroupId"] as? Int64 {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["ParentId"] as? Int64 {
                    self.parentId = value
                }
            }
        }
        public class RoomLabels : Tea.TeaModel {
            public var labelId: Int64?

            public var labelName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.labelId != nil {
                    map["LabelId"] = self.labelId!
                }
                if self.labelName != nil {
                    map["LabelName"] = self.labelName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["LabelId"] as? Int64 {
                    self.labelId = value
                }
                if let value = dict["LabelName"] as? String {
                    self.labelName = value
                }
            }
        }
        public class RoomLocation : Tea.TeaModel {
            public var desc: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.desc != nil {
                    map["Desc"] = self.desc!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Desc"] as? String {
                    self.desc = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public var corpId: String?

        public var isvRoomId: String?

        public var roomCapacity: Int32?

        public var roomGroup: QueryMeetingRoomListResponseBody.Result.RoomGroup?

        public var roomId: String?

        public var roomLabels: [QueryMeetingRoomListResponseBody.Result.RoomLabels]?

        public var roomLocation: QueryMeetingRoomListResponseBody.Result.RoomLocation?

        public var roomName: String?

        public var roomPicture: String?

        public var roomStaffId: String?

        public var roomStatus: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.roomGroup?.validate()
            try self.roomLocation?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.isvRoomId != nil {
                map["IsvRoomId"] = self.isvRoomId!
            }
            if self.roomCapacity != nil {
                map["RoomCapacity"] = self.roomCapacity!
            }
            if self.roomGroup != nil {
                map["RoomGroup"] = self.roomGroup?.toMap()
            }
            if self.roomId != nil {
                map["RoomId"] = self.roomId!
            }
            if self.roomLabels != nil {
                var tmp : [Any] = []
                for k in self.roomLabels! {
                    tmp.append(k.toMap())
                }
                map["RoomLabels"] = tmp
            }
            if self.roomLocation != nil {
                map["RoomLocation"] = self.roomLocation?.toMap()
            }
            if self.roomName != nil {
                map["RoomName"] = self.roomName!
            }
            if self.roomPicture != nil {
                map["RoomPicture"] = self.roomPicture!
            }
            if self.roomStaffId != nil {
                map["RoomStaffId"] = self.roomStaffId!
            }
            if self.roomStatus != nil {
                map["RoomStatus"] = self.roomStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["IsvRoomId"] as? String {
                self.isvRoomId = value
            }
            if let value = dict["RoomCapacity"] as? Int32 {
                self.roomCapacity = value
            }
            if let value = dict["RoomGroup"] as? [String: Any?] {
                var model = QueryMeetingRoomListResponseBody.Result.RoomGroup()
                model.fromMap(value)
                self.roomGroup = model
            }
            if let value = dict["RoomId"] as? String {
                self.roomId = value
            }
            if let value = dict["RoomLabels"] as? [Any?] {
                var tmp : [QueryMeetingRoomListResponseBody.Result.RoomLabels] = []
                for v in value {
                    if v != nil {
                        var model = QueryMeetingRoomListResponseBody.Result.RoomLabels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.roomLabels = tmp
            }
            if let value = dict["RoomLocation"] as? [String: Any?] {
                var model = QueryMeetingRoomListResponseBody.Result.RoomLocation()
                model.fromMap(value)
                self.roomLocation = model
            }
            if let value = dict["RoomName"] as? String {
                self.roomName = value
            }
            if let value = dict["RoomPicture"] as? String {
                self.roomPicture = value
            }
            if let value = dict["RoomStaffId"] as? String {
                self.roomStaffId = value
            }
            if let value = dict["RoomStatus"] as? Int32 {
                self.roomStatus = value
            }
        }
    }
    public var hasMore: Bool?

    public var nextToken: Int64?

    public var requestId: String?

    public var result: [QueryMeetingRoomListResponseBody.Result]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hasMore != nil {
            map["hasMore"] = self.hasMore!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["result"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["hasMore"] as? Bool {
            self.hasMore = value
        }
        if let value = dict["nextToken"] as? Int64 {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? [Any?] {
            var tmp : [QueryMeetingRoomListResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = QueryMeetingRoomListResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
    }
}

public class QueryMeetingRoomListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMeetingRoomListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMeetingRoomListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMinutesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryMinutesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryMinutesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryMinutesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryMinutesRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: QueryMinutesRequest.TenantContext?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryMinutesRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class QueryMinutesShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class QueryMinutesResponseBody : Tea.TeaModel {
    public class AudioList : Tea.TeaModel {
        public var duration: Int64?

        public var endTime: Int64?

        public var fileSize: Int64?

        public var playUrl: String?

        public var recordId: String?

        public var startTime: Int64?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.fileSize != nil {
                map["FileSize"] = self.fileSize!
            }
            if self.playUrl != nil {
                map["PlayUrl"] = self.playUrl!
            }
            if self.recordId != nil {
                map["RecordId"] = self.recordId!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Duration"] as? Int64 {
                self.duration = value
            }
            if let value = dict["EndTime"] as? Int64 {
                self.endTime = value
            }
            if let value = dict["FileSize"] as? Int64 {
                self.fileSize = value
            }
            if let value = dict["PlayUrl"] as? String {
                self.playUrl = value
            }
            if let value = dict["RecordId"] as? String {
                self.recordId = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var audioList: [QueryMinutesResponseBody.AudioList]?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.audioList != nil {
            var tmp : [Any] = []
            for k in self.audioList! {
                tmp.append(k.toMap())
            }
            map["audioList"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["audioList"] as? [Any?] {
            var tmp : [QueryMinutesResponseBody.AudioList] = []
            for v in value {
                if v != nil {
                    var model = QueryMinutesResponseBody.AudioList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.audioList = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class QueryMinutesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMinutesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMinutesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMinutesSummaryHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryMinutesSummaryHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryMinutesSummaryHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryMinutesSummaryShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryMinutesSummaryRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: QueryMinutesSummaryRequest.TenantContext?

    public var conferenceId: String?

    public var summaryTypeList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        if self.summaryTypeList != nil {
            map["summaryTypeList"] = self.summaryTypeList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryMinutesSummaryRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["summaryTypeList"] as? [String] {
            self.summaryTypeList = value
        }
    }
}

public class QueryMinutesSummaryShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var conferenceId: String?

    public var summaryTypeListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        if self.summaryTypeListShrink != nil {
            map["summaryTypeList"] = self.summaryTypeListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["summaryTypeList"] as? String {
            self.summaryTypeListShrink = value
        }
    }
}

public class QueryMinutesSummaryResponseBody : Tea.TeaModel {
    public class Summary : Tea.TeaModel {
        public class Actions : Tea.TeaModel {
            public var end: Int64?

            public var id: Int64?

            public var sentenceId: Int64?

            public var start: Int64?

            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.end != nil {
                    map["End"] = self.end!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.sentenceId != nil {
                    map["SentenceId"] = self.sentenceId!
                }
                if self.start != nil {
                    map["Start"] = self.start!
                }
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["End"] as? Int64 {
                    self.end = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["SentenceId"] as? Int64 {
                    self.sentenceId = value
                }
                if let value = dict["Start"] as? Int64 {
                    self.start = value
                }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class AutoChapters : Tea.TeaModel {
            public var end: Int64?

            public var headline: String?

            public var id: Int64?

            public var start: Int64?

            public var summary: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.end != nil {
                    map["End"] = self.end!
                }
                if self.headline != nil {
                    map["Headline"] = self.headline!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.start != nil {
                    map["Start"] = self.start!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["End"] as? Int64 {
                    self.end = value
                }
                if let value = dict["Headline"] as? String {
                    self.headline = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Start"] as? Int64 {
                    self.start = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
            }
        }
        public class ConversationalSummary : Tea.TeaModel {
            public var speakerId: String?

            public var speakerName: String?

            public var summary: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.speakerId != nil {
                    map["SpeakerId"] = self.speakerId!
                }
                if self.speakerName != nil {
                    map["SpeakerName"] = self.speakerName!
                }
                if self.summary != nil {
                    map["Summary"] = self.summary!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SpeakerId"] as? String {
                    self.speakerId = value
                }
                if let value = dict["SpeakerName"] as? String {
                    self.speakerName = value
                }
                if let value = dict["Summary"] as? String {
                    self.summary = value
                }
            }
        }
        public class KeySentences : Tea.TeaModel {
            public var end: Int64?

            public var id: Int64?

            public var sentenceId: Int64?

            public var start: Int64?

            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.end != nil {
                    map["End"] = self.end!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.sentenceId != nil {
                    map["SentenceId"] = self.sentenceId!
                }
                if self.start != nil {
                    map["Start"] = self.start!
                }
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["End"] as? Int64 {
                    self.end = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["SentenceId"] as? Int64 {
                    self.sentenceId = value
                }
                if let value = dict["Start"] as? Int64 {
                    self.start = value
                }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public class QuestionsAnsweringSummary : Tea.TeaModel {
            public var answer: String?

            public var question: String?

            public var sentenceIdsOfAnswer: [Int64]?

            public var sentenceIdsOfQuestion: [Int64]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.answer != nil {
                    map["Answer"] = self.answer!
                }
                if self.question != nil {
                    map["Question"] = self.question!
                }
                if self.sentenceIdsOfAnswer != nil {
                    map["SentenceIdsOfAnswer"] = self.sentenceIdsOfAnswer!
                }
                if self.sentenceIdsOfQuestion != nil {
                    map["SentenceIdsOfQuestion"] = self.sentenceIdsOfQuestion!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Answer"] as? String {
                    self.answer = value
                }
                if let value = dict["Question"] as? String {
                    self.question = value
                }
                if let value = dict["SentenceIdsOfAnswer"] as? [Int64] {
                    self.sentenceIdsOfAnswer = value
                }
                if let value = dict["SentenceIdsOfQuestion"] as? [Int64] {
                    self.sentenceIdsOfQuestion = value
                }
            }
        }
        public var actions: QueryMinutesSummaryResponseBody.Summary.Actions?

        public var autoChapters: [QueryMinutesSummaryResponseBody.Summary.AutoChapters]?

        public var conversationalSummary: [QueryMinutesSummaryResponseBody.Summary.ConversationalSummary]?

        public var keySentences: QueryMinutesSummaryResponseBody.Summary.KeySentences?

        public var keywords: [String]?

        public var paragraphSummary: String?

        public var questionsAnsweringSummary: [QueryMinutesSummaryResponseBody.Summary.QuestionsAnsweringSummary]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.actions?.validate()
            try self.keySentences?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actions != nil {
                map["Actions"] = self.actions?.toMap()
            }
            if self.autoChapters != nil {
                var tmp : [Any] = []
                for k in self.autoChapters! {
                    tmp.append(k.toMap())
                }
                map["AutoChapters"] = tmp
            }
            if self.conversationalSummary != nil {
                var tmp : [Any] = []
                for k in self.conversationalSummary! {
                    tmp.append(k.toMap())
                }
                map["ConversationalSummary"] = tmp
            }
            if self.keySentences != nil {
                map["KeySentences"] = self.keySentences?.toMap()
            }
            if self.keywords != nil {
                map["Keywords"] = self.keywords!
            }
            if self.paragraphSummary != nil {
                map["ParagraphSummary"] = self.paragraphSummary!
            }
            if self.questionsAnsweringSummary != nil {
                var tmp : [Any] = []
                for k in self.questionsAnsweringSummary! {
                    tmp.append(k.toMap())
                }
                map["QuestionsAnsweringSummary"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Actions"] as? [String: Any?] {
                var model = QueryMinutesSummaryResponseBody.Summary.Actions()
                model.fromMap(value)
                self.actions = model
            }
            if let value = dict["AutoChapters"] as? [Any?] {
                var tmp : [QueryMinutesSummaryResponseBody.Summary.AutoChapters] = []
                for v in value {
                    if v != nil {
                        var model = QueryMinutesSummaryResponseBody.Summary.AutoChapters()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.autoChapters = tmp
            }
            if let value = dict["ConversationalSummary"] as? [Any?] {
                var tmp : [QueryMinutesSummaryResponseBody.Summary.ConversationalSummary] = []
                for v in value {
                    if v != nil {
                        var model = QueryMinutesSummaryResponseBody.Summary.ConversationalSummary()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.conversationalSummary = tmp
            }
            if let value = dict["KeySentences"] as? [String: Any?] {
                var model = QueryMinutesSummaryResponseBody.Summary.KeySentences()
                model.fromMap(value)
                self.keySentences = model
            }
            if let value = dict["Keywords"] as? [String] {
                self.keywords = value
            }
            if let value = dict["ParagraphSummary"] as? String {
                self.paragraphSummary = value
            }
            if let value = dict["QuestionsAnsweringSummary"] as? [Any?] {
                var tmp : [QueryMinutesSummaryResponseBody.Summary.QuestionsAnsweringSummary] = []
                for v in value {
                    if v != nil {
                        var model = QueryMinutesSummaryResponseBody.Summary.QuestionsAnsweringSummary()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.questionsAnsweringSummary = tmp
            }
        }
    }
    public var requestId: String?

    public var summary: QueryMinutesSummaryResponseBody.Summary?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.summary?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.summary != nil {
            map["summary"] = self.summary?.toMap()
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["summary"] as? [String: Any?] {
            var model = QueryMinutesSummaryResponseBody.Summary()
            model.fromMap(value)
            self.summary = model
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class QueryMinutesSummaryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMinutesSummaryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMinutesSummaryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryMinutesTextHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryMinutesTextHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryMinutesTextHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryMinutesTextShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryMinutesTextRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: QueryMinutesTextRequest.TenantContext?

    public var conferenceId: String?

    public var direction: String?

    public var maxResults: Int64?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        if self.direction != nil {
            map["direction"] = self.direction!
        }
        if self.maxResults != nil {
            map["maxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryMinutesTextRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["direction"] as? String {
            self.direction = value
        }
        if let value = dict["maxResults"] as? Int64 {
            self.maxResults = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class QueryMinutesTextShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var conferenceId: String?

    public var direction: String?

    public var maxResults: Int64?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        if self.direction != nil {
            map["direction"] = self.direction!
        }
        if self.maxResults != nil {
            map["maxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["direction"] as? String {
            self.direction = value
        }
        if let value = dict["maxResults"] as? Int64 {
            self.maxResults = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class QueryMinutesTextResponseBody : Tea.TeaModel {
    public class ParagraphList : Tea.TeaModel {
        public class SentenceList : Tea.TeaModel {
            public class WordList : Tea.TeaModel {
                public var endTime: Int64?

                public var startTime: Int64?

                public var word: String?

                public var wordId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.endTime != nil {
                        map["EndTime"] = self.endTime!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    if self.word != nil {
                        map["Word"] = self.word!
                    }
                    if self.wordId != nil {
                        map["WordId"] = self.wordId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EndTime"] as? Int64 {
                        self.endTime = value
                    }
                    if let value = dict["StartTime"] as? Int64 {
                        self.startTime = value
                    }
                    if let value = dict["Word"] as? String {
                        self.word = value
                    }
                    if let value = dict["WordId"] as? String {
                        self.wordId = value
                    }
                }
            }
            public var endTime: Int64?

            public var sentence: String?

            public var startTime: Int64?

            public var userId: String?

            public var wordList: [QueryMinutesTextResponseBody.ParagraphList.SentenceList.WordList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.sentence != nil {
                    map["Sentence"] = self.sentence!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.wordList != nil {
                    var tmp : [Any] = []
                    for k in self.wordList! {
                        tmp.append(k.toMap())
                    }
                    map["WordList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndTime"] as? Int64 {
                    self.endTime = value
                }
                if let value = dict["Sentence"] as? String {
                    self.sentence = value
                }
                if let value = dict["StartTime"] as? Int64 {
                    self.startTime = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["WordList"] as? [Any?] {
                    var tmp : [QueryMinutesTextResponseBody.ParagraphList.SentenceList.WordList] = []
                    for v in value {
                        if v != nil {
                            var model = QueryMinutesTextResponseBody.ParagraphList.SentenceList.WordList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.wordList = tmp
                }
            }
        }
        public var endTime: Int64?

        public var nickName: String?

        public var paragraph: String?

        public var paragraphId: Int64?

        public var recordId: Int64?

        public var sentenceList: [QueryMinutesTextResponseBody.ParagraphList.SentenceList]?

        public var startTime: Int64?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.nickName != nil {
                map["NickName"] = self.nickName!
            }
            if self.paragraph != nil {
                map["Paragraph"] = self.paragraph!
            }
            if self.paragraphId != nil {
                map["ParagraphId"] = self.paragraphId!
            }
            if self.recordId != nil {
                map["RecordId"] = self.recordId!
            }
            if self.sentenceList != nil {
                var tmp : [Any] = []
                for k in self.sentenceList! {
                    tmp.append(k.toMap())
                }
                map["SentenceList"] = tmp
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndTime"] as? Int64 {
                self.endTime = value
            }
            if let value = dict["NickName"] as? String {
                self.nickName = value
            }
            if let value = dict["Paragraph"] as? String {
                self.paragraph = value
            }
            if let value = dict["ParagraphId"] as? Int64 {
                self.paragraphId = value
            }
            if let value = dict["RecordId"] as? Int64 {
                self.recordId = value
            }
            if let value = dict["SentenceList"] as? [Any?] {
                var tmp : [QueryMinutesTextResponseBody.ParagraphList.SentenceList] = []
                for v in value {
                    if v != nil {
                        var model = QueryMinutesTextResponseBody.ParagraphList.SentenceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.sentenceList = tmp
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var hasMore: Bool?

    public var nextToken: String?

    public var paragraphList: [QueryMinutesTextResponseBody.ParagraphList]?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hasMore != nil {
            map["hasMore"] = self.hasMore!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.paragraphList != nil {
            var tmp : [Any] = []
            for k in self.paragraphList! {
                tmp.append(k.toMap())
            }
            map["paragraphList"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["hasMore"] as? Bool {
            self.hasMore = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["paragraphList"] as? [Any?] {
            var tmp : [QueryMinutesTextResponseBody.ParagraphList] = []
            for v in value {
                if v != nil {
                    var model = QueryMinutesTextResponseBody.ParagraphList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.paragraphList = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class QueryMinutesTextResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryMinutesTextResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryMinutesTextResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryOrgHonorsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryOrgHonorsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryOrgHonorsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryOrgHonorsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryOrgHonorsRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: QueryOrgHonorsRequest.TenantContext?

    public var maxResults: Int32?

    public var nextToken: String?

    public var orgId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.maxResults != nil {
            map["maxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryOrgHonorsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["maxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
    }
}

public class QueryOrgHonorsShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var orgId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.maxResults != nil {
            map["maxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["maxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
    }
}

public class QueryOrgHonorsResponseBody : Tea.TeaModel {
    public class OpenHonors : Tea.TeaModel {
        public var honorDesc: String?

        public var honorId: Int64?

        public var honorImgUrl: String?

        public var honorName: String?

        public var honorPendantImgUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.honorDesc != nil {
                map["honorDesc"] = self.honorDesc!
            }
            if self.honorId != nil {
                map["honorId"] = self.honorId!
            }
            if self.honorImgUrl != nil {
                map["honorImgUrl"] = self.honorImgUrl!
            }
            if self.honorName != nil {
                map["honorName"] = self.honorName!
            }
            if self.honorPendantImgUrl != nil {
                map["honorPendantImgUrl"] = self.honorPendantImgUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["honorDesc"] as? String {
                self.honorDesc = value
            }
            if let value = dict["honorId"] as? Int64 {
                self.honorId = value
            }
            if let value = dict["honorImgUrl"] as? String {
                self.honorImgUrl = value
            }
            if let value = dict["honorName"] as? String {
                self.honorName = value
            }
            if let value = dict["honorPendantImgUrl"] as? String {
                self.honorPendantImgUrl = value
            }
        }
    }
    public var nextToken: String?

    public var openHonors: [QueryOrgHonorsResponseBody.OpenHonors]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.openHonors != nil {
            var tmp : [Any] = []
            for k in self.openHonors! {
                tmp.append(k.toMap())
            }
            map["openHonors"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["openHonors"] as? [Any?] {
            var tmp : [QueryOrgHonorsResponseBody.OpenHonors] = []
            for v in value {
                if v != nil {
                    var model = QueryOrgHonorsResponseBody.OpenHonors()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.openHonors = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryOrgHonorsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryOrgHonorsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryOrgHonorsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryOrgTodoTasksHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryOrgTodoTasksHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryOrgTodoTasksHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryOrgTodoTasksShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryOrgTodoTasksRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: QueryOrgTodoTasksRequest.TenantContext?

    public var isDone: Bool?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.isDone != nil {
            map["isDone"] = self.isDone!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryOrgTodoTasksRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["isDone"] as? Bool {
            self.isDone = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class QueryOrgTodoTasksShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var isDone: Bool?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.isDone != nil {
            map["isDone"] = self.isDone!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["isDone"] as? Bool {
            self.isDone = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class QueryOrgTodoTasksResponseBody : Tea.TeaModel {
    public class TodoCards : Tea.TeaModel {
        public class DetailUrl : Tea.TeaModel {
            public var appUrl: String?

            public var pcUrl: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appUrl != nil {
                    map["appUrl"] = self.appUrl!
                }
                if self.pcUrl != nil {
                    map["pcUrl"] = self.pcUrl!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["appUrl"] as? String {
                    self.appUrl = value
                }
                if let value = dict["pcUrl"] as? String {
                    self.pcUrl = value
                }
            }
        }
        public var bizTag: String?

        public var createdTime: Int64?

        public var creatorId: String?

        public var detailUrl: QueryOrgTodoTasksResponseBody.TodoCards.DetailUrl?

        public var dueTime: Int64?

        public var isDone: Bool?

        public var modifiedTime: Int64?

        public var priority: Int32?

        public var sourceId: String?

        public var subject: String?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.detailUrl?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizTag != nil {
                map["bizTag"] = self.bizTag!
            }
            if self.createdTime != nil {
                map["createdTime"] = self.createdTime!
            }
            if self.creatorId != nil {
                map["creatorId"] = self.creatorId!
            }
            if self.detailUrl != nil {
                map["detailUrl"] = self.detailUrl?.toMap()
            }
            if self.dueTime != nil {
                map["dueTime"] = self.dueTime!
            }
            if self.isDone != nil {
                map["isDone"] = self.isDone!
            }
            if self.modifiedTime != nil {
                map["modifiedTime"] = self.modifiedTime!
            }
            if self.priority != nil {
                map["priority"] = self.priority!
            }
            if self.sourceId != nil {
                map["sourceId"] = self.sourceId!
            }
            if self.subject != nil {
                map["subject"] = self.subject!
            }
            if self.taskId != nil {
                map["taskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["bizTag"] as? String {
                self.bizTag = value
            }
            if let value = dict["createdTime"] as? Int64 {
                self.createdTime = value
            }
            if let value = dict["creatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["detailUrl"] as? [String: Any?] {
                var model = QueryOrgTodoTasksResponseBody.TodoCards.DetailUrl()
                model.fromMap(value)
                self.detailUrl = model
            }
            if let value = dict["dueTime"] as? Int64 {
                self.dueTime = value
            }
            if let value = dict["isDone"] as? Bool {
                self.isDone = value
            }
            if let value = dict["modifiedTime"] as? Int64 {
                self.modifiedTime = value
            }
            if let value = dict["priority"] as? Int32 {
                self.priority = value
            }
            if let value = dict["sourceId"] as? String {
                self.sourceId = value
            }
            if let value = dict["subject"] as? String {
                self.subject = value
            }
            if let value = dict["taskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var todoCards: [QueryOrgTodoTasksResponseBody.TodoCards]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.todoCards != nil {
            var tmp : [Any] = []
            for k in self.todoCards! {
                tmp.append(k.toMap())
            }
            map["todoCards"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["todoCards"] as? [Any?] {
            var tmp : [QueryOrgTodoTasksResponseBody.TodoCards] = []
            for v in value {
                if v != nil {
                    var model = QueryOrgTodoTasksResponseBody.TodoCards()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.todoCards = tmp
        }
    }
}

public class QueryOrgTodoTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryOrgTodoTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryOrgTodoTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryRecordMinutesUrlHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryRecordMinutesUrlHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryRecordMinutesUrlHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryRecordMinutesUrlShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryRecordMinutesUrlRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var bizType: String?

    public var conferenceId: String?

    public var tenantContext: QueryRecordMinutesUrlRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.conferenceId != nil {
            map["ConferenceId"] = self.conferenceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["ConferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryRecordMinutesUrlRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class QueryRecordMinutesUrlShrinkRequest : Tea.TeaModel {
    public var bizType: String?

    public var conferenceId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizType != nil {
            map["BizType"] = self.bizType!
        }
        if self.conferenceId != nil {
            map["ConferenceId"] = self.conferenceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizType"] as? String {
            self.bizType = value
        }
        if let value = dict["ConferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class QueryRecordMinutesUrlResponseBody : Tea.TeaModel {
    public class RecordMinutesUrls : Tea.TeaModel {
        public var recordMinutesUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.recordMinutesUrl != nil {
                map["RecordMinutesUrl"] = self.recordMinutesUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RecordMinutesUrl"] as? String {
                self.recordMinutesUrl = value
            }
        }
    }
    public var recordMinutesUrls: [QueryRecordMinutesUrlResponseBody.RecordMinutesUrls]?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.recordMinutesUrls != nil {
            var tmp : [Any] = []
            for k in self.recordMinutesUrls! {
                tmp.append(k.toMap())
            }
            map["recordMinutesUrls"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["recordMinutesUrls"] as? [Any?] {
            var tmp : [QueryRecordMinutesUrlResponseBody.RecordMinutesUrls] = []
            for v in value {
                if v != nil {
                    var model = QueryRecordMinutesUrlResponseBody.RecordMinutesUrls()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.recordMinutesUrls = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class QueryRecordMinutesUrlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryRecordMinutesUrlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryRecordMinutesUrlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryReportDetailHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryReportDetailHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryReportDetailHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryReportDetailShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryReportDetailRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var reportId: String?

    public var tenantContext: QueryReportDetailRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.reportId != nil {
            map["ReportId"] = self.reportId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ReportId"] as? String {
            self.reportId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryReportDetailRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class QueryReportDetailShrinkRequest : Tea.TeaModel {
    public var reportId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.reportId != nil {
            map["ReportId"] = self.reportId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ReportId"] as? String {
            self.reportId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class QueryReportDetailResponseBody : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public var images: [String]?

        public var key: String?

        public var sort: String?

        public var type: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.images != nil {
                map["Images"] = self.images!
            }
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.sort != nil {
                map["Sort"] = self.sort!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Images"] as? [String] {
                self.images = value
            }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Sort"] as? String {
                self.sort = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var content: [QueryReportDetailResponseBody.Content]?

    public var createTime: Int64?

    public var creatorId: String?

    public var creatorName: String?

    public var deptName: String?

    public var modifiedTime: Int64?

    public var remark: String?

    public var reportId: String?

    public var requestId: String?

    public var templateName: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            var tmp : [Any] = []
            for k in self.content! {
                tmp.append(k.toMap())
            }
            map["content"] = tmp
        }
        if self.createTime != nil {
            map["createTime"] = self.createTime!
        }
        if self.creatorId != nil {
            map["creatorId"] = self.creatorId!
        }
        if self.creatorName != nil {
            map["creatorName"] = self.creatorName!
        }
        if self.deptName != nil {
            map["deptName"] = self.deptName!
        }
        if self.modifiedTime != nil {
            map["modifiedTime"] = self.modifiedTime!
        }
        if self.remark != nil {
            map["remark"] = self.remark!
        }
        if self.reportId != nil {
            map["reportId"] = self.reportId!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.templateName != nil {
            map["templateName"] = self.templateName!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["content"] as? [Any?] {
            var tmp : [QueryReportDetailResponseBody.Content] = []
            for v in value {
                if v != nil {
                    var model = QueryReportDetailResponseBody.Content()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.content = tmp
        }
        if let value = dict["createTime"] as? Int64 {
            self.createTime = value
        }
        if let value = dict["creatorId"] as? String {
            self.creatorId = value
        }
        if let value = dict["creatorName"] as? String {
            self.creatorName = value
        }
        if let value = dict["deptName"] as? String {
            self.deptName = value
        }
        if let value = dict["modifiedTime"] as? Int64 {
            self.modifiedTime = value
        }
        if let value = dict["remark"] as? String {
            self.remark = value
        }
        if let value = dict["reportId"] as? String {
            self.reportId = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["templateName"] as? String {
            self.templateName = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class QueryReportDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryReportDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryReportDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryScheduleConferenceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryScheduleConferenceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryScheduleConferenceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryScheduleConferenceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryScheduleConferenceRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: QueryScheduleConferenceRequest.TenantContext?

    public var scheduleConferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.scheduleConferenceId != nil {
            map["scheduleConferenceId"] = self.scheduleConferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryScheduleConferenceRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["scheduleConferenceId"] as? String {
            self.scheduleConferenceId = value
        }
    }
}

public class QueryScheduleConferenceShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var scheduleConferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.scheduleConferenceId != nil {
            map["scheduleConferenceId"] = self.scheduleConferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["scheduleConferenceId"] as? String {
            self.scheduleConferenceId = value
        }
    }
}

public class QueryScheduleConferenceResponseBody : Tea.TeaModel {
    public var endTime: Int64?

    public var phones: [String]?

    public var requestId: String?

    public var roomCode: String?

    public var scheduleConferenceId: String?

    public var startTime: Int64?

    public var title: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["endTime"] = self.endTime!
        }
        if self.phones != nil {
            map["phones"] = self.phones!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.roomCode != nil {
            map["roomCode"] = self.roomCode!
        }
        if self.scheduleConferenceId != nil {
            map["scheduleConferenceId"] = self.scheduleConferenceId!
        }
        if self.startTime != nil {
            map["startTime"] = self.startTime!
        }
        if self.title != nil {
            map["title"] = self.title!
        }
        if self.url != nil {
            map["url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["endTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["phones"] as? [String] {
            self.phones = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["roomCode"] as? String {
            self.roomCode = value
        }
        if let value = dict["scheduleConferenceId"] as? String {
            self.scheduleConferenceId = value
        }
        if let value = dict["startTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["title"] as? String {
            self.title = value
        }
        if let value = dict["url"] as? String {
            self.url = value
        }
    }
}

public class QueryScheduleConferenceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryScheduleConferenceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryScheduleConferenceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryScheduleConferenceInfoHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryScheduleConferenceInfoHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryScheduleConferenceInfoHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryScheduleConferenceInfoShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryScheduleConferenceInfoRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var maxResults: Int32?

    public var nextToken: String?

    public var scheduleConferenceId: String?

    public var tenantContext: QueryScheduleConferenceInfoRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.scheduleConferenceId != nil {
            map["ScheduleConferenceId"] = self.scheduleConferenceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["ScheduleConferenceId"] as? String {
            self.scheduleConferenceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryScheduleConferenceInfoRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class QueryScheduleConferenceInfoShrinkRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var nextToken: String?

    public var scheduleConferenceId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.scheduleConferenceId != nil {
            map["ScheduleConferenceId"] = self.scheduleConferenceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["ScheduleConferenceId"] as? String {
            self.scheduleConferenceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class QueryScheduleConferenceInfoResponseBody : Tea.TeaModel {
    public class ConferenceList : Tea.TeaModel {
        public var conferenceId: String?

        public var endTime: Int64?

        public var roomCode: String?

        public var startTime: Int64?

        public var status: Int32?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.conferenceId != nil {
                map["ConferenceId"] = self.conferenceId!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.roomCode != nil {
                map["RoomCode"] = self.roomCode!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConferenceId"] as? String {
                self.conferenceId = value
            }
            if let value = dict["EndTime"] as? Int64 {
                self.endTime = value
            }
            if let value = dict["RoomCode"] as? String {
                self.roomCode = value
            }
            if let value = dict["StartTime"] as? Int64 {
                self.startTime = value
            }
            if let value = dict["Status"] as? Int32 {
                self.status = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var conferenceList: [QueryScheduleConferenceInfoResponseBody.ConferenceList]?

    public var nextToken: String?

    public var requestId: String?

    public var totalCount: Int32?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.conferenceList != nil {
            var tmp : [Any] = []
            for k in self.conferenceList! {
                tmp.append(k.toMap())
            }
            map["conferenceList"] = tmp
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["conferenceList"] as? [Any?] {
            var tmp : [QueryScheduleConferenceInfoResponseBody.ConferenceList] = []
            for v in value {
                if v != nil {
                    var model = QueryScheduleConferenceInfoResponseBody.ConferenceList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.conferenceList = tmp
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class QueryScheduleConferenceInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryScheduleConferenceInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryScheduleConferenceInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryUserHonorsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: QueryUserHonorsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = QueryUserHonorsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class QueryUserHonorsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class QueryUserHonorsRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: QueryUserHonorsRequest.TenantContext?

    public var maxResults: Int32?

    public var nextToken: String?

    public var orgId: Int64?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.maxResults != nil {
            map["maxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = QueryUserHonorsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["maxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
    }
}

public class QueryUserHonorsShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public var orgId: Int64?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.maxResults != nil {
            map["maxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["maxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
    }
}

public class QueryUserHonorsResponseBody : Tea.TeaModel {
    public class Honors : Tea.TeaModel {
        public class GrantHistory : Tea.TeaModel {
            public var grantTime: Int64?

            public var senderUserid: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.grantTime != nil {
                    map["grantTime"] = self.grantTime!
                }
                if self.senderUserid != nil {
                    map["senderUserid"] = self.senderUserid!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["grantTime"] as? Int64 {
                    self.grantTime = value
                }
                if let value = dict["senderUserid"] as? String {
                    self.senderUserid = value
                }
            }
        }
        public var expirationTime: Int64?

        public var grantHistory: [QueryUserHonorsResponseBody.Honors.GrantHistory]?

        public var honorDesc: String?

        public var honorId: String?

        public var honorName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expirationTime != nil {
                map["expirationTime"] = self.expirationTime!
            }
            if self.grantHistory != nil {
                var tmp : [Any] = []
                for k in self.grantHistory! {
                    tmp.append(k.toMap())
                }
                map["grantHistory"] = tmp
            }
            if self.honorDesc != nil {
                map["honorDesc"] = self.honorDesc!
            }
            if self.honorId != nil {
                map["honorId"] = self.honorId!
            }
            if self.honorName != nil {
                map["honorName"] = self.honorName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["expirationTime"] as? Int64 {
                self.expirationTime = value
            }
            if let value = dict["grantHistory"] as? [Any?] {
                var tmp : [QueryUserHonorsResponseBody.Honors.GrantHistory] = []
                for v in value {
                    if v != nil {
                        var model = QueryUserHonorsResponseBody.Honors.GrantHistory()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.grantHistory = tmp
            }
            if let value = dict["honorDesc"] as? String {
                self.honorDesc = value
            }
            if let value = dict["honorId"] as? String {
                self.honorId = value
            }
            if let value = dict["honorName"] as? String {
                self.honorName = value
            }
        }
    }
    public var honors: [QueryUserHonorsResponseBody.Honors]?

    public var nextToken: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.honors != nil {
            var tmp : [Any] = []
            for k in self.honors! {
                tmp.append(k.toMap())
            }
            map["honors"] = tmp
        }
        if self.nextToken != nil {
            map["nextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["honors"] as? [Any?] {
            var tmp : [QueryUserHonorsResponseBody.Honors] = []
            for v in value {
                if v != nil {
                    var model = QueryUserHonorsResponseBody.Honors()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.honors = tmp
        }
        if let value = dict["nextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class QueryUserHonorsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryUserHonorsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryUserHonorsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RecallHonorHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: RecallHonorHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = RecallHonorHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class RecallHonorShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class RecallHonorRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: RecallHonorRequest.TenantContext?

    public var honorId: String?

    public var orgId: Int64?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.honorId != nil {
            map["honorId"] = self.honorId!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = RecallHonorRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["honorId"] as? String {
            self.honorId = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
    }
}

public class RecallHonorShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var honorId: String?

    public var orgId: Int64?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.honorId != nil {
            map["honorId"] = self.honorId!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["honorId"] as? String {
            self.honorId = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
    }
}

public class RecallHonorResponseBody : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public var data: Any?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                map["data"] = self.data!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["data"] as? Any {
                self.data = value
            }
        }
    }
    public var content: RecallHonorResponseBody.Content?

    public var errorCode: String?

    public var errorCtx: [String: Any]?

    public var errorMsg: String?

    public var httpStatusCode: Int32?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.content?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["content"] = self.content?.toMap()
        }
        if self.errorCode != nil {
            map["errorCode"] = self.errorCode!
        }
        if self.errorCtx != nil {
            map["errorCtx"] = self.errorCtx!
        }
        if self.errorMsg != nil {
            map["errorMsg"] = self.errorMsg!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["content"] as? [String: Any?] {
            var model = RecallHonorResponseBody.Content()
            model.fromMap(value)
            self.content = model
        }
        if let value = dict["errorCode"] as? String {
            self.errorCode = value
        }
        if let value = dict["errorCtx"] as? [String: Any] {
            self.errorCtx = value
        }
        if let value = dict["errorMsg"] as? String {
            self.errorMsg = value
        }
        if let value = dict["httpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class RecallHonorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RecallHonorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RecallHonorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ReceiverListReportHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: ReceiverListReportHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = ReceiverListReportHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class ReceiverListReportShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class ReceiverListReportRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var offset: Int64?

    public var reportId: String?

    public var size: Int64?

    public var tenantContext: ReceiverListReportRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.offset != nil {
            map["Offset"] = self.offset!
        }
        if self.reportId != nil {
            map["ReportId"] = self.reportId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Offset"] as? Int64 {
            self.offset = value
        }
        if let value = dict["ReportId"] as? String {
            self.reportId = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = ReceiverListReportRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class ReceiverListReportShrinkRequest : Tea.TeaModel {
    public var offset: Int64?

    public var reportId: String?

    public var size: Int64?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.offset != nil {
            map["Offset"] = self.offset!
        }
        if self.reportId != nil {
            map["ReportId"] = self.reportId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Offset"] as? Int64 {
            self.offset = value
        }
        if let value = dict["ReportId"] as? String {
            self.reportId = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class ReceiverListReportResponseBody : Tea.TeaModel {
    public var hasMore: Bool?

    public var nextCursor: Int64?

    public var requestId: String?

    public var useridList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hasMore != nil {
            map["hasMore"] = self.hasMore!
        }
        if self.nextCursor != nil {
            map["nextCursor"] = self.nextCursor!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.useridList != nil {
            map["useridList"] = self.useridList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["hasMore"] as? Bool {
            self.hasMore = value
        }
        if let value = dict["nextCursor"] as? Int64 {
            self.nextCursor = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["useridList"] as? [String] {
            self.useridList = value
        }
    }
}

public class ReceiverListReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ReceiverListReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ReceiverListReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RedirectTaskHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: RedirectTaskHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = RedirectTaskHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class RedirectTaskShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class RedirectTaskRequest : Tea.TeaModel {
    public var appType: String?

    public var byManager: String?

    public var language: String?

    public var nowActionExecutorId: String?

    public var processInstanceId: String?

    public var remark: String?

    public var systemToken: String?

    public var taskId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.byManager != nil {
            map["ByManager"] = self.byManager!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.nowActionExecutorId != nil {
            map["NowActionExecutorId"] = self.nowActionExecutorId!
        }
        if self.processInstanceId != nil {
            map["ProcessInstanceId"] = self.processInstanceId!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["ByManager"] as? String {
            self.byManager = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["NowActionExecutorId"] as? String {
            self.nowActionExecutorId = value
        }
        if let value = dict["ProcessInstanceId"] as? String {
            self.processInstanceId = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["TaskId"] as? Int64 {
            self.taskId = value
        }
    }
}

public class RedirectTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class RedirectTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RedirectTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RedirectTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveAttendeeHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: RemoveAttendeeHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = RemoveAttendeeHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class RemoveAttendeeShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class RemoveAttendeeRequest : Tea.TeaModel {
    public var attendeesToRemove: [String]?

    public var calendarId: String?

    public var eventId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attendeesToRemove != nil {
            map["AttendeesToRemove"] = self.attendeesToRemove!
        }
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AttendeesToRemove"] as? [String] {
            self.attendeesToRemove = value
        }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
    }
}

public class RemoveAttendeeShrinkRequest : Tea.TeaModel {
    public var attendeesToRemoveShrink: String?

    public var calendarId: String?

    public var eventId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attendeesToRemoveShrink != nil {
            map["AttendeesToRemove"] = self.attendeesToRemoveShrink!
        }
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AttendeesToRemove"] as? String {
            self.attendeesToRemoveShrink = value
        }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
    }
}

public class RemoveAttendeeResponseBody : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public var data: Any?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                map["Data"] = self.data!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? Any {
                self.data = value
            }
        }
    }
    public var content: RemoveAttendeeResponseBody.Content?

    public var errorCode: String?

    public var errorCtx: [String: Any]?

    public var errorMsg: String?

    public var httpStatusCode: Int32?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.content?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content?.toMap()
        }
        if self.errorCode != nil {
            map["ErrorCode"] = self.errorCode!
        }
        if self.errorCtx != nil {
            map["ErrorCtx"] = self.errorCtx!
        }
        if self.errorMsg != nil {
            map["ErrorMsg"] = self.errorMsg!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? [String: Any?] {
            var model = RemoveAttendeeResponseBody.Content()
            model.fromMap(value)
            self.content = model
        }
        if let value = dict["ErrorCode"] as? String {
            self.errorCode = value
        }
        if let value = dict["ErrorCtx"] as? [String: Any] {
            self.errorCtx = value
        }
        if let value = dict["ErrorMsg"] as? String {
            self.errorMsg = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RemoveAttendeeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveAttendeeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveAttendeeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveMeetingRoomsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: RemoveMeetingRoomsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = RemoveMeetingRoomsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class RemoveMeetingRoomsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class RemoveMeetingRoomsRequest : Tea.TeaModel {
    public class MeetingRoomsToRemove : Tea.TeaModel {
        public var roomId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.roomId != nil {
                map["RoomId"] = self.roomId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RoomId"] as? String {
                self.roomId = value
            }
        }
    }
    public var calendarId: String?

    public var eventId: String?

    public var meetingRoomsToRemove: [RemoveMeetingRoomsRequest.MeetingRoomsToRemove]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.meetingRoomsToRemove != nil {
            var tmp : [Any] = []
            for k in self.meetingRoomsToRemove! {
                tmp.append(k.toMap())
            }
            map["MeetingRoomsToRemove"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["MeetingRoomsToRemove"] as? [Any?] {
            var tmp : [RemoveMeetingRoomsRequest.MeetingRoomsToRemove] = []
            for v in value {
                if v != nil {
                    var model = RemoveMeetingRoomsRequest.MeetingRoomsToRemove()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.meetingRoomsToRemove = tmp
        }
    }
}

public class RemoveMeetingRoomsShrinkRequest : Tea.TeaModel {
    public var calendarId: String?

    public var eventId: String?

    public var meetingRoomsToRemoveShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.meetingRoomsToRemoveShrink != nil {
            map["MeetingRoomsToRemove"] = self.meetingRoomsToRemoveShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["MeetingRoomsToRemove"] as? String {
            self.meetingRoomsToRemoveShrink = value
        }
    }
}

public class RemoveMeetingRoomsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? Bool {
            self.result = value
        }
    }
}

public class RemoveMeetingRoomsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveMeetingRoomsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveMeetingRoomsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RespondEventHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: RespondEventHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = RespondEventHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class RespondEventShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class RespondEventRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var calendarId: String?

    public var eventId: String?

    public var responseStatus: String?

    public var tenantContext: RespondEventRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.responseStatus != nil {
            map["ResponseStatus"] = self.responseStatus!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["ResponseStatus"] as? String {
            self.responseStatus = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = RespondEventRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class RespondEventShrinkRequest : Tea.TeaModel {
    public var calendarId: String?

    public var eventId: String?

    public var responseStatus: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.responseStatus != nil {
            map["ResponseStatus"] = self.responseStatus!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["ResponseStatus"] as? String {
            self.responseStatus = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class RespondEventResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class RespondEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RespondEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RespondEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RetrieveRunHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountId != nil {
            map["accountId"] = self.accountId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["accountId"] as? String {
            self.accountId = value
        }
    }
}

public class RetrieveRunRequest : Tea.TeaModel {
    public var assistantId: String?

    public var originalAssistantId: String?

    public var runId: String?

    public var threadId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.assistantId != nil {
            map["assistantId"] = self.assistantId!
        }
        if self.originalAssistantId != nil {
            map["originalAssistantId"] = self.originalAssistantId!
        }
        if self.runId != nil {
            map["runId"] = self.runId!
        }
        if self.threadId != nil {
            map["threadId"] = self.threadId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["assistantId"] as? String {
            self.assistantId = value
        }
        if let value = dict["originalAssistantId"] as? String {
            self.originalAssistantId = value
        }
        if let value = dict["runId"] as? String {
            self.runId = value
        }
        if let value = dict["threadId"] as? String {
            self.threadId = value
        }
    }
}

public class RetrieveRunResponseBody : Tea.TeaModel {
    public var cancelledAt: Int64?

    public var completedAt: Int64?

    public var createAt: Int64?

    public var expiresAt: Int64?

    public var failedAt: Int64?

    public var id: String?

    public var lastErrorMsg: String?

    public var metadata: [String: Any]?

    public var object: String?

    public var requestId: String?

    public var startedAt: Int64?

    public var status: String?

    public var threadId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cancelledAt != nil {
            map["cancelledAt"] = self.cancelledAt!
        }
        if self.completedAt != nil {
            map["completedAt"] = self.completedAt!
        }
        if self.createAt != nil {
            map["createAt"] = self.createAt!
        }
        if self.expiresAt != nil {
            map["expiresAt"] = self.expiresAt!
        }
        if self.failedAt != nil {
            map["failedAt"] = self.failedAt!
        }
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.lastErrorMsg != nil {
            map["lastErrorMsg"] = self.lastErrorMsg!
        }
        if self.metadata != nil {
            map["metadata"] = self.metadata!
        }
        if self.object != nil {
            map["object"] = self.object!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.startedAt != nil {
            map["startedAt"] = self.startedAt!
        }
        if self.status != nil {
            map["status"] = self.status!
        }
        if self.threadId != nil {
            map["threadId"] = self.threadId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["cancelledAt"] as? Int64 {
            self.cancelledAt = value
        }
        if let value = dict["completedAt"] as? Int64 {
            self.completedAt = value
        }
        if let value = dict["createAt"] as? Int64 {
            self.createAt = value
        }
        if let value = dict["expiresAt"] as? Int64 {
            self.expiresAt = value
        }
        if let value = dict["failedAt"] as? Int64 {
            self.failedAt = value
        }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["lastErrorMsg"] as? String {
            self.lastErrorMsg = value
        }
        if let value = dict["metadata"] as? [String: Any] {
            self.metadata = value
        }
        if let value = dict["object"] as? String {
            self.object = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["startedAt"] as? Int64 {
            self.startedAt = value
        }
        if let value = dict["status"] as? String {
            self.status = value
        }
        if let value = dict["threadId"] as? String {
            self.threadId = value
        }
    }
}

public class RetrieveRunResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RetrieveRunResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RetrieveRunResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveContentHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SaveContentHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SaveContentHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SaveContentShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SaveContentRequest : Tea.TeaModel {
    public class Contents : Tea.TeaModel {
        public var content: String?

        public var contentType: String?

        public var key: String?

        public var sort: Int64?

        public var type: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.contentType != nil {
                map["ContentType"] = self.contentType!
            }
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.sort != nil {
                map["Sort"] = self.sort!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["ContentType"] as? String {
                self.contentType = value
            }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Sort"] as? Int64 {
                self.sort = value
            }
            if let value = dict["Type"] as? Int64 {
                self.type = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var contents: [SaveContentRequest.Contents]?

    public var ddFrom: String?

    public var templateId: String?

    public var tenantContext: SaveContentRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contents != nil {
            var tmp : [Any] = []
            for k in self.contents! {
                tmp.append(k.toMap())
            }
            map["Contents"] = tmp
        }
        if self.ddFrom != nil {
            map["DdFrom"] = self.ddFrom!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Contents"] as? [Any?] {
            var tmp : [SaveContentRequest.Contents] = []
            for v in value {
                if v != nil {
                    var model = SaveContentRequest.Contents()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.contents = tmp
        }
        if let value = dict["DdFrom"] as? String {
            self.ddFrom = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = SaveContentRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class SaveContentShrinkRequest : Tea.TeaModel {
    public var contentsShrink: String?

    public var ddFrom: String?

    public var templateId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contentsShrink != nil {
            map["Contents"] = self.contentsShrink!
        }
        if self.ddFrom != nil {
            map["DdFrom"] = self.ddFrom!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Contents"] as? String {
            self.contentsShrink = value
        }
        if let value = dict["DdFrom"] as? String {
            self.ddFrom = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class SaveContentResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class SaveContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveFormDataHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SaveFormDataHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SaveFormDataHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SaveFormDataShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SaveFormDataRequest : Tea.TeaModel {
    public var appType: String?

    public var formDataJson: String?

    public var formUuid: String?

    public var language: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formDataJson != nil {
            map["FormDataJson"] = self.formDataJson!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormDataJson"] as? String {
            self.formDataJson = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class SaveFormDataResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? String {
            self.result = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SaveFormDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveFormDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveFormDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SaveFormRemarkHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SaveFormRemarkHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SaveFormRemarkHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SaveFormRemarkShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SaveFormRemarkRequest : Tea.TeaModel {
    public var appType: String?

    public var atUserId: String?

    public var content: String?

    public var formInstanceId: String?

    public var language: String?

    public var replyId: Int64?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.atUserId != nil {
            map["AtUserId"] = self.atUserId!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.formInstanceId != nil {
            map["FormInstanceId"] = self.formInstanceId!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.replyId != nil {
            map["ReplyId"] = self.replyId!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["AtUserId"] as? String {
            self.atUserId = value
        }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["FormInstanceId"] as? String {
            self.formInstanceId = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ReplyId"] as? Int64 {
            self.replyId = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class SaveFormRemarkResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? Int64 {
            self.result = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SaveFormRemarkResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveFormRemarkResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SaveFormRemarkResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchEmployeeFieldValuesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SearchEmployeeFieldValuesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SearchEmployeeFieldValuesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SearchEmployeeFieldValuesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SearchEmployeeFieldValuesRequest : Tea.TeaModel {
    public var appType: String?

    public var createFromTimeGMT: String?

    public var createToTimeGMT: String?

    public var formUuid: String?

    public var language: String?

    public var modifiedFromTimeGMT: String?

    public var modifiedToTimeGMT: String?

    public var originatorId: String?

    public var searchFieldJson: String?

    public var systemToken: String?

    public var targetFieldJson: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.createFromTimeGMT != nil {
            map["CreateFromTimeGMT"] = self.createFromTimeGMT!
        }
        if self.createToTimeGMT != nil {
            map["CreateToTimeGMT"] = self.createToTimeGMT!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.modifiedFromTimeGMT != nil {
            map["ModifiedFromTimeGMT"] = self.modifiedFromTimeGMT!
        }
        if self.modifiedToTimeGMT != nil {
            map["ModifiedToTimeGMT"] = self.modifiedToTimeGMT!
        }
        if self.originatorId != nil {
            map["OriginatorId"] = self.originatorId!
        }
        if self.searchFieldJson != nil {
            map["SearchFieldJson"] = self.searchFieldJson!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.targetFieldJson != nil {
            map["TargetFieldJson"] = self.targetFieldJson!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["CreateFromTimeGMT"] as? String {
            self.createFromTimeGMT = value
        }
        if let value = dict["CreateToTimeGMT"] as? String {
            self.createToTimeGMT = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ModifiedFromTimeGMT"] as? String {
            self.modifiedFromTimeGMT = value
        }
        if let value = dict["ModifiedToTimeGMT"] as? String {
            self.modifiedToTimeGMT = value
        }
        if let value = dict["OriginatorId"] as? String {
            self.originatorId = value
        }
        if let value = dict["SearchFieldJson"] as? String {
            self.searchFieldJson = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["TargetFieldJson"] as? String {
            self.targetFieldJson = value
        }
    }
}

public class SearchEmployeeFieldValuesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? String {
            self.result = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SearchEmployeeFieldValuesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchEmployeeFieldValuesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchEmployeeFieldValuesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchFormDataIdListHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SearchFormDataIdListHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SearchFormDataIdListHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SearchFormDataIdListShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SearchFormDataIdListRequest : Tea.TeaModel {
    public var appType: String?

    public var createFromTimeGMT: String?

    public var createToTimeGMT: String?

    public var formUuid: String?

    public var language: String?

    public var modifiedFromTimeGMT: String?

    public var modifiedToTimeGMT: String?

    public var originatorId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchFieldJson: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.createFromTimeGMT != nil {
            map["CreateFromTimeGMT"] = self.createFromTimeGMT!
        }
        if self.createToTimeGMT != nil {
            map["CreateToTimeGMT"] = self.createToTimeGMT!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.modifiedFromTimeGMT != nil {
            map["ModifiedFromTimeGMT"] = self.modifiedFromTimeGMT!
        }
        if self.modifiedToTimeGMT != nil {
            map["ModifiedToTimeGMT"] = self.modifiedToTimeGMT!
        }
        if self.originatorId != nil {
            map["OriginatorId"] = self.originatorId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchFieldJson != nil {
            map["SearchFieldJson"] = self.searchFieldJson!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["CreateFromTimeGMT"] as? String {
            self.createFromTimeGMT = value
        }
        if let value = dict["CreateToTimeGMT"] as? String {
            self.createToTimeGMT = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ModifiedFromTimeGMT"] as? String {
            self.modifiedFromTimeGMT = value
        }
        if let value = dict["ModifiedToTimeGMT"] as? String {
            self.modifiedToTimeGMT = value
        }
        if let value = dict["OriginatorId"] as? String {
            self.originatorId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchFieldJson"] as? String {
            self.searchFieldJson = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class SearchFormDataIdListResponseBody : Tea.TeaModel {
    public var data: [String]?

    public var pageNumber: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["data"] = self.data!
        }
        if self.pageNumber != nil {
            map["pageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? [String] {
            self.data = value
        }
        if let value = dict["pageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SearchFormDataIdListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchFormDataIdListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchFormDataIdListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchFormDataSecondGenerationHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SearchFormDataSecondGenerationHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SearchFormDataSecondGenerationHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SearchFormDataSecondGenerationShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SearchFormDataSecondGenerationRequest : Tea.TeaModel {
    public var appType: String?

    public var createFromTimeGMT: String?

    public var createToTimeGMT: String?

    public var formUuid: String?

    public var modifiedFromTimeGMT: String?

    public var modifiedToTimeGMT: String?

    public var orderConfigJson: String?

    public var originatorId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchCondition: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.createFromTimeGMT != nil {
            map["CreateFromTimeGMT"] = self.createFromTimeGMT!
        }
        if self.createToTimeGMT != nil {
            map["CreateToTimeGMT"] = self.createToTimeGMT!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.modifiedFromTimeGMT != nil {
            map["ModifiedFromTimeGMT"] = self.modifiedFromTimeGMT!
        }
        if self.modifiedToTimeGMT != nil {
            map["ModifiedToTimeGMT"] = self.modifiedToTimeGMT!
        }
        if self.orderConfigJson != nil {
            map["OrderConfigJson"] = self.orderConfigJson!
        }
        if self.originatorId != nil {
            map["OriginatorId"] = self.originatorId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchCondition != nil {
            map["SearchCondition"] = self.searchCondition!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["CreateFromTimeGMT"] as? String {
            self.createFromTimeGMT = value
        }
        if let value = dict["CreateToTimeGMT"] as? String {
            self.createToTimeGMT = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["ModifiedFromTimeGMT"] as? String {
            self.modifiedFromTimeGMT = value
        }
        if let value = dict["ModifiedToTimeGMT"] as? String {
            self.modifiedToTimeGMT = value
        }
        if let value = dict["OrderConfigJson"] as? String {
            self.orderConfigJson = value
        }
        if let value = dict["OriginatorId"] as? String {
            self.originatorId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchCondition"] as? String {
            self.searchCondition = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class SearchFormDataSecondGenerationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ModifyUser : Tea.TeaModel {
            public class Name : Tea.TeaModel {
                public var nameInChinese: String?

                public var nameInEnglish: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.nameInChinese != nil {
                        map["NameInChinese"] = self.nameInChinese!
                    }
                    if self.nameInEnglish != nil {
                        map["NameInEnglish"] = self.nameInEnglish!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NameInChinese"] as? String {
                        self.nameInChinese = value
                    }
                    if let value = dict["NameInEnglish"] as? String {
                        self.nameInEnglish = value
                    }
                }
            }
            public var name: SearchFormDataSecondGenerationResponseBody.Data.ModifyUser.Name?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.name?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name?.toMap()
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? [String: Any?] {
                    var model = SearchFormDataSecondGenerationResponseBody.Data.ModifyUser.Name()
                    model.fromMap(value)
                    self.name = model
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class Originator : Tea.TeaModel {
            public class Name : Tea.TeaModel {
                public var nameInChinese: String?

                public var nameInEnglish: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.nameInChinese != nil {
                        map["NameInChinese"] = self.nameInChinese!
                    }
                    if self.nameInEnglish != nil {
                        map["NameInEnglish"] = self.nameInEnglish!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NameInChinese"] as? String {
                        self.nameInChinese = value
                    }
                    if let value = dict["NameInEnglish"] as? String {
                        self.nameInEnglish = value
                    }
                }
            }
            public var name: SearchFormDataSecondGenerationResponseBody.Data.Originator.Name?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.name?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name?.toMap()
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? [String: Any?] {
                    var model = SearchFormDataSecondGenerationResponseBody.Data.Originator.Name()
                    model.fromMap(value)
                    self.name = model
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var createTimeGMT: String?

        public var creatorUserId: String?

        public var formData: [String: Any]?

        public var formInstanceId: String?

        public var formUuid: String?

        public var id: Int64?

        public var instanceValue: String?

        public var modifiedTimeGMT: String?

        public var modifier: String?

        public var modifyUser: SearchFormDataSecondGenerationResponseBody.Data.ModifyUser?

        public var originator: SearchFormDataSecondGenerationResponseBody.Data.Originator?

        public var sequence: String?

        public var serialNumber: String?

        public var title: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.modifyUser?.validate()
            try self.originator?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTimeGMT != nil {
                map["CreateTimeGMT"] = self.createTimeGMT!
            }
            if self.creatorUserId != nil {
                map["CreatorUserId"] = self.creatorUserId!
            }
            if self.formData != nil {
                map["FormData"] = self.formData!
            }
            if self.formInstanceId != nil {
                map["FormInstanceId"] = self.formInstanceId!
            }
            if self.formUuid != nil {
                map["FormUuid"] = self.formUuid!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.instanceValue != nil {
                map["InstanceValue"] = self.instanceValue!
            }
            if self.modifiedTimeGMT != nil {
                map["ModifiedTimeGMT"] = self.modifiedTimeGMT!
            }
            if self.modifier != nil {
                map["Modifier"] = self.modifier!
            }
            if self.modifyUser != nil {
                map["ModifyUser"] = self.modifyUser?.toMap()
            }
            if self.originator != nil {
                map["Originator"] = self.originator?.toMap()
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTimeGMT"] as? String {
                self.createTimeGMT = value
            }
            if let value = dict["CreatorUserId"] as? String {
                self.creatorUserId = value
            }
            if let value = dict["FormData"] as? [String: Any] {
                self.formData = value
            }
            if let value = dict["FormInstanceId"] as? String {
                self.formInstanceId = value
            }
            if let value = dict["FormUuid"] as? String {
                self.formUuid = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["InstanceValue"] as? String {
                self.instanceValue = value
            }
            if let value = dict["ModifiedTimeGMT"] as? String {
                self.modifiedTimeGMT = value
            }
            if let value = dict["Modifier"] as? String {
                self.modifier = value
            }
            if let value = dict["ModifyUser"] as? [String: Any?] {
                var model = SearchFormDataSecondGenerationResponseBody.Data.ModifyUser()
                model.fromMap(value)
                self.modifyUser = model
            }
            if let value = dict["Originator"] as? [String: Any?] {
                var model = SearchFormDataSecondGenerationResponseBody.Data.Originator()
                model.fromMap(value)
                self.originator = model
            }
            if let value = dict["Sequence"] as? String {
                self.sequence = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var data: [SearchFormDataSecondGenerationResponseBody.Data]?

    public var pageNumber: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["data"] = tmp
        }
        if self.pageNumber != nil {
            map["pageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? [Any?] {
            var tmp : [SearchFormDataSecondGenerationResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = SearchFormDataSecondGenerationResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["pageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SearchFormDataSecondGenerationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchFormDataSecondGenerationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchFormDataSecondGenerationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchFormDataSecondGenerationNoTableFieldHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SearchFormDataSecondGenerationNoTableFieldHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SearchFormDataSecondGenerationNoTableFieldHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SearchFormDataSecondGenerationNoTableFieldShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SearchFormDataSecondGenerationNoTableFieldRequest : Tea.TeaModel {
    public var appType: String?

    public var createFromTimeGMT: String?

    public var createToTimeGMT: String?

    public var formUuid: String?

    public var modifiedFromTimeGMT: String?

    public var modifiedToTimeGMT: String?

    public var orderConfigJson: String?

    public var originatorId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchCondition: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.createFromTimeGMT != nil {
            map["CreateFromTimeGMT"] = self.createFromTimeGMT!
        }
        if self.createToTimeGMT != nil {
            map["CreateToTimeGMT"] = self.createToTimeGMT!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.modifiedFromTimeGMT != nil {
            map["ModifiedFromTimeGMT"] = self.modifiedFromTimeGMT!
        }
        if self.modifiedToTimeGMT != nil {
            map["ModifiedToTimeGMT"] = self.modifiedToTimeGMT!
        }
        if self.orderConfigJson != nil {
            map["OrderConfigJson"] = self.orderConfigJson!
        }
        if self.originatorId != nil {
            map["OriginatorId"] = self.originatorId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchCondition != nil {
            map["SearchCondition"] = self.searchCondition!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["CreateFromTimeGMT"] as? String {
            self.createFromTimeGMT = value
        }
        if let value = dict["CreateToTimeGMT"] as? String {
            self.createToTimeGMT = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["ModifiedFromTimeGMT"] as? String {
            self.modifiedFromTimeGMT = value
        }
        if let value = dict["ModifiedToTimeGMT"] as? String {
            self.modifiedToTimeGMT = value
        }
        if let value = dict["OrderConfigJson"] as? String {
            self.orderConfigJson = value
        }
        if let value = dict["OriginatorId"] as? String {
            self.originatorId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchCondition"] as? String {
            self.searchCondition = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class SearchFormDataSecondGenerationNoTableFieldResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ModifyUser : Tea.TeaModel {
            public class Name : Tea.TeaModel {
                public var nameInChinese: String?

                public var nameInEnglish: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.nameInChinese != nil {
                        map["NameInChinese"] = self.nameInChinese!
                    }
                    if self.nameInEnglish != nil {
                        map["NameInEnglish"] = self.nameInEnglish!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NameInChinese"] as? String {
                        self.nameInChinese = value
                    }
                    if let value = dict["NameInEnglish"] as? String {
                        self.nameInEnglish = value
                    }
                }
            }
            public var name: SearchFormDataSecondGenerationNoTableFieldResponseBody.Data.ModifyUser.Name?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.name?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name?.toMap()
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? [String: Any?] {
                    var model = SearchFormDataSecondGenerationNoTableFieldResponseBody.Data.ModifyUser.Name()
                    model.fromMap(value)
                    self.name = model
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class Originator : Tea.TeaModel {
            public class Name : Tea.TeaModel {
                public var nameInChinese: String?

                public var nameInEnglish: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.nameInChinese != nil {
                        map["NameInChinese"] = self.nameInChinese!
                    }
                    if self.nameInEnglish != nil {
                        map["NameInEnglish"] = self.nameInEnglish!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NameInChinese"] as? String {
                        self.nameInChinese = value
                    }
                    if let value = dict["NameInEnglish"] as? String {
                        self.nameInEnglish = value
                    }
                }
            }
            public var name: SearchFormDataSecondGenerationNoTableFieldResponseBody.Data.Originator.Name?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.name?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name?.toMap()
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? [String: Any?] {
                    var model = SearchFormDataSecondGenerationNoTableFieldResponseBody.Data.Originator.Name()
                    model.fromMap(value)
                    self.name = model
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var createTimeGMT: String?

        public var creatorUserId: String?

        public var formData: [String: Any]?

        public var formInstanceId: String?

        public var formUuid: String?

        public var id: Int64?

        public var instanceValue: String?

        public var modifiedTimeGMT: String?

        public var modifier: String?

        public var modifyUser: SearchFormDataSecondGenerationNoTableFieldResponseBody.Data.ModifyUser?

        public var originator: SearchFormDataSecondGenerationNoTableFieldResponseBody.Data.Originator?

        public var sequence: String?

        public var serialNumber: String?

        public var title: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.modifyUser?.validate()
            try self.originator?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTimeGMT != nil {
                map["CreateTimeGMT"] = self.createTimeGMT!
            }
            if self.creatorUserId != nil {
                map["CreatorUserId"] = self.creatorUserId!
            }
            if self.formData != nil {
                map["FormData"] = self.formData!
            }
            if self.formInstanceId != nil {
                map["FormInstanceId"] = self.formInstanceId!
            }
            if self.formUuid != nil {
                map["FormUuid"] = self.formUuid!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.instanceValue != nil {
                map["InstanceValue"] = self.instanceValue!
            }
            if self.modifiedTimeGMT != nil {
                map["ModifiedTimeGMT"] = self.modifiedTimeGMT!
            }
            if self.modifier != nil {
                map["Modifier"] = self.modifier!
            }
            if self.modifyUser != nil {
                map["ModifyUser"] = self.modifyUser?.toMap()
            }
            if self.originator != nil {
                map["Originator"] = self.originator?.toMap()
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTimeGMT"] as? String {
                self.createTimeGMT = value
            }
            if let value = dict["CreatorUserId"] as? String {
                self.creatorUserId = value
            }
            if let value = dict["FormData"] as? [String: Any] {
                self.formData = value
            }
            if let value = dict["FormInstanceId"] as? String {
                self.formInstanceId = value
            }
            if let value = dict["FormUuid"] as? String {
                self.formUuid = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["InstanceValue"] as? String {
                self.instanceValue = value
            }
            if let value = dict["ModifiedTimeGMT"] as? String {
                self.modifiedTimeGMT = value
            }
            if let value = dict["Modifier"] as? String {
                self.modifier = value
            }
            if let value = dict["ModifyUser"] as? [String: Any?] {
                var model = SearchFormDataSecondGenerationNoTableFieldResponseBody.Data.ModifyUser()
                model.fromMap(value)
                self.modifyUser = model
            }
            if let value = dict["Originator"] as? [String: Any?] {
                var model = SearchFormDataSecondGenerationNoTableFieldResponseBody.Data.Originator()
                model.fromMap(value)
                self.originator = model
            }
            if let value = dict["Sequence"] as? String {
                self.sequence = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var data: [SearchFormDataSecondGenerationNoTableFieldResponseBody.Data]?

    public var pageNumber: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["data"] = tmp
        }
        if self.pageNumber != nil {
            map["pageNumber"] = self.pageNumber!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["data"] as? [Any?] {
            var tmp : [SearchFormDataSecondGenerationNoTableFieldResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = SearchFormDataSecondGenerationNoTableFieldResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["pageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SearchFormDataSecondGenerationNoTableFieldResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchFormDataSecondGenerationNoTableFieldResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchFormDataSecondGenerationNoTableFieldResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchFormDatasHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SearchFormDatasHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SearchFormDatasHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SearchFormDatasShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SearchFormDatasRequest : Tea.TeaModel {
    public var appType: String?

    public var createFromTimeGMT: String?

    public var createToTimeGMT: String?

    public var currentPage: Int32?

    public var dynamicOrder: String?

    public var formUuid: String?

    public var language: String?

    public var modifiedFromTimeGMT: String?

    public var modifiedToTimeGMT: String?

    public var originatorId: String?

    public var pageSize: Int32?

    public var searchFieldJson: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.createFromTimeGMT != nil {
            map["CreateFromTimeGMT"] = self.createFromTimeGMT!
        }
        if self.createToTimeGMT != nil {
            map["CreateToTimeGMT"] = self.createToTimeGMT!
        }
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.dynamicOrder != nil {
            map["DynamicOrder"] = self.dynamicOrder!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.modifiedFromTimeGMT != nil {
            map["ModifiedFromTimeGMT"] = self.modifiedFromTimeGMT!
        }
        if self.modifiedToTimeGMT != nil {
            map["ModifiedToTimeGMT"] = self.modifiedToTimeGMT!
        }
        if self.originatorId != nil {
            map["OriginatorId"] = self.originatorId!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchFieldJson != nil {
            map["SearchFieldJson"] = self.searchFieldJson!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["CreateFromTimeGMT"] as? String {
            self.createFromTimeGMT = value
        }
        if let value = dict["CreateToTimeGMT"] as? String {
            self.createToTimeGMT = value
        }
        if let value = dict["CurrentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["DynamicOrder"] as? String {
            self.dynamicOrder = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ModifiedFromTimeGMT"] as? String {
            self.modifiedFromTimeGMT = value
        }
        if let value = dict["ModifiedToTimeGMT"] as? String {
            self.modifiedToTimeGMT = value
        }
        if let value = dict["OriginatorId"] as? String {
            self.originatorId = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchFieldJson"] as? String {
            self.searchFieldJson = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class SearchFormDatasResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ModifyUser : Tea.TeaModel {
            public class UserName : Tea.TeaModel {
                public var nameInChinese: String?

                public var nameInEnglish: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.nameInChinese != nil {
                        map["NameInChinese"] = self.nameInChinese!
                    }
                    if self.nameInEnglish != nil {
                        map["NameInEnglish"] = self.nameInEnglish!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NameInChinese"] as? String {
                        self.nameInChinese = value
                    }
                    if let value = dict["NameInEnglish"] as? String {
                        self.nameInEnglish = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var userId: String?

            public var userName: SearchFormDatasResponseBody.Data.ModifyUser.UserName?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.userName?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userName != nil {
                    map["UserName"] = self.userName?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserName"] as? [String: Any?] {
                    var model = SearchFormDatasResponseBody.Data.ModifyUser.UserName()
                    model.fromMap(value)
                    self.userName = model
                }
            }
        }
        public class Originator : Tea.TeaModel {
            public class UserName : Tea.TeaModel {
                public var nameInChinese: String?

                public var nameInEnglish: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.nameInChinese != nil {
                        map["NameInChinese"] = self.nameInChinese!
                    }
                    if self.nameInEnglish != nil {
                        map["NameInEnglish"] = self.nameInEnglish!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NameInChinese"] as? String {
                        self.nameInChinese = value
                    }
                    if let value = dict["NameInEnglish"] as? String {
                        self.nameInEnglish = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var userId: String?

            public var userName: SearchFormDatasResponseBody.Data.Originator.UserName?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.userName?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userName != nil {
                    map["UserName"] = self.userName?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserName"] as? [String: Any?] {
                    var model = SearchFormDatasResponseBody.Data.Originator.UserName()
                    model.fromMap(value)
                    self.userName = model
                }
            }
        }
        public var createdTimeGMT: String?

        public var creatorUserId: String?

        public var dataId: Int64?

        public var formData: [String: Any]?

        public var formInstanceId: String?

        public var formUuid: String?

        public var instanceValue: String?

        public var modelUuid: String?

        public var modifiedTimeGMT: String?

        public var modifierUserId: String?

        public var modifyUser: SearchFormDatasResponseBody.Data.ModifyUser?

        public var originator: SearchFormDatasResponseBody.Data.Originator?

        public var sequence: String?

        public var serialNo: String?

        public var title: String?

        public var version: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.modifyUser?.validate()
            try self.originator?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createdTimeGMT != nil {
                map["CreatedTimeGMT"] = self.createdTimeGMT!
            }
            if self.creatorUserId != nil {
                map["CreatorUserId"] = self.creatorUserId!
            }
            if self.dataId != nil {
                map["DataId"] = self.dataId!
            }
            if self.formData != nil {
                map["FormData"] = self.formData!
            }
            if self.formInstanceId != nil {
                map["FormInstanceId"] = self.formInstanceId!
            }
            if self.formUuid != nil {
                map["FormUuid"] = self.formUuid!
            }
            if self.instanceValue != nil {
                map["InstanceValue"] = self.instanceValue!
            }
            if self.modelUuid != nil {
                map["ModelUuid"] = self.modelUuid!
            }
            if self.modifiedTimeGMT != nil {
                map["ModifiedTimeGMT"] = self.modifiedTimeGMT!
            }
            if self.modifierUserId != nil {
                map["ModifierUserId"] = self.modifierUserId!
            }
            if self.modifyUser != nil {
                map["ModifyUser"] = self.modifyUser?.toMap()
            }
            if self.originator != nil {
                map["Originator"] = self.originator?.toMap()
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.serialNo != nil {
                map["SerialNo"] = self.serialNo!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreatedTimeGMT"] as? String {
                self.createdTimeGMT = value
            }
            if let value = dict["CreatorUserId"] as? String {
                self.creatorUserId = value
            }
            if let value = dict["DataId"] as? Int64 {
                self.dataId = value
            }
            if let value = dict["FormData"] as? [String: Any] {
                self.formData = value
            }
            if let value = dict["FormInstanceId"] as? String {
                self.formInstanceId = value
            }
            if let value = dict["FormUuid"] as? String {
                self.formUuid = value
            }
            if let value = dict["InstanceValue"] as? String {
                self.instanceValue = value
            }
            if let value = dict["ModelUuid"] as? String {
                self.modelUuid = value
            }
            if let value = dict["ModifiedTimeGMT"] as? String {
                self.modifiedTimeGMT = value
            }
            if let value = dict["ModifierUserId"] as? String {
                self.modifierUserId = value
            }
            if let value = dict["ModifyUser"] as? [String: Any?] {
                var model = SearchFormDatasResponseBody.Data.ModifyUser()
                model.fromMap(value)
                self.modifyUser = model
            }
            if let value = dict["Originator"] as? [String: Any?] {
                var model = SearchFormDatasResponseBody.Data.Originator()
                model.fromMap(value)
                self.originator = model
            }
            if let value = dict["Sequence"] as? String {
                self.sequence = value
            }
            if let value = dict["SerialNo"] as? String {
                self.serialNo = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Version"] as? Int64 {
                self.version = value
            }
        }
    }
    public var currentPage: Int32?

    public var data: [SearchFormDatasResponseBody.Data]?

    public var requestId: String?

    public var totalCount: Int32?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["currentPage"] = self.currentPage!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["data"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["totalCount"] = self.totalCount!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["currentPage"] as? Int32 {
            self.currentPage = value
        }
        if let value = dict["data"] as? [Any?] {
            var tmp : [SearchFormDatasResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = SearchFormDatasResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["totalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SearchFormDatasResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchFormDatasResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchFormDatasResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchInnerGroupsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SearchInnerGroupsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SearchInnerGroupsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SearchInnerGroupsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SearchInnerGroupsRequest : Tea.TeaModel {
    public var maxResults: Int32?

    public var searchKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.searchKey != nil {
            map["SearchKey"] = self.searchKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["SearchKey"] as? String {
            self.searchKey = value
        }
    }
}

public class SearchInnerGroupsResponseBody : Tea.TeaModel {
    public class GroupInfos : Tea.TeaModel {
        public var icon: String?

        public var memberAmount: String?

        public var openConversationId: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.icon != nil {
                map["Icon"] = self.icon!
            }
            if self.memberAmount != nil {
                map["MemberAmount"] = self.memberAmount!
            }
            if self.openConversationId != nil {
                map["OpenConversationId"] = self.openConversationId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Icon"] as? String {
                self.icon = value
            }
            if let value = dict["MemberAmount"] as? String {
                self.memberAmount = value
            }
            if let value = dict["OpenConversationId"] as? String {
                self.openConversationId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var groupInfos: [SearchInnerGroupsResponseBody.GroupInfos]?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupInfos != nil {
            var tmp : [Any] = []
            for k in self.groupInfos! {
                tmp.append(k.toMap())
            }
            map["groupInfos"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["groupInfos"] as? [Any?] {
            var tmp : [SearchInnerGroupsResponseBody.GroupInfos] = []
            for v in value {
                if v != nil {
                    var model = SearchInnerGroupsResponseBody.GroupInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.groupInfos = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SearchInnerGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchInnerGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchInnerGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SendBannerHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SendBannerHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SendBannerHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SendBannerShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SendBannerRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var content: [String: Any]?

    public var endTime: Int64?

    public var startTime: Int64?

    public var tenantContext: SendBannerRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? [String: Any] {
            self.content = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = SendBannerRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class SendBannerShrinkRequest : Tea.TeaModel {
    public var contentShrink: String?

    public var endTime: Int64?

    public var startTime: Int64?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contentShrink != nil {
            map["Content"] = self.contentShrink!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.contentShrink = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class SendBannerResponseBody : Tea.TeaModel {
    public var arguments: [Any]?

    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arguments != nil {
            map["arguments"] = self.arguments!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["arguments"] as? [Any] {
            self.arguments = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SendBannerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SendBannerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SendBannerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SendPopupHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SendPopupHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SendPopupHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SendPopupShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SendPopupRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var content: [String: Any]?

    public var endTime: Int64?

    public var startTime: Int64?

    public var tenantContext: SendPopupRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? [String: Any] {
            self.content = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = SendPopupRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class SendPopupShrinkRequest : Tea.TeaModel {
    public var contentShrink: String?

    public var endTime: Int64?

    public var startTime: Int64?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contentShrink != nil {
            map["Content"] = self.contentShrink!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.contentShrink = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class SendPopupResponseBody : Tea.TeaModel {
    public var arguments: [Any]?

    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arguments != nil {
            map["arguments"] = self.arguments!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["arguments"] as? [Any] {
            self.arguments = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SendPopupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SendPopupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SendPopupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SendSearchShadeHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SendSearchShadeHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SendSearchShadeHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SendSearchShadeShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SendSearchShadeRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var content: [String: Any]?

    public var endTime: Int64?

    public var startTime: Int64?

    public var tenantContext: SendSearchShadeRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? [String: Any] {
            self.content = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = SendSearchShadeRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class SendSearchShadeShrinkRequest : Tea.TeaModel {
    public var contentShrink: String?

    public var endTime: Int64?

    public var startTime: Int64?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contentShrink != nil {
            map["Content"] = self.contentShrink!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.contentShrink = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class SendSearchShadeResponseBody : Tea.TeaModel {
    public var arguments: [Any]?

    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arguments != nil {
            map["arguments"] = self.arguments!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["arguments"] as? [Any] {
            self.arguments = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SendSearchShadeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SendSearchShadeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SendSearchShadeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetColumnsVisibilityHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SetColumnsVisibilityHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SetColumnsVisibilityHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SetColumnsVisibilityShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SetColumnsVisibilityRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var column: Int64?

    public var columnCount: Int64?

    public var sheetId: String?

    public var tenantContext: SetColumnsVisibilityRequest.TenantContext?

    public var visibility: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.column != nil {
            map["Column"] = self.column!
        }
        if self.columnCount != nil {
            map["ColumnCount"] = self.columnCount!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Column"] as? Int64 {
            self.column = value
        }
        if let value = dict["ColumnCount"] as? Int64 {
            self.columnCount = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = SetColumnsVisibilityRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class SetColumnsVisibilityShrinkRequest : Tea.TeaModel {
    public var column: Int64?

    public var columnCount: Int64?

    public var sheetId: String?

    public var tenantContextShrink: String?

    public var visibility: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.column != nil {
            map["Column"] = self.column!
        }
        if self.columnCount != nil {
            map["ColumnCount"] = self.columnCount!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Column"] as? Int64 {
            self.column = value
        }
        if let value = dict["ColumnCount"] as? Int64 {
            self.columnCount = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class SetColumnsVisibilityResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetColumnsVisibilityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetColumnsVisibilityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetColumnsVisibilityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetConferenceHostsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SetConferenceHostsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SetConferenceHostsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SetConferenceHostsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SetConferenceHostsRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var operationType: String?

    public var tenantContext: SetConferenceHostsRequest.TenantContext?

    public var userIds: [String]?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operationType != nil {
            map["OperationType"] = self.operationType!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.userIds != nil {
            map["UserIds"] = self.userIds!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OperationType"] as? String {
            self.operationType = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = SetConferenceHostsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["UserIds"] as? [String] {
            self.userIds = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class SetConferenceHostsShrinkRequest : Tea.TeaModel {
    public var operationType: String?

    public var tenantContextShrink: String?

    public var userIdsShrink: String?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operationType != nil {
            map["OperationType"] = self.operationType!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.userIdsShrink != nil {
            map["UserIds"] = self.userIdsShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OperationType"] as? String {
            self.operationType = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["UserIds"] as? String {
            self.userIdsShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class SetConferenceHostsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SetConferenceHostsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetConferenceHostsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetConferenceHostsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetRowsVisibilityHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SetRowsVisibilityHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SetRowsVisibilityHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SetRowsVisibilityShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SetRowsVisibilityRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var row: Int64?

    public var rowCount: Int64?

    public var sheetId: String?

    public var tenantContext: SetRowsVisibilityRequest.TenantContext?

    public var visibility: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.row != nil {
            map["Row"] = self.row!
        }
        if self.rowCount != nil {
            map["RowCount"] = self.rowCount!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Row"] as? Int64 {
            self.row = value
        }
        if let value = dict["RowCount"] as? Int64 {
            self.rowCount = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = SetRowsVisibilityRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class SetRowsVisibilityShrinkRequest : Tea.TeaModel {
    public var row: Int64?

    public var rowCount: Int64?

    public var sheetId: String?

    public var tenantContextShrink: String?

    public var visibility: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.row != nil {
            map["Row"] = self.row!
        }
        if self.rowCount != nil {
            map["RowCount"] = self.rowCount!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Row"] as? Int64 {
            self.row = value
        }
        if let value = dict["RowCount"] as? Int64 {
            self.rowCount = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class SetRowsVisibilityResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetRowsVisibilityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetRowsVisibilityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetRowsVisibilityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SimpleListReportHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SimpleListReportHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SimpleListReportHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SimpleListReportShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SimpleListReportRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var cursor: Int64?

    public var endTime: Int64?

    public var size: Int64?

    public var startTime: Int64?

    public var templateName: String?

    public var tenantContext: SimpleListReportRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cursor != nil {
            map["Cursor"] = self.cursor!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Cursor"] as? Int64 {
            self.cursor = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = SimpleListReportRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class SimpleListReportShrinkRequest : Tea.TeaModel {
    public var cursor: Int64?

    public var endTime: Int64?

    public var size: Int64?

    public var startTime: Int64?

    public var templateName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cursor != nil {
            map["Cursor"] = self.cursor!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Cursor"] as? Int64 {
            self.cursor = value
        }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class SimpleListReportResponseBody : Tea.TeaModel {
    public class DataList : Tea.TeaModel {
        public var createTime: Int64?

        public var creatorId: String?

        public var creatorName: String?

        public var deptName: String?

        public var remark: String?

        public var reportId: String?

        public var templateName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creatorId != nil {
                map["CreatorId"] = self.creatorId!
            }
            if self.creatorName != nil {
                map["CreatorName"] = self.creatorName!
            }
            if self.deptName != nil {
                map["DeptName"] = self.deptName!
            }
            if self.remark != nil {
                map["Remark"] = self.remark!
            }
            if self.reportId != nil {
                map["ReportId"] = self.reportId!
            }
            if self.templateName != nil {
                map["TemplateName"] = self.templateName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["CreatorId"] as? String {
                self.creatorId = value
            }
            if let value = dict["CreatorName"] as? String {
                self.creatorName = value
            }
            if let value = dict["DeptName"] as? String {
                self.deptName = value
            }
            if let value = dict["Remark"] as? String {
                self.remark = value
            }
            if let value = dict["ReportId"] as? String {
                self.reportId = value
            }
            if let value = dict["TemplateName"] as? String {
                self.templateName = value
            }
        }
    }
    public var dataList: [SimpleListReportResponseBody.DataList]?

    public var hasMore: Bool?

    public var nextCursor: Int64?

    public var requestId: String?

    public var size: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataList != nil {
            var tmp : [Any] = []
            for k in self.dataList! {
                tmp.append(k.toMap())
            }
            map["dataList"] = tmp
        }
        if self.hasMore != nil {
            map["hasMore"] = self.hasMore!
        }
        if self.nextCursor != nil {
            map["nextCursor"] = self.nextCursor!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.size != nil {
            map["size"] = self.size!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["dataList"] as? [Any?] {
            var tmp : [SimpleListReportResponseBody.DataList] = []
            for v in value {
                if v != nil {
                    var model = SimpleListReportResponseBody.DataList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dataList = tmp
        }
        if let value = dict["hasMore"] as? Bool {
            self.hasMore = value
        }
        if let value = dict["nextCursor"] as? Int64 {
            self.nextCursor = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["size"] as? Int64 {
            self.size = value
        }
    }
}

public class SimpleListReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SimpleListReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SimpleListReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartCloudRecordHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: StartCloudRecordHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = StartCloudRecordHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class StartCloudRecordShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class StartCloudRecordRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var mode: String?

    public var smallWindowPosition: String?

    public var tenantContext: StartCloudRecordRequest.TenantContext?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mode != nil {
            map["Mode"] = self.mode!
        }
        if self.smallWindowPosition != nil {
            map["SmallWindowPosition"] = self.smallWindowPosition!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Mode"] as? String {
            self.mode = value
        }
        if let value = dict["SmallWindowPosition"] as? String {
            self.smallWindowPosition = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = StartCloudRecordRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class StartCloudRecordShrinkRequest : Tea.TeaModel {
    public var mode: String?

    public var smallWindowPosition: String?

    public var tenantContextShrink: String?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mode != nil {
            map["Mode"] = self.mode!
        }
        if self.smallWindowPosition != nil {
            map["SmallWindowPosition"] = self.smallWindowPosition!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Mode"] as? String {
            self.mode = value
        }
        if let value = dict["SmallWindowPosition"] as? String {
            self.smallWindowPosition = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class StartCloudRecordResponseBody : Tea.TeaModel {
    public var code: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class StartCloudRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartCloudRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartCloudRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartInstanceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: StartInstanceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = StartInstanceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class StartInstanceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class StartInstanceRequest : Tea.TeaModel {
    public var appType: String?

    public var departmentId: String?

    public var formDataJson: String?

    public var formUuid: String?

    public var language: String?

    public var processCode: String?

    public var processData: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.departmentId != nil {
            map["DepartmentId"] = self.departmentId!
        }
        if self.formDataJson != nil {
            map["FormDataJson"] = self.formDataJson!
        }
        if self.formUuid != nil {
            map["FormUuid"] = self.formUuid!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.processCode != nil {
            map["ProcessCode"] = self.processCode!
        }
        if self.processData != nil {
            map["ProcessData"] = self.processData!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["DepartmentId"] as? String {
            self.departmentId = value
        }
        if let value = dict["FormDataJson"] as? String {
            self.formDataJson = value
        }
        if let value = dict["FormUuid"] as? String {
            self.formUuid = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ProcessCode"] as? String {
            self.processCode = value
        }
        if let value = dict["ProcessData"] as? String {
            self.processData = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class StartInstanceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? String {
            self.result = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class StartInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartMinutesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: StartMinutesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = StartMinutesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class StartMinutesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class StartMinutesRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: StartMinutesRequest.TenantContext?

    public var conferenceId: String?

    public var ownerUserId: String?

    public var recordAudio: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        if self.ownerUserId != nil {
            map["ownerUserId"] = self.ownerUserId!
        }
        if self.recordAudio != nil {
            map["recordAudio"] = self.recordAudio!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = StartMinutesRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["ownerUserId"] as? String {
            self.ownerUserId = value
        }
        if let value = dict["recordAudio"] as? Bool {
            self.recordAudio = value
        }
    }
}

public class StartMinutesShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var conferenceId: String?

    public var ownerUserId: String?

    public var recordAudio: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        if self.ownerUserId != nil {
            map["ownerUserId"] = self.ownerUserId!
        }
        if self.recordAudio != nil {
            map["recordAudio"] = self.recordAudio!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
        if let value = dict["ownerUserId"] as? String {
            self.ownerUserId = value
        }
        if let value = dict["recordAudio"] as? Bool {
            self.recordAudio = value
        }
    }
}

public class StartMinutesResponseBody : Tea.TeaModel {
    public var code: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class StartMinutesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartMinutesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartMinutesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StatisticsListByTypeReportHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: StatisticsListByTypeReportHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = StatisticsListByTypeReportHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class StatisticsListByTypeReportShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class StatisticsListByTypeReportRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var offset: Int64?

    public var reportId: String?

    public var size: Int64?

    public var tenantContext: StatisticsListByTypeReportRequest.TenantContext?

    public var type: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.offset != nil {
            map["Offset"] = self.offset!
        }
        if self.reportId != nil {
            map["ReportId"] = self.reportId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Offset"] as? Int64 {
            self.offset = value
        }
        if let value = dict["ReportId"] as? String {
            self.reportId = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = StatisticsListByTypeReportRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["Type"] as? Int64 {
            self.type = value
        }
    }
}

public class StatisticsListByTypeReportShrinkRequest : Tea.TeaModel {
    public var offset: Int64?

    public var reportId: String?

    public var size: Int64?

    public var tenantContextShrink: String?

    public var type: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.offset != nil {
            map["Offset"] = self.offset!
        }
        if self.reportId != nil {
            map["ReportId"] = self.reportId!
        }
        if self.size != nil {
            map["Size"] = self.size!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Offset"] as? Int64 {
            self.offset = value
        }
        if let value = dict["ReportId"] as? String {
            self.reportId = value
        }
        if let value = dict["Size"] as? Int64 {
            self.size = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["Type"] as? Int64 {
            self.type = value
        }
    }
}

public class StatisticsListByTypeReportResponseBody : Tea.TeaModel {
    public var hasMore: Bool?

    public var nextCursor: Int64?

    public var requestId: String?

    public var useridList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hasMore != nil {
            map["hasMore"] = self.hasMore!
        }
        if self.nextCursor != nil {
            map["nextCursor"] = self.nextCursor!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.useridList != nil {
            map["useridList"] = self.useridList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["hasMore"] as? Bool {
            self.hasMore = value
        }
        if let value = dict["nextCursor"] as? Int64 {
            self.nextCursor = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["useridList"] as? [String] {
            self.useridList = value
        }
    }
}

public class StatisticsListByTypeReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StatisticsListByTypeReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StatisticsListByTypeReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StatisticsReportHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: StatisticsReportHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = StatisticsReportHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class StatisticsReportShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class StatisticsReportRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var reportId: String?

    public var tenantContext: StatisticsReportRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.reportId != nil {
            map["ReportId"] = self.reportId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ReportId"] as? String {
            self.reportId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = StatisticsReportRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class StatisticsReportShrinkRequest : Tea.TeaModel {
    public var reportId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.reportId != nil {
            map["ReportId"] = self.reportId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ReportId"] as? String {
            self.reportId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class StatisticsReportResponseBody : Tea.TeaModel {
    public var commentNum: Int64?

    public var commentUserNum: Int64?

    public var likeNum: Int64?

    public var readNum: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commentNum != nil {
            map["commentNum"] = self.commentNum!
        }
        if self.commentUserNum != nil {
            map["commentUserNum"] = self.commentUserNum!
        }
        if self.likeNum != nil {
            map["likeNum"] = self.likeNum!
        }
        if self.readNum != nil {
            map["readNum"] = self.readNum!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commentNum"] as? Int64 {
            self.commentNum = value
        }
        if let value = dict["commentUserNum"] as? Int64 {
            self.commentUserNum = value
        }
        if let value = dict["likeNum"] as? Int64 {
            self.likeNum = value
        }
        if let value = dict["readNum"] as? Int64 {
            self.readNum = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class StatisticsReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StatisticsReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StatisticsReportResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StopCloudRecordHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: StopCloudRecordHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = StopCloudRecordHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class StopCloudRecordShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class StopCloudRecordRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: StopCloudRecordRequest.TenantContext?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = StopCloudRecordRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class StopCloudRecordShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class StopCloudRecordResponseBody : Tea.TeaModel {
    public var code: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class StopCloudRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StopCloudRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StopCloudRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StopMinutesHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: StopMinutesHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = StopMinutesHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class StopMinutesShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class StopMinutesRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: StopMinutesRequest.TenantContext?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = StopMinutesRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class StopMinutesShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class StopMinutesResponseBody : Tea.TeaModel {
    public var code: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class StopMinutesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StopMinutesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StopMinutesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubscribeCalendarHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SubscribeCalendarHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SubscribeCalendarHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SubscribeCalendarShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SubscribeCalendarRequest : Tea.TeaModel {
    public var calendarId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
    }
}

public class SubscribeCalendarResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class SubscribeCalendarResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubscribeCalendarResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubscribeCalendarResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubscribeEventHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SubscribeEventHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SubscribeEventHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SubscribeEventShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SubscribeEventRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var scope: String?

    public var scopeId: String?

    public var tenantContext: SubscribeEventRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.scopeId != nil {
            map["ScopeId"] = self.scopeId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["ScopeId"] as? String {
            self.scopeId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = SubscribeEventRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class SubscribeEventShrinkRequest : Tea.TeaModel {
    public var scope: String?

    public var scopeId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.scopeId != nil {
            map["ScopeId"] = self.scopeId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["ScopeId"] as? String {
            self.scopeId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class SubscribeEventResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SubscribeEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubscribeEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubscribeEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SwitchMainOrgHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SwitchMainOrgHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SwitchMainOrgHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SwitchMainOrgShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SwitchMainOrgRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var targetOrgId: Int64?

    public var tenantContext: SwitchMainOrgRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.targetOrgId != nil {
            map["TargetOrgId"] = self.targetOrgId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TargetOrgId"] as? Int64 {
            self.targetOrgId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = SwitchMainOrgRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class SwitchMainOrgShrinkRequest : Tea.TeaModel {
    public var targetOrgId: Int64?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.targetOrgId != nil {
            map["TargetOrgId"] = self.targetOrgId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TargetOrgId"] as? Int64 {
            self.targetOrgId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class SwitchMainOrgResponseBody : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public var data: Any?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                map["data"] = self.data!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["data"] as? Any {
                self.data = value
            }
        }
    }
    public var content: SwitchMainOrgResponseBody.Content?

    public var errorCode: String?

    public var errorCtx: [String: Any]?

    public var errorMsg: String?

    public var httpStatusCode: Int32?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.content?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["content"] = self.content?.toMap()
        }
        if self.errorCode != nil {
            map["errorCode"] = self.errorCode!
        }
        if self.errorCtx != nil {
            map["errorCtx"] = self.errorCtx!
        }
        if self.errorMsg != nil {
            map["errorMsg"] = self.errorMsg!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["content"] as? [String: Any?] {
            var model = SwitchMainOrgResponseBody.Content()
            model.fromMap(value)
            self.content = model
        }
        if let value = dict["errorCode"] as? String {
            self.errorCode = value
        }
        if let value = dict["errorCtx"] as? [String: Any] {
            self.errorCtx = value
        }
        if let value = dict["errorMsg"] as? String {
            self.errorMsg = value
        }
        if let value = dict["httpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class SwitchMainOrgResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SwitchMainOrgResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SwitchMainOrgResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SyncDingTypeHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: SyncDingTypeHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = SyncDingTypeHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class SyncDingTypeShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class SyncDingTypeRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dingType: String?

    public var isDimission: String?

    public var source: String?

    public var tenantContext: SyncDingTypeRequest.TenantContext?

    public var workNo: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dingType != nil {
            map["DingType"] = self.dingType!
        }
        if self.isDimission != nil {
            map["IsDimission"] = self.isDimission!
        }
        if self.source != nil {
            map["Source"] = self.source!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workNo != nil {
            map["WorkNo"] = self.workNo!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DingType"] as? String {
            self.dingType = value
        }
        if let value = dict["IsDimission"] as? String {
            self.isDimission = value
        }
        if let value = dict["Source"] as? String {
            self.source = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = SyncDingTypeRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkNo"] as? String {
            self.workNo = value
        }
    }
}

public class SyncDingTypeShrinkRequest : Tea.TeaModel {
    public var dingType: String?

    public var isDimission: String?

    public var source: String?

    public var tenantContextShrink: String?

    public var workNo: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dingType != nil {
            map["DingType"] = self.dingType!
        }
        if self.isDimission != nil {
            map["IsDimission"] = self.isDimission!
        }
        if self.source != nil {
            map["Source"] = self.source!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workNo != nil {
            map["WorkNo"] = self.workNo!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DingType"] as? String {
            self.dingType = value
        }
        if let value = dict["IsDimission"] as? String {
            self.isDimission = value
        }
        if let value = dict["Source"] as? String {
            self.source = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkNo"] as? String {
            self.workNo = value
        }
    }
}

public class SyncDingTypeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class SyncDingTypeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SyncDingTypeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SyncDingTypeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TerminateInstanceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: TerminateInstanceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = TerminateInstanceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class TerminateInstanceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class TerminateInstanceRequest : Tea.TeaModel {
    public var appType: String?

    public var language: String?

    public var processInstanceId: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.processInstanceId != nil {
            map["ProcessInstanceId"] = self.processInstanceId!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ProcessInstanceId"] as? String {
            self.processInstanceId = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class TerminateInstanceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class TerminateInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TerminateInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TerminateInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TransferTicketHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: TransferTicketHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = TransferTicketHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class TransferTicketShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class TransferTicketRequest : Tea.TeaModel {
    public class Notify : Tea.TeaModel {
        public var groupNoticeReceiverUserIds: [String]?

        public var noticeAllGroupMember: Bool?

        public var workNoticeReceiverUserIds: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.groupNoticeReceiverUserIds != nil {
                map["GroupNoticeReceiverUserIds"] = self.groupNoticeReceiverUserIds!
            }
            if self.noticeAllGroupMember != nil {
                map["NoticeAllGroupMember"] = self.noticeAllGroupMember!
            }
            if self.workNoticeReceiverUserIds != nil {
                map["WorkNoticeReceiverUserIds"] = self.workNoticeReceiverUserIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["GroupNoticeReceiverUserIds"] as? [String] {
                self.groupNoticeReceiverUserIds = value
            }
            if let value = dict["NoticeAllGroupMember"] as? Bool {
                self.noticeAllGroupMember = value
            }
            if let value = dict["WorkNoticeReceiverUserIds"] as? [String] {
                self.workNoticeReceiverUserIds = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public class TicketMemo : Tea.TeaModel {
        public class Attachments : Tea.TeaModel {
            public var fileName: String?

            public var key: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileName != nil {
                    map["FileName"] = self.fileName!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FileName"] as? String {
                    self.fileName = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
            }
        }
        public var attachments: [TransferTicketRequest.TicketMemo.Attachments]?

        public var memo: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attachments != nil {
                var tmp : [Any] = []
                for k in self.attachments! {
                    tmp.append(k.toMap())
                }
                map["Attachments"] = tmp
            }
            if self.memo != nil {
                map["Memo"] = self.memo!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attachments"] as? [Any?] {
                var tmp : [TransferTicketRequest.TicketMemo.Attachments] = []
                for v in value {
                    if v != nil {
                        var model = TransferTicketRequest.TicketMemo.Attachments()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.attachments = tmp
            }
            if let value = dict["Memo"] as? String {
                self.memo = value
            }
        }
    }
    public var notify: TransferTicketRequest.Notify?

    public var openTeamId: String?

    public var openTicketId: String?

    public var processorUserIds: [String]?

    public var tenantContext: TransferTicketRequest.TenantContext?

    public var ticketMemo: TransferTicketRequest.TicketMemo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.notify?.validate()
        try self.tenantContext?.validate()
        try self.ticketMemo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.notify != nil {
            map["Notify"] = self.notify?.toMap()
        }
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTicketId != nil {
            map["OpenTicketId"] = self.openTicketId!
        }
        if self.processorUserIds != nil {
            map["ProcessorUserIds"] = self.processorUserIds!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.ticketMemo != nil {
            map["TicketMemo"] = self.ticketMemo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Notify"] as? [String: Any?] {
            var model = TransferTicketRequest.Notify()
            model.fromMap(value)
            self.notify = model
        }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["ProcessorUserIds"] as? [String] {
            self.processorUserIds = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = TransferTicketRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["TicketMemo"] as? [String: Any?] {
            var model = TransferTicketRequest.TicketMemo()
            model.fromMap(value)
            self.ticketMemo = model
        }
    }
}

public class TransferTicketShrinkRequest : Tea.TeaModel {
    public var notifyShrink: String?

    public var openTeamId: String?

    public var openTicketId: String?

    public var processorUserIdsShrink: String?

    public var tenantContextShrink: String?

    public var ticketMemoShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.notifyShrink != nil {
            map["Notify"] = self.notifyShrink!
        }
        if self.openTeamId != nil {
            map["OpenTeamId"] = self.openTeamId!
        }
        if self.openTicketId != nil {
            map["OpenTicketId"] = self.openTicketId!
        }
        if self.processorUserIdsShrink != nil {
            map["ProcessorUserIds"] = self.processorUserIdsShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.ticketMemoShrink != nil {
            map["TicketMemo"] = self.ticketMemoShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Notify"] as? String {
            self.notifyShrink = value
        }
        if let value = dict["OpenTeamId"] as? String {
            self.openTeamId = value
        }
        if let value = dict["OpenTicketId"] as? String {
            self.openTicketId = value
        }
        if let value = dict["ProcessorUserIds"] as? String {
            self.processorUserIdsShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["TicketMemo"] as? String {
            self.ticketMemoShrink = value
        }
    }
}

public class TransferTicketResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class TransferTicketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TransferTicketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TransferTicketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UnsubscribeCalendarHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UnsubscribeCalendarHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UnsubscribeCalendarHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UnsubscribeCalendarShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UnsubscribeCalendarRequest : Tea.TeaModel {
    public var calendarId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
    }
}

public class UnsubscribeCalendarResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? Bool {
            self.result = value
        }
    }
}

public class UnsubscribeCalendarResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UnsubscribeCalendarResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UnsubscribeCalendarResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UnsubscribeEventHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UnsubscribeEventHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UnsubscribeEventHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UnsubscribeEventShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UnsubscribeEventRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var scope: String?

    public var scopeId: String?

    public var tenantContext: UnsubscribeEventRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.scopeId != nil {
            map["ScopeId"] = self.scopeId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["ScopeId"] as? String {
            self.scopeId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UnsubscribeEventRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class UnsubscribeEventShrinkRequest : Tea.TeaModel {
    public var scope: String?

    public var scopeId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.scopeId != nil {
            map["ScopeId"] = self.scopeId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["ScopeId"] as? String {
            self.scopeId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class UnsubscribeEventResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class UnsubscribeEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UnsubscribeEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UnsubscribeEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateFormDataHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateFormDataHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateFormDataHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateFormDataShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateFormDataRequest : Tea.TeaModel {
    public var appType: String?

    public var formInstanceId: String?

    public var language: String?

    public var systemToken: String?

    public var updateFormDataJson: String?

    public var useLatestVersion: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.formInstanceId != nil {
            map["FormInstanceId"] = self.formInstanceId!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.updateFormDataJson != nil {
            map["UpdateFormDataJson"] = self.updateFormDataJson!
        }
        if self.useLatestVersion != nil {
            map["UseLatestVersion"] = self.useLatestVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["FormInstanceId"] as? String {
            self.formInstanceId = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["UpdateFormDataJson"] as? String {
            self.updateFormDataJson = value
        }
        if let value = dict["UseLatestVersion"] as? Bool {
            self.useLatestVersion = value
        }
    }
}

public class UpdateFormDataResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class UpdateFormDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateFormDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateFormDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateInstanceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateInstanceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateInstanceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateInstanceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateInstanceRequest : Tea.TeaModel {
    public var appType: String?

    public var language: String?

    public var processInstanceId: String?

    public var systemToken: String?

    public var updateFormDataJson: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.processInstanceId != nil {
            map["ProcessInstanceId"] = self.processInstanceId!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        if self.updateFormDataJson != nil {
            map["UpdateFormDataJson"] = self.updateFormDataJson!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["ProcessInstanceId"] as? String {
            self.processInstanceId = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
        if let value = dict["UpdateFormDataJson"] as? String {
            self.updateFormDataJson = value
        }
    }
}

public class UpdateInstanceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class UpdateInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateLiveHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateLiveHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateLiveHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateLiveShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateLiveRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var coverUrl: String?

    public var introduction: String?

    public var liveId: String?

    public var preEndTime: Int64?

    public var preStartTime: Int64?

    public var tenantContext: UpdateLiveRequest.TenantContext?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coverUrl != nil {
            map["CoverUrl"] = self.coverUrl!
        }
        if self.introduction != nil {
            map["Introduction"] = self.introduction!
        }
        if self.liveId != nil {
            map["LiveId"] = self.liveId!
        }
        if self.preEndTime != nil {
            map["PreEndTime"] = self.preEndTime!
        }
        if self.preStartTime != nil {
            map["PreStartTime"] = self.preStartTime!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoverUrl"] as? String {
            self.coverUrl = value
        }
        if let value = dict["Introduction"] as? String {
            self.introduction = value
        }
        if let value = dict["LiveId"] as? String {
            self.liveId = value
        }
        if let value = dict["PreEndTime"] as? Int64 {
            self.preEndTime = value
        }
        if let value = dict["PreStartTime"] as? Int64 {
            self.preStartTime = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateLiveRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class UpdateLiveShrinkRequest : Tea.TeaModel {
    public var coverUrl: String?

    public var introduction: String?

    public var liveId: String?

    public var preEndTime: Int64?

    public var preStartTime: Int64?

    public var tenantContextShrink: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coverUrl != nil {
            map["CoverUrl"] = self.coverUrl!
        }
        if self.introduction != nil {
            map["Introduction"] = self.introduction!
        }
        if self.liveId != nil {
            map["LiveId"] = self.liveId!
        }
        if self.preEndTime != nil {
            map["PreEndTime"] = self.preEndTime!
        }
        if self.preStartTime != nil {
            map["PreStartTime"] = self.preStartTime!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoverUrl"] as? String {
            self.coverUrl = value
        }
        if let value = dict["Introduction"] as? String {
            self.introduction = value
        }
        if let value = dict["LiveId"] as? String {
            self.liveId = value
        }
        if let value = dict["PreEndTime"] as? Int64 {
            self.preEndTime = value
        }
        if let value = dict["PreStartTime"] as? Int64 {
            self.preStartTime = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class UpdateLiveResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateLiveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateLiveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateLiveResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateMeetingRoomHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateMeetingRoomHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateMeetingRoomHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateMeetingRoomShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateMeetingRoomRequest : Tea.TeaModel {
    public class ReservationAuthority : Tea.TeaModel {
        public class AuthorizedMembers : Tea.TeaModel {
            public var memberId: String?

            public var memberName: String?

            public var memberType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.memberId != nil {
                    map["MemberId"] = self.memberId!
                }
                if self.memberName != nil {
                    map["MemberName"] = self.memberName!
                }
                if self.memberType != nil {
                    map["MemberType"] = self.memberType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MemberId"] as? String {
                    self.memberId = value
                }
                if let value = dict["MemberName"] as? String {
                    self.memberName = value
                }
                if let value = dict["MemberType"] as? String {
                    self.memberType = value
                }
            }
        }
        public var authorizedMembers: [UpdateMeetingRoomRequest.ReservationAuthority.AuthorizedMembers]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authorizedMembers != nil {
                var tmp : [Any] = []
                for k in self.authorizedMembers! {
                    tmp.append(k.toMap())
                }
                map["AuthorizedMembers"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuthorizedMembers"] as? [Any?] {
                var tmp : [UpdateMeetingRoomRequest.ReservationAuthority.AuthorizedMembers] = []
                for v in value {
                    if v != nil {
                        var model = UpdateMeetingRoomRequest.ReservationAuthority.AuthorizedMembers()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.authorizedMembers = tmp
            }
        }
    }
    public class RoomLocation : Tea.TeaModel {
        public var desc: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.desc != nil {
                map["Desc"] = self.desc!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Desc"] as? String {
                self.desc = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var enableCycleReservation: Bool?

    public var groupId: Int64?

    public var isvRoomId: String?

    public var reservationAuthority: UpdateMeetingRoomRequest.ReservationAuthority?

    public var roomCapacity: Int32?

    public var roomId: String?

    public var roomLabelIds: [Int64]?

    public var roomLocation: UpdateMeetingRoomRequest.RoomLocation?

    public var roomName: String?

    public var roomPicture: String?

    public var roomStatus: Int32?

    public var tenantContext: UpdateMeetingRoomRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.reservationAuthority?.validate()
        try self.roomLocation?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enableCycleReservation != nil {
            map["EnableCycleReservation"] = self.enableCycleReservation!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.isvRoomId != nil {
            map["IsvRoomId"] = self.isvRoomId!
        }
        if self.reservationAuthority != nil {
            map["ReservationAuthority"] = self.reservationAuthority?.toMap()
        }
        if self.roomCapacity != nil {
            map["RoomCapacity"] = self.roomCapacity!
        }
        if self.roomId != nil {
            map["RoomId"] = self.roomId!
        }
        if self.roomLabelIds != nil {
            map["RoomLabelIds"] = self.roomLabelIds!
        }
        if self.roomLocation != nil {
            map["RoomLocation"] = self.roomLocation?.toMap()
        }
        if self.roomName != nil {
            map["RoomName"] = self.roomName!
        }
        if self.roomPicture != nil {
            map["RoomPicture"] = self.roomPicture!
        }
        if self.roomStatus != nil {
            map["RoomStatus"] = self.roomStatus!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnableCycleReservation"] as? Bool {
            self.enableCycleReservation = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["IsvRoomId"] as? String {
            self.isvRoomId = value
        }
        if let value = dict["ReservationAuthority"] as? [String: Any?] {
            var model = UpdateMeetingRoomRequest.ReservationAuthority()
            model.fromMap(value)
            self.reservationAuthority = model
        }
        if let value = dict["RoomCapacity"] as? Int32 {
            self.roomCapacity = value
        }
        if let value = dict["RoomId"] as? String {
            self.roomId = value
        }
        if let value = dict["RoomLabelIds"] as? [Int64] {
            self.roomLabelIds = value
        }
        if let value = dict["RoomLocation"] as? [String: Any?] {
            var model = UpdateMeetingRoomRequest.RoomLocation()
            model.fromMap(value)
            self.roomLocation = model
        }
        if let value = dict["RoomName"] as? String {
            self.roomName = value
        }
        if let value = dict["RoomPicture"] as? String {
            self.roomPicture = value
        }
        if let value = dict["RoomStatus"] as? Int32 {
            self.roomStatus = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateMeetingRoomRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class UpdateMeetingRoomShrinkRequest : Tea.TeaModel {
    public var enableCycleReservation: Bool?

    public var groupId: Int64?

    public var isvRoomId: String?

    public var reservationAuthorityShrink: String?

    public var roomCapacity: Int32?

    public var roomId: String?

    public var roomLabelIdsShrink: String?

    public var roomLocationShrink: String?

    public var roomName: String?

    public var roomPicture: String?

    public var roomStatus: Int32?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enableCycleReservation != nil {
            map["EnableCycleReservation"] = self.enableCycleReservation!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.isvRoomId != nil {
            map["IsvRoomId"] = self.isvRoomId!
        }
        if self.reservationAuthorityShrink != nil {
            map["ReservationAuthority"] = self.reservationAuthorityShrink!
        }
        if self.roomCapacity != nil {
            map["RoomCapacity"] = self.roomCapacity!
        }
        if self.roomId != nil {
            map["RoomId"] = self.roomId!
        }
        if self.roomLabelIdsShrink != nil {
            map["RoomLabelIds"] = self.roomLabelIdsShrink!
        }
        if self.roomLocationShrink != nil {
            map["RoomLocation"] = self.roomLocationShrink!
        }
        if self.roomName != nil {
            map["RoomName"] = self.roomName!
        }
        if self.roomPicture != nil {
            map["RoomPicture"] = self.roomPicture!
        }
        if self.roomStatus != nil {
            map["RoomStatus"] = self.roomStatus!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnableCycleReservation"] as? Bool {
            self.enableCycleReservation = value
        }
        if let value = dict["GroupId"] as? Int64 {
            self.groupId = value
        }
        if let value = dict["IsvRoomId"] as? String {
            self.isvRoomId = value
        }
        if let value = dict["ReservationAuthority"] as? String {
            self.reservationAuthorityShrink = value
        }
        if let value = dict["RoomCapacity"] as? Int32 {
            self.roomCapacity = value
        }
        if let value = dict["RoomId"] as? String {
            self.roomId = value
        }
        if let value = dict["RoomLabelIds"] as? String {
            self.roomLabelIdsShrink = value
        }
        if let value = dict["RoomLocation"] as? String {
            self.roomLocationShrink = value
        }
        if let value = dict["RoomName"] as? String {
            self.roomName = value
        }
        if let value = dict["RoomPicture"] as? String {
            self.roomPicture = value
        }
        if let value = dict["RoomStatus"] as? Int32 {
            self.roomStatus = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class UpdateMeetingRoomResponseBody : Tea.TeaModel {
    public var result: Bool?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.result != nil {
            map["Result"] = self.result!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Result"] as? Bool {
            self.result = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class UpdateMeetingRoomResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateMeetingRoomResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateMeetingRoomResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateMeetingRoomGroupHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateMeetingRoomGroupHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateMeetingRoomGroupHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateMeetingRoomGroupShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateMeetingRoomGroupRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var groupId: String?

    public var groupName: String?

    public var tenantContext: UpdateMeetingRoomGroupRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateMeetingRoomGroupRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class UpdateMeetingRoomGroupShrinkRequest : Tea.TeaModel {
    public var groupId: String?

    public var groupName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class UpdateMeetingRoomGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? Bool {
            self.result = value
        }
    }
}

public class UpdateMeetingRoomGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateMeetingRoomGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateMeetingRoomGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateMultiDimTableHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateMultiDimTableHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateMultiDimTableHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateMultiDimTableShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateMultiDimTableRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var baseId: String?

    public var name: String?

    public var sheetIdOrName: String?

    public var tenantContext: UpdateMultiDimTableRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateMultiDimTableRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class UpdateMultiDimTableShrinkRequest : Tea.TeaModel {
    public var baseId: String?

    public var name: String?

    public var sheetIdOrName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class UpdateMultiDimTableResponseBody : Tea.TeaModel {
    public var id: String?

    public var name: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["id"] = self.id!
        }
        if self.name != nil {
            map["name"] = self.name!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["id"] as? String {
            self.id = value
        }
        if let value = dict["name"] as? String {
            self.name = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class UpdateMultiDimTableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateMultiDimTableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateMultiDimTableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateMultiDimTableFieldHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateMultiDimTableFieldHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateMultiDimTableFieldHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateMultiDimTableFieldShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateMultiDimTableFieldRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var baseId: String?

    public var fieldIdOrName: String?

    public var name: String?

    public var property: [String: Any]?

    public var sheetIdOrName: String?

    public var tenantContext: UpdateMultiDimTableFieldRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.fieldIdOrName != nil {
            map["FieldIdOrName"] = self.fieldIdOrName!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.property != nil {
            map["Property"] = self.property!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["FieldIdOrName"] as? String {
            self.fieldIdOrName = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Property"] as? [String: Any] {
            self.property = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateMultiDimTableFieldRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class UpdateMultiDimTableFieldShrinkRequest : Tea.TeaModel {
    public var baseId: String?

    public var fieldIdOrName: String?

    public var name: String?

    public var propertyShrink: String?

    public var sheetIdOrName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.fieldIdOrName != nil {
            map["FieldIdOrName"] = self.fieldIdOrName!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.propertyShrink != nil {
            map["Property"] = self.propertyShrink!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["FieldIdOrName"] as? String {
            self.fieldIdOrName = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Property"] as? String {
            self.propertyShrink = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class UpdateMultiDimTableFieldResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class UpdateMultiDimTableFieldResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateMultiDimTableFieldResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateMultiDimTableFieldResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateMultiDimTableRecordsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateMultiDimTableRecordsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateMultiDimTableRecordsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateMultiDimTableRecordsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateMultiDimTableRecordsRequest : Tea.TeaModel {
    public class RecordIds : Tea.TeaModel {
        public var fields: [String: Any]?

        public var id: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fields != nil {
                map["Fields"] = self.fields!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Fields"] as? [String: Any] {
                self.fields = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var baseId: String?

    public var recordIds: [UpdateMultiDimTableRecordsRequest.RecordIds]?

    public var sheetIdOrName: String?

    public var tenantContext: UpdateMultiDimTableRecordsRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.recordIds != nil {
            var tmp : [Any] = []
            for k in self.recordIds! {
                tmp.append(k.toMap())
            }
            map["RecordIds"] = tmp
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["RecordIds"] as? [Any?] {
            var tmp : [UpdateMultiDimTableRecordsRequest.RecordIds] = []
            for v in value {
                if v != nil {
                    var model = UpdateMultiDimTableRecordsRequest.RecordIds()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.recordIds = tmp
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateMultiDimTableRecordsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class UpdateMultiDimTableRecordsShrinkRequest : Tea.TeaModel {
    public var baseId: String?

    public var recordIdsShrink: String?

    public var sheetIdOrName: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.baseId != nil {
            map["BaseId"] = self.baseId!
        }
        if self.recordIdsShrink != nil {
            map["RecordIds"] = self.recordIdsShrink!
        }
        if self.sheetIdOrName != nil {
            map["SheetIdOrName"] = self.sheetIdOrName!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BaseId"] as? String {
            self.baseId = value
        }
        if let value = dict["RecordIds"] as? String {
            self.recordIdsShrink = value
        }
        if let value = dict["SheetIdOrName"] as? String {
            self.sheetIdOrName = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class UpdateMultiDimTableRecordsResponseBody : Tea.TeaModel {
    public class Value : Tea.TeaModel {
        public var id: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? String {
                self.id = value
            }
        }
    }
    public var value: [UpdateMultiDimTableRecordsResponseBody.Value]?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.value != nil {
            var tmp : [Any] = []
            for k in self.value! {
                tmp.append(k.toMap())
            }
            map["Value"] = tmp
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Value"] as? [Any?] {
            var tmp : [UpdateMultiDimTableRecordsResponseBody.Value] = []
            for v in value {
                if v != nil {
                    var model = UpdateMultiDimTableRecordsResponseBody.Value()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.value = tmp
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class UpdateMultiDimTableRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateMultiDimTableRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateMultiDimTableRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdatePermissionHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdatePermissionHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdatePermissionHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdatePermissionShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdatePermissionRequest : Tea.TeaModel {
    public class Members : Tea.TeaModel {
        public var corpId: String?

        public var id: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.corpId != nil {
                map["CorpId"] = self.corpId!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CorpId"] as? String {
                self.corpId = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class Option : Tea.TeaModel {
        public var duration: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Duration"] as? Int64 {
                self.duration = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var dentryUuid: String?

    public var members: [UpdatePermissionRequest.Members]?

    public var option: UpdatePermissionRequest.Option?

    public var roleId: String?

    public var tenantContext: UpdatePermissionRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.option?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.members != nil {
            var tmp : [Any] = []
            for k in self.members! {
                tmp.append(k.toMap())
            }
            map["Members"] = tmp
        }
        if self.option != nil {
            map["Option"] = self.option?.toMap()
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["Members"] as? [Any?] {
            var tmp : [UpdatePermissionRequest.Members] = []
            for v in value {
                if v != nil {
                    var model = UpdatePermissionRequest.Members()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.members = tmp
        }
        if let value = dict["Option"] as? [String: Any?] {
            var model = UpdatePermissionRequest.Option()
            model.fromMap(value)
            self.option = model
        }
        if let value = dict["RoleId"] as? String {
            self.roleId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdatePermissionRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class UpdatePermissionShrinkRequest : Tea.TeaModel {
    public var dentryUuid: String?

    public var membersShrink: String?

    public var optionShrink: String?

    public var roleId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dentryUuid != nil {
            map["DentryUuid"] = self.dentryUuid!
        }
        if self.membersShrink != nil {
            map["Members"] = self.membersShrink!
        }
        if self.optionShrink != nil {
            map["Option"] = self.optionShrink!
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DentryUuid"] as? String {
            self.dentryUuid = value
        }
        if let value = dict["Members"] as? String {
            self.membersShrink = value
        }
        if let value = dict["Option"] as? String {
            self.optionShrink = value
        }
        if let value = dict["RoleId"] as? String {
            self.roleId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class UpdatePermissionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class UpdatePermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdatePermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdatePermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRangeHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateRangeHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateRangeHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateRangeShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateRangeRequest : Tea.TeaModel {
    public class Hyperlinks : Tea.TeaModel {
        public var type: String?

        public var link: String?

        public var text: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.link != nil {
                map["Link"] = self.link!
            }
            if self.text != nil {
                map["Text"] = self.text!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Link"] as? String {
                self.link = value
            }
            if let value = dict["Text"] as? String {
                self.text = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var backgroundColors: [[String]]?

    public var hyperlinks: [[UpdateRangeRequest.Hyperlinks]]?

    public var numberFormat: String?

    public var rangeAddress: String?

    public var sheetId: String?

    public var tenantContext: UpdateRangeRequest.TenantContext?

    public var values: [[String]]?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backgroundColors != nil {
            map["BackgroundColors"] = self.backgroundColors!
        }
        if self.hyperlinks != nil {
            var tmp : [Any] = []
            for k in self.hyperlinks! {
                var l1 : [Any] = []
                for k1 in k {
                    l1.append(k1.toMap())
                }
                tmp.append(l1)
            }
            map["Hyperlinks"] = tmp
        }
        if self.numberFormat != nil {
            map["NumberFormat"] = self.numberFormat!
        }
        if self.rangeAddress != nil {
            map["RangeAddress"] = self.rangeAddress!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.values != nil {
            map["Values"] = self.values!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackgroundColors"] as? [[String]] {
            self.backgroundColors = value
        }
        if let value = dict["Hyperlinks"] as? [Any?] {
            var tmp : [[UpdateRangeRequest.Hyperlinks]] = []
            for v in value {
                if v != nil {
                    var l1 : [UpdateRangeRequest.Hyperlinks] = []
                    for v1 in v as! [Any?] {
                        if v1 != nil {
                            var model = UpdateRangeRequest.Hyperlinks()
                            if v1 != nil {
                                model.fromMap(v1 as? [String: Any?])
                            }
                            l1.append(model)
                        }
                    }
                    tmp.append(l1)
                }
            }
            self.hyperlinks = tmp
        }
        if let value = dict["NumberFormat"] as? String {
            self.numberFormat = value
        }
        if let value = dict["RangeAddress"] as? String {
            self.rangeAddress = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateRangeRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["Values"] as? [[String]] {
            self.values = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class UpdateRangeShrinkRequest : Tea.TeaModel {
    public var backgroundColorsShrink: String?

    public var hyperlinksShrink: String?

    public var numberFormat: String?

    public var rangeAddress: String?

    public var sheetId: String?

    public var tenantContextShrink: String?

    public var valuesShrink: String?

    public var workbookId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backgroundColorsShrink != nil {
            map["BackgroundColors"] = self.backgroundColorsShrink!
        }
        if self.hyperlinksShrink != nil {
            map["Hyperlinks"] = self.hyperlinksShrink!
        }
        if self.numberFormat != nil {
            map["NumberFormat"] = self.numberFormat!
        }
        if self.rangeAddress != nil {
            map["RangeAddress"] = self.rangeAddress!
        }
        if self.sheetId != nil {
            map["SheetId"] = self.sheetId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.valuesShrink != nil {
            map["Values"] = self.valuesShrink!
        }
        if self.workbookId != nil {
            map["WorkbookId"] = self.workbookId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackgroundColors"] as? String {
            self.backgroundColorsShrink = value
        }
        if let value = dict["Hyperlinks"] as? String {
            self.hyperlinksShrink = value
        }
        if let value = dict["NumberFormat"] as? String {
            self.numberFormat = value
        }
        if let value = dict["RangeAddress"] as? String {
            self.rangeAddress = value
        }
        if let value = dict["SheetId"] as? String {
            self.sheetId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["Values"] as? String {
            self.valuesShrink = value
        }
        if let value = dict["WorkbookId"] as? String {
            self.workbookId = value
        }
    }
}

public class UpdateRangeResponseBody : Tea.TeaModel {
    public var a1Notation: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.a1Notation != nil {
            map["a1Notation"] = self.a1Notation!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["a1Notation"] as? String {
            self.a1Notation = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateRangeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRangeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRangeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateScheduleConfSettingsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateScheduleConfSettingsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateScheduleConfSettingsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateScheduleConfSettingsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateScheduleConfSettingsRequest : Tea.TeaModel {
    public class ScheduleConfSettingModel : Tea.TeaModel {
        public class MoziConfOpenRecordSetting : Tea.TeaModel {
            public var isFollowHost: Bool?

            public var mode: String?

            public var recordAutoStart: Int32?

            public var recordAutoStartType: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.isFollowHost != nil {
                    map["IsFollowHost"] = self.isFollowHost!
                }
                if self.mode != nil {
                    map["Mode"] = self.mode!
                }
                if self.recordAutoStart != nil {
                    map["RecordAutoStart"] = self.recordAutoStart!
                }
                if self.recordAutoStartType != nil {
                    map["RecordAutoStartType"] = self.recordAutoStartType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IsFollowHost"] as? Bool {
                    self.isFollowHost = value
                }
                if let value = dict["Mode"] as? String {
                    self.mode = value
                }
                if let value = dict["RecordAutoStart"] as? Int32 {
                    self.recordAutoStart = value
                }
                if let value = dict["RecordAutoStartType"] as? Int32 {
                    self.recordAutoStartType = value
                }
            }
        }
        public class MoziConfVirtualExtraSetting : Tea.TeaModel {
            public class MoziConfExtensionAppSettings : Tea.TeaModel {
                public var autoOpenMode: Int32?

                public var coolAppCode: String?

                public var extensionAppBizData: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.autoOpenMode != nil {
                        map["AutoOpenMode"] = self.autoOpenMode!
                    }
                    if self.coolAppCode != nil {
                        map["CoolAppCode"] = self.coolAppCode!
                    }
                    if self.extensionAppBizData != nil {
                        map["ExtensionAppBizData"] = self.extensionAppBizData!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AutoOpenMode"] as? Int32 {
                        self.autoOpenMode = value
                    }
                    if let value = dict["CoolAppCode"] as? String {
                        self.coolAppCode = value
                    }
                    if let value = dict["ExtensionAppBizData"] as? String {
                        self.extensionAppBizData = value
                    }
                }
            }
            public var cloudRecordOwnerUserId: String?

            public var enableChat: Int32?

            public var enableWebAnonymousJoin: Bool?

            public var joinBeforeHost: Int32?

            public var lockMediaStatusMicMute: Int32?

            public var lockNick: Int32?

            public var minutesOwnerUserId: String?

            public var moziConfExtensionAppSettings: [UpdateScheduleConfSettingsRequest.ScheduleConfSettingModel.MoziConfVirtualExtraSetting.MoziConfExtensionAppSettings]?

            public var pushAllMeetingRecords: Bool?

            public var pushCloudRecordCard: Bool?

            public var pushMinutesCard: Bool?

            public var waitingRoom: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cloudRecordOwnerUserId != nil {
                    map["CloudRecordOwnerUserId"] = self.cloudRecordOwnerUserId!
                }
                if self.enableChat != nil {
                    map["EnableChat"] = self.enableChat!
                }
                if self.enableWebAnonymousJoin != nil {
                    map["EnableWebAnonymousJoin"] = self.enableWebAnonymousJoin!
                }
                if self.joinBeforeHost != nil {
                    map["JoinBeforeHost"] = self.joinBeforeHost!
                }
                if self.lockMediaStatusMicMute != nil {
                    map["LockMediaStatusMicMute"] = self.lockMediaStatusMicMute!
                }
                if self.lockNick != nil {
                    map["LockNick"] = self.lockNick!
                }
                if self.minutesOwnerUserId != nil {
                    map["MinutesOwnerUserId"] = self.minutesOwnerUserId!
                }
                if self.moziConfExtensionAppSettings != nil {
                    var tmp : [Any] = []
                    for k in self.moziConfExtensionAppSettings! {
                        tmp.append(k.toMap())
                    }
                    map["MoziConfExtensionAppSettings"] = tmp
                }
                if self.pushAllMeetingRecords != nil {
                    map["PushAllMeetingRecords"] = self.pushAllMeetingRecords!
                }
                if self.pushCloudRecordCard != nil {
                    map["PushCloudRecordCard"] = self.pushCloudRecordCard!
                }
                if self.pushMinutesCard != nil {
                    map["PushMinutesCard"] = self.pushMinutesCard!
                }
                if self.waitingRoom != nil {
                    map["WaitingRoom"] = self.waitingRoom!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CloudRecordOwnerUserId"] as? String {
                    self.cloudRecordOwnerUserId = value
                }
                if let value = dict["EnableChat"] as? Int32 {
                    self.enableChat = value
                }
                if let value = dict["EnableWebAnonymousJoin"] as? Bool {
                    self.enableWebAnonymousJoin = value
                }
                if let value = dict["JoinBeforeHost"] as? Int32 {
                    self.joinBeforeHost = value
                }
                if let value = dict["LockMediaStatusMicMute"] as? Int32 {
                    self.lockMediaStatusMicMute = value
                }
                if let value = dict["LockNick"] as? Int32 {
                    self.lockNick = value
                }
                if let value = dict["MinutesOwnerUserId"] as? String {
                    self.minutesOwnerUserId = value
                }
                if let value = dict["MoziConfExtensionAppSettings"] as? [Any?] {
                    var tmp : [UpdateScheduleConfSettingsRequest.ScheduleConfSettingModel.MoziConfVirtualExtraSetting.MoziConfExtensionAppSettings] = []
                    for v in value {
                        if v != nil {
                            var model = UpdateScheduleConfSettingsRequest.ScheduleConfSettingModel.MoziConfVirtualExtraSetting.MoziConfExtensionAppSettings()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.moziConfExtensionAppSettings = tmp
                }
                if let value = dict["PushAllMeetingRecords"] as? Bool {
                    self.pushAllMeetingRecords = value
                }
                if let value = dict["PushCloudRecordCard"] as? Bool {
                    self.pushCloudRecordCard = value
                }
                if let value = dict["PushMinutesCard"] as? Bool {
                    self.pushMinutesCard = value
                }
                if let value = dict["WaitingRoom"] as? Int32 {
                    self.waitingRoom = value
                }
            }
        }
        public var cohostUserIds: [String]?

        public var confAllowedCorpId: String?

        public var hostUserId: String?

        public var lockRoom: Int32?

        public var moziConfOpenRecordSetting: UpdateScheduleConfSettingsRequest.ScheduleConfSettingModel.MoziConfOpenRecordSetting?

        public var moziConfVirtualExtraSetting: UpdateScheduleConfSettingsRequest.ScheduleConfSettingModel.MoziConfVirtualExtraSetting?

        public var muteOnJoin: Int32?

        public var screenShareForbidden: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.moziConfOpenRecordSetting?.validate()
            try self.moziConfVirtualExtraSetting?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cohostUserIds != nil {
                map["CohostUserIds"] = self.cohostUserIds!
            }
            if self.confAllowedCorpId != nil {
                map["ConfAllowedCorpId"] = self.confAllowedCorpId!
            }
            if self.hostUserId != nil {
                map["HostUserId"] = self.hostUserId!
            }
            if self.lockRoom != nil {
                map["LockRoom"] = self.lockRoom!
            }
            if self.moziConfOpenRecordSetting != nil {
                map["MoziConfOpenRecordSetting"] = self.moziConfOpenRecordSetting?.toMap()
            }
            if self.moziConfVirtualExtraSetting != nil {
                map["MoziConfVirtualExtraSetting"] = self.moziConfVirtualExtraSetting?.toMap()
            }
            if self.muteOnJoin != nil {
                map["MuteOnJoin"] = self.muteOnJoin!
            }
            if self.screenShareForbidden != nil {
                map["ScreenShareForbidden"] = self.screenShareForbidden!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CohostUserIds"] as? [String] {
                self.cohostUserIds = value
            }
            if let value = dict["ConfAllowedCorpId"] as? String {
                self.confAllowedCorpId = value
            }
            if let value = dict["HostUserId"] as? String {
                self.hostUserId = value
            }
            if let value = dict["LockRoom"] as? Int32 {
                self.lockRoom = value
            }
            if let value = dict["MoziConfOpenRecordSetting"] as? [String: Any?] {
                var model = UpdateScheduleConfSettingsRequest.ScheduleConfSettingModel.MoziConfOpenRecordSetting()
                model.fromMap(value)
                self.moziConfOpenRecordSetting = model
            }
            if let value = dict["MoziConfVirtualExtraSetting"] as? [String: Any?] {
                var model = UpdateScheduleConfSettingsRequest.ScheduleConfSettingModel.MoziConfVirtualExtraSetting()
                model.fromMap(value)
                self.moziConfVirtualExtraSetting = model
            }
            if let value = dict["MuteOnJoin"] as? Int32 {
                self.muteOnJoin = value
            }
            if let value = dict["ScreenShareForbidden"] as? Int32 {
                self.screenShareForbidden = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var scheduleConfSettingModel: UpdateScheduleConfSettingsRequest.ScheduleConfSettingModel?

    public var scheduleConferenceId: String?

    public var tenantContext: UpdateScheduleConfSettingsRequest.TenantContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.scheduleConfSettingModel?.validate()
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.scheduleConfSettingModel != nil {
            map["ScheduleConfSettingModel"] = self.scheduleConfSettingModel?.toMap()
        }
        if self.scheduleConferenceId != nil {
            map["ScheduleConferenceId"] = self.scheduleConferenceId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ScheduleConfSettingModel"] as? [String: Any?] {
            var model = UpdateScheduleConfSettingsRequest.ScheduleConfSettingModel()
            model.fromMap(value)
            self.scheduleConfSettingModel = model
        }
        if let value = dict["ScheduleConferenceId"] as? String {
            self.scheduleConferenceId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateScheduleConfSettingsRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
    }
}

public class UpdateScheduleConfSettingsShrinkRequest : Tea.TeaModel {
    public var scheduleConfSettingModelShrink: String?

    public var scheduleConferenceId: String?

    public var tenantContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.scheduleConfSettingModelShrink != nil {
            map["ScheduleConfSettingModel"] = self.scheduleConfSettingModelShrink!
        }
        if self.scheduleConferenceId != nil {
            map["ScheduleConferenceId"] = self.scheduleConferenceId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ScheduleConfSettingModel"] as? String {
            self.scheduleConfSettingModelShrink = value
        }
        if let value = dict["ScheduleConferenceId"] as? String {
            self.scheduleConferenceId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
    }
}

public class UpdateScheduleConfSettingsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class UpdateScheduleConfSettingsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateScheduleConfSettingsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateScheduleConfSettingsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateScheduleConferenceHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateScheduleConferenceHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateScheduleConferenceHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateScheduleConferenceShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateScheduleConferenceRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var endTime: Int64?

    public var scheduleConferenceId: String?

    public var startTime: Int64?

    public var tenantContext: UpdateScheduleConferenceRequest.TenantContext?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.scheduleConferenceId != nil {
            map["ScheduleConferenceId"] = self.scheduleConferenceId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ScheduleConferenceId"] as? String {
            self.scheduleConferenceId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateScheduleConferenceRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class UpdateScheduleConferenceShrinkRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var scheduleConferenceId: String?

    public var startTime: Int64?

    public var tenantContextShrink: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.scheduleConferenceId != nil {
            map["ScheduleConferenceId"] = self.scheduleConferenceId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["ScheduleConferenceId"] as? String {
            self.scheduleConferenceId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class UpdateScheduleConferenceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateScheduleConferenceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateScheduleConferenceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateScheduleConferenceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateStatusHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateStatusHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateStatusHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateStatusShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateStatusRequest : Tea.TeaModel {
    public var appType: String?

    public var errorLines: [Int32]?

    public var importSequence: String?

    public var language: String?

    public var status: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.errorLines != nil {
            map["ErrorLines"] = self.errorLines!
        }
        if self.importSequence != nil {
            map["ImportSequence"] = self.importSequence!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["ErrorLines"] as? [Int32] {
            self.errorLines = value
        }
        if let value = dict["ImportSequence"] as? String {
            self.importSequence = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class UpdateStatusShrinkRequest : Tea.TeaModel {
    public var appType: String?

    public var errorLinesShrink: String?

    public var importSequence: String?

    public var language: String?

    public var status: String?

    public var systemToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.errorLinesShrink != nil {
            map["ErrorLines"] = self.errorLinesShrink!
        }
        if self.importSequence != nil {
            map["ImportSequence"] = self.importSequence!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.systemToken != nil {
            map["SystemToken"] = self.systemToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppType"] as? String {
            self.appType = value
        }
        if let value = dict["ErrorLines"] as? String {
            self.errorLinesShrink = value
        }
        if let value = dict["ImportSequence"] as? String {
            self.importSequence = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["SystemToken"] as? String {
            self.systemToken = value
        }
    }
}

public class UpdateStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class UpdateStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSubscribedCalendarsHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateSubscribedCalendarsHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateSubscribedCalendarsHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateSubscribedCalendarsShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateSubscribedCalendarsRequest : Tea.TeaModel {
    public class SubscribeScope : Tea.TeaModel {
        public var userIds: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userIds != nil {
                map["UserIds"] = self.userIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UserIds"] as? [String] {
                self.userIds = value
            }
        }
    }
    public var calendarId: String?

    public var description_: String?

    public var managers: [String]?

    public var name: String?

    public var subscribeScope: UpdateSubscribedCalendarsRequest.SubscribeScope?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.subscribeScope?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.managers != nil {
            map["Managers"] = self.managers!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.subscribeScope != nil {
            map["SubscribeScope"] = self.subscribeScope?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Managers"] as? [String] {
            self.managers = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["SubscribeScope"] as? [String: Any?] {
            var model = UpdateSubscribedCalendarsRequest.SubscribeScope()
            model.fromMap(value)
            self.subscribeScope = model
        }
    }
}

public class UpdateSubscribedCalendarsShrinkRequest : Tea.TeaModel {
    public var calendarId: String?

    public var description_: String?

    public var managersShrink: String?

    public var name: String?

    public var subscribeScopeShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calendarId != nil {
            map["CalendarId"] = self.calendarId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.managersShrink != nil {
            map["Managers"] = self.managersShrink!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.subscribeScopeShrink != nil {
            map["SubscribeScope"] = self.subscribeScopeShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CalendarId"] as? String {
            self.calendarId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Managers"] as? String {
            self.managersShrink = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["SubscribeScope"] as? String {
            self.subscribeScopeShrink = value
        }
    }
}

public class UpdateSubscribedCalendarsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? Bool {
            self.result = value
        }
    }
}

public class UpdateSubscribedCalendarsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSubscribedCalendarsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSubscribedCalendarsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateTodoTaskHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateTodoTaskHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateTodoTaskHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateTodoTaskShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateTodoTaskRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: UpdateTodoTaskRequest.TenantContext?

    public var description_: String?

    public var done: Bool?

    public var dueTime: Int64?

    public var executorIds: [String]?

    public var participantIds: [String]?

    public var subject: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.done != nil {
            map["done"] = self.done!
        }
        if self.dueTime != nil {
            map["dueTime"] = self.dueTime!
        }
        if self.executorIds != nil {
            map["executorIds"] = self.executorIds!
        }
        if self.participantIds != nil {
            map["participantIds"] = self.participantIds!
        }
        if self.subject != nil {
            map["subject"] = self.subject!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateTodoTaskRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["done"] as? Bool {
            self.done = value
        }
        if let value = dict["dueTime"] as? Int64 {
            self.dueTime = value
        }
        if let value = dict["executorIds"] as? [String] {
            self.executorIds = value
        }
        if let value = dict["participantIds"] as? [String] {
            self.participantIds = value
        }
        if let value = dict["subject"] as? String {
            self.subject = value
        }
        if let value = dict["taskId"] as? String {
            self.taskId = value
        }
    }
}

public class UpdateTodoTaskShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var description_: String?

    public var done: Bool?

    public var dueTime: Int64?

    public var executorIdsShrink: String?

    public var participantIdsShrink: String?

    public var subject: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.description_ != nil {
            map["description"] = self.description_!
        }
        if self.done != nil {
            map["done"] = self.done!
        }
        if self.dueTime != nil {
            map["dueTime"] = self.dueTime!
        }
        if self.executorIdsShrink != nil {
            map["executorIds"] = self.executorIdsShrink!
        }
        if self.participantIdsShrink != nil {
            map["participantIds"] = self.participantIdsShrink!
        }
        if self.subject != nil {
            map["subject"] = self.subject!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["description"] as? String {
            self.description_ = value
        }
        if let value = dict["done"] as? Bool {
            self.done = value
        }
        if let value = dict["dueTime"] as? Int64 {
            self.dueTime = value
        }
        if let value = dict["executorIds"] as? String {
            self.executorIdsShrink = value
        }
        if let value = dict["participantIds"] as? String {
            self.participantIdsShrink = value
        }
        if let value = dict["subject"] as? String {
            self.subject = value
        }
        if let value = dict["taskId"] as? String {
            self.taskId = value
        }
    }
}

public class UpdateTodoTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? Bool {
            self.result = value
        }
    }
}

public class UpdateTodoTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateTodoTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateTodoTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateTodoTaskExecutorStatusHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateTodoTaskExecutorStatusHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateTodoTaskExecutorStatusHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateTodoTaskExecutorStatusShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateTodoTaskExecutorStatusRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public class ExecutorStatusList : Tea.TeaModel {
        public var id: String?

        public var isDone: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["id"] = self.id!
            }
            if self.isDone != nil {
                map["isDone"] = self.isDone!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["id"] as? String {
                self.id = value
            }
            if let value = dict["isDone"] as? Bool {
                self.isDone = value
            }
        }
    }
    public var tenantContext: UpdateTodoTaskExecutorStatusRequest.TenantContext?

    public var executorStatusList: [UpdateTodoTaskExecutorStatusRequest.ExecutorStatusList]?

    public var operatorId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.executorStatusList != nil {
            var tmp : [Any] = []
            for k in self.executorStatusList! {
                tmp.append(k.toMap())
            }
            map["executorStatusList"] = tmp
        }
        if self.operatorId != nil {
            map["operatorId"] = self.operatorId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateTodoTaskExecutorStatusRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["executorStatusList"] as? [Any?] {
            var tmp : [UpdateTodoTaskExecutorStatusRequest.ExecutorStatusList] = []
            for v in value {
                if v != nil {
                    var model = UpdateTodoTaskExecutorStatusRequest.ExecutorStatusList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.executorStatusList = tmp
        }
        if let value = dict["operatorId"] as? String {
            self.operatorId = value
        }
        if let value = dict["taskId"] as? String {
            self.taskId = value
        }
    }
}

public class UpdateTodoTaskExecutorStatusShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var executorStatusListShrink: String?

    public var operatorId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.executorStatusListShrink != nil {
            map["executorStatusList"] = self.executorStatusListShrink!
        }
        if self.operatorId != nil {
            map["operatorId"] = self.operatorId!
        }
        if self.taskId != nil {
            map["taskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["executorStatusList"] as? String {
            self.executorStatusListShrink = value
        }
        if let value = dict["operatorId"] as? String {
            self.operatorId = value
        }
        if let value = dict["taskId"] as? String {
            self.taskId = value
        }
    }
}

public class UpdateTodoTaskExecutorStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var result: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.result != nil {
            map["result"] = self.result!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["result"] as? Bool {
            self.result = value
        }
    }
}

public class UpdateTodoTaskExecutorStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateTodoTaskExecutorStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateTodoTaskExecutorStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateUserAvatarHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateUserAvatarHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateUserAvatarHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateUserAvatarShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateUserAvatarRequest : Tea.TeaModel {
    public var avatarMediaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.avatarMediaId != nil {
            map["AvatarMediaId"] = self.avatarMediaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AvatarMediaId"] as? String {
            self.avatarMediaId = value
        }
    }
}

public class UpdateUserAvatarResponseBody : Tea.TeaModel {
    public var errcode: String?

    public var errmsg: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.errcode != nil {
            map["errcode"] = self.errcode!
        }
        if self.errmsg != nil {
            map["errmsg"] = self.errmsg!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["errcode"] as? String {
            self.errcode = value
        }
        if let value = dict["errmsg"] as? String {
            self.errmsg = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class UpdateUserAvatarResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateUserAvatarResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateUserAvatarResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateVideoConferenceSettingHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateVideoConferenceSettingHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateVideoConferenceSettingHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateVideoConferenceSettingShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateVideoConferenceSettingRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var allowUnmuteSelf: Bool?

    public var autoTransferHost: Bool?

    public var forbiddenShareScreen: Bool?

    public var lockConference: Bool?

    public var muteAll: Bool?

    public var onlyInternalEmployeesJoin: Bool?

    public var tenantContext: UpdateVideoConferenceSettingRequest.TenantContext?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowUnmuteSelf != nil {
            map["AllowUnmuteSelf"] = self.allowUnmuteSelf!
        }
        if self.autoTransferHost != nil {
            map["AutoTransferHost"] = self.autoTransferHost!
        }
        if self.forbiddenShareScreen != nil {
            map["ForbiddenShareScreen"] = self.forbiddenShareScreen!
        }
        if self.lockConference != nil {
            map["LockConference"] = self.lockConference!
        }
        if self.muteAll != nil {
            map["MuteAll"] = self.muteAll!
        }
        if self.onlyInternalEmployeesJoin != nil {
            map["OnlyInternalEmployeesJoin"] = self.onlyInternalEmployeesJoin!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowUnmuteSelf"] as? Bool {
            self.allowUnmuteSelf = value
        }
        if let value = dict["AutoTransferHost"] as? Bool {
            self.autoTransferHost = value
        }
        if let value = dict["ForbiddenShareScreen"] as? Bool {
            self.forbiddenShareScreen = value
        }
        if let value = dict["LockConference"] as? Bool {
            self.lockConference = value
        }
        if let value = dict["MuteAll"] as? Bool {
            self.muteAll = value
        }
        if let value = dict["OnlyInternalEmployeesJoin"] as? Bool {
            self.onlyInternalEmployeesJoin = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateVideoConferenceSettingRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class UpdateVideoConferenceSettingShrinkRequest : Tea.TeaModel {
    public var allowUnmuteSelf: Bool?

    public var autoTransferHost: Bool?

    public var forbiddenShareScreen: Bool?

    public var lockConference: Bool?

    public var muteAll: Bool?

    public var onlyInternalEmployeesJoin: Bool?

    public var tenantContextShrink: String?

    public var conferenceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowUnmuteSelf != nil {
            map["AllowUnmuteSelf"] = self.allowUnmuteSelf!
        }
        if self.autoTransferHost != nil {
            map["AutoTransferHost"] = self.autoTransferHost!
        }
        if self.forbiddenShareScreen != nil {
            map["ForbiddenShareScreen"] = self.forbiddenShareScreen!
        }
        if self.lockConference != nil {
            map["LockConference"] = self.lockConference!
        }
        if self.muteAll != nil {
            map["MuteAll"] = self.muteAll!
        }
        if self.onlyInternalEmployeesJoin != nil {
            map["OnlyInternalEmployeesJoin"] = self.onlyInternalEmployeesJoin!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.conferenceId != nil {
            map["conferenceId"] = self.conferenceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowUnmuteSelf"] as? Bool {
            self.allowUnmuteSelf = value
        }
        if let value = dict["AutoTransferHost"] as? Bool {
            self.autoTransferHost = value
        }
        if let value = dict["ForbiddenShareScreen"] as? Bool {
            self.forbiddenShareScreen = value
        }
        if let value = dict["LockConference"] as? Bool {
            self.lockConference = value
        }
        if let value = dict["MuteAll"] as? Bool {
            self.muteAll = value
        }
        if let value = dict["OnlyInternalEmployeesJoin"] as? Bool {
            self.onlyInternalEmployeesJoin = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["conferenceId"] as? String {
            self.conferenceId = value
        }
    }
}

public class UpdateVideoConferenceSettingResponseBody : Tea.TeaModel {
    public var caseResult: String?

    public var code: String?

    public var requestId: String?

    public var vendorRequestId: String?

    public var vendorType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.caseResult != nil {
            map["caseResult"] = self.caseResult!
        }
        if self.code != nil {
            map["code"] = self.code!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.vendorRequestId != nil {
            map["vendorRequestId"] = self.vendorRequestId!
        }
        if self.vendorType != nil {
            map["vendorType"] = self.vendorType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["caseResult"] as? String {
            self.caseResult = value
        }
        if let value = dict["code"] as? String {
            self.code = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["vendorRequestId"] as? String {
            self.vendorRequestId = value
        }
        if let value = dict["vendorType"] as? String {
            self.vendorType = value
        }
    }
}

public class UpdateVideoConferenceSettingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateVideoConferenceSettingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateVideoConferenceSettingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateWorkspaceDocMembersHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateWorkspaceDocMembersHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateWorkspaceDocMembersHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateWorkspaceDocMembersShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateWorkspaceDocMembersRequest : Tea.TeaModel {
    public class Members : Tea.TeaModel {
        public var memberId: String?

        public var memberType: String?

        public var roleType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.memberId != nil {
                map["MemberId"] = self.memberId!
            }
            if self.memberType != nil {
                map["MemberType"] = self.memberType!
            }
            if self.roleType != nil {
                map["RoleType"] = self.roleType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MemberId"] as? String {
                self.memberId = value
            }
            if let value = dict["MemberType"] as? String {
                self.memberType = value
            }
            if let value = dict["RoleType"] as? String {
                self.roleType = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var members: [UpdateWorkspaceDocMembersRequest.Members]?

    public var nodeId: String?

    public var tenantContext: UpdateWorkspaceDocMembersRequest.TenantContext?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.members != nil {
            var tmp : [Any] = []
            for k in self.members! {
                tmp.append(k.toMap())
            }
            map["Members"] = tmp
        }
        if self.nodeId != nil {
            map["NodeId"] = self.nodeId!
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Members"] as? [Any?] {
            var tmp : [UpdateWorkspaceDocMembersRequest.Members] = []
            for v in value {
                if v != nil {
                    var model = UpdateWorkspaceDocMembersRequest.Members()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.members = tmp
        }
        if let value = dict["NodeId"] as? String {
            self.nodeId = value
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateWorkspaceDocMembersRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class UpdateWorkspaceDocMembersShrinkRequest : Tea.TeaModel {
    public var membersShrink: String?

    public var nodeId: String?

    public var tenantContextShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.membersShrink != nil {
            map["Members"] = self.membersShrink!
        }
        if self.nodeId != nil {
            map["NodeId"] = self.nodeId!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Members"] as? String {
            self.membersShrink = value
        }
        if let value = dict["NodeId"] as? String {
            self.nodeId = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class UpdateWorkspaceDocMembersResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateWorkspaceDocMembersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateWorkspaceDocMembersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateWorkspaceDocMembersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateWorkspaceMembersHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UpdateWorkspaceMembersHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UpdateWorkspaceMembersHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UpdateWorkspaceMembersShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UpdateWorkspaceMembersRequest : Tea.TeaModel {
    public class Members : Tea.TeaModel {
        public var memberId: String?

        public var memberType: String?

        public var roleType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.memberId != nil {
                map["MemberId"] = self.memberId!
            }
            if self.memberType != nil {
                map["MemberType"] = self.memberType!
            }
            if self.roleType != nil {
                map["RoleType"] = self.roleType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MemberId"] as? String {
                self.memberId = value
            }
            if let value = dict["MemberType"] as? String {
                self.memberType = value
            }
            if let value = dict["RoleType"] as? String {
                self.roleType = value
            }
        }
    }
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var members: [UpdateWorkspaceMembersRequest.Members]?

    public var tenantContext: UpdateWorkspaceMembersRequest.TenantContext?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.members != nil {
            var tmp : [Any] = []
            for k in self.members! {
                tmp.append(k.toMap())
            }
            map["Members"] = tmp
        }
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Members"] as? [Any?] {
            var tmp : [UpdateWorkspaceMembersRequest.Members] = []
            for v in value {
                if v != nil {
                    var model = UpdateWorkspaceMembersRequest.Members()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.members = tmp
        }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UpdateWorkspaceMembersRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class UpdateWorkspaceMembersShrinkRequest : Tea.TeaModel {
    public var membersShrink: String?

    public var tenantContextShrink: String?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.membersShrink != nil {
            map["Members"] = self.membersShrink!
        }
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Members"] as? String {
            self.membersShrink = value
        }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class UpdateWorkspaceMembersResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateWorkspaceMembersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateWorkspaceMembersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateWorkspaceMembersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadMediaHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: UploadMediaHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = UploadMediaHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class UploadMediaShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class UploadMediaRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: UploadMediaRequest.TenantContext?

    public var mediaName: String?

    public var mediaType: String?

    public var orgId: Int64?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.mediaName != nil {
            map["mediaName"] = self.mediaName!
        }
        if self.mediaType != nil {
            map["mediaType"] = self.mediaType!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.url != nil {
            map["url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = UploadMediaRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["mediaName"] as? String {
            self.mediaName = value
        }
        if let value = dict["mediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["url"] as? String {
            self.url = value
        }
    }
}

public class UploadMediaShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var mediaName: String?

    public var mediaType: String?

    public var orgId: Int64?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.mediaName != nil {
            map["mediaName"] = self.mediaName!
        }
        if self.mediaType != nil {
            map["mediaType"] = self.mediaType!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.url != nil {
            map["url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["mediaName"] as? String {
            self.mediaName = value
        }
        if let value = dict["mediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["url"] as? String {
            self.url = value
        }
    }
}

public class UploadMediaResponseBody : Tea.TeaModel {
    public var mediaId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaId != nil {
            map["mediaId"] = self.mediaId!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["mediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
    }
}

public class UploadMediaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadMediaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadMediaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class WearOrgHonorHeaders : Tea.TeaModel {
    public class AccountContext : Tea.TeaModel {
        public var accountId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountId != nil {
                map["accountId"] = self.accountId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["accountId"] as? String {
                self.accountId = value
            }
        }
    }
    public var commonHeaders: [String: String]?

    public var accountContext: WearOrgHonorHeaders.AccountContext?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.accountContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContext != nil {
            map["AccountContext"] = self.accountContext?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? [String: Any?] {
            var model = WearOrgHonorHeaders.AccountContext()
            model.fromMap(value)
            self.accountContext = model
        }
    }
}

public class WearOrgHonorShrinkHeaders : Tea.TeaModel {
    public var commonHeaders: [String: String]?

    public var accountContextShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonHeaders != nil {
            map["commonHeaders"] = self.commonHeaders!
        }
        if self.accountContextShrink != nil {
            map["AccountContext"] = self.accountContextShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["commonHeaders"] as? [String: String] {
            self.commonHeaders = value
        }
        if let value = dict["AccountContext"] as? String {
            self.accountContextShrink = value
        }
    }
}

public class WearOrgHonorRequest : Tea.TeaModel {
    public class TenantContext : Tea.TeaModel {
        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tenantId != nil {
                map["tenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["tenantId"] as? String {
                self.tenantId = value
            }
        }
    }
    public var tenantContext: WearOrgHonorRequest.TenantContext?

    public var honorId: String?

    public var orgId: Int64?

    public var userId: String?

    public var wear: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tenantContext?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContext != nil {
            map["TenantContext"] = self.tenantContext?.toMap()
        }
        if self.honorId != nil {
            map["honorId"] = self.honorId!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        if self.wear != nil {
            map["wear"] = self.wear!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? [String: Any?] {
            var model = WearOrgHonorRequest.TenantContext()
            model.fromMap(value)
            self.tenantContext = model
        }
        if let value = dict["honorId"] as? String {
            self.honorId = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
        if let value = dict["wear"] as? Bool {
            self.wear = value
        }
    }
}

public class WearOrgHonorShrinkRequest : Tea.TeaModel {
    public var tenantContextShrink: String?

    public var honorId: String?

    public var orgId: Int64?

    public var userId: String?

    public var wear: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.tenantContextShrink != nil {
            map["TenantContext"] = self.tenantContextShrink!
        }
        if self.honorId != nil {
            map["honorId"] = self.honorId!
        }
        if self.orgId != nil {
            map["orgId"] = self.orgId!
        }
        if self.userId != nil {
            map["userId"] = self.userId!
        }
        if self.wear != nil {
            map["wear"] = self.wear!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TenantContext"] as? String {
            self.tenantContextShrink = value
        }
        if let value = dict["honorId"] as? String {
            self.honorId = value
        }
        if let value = dict["orgId"] as? Int64 {
            self.orgId = value
        }
        if let value = dict["userId"] as? String {
            self.userId = value
        }
        if let value = dict["wear"] as? Bool {
            self.wear = value
        }
    }
}

public class WearOrgHonorResponseBody : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public var data: Any?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                map["data"] = self.data!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["data"] as? Any {
                self.data = value
            }
        }
    }
    public var content: WearOrgHonorResponseBody.Content?

    public var errorCode: String?

    public var errorCtx: [String: Any]?

    public var errorMsg: String?

    public var httpStatusCode: Int32?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.content?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["content"] = self.content?.toMap()
        }
        if self.errorCode != nil {
            map["errorCode"] = self.errorCode!
        }
        if self.errorCtx != nil {
            map["errorCtx"] = self.errorCtx!
        }
        if self.errorMsg != nil {
            map["errorMsg"] = self.errorMsg!
        }
        if self.httpStatusCode != nil {
            map["httpStatusCode"] = self.httpStatusCode!
        }
        if self.requestId != nil {
            map["requestId"] = self.requestId!
        }
        if self.success != nil {
            map["success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["content"] as? [String: Any?] {
            var model = WearOrgHonorResponseBody.Content()
            model.fromMap(value)
            self.content = model
        }
        if let value = dict["errorCode"] as? String {
            self.errorCode = value
        }
        if let value = dict["errorCtx"] as? [String: Any] {
            self.errorCtx = value
        }
        if let value = dict["errorMsg"] as? String {
            self.errorMsg = value
        }
        if let value = dict["httpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["requestId"] as? String {
            self.requestId = value
        }
        if let value = dict["success"] as? Bool {
            self.success = value
        }
    }
}

public class WearOrgHonorResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: WearOrgHonorResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = WearOrgHonorResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
