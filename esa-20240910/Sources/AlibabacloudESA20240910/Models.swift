import Foundation
import Tea
import TeaUtils
import AlibabaCloudOssSdk
import AlibabacloudOpenPlatform20191219
import AlibabaCloudOSSUtil
import TeaFileForm
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class WafBatchRuleShared : Tea.TeaModel {
    public class Actions : Tea.TeaModel {
        public class Response : Tea.TeaModel {
            public var code: Int32?

            public var id: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Code"] as? Int32 {
                    self.code = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
            }
        }
        public var response: WafBatchRuleShared.Actions.Response?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.response?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.response != nil {
                map["Response"] = self.response?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Response"] as? [String: Any?] {
                var model = WafBatchRuleShared.Actions.Response()
                model.fromMap(value)
                self.response = model
            }
        }
    }
    public var action: String?

    public var actions: WafBatchRuleShared.Actions?

    public var crossSiteId: Int64?

    public var expression: String?

    public var match: WafRuleMatch2?

    public var mode: String?

    public var name: String?

    public var target: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.actions?.validate()
        try self.match?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.action != nil {
            map["Action"] = self.action!
        }
        if self.actions != nil {
            map["Actions"] = self.actions?.toMap()
        }
        if self.crossSiteId != nil {
            map["CrossSiteId"] = self.crossSiteId!
        }
        if self.expression != nil {
            map["Expression"] = self.expression!
        }
        if self.match != nil {
            map["Match"] = self.match?.toMap()
        }
        if self.mode != nil {
            map["Mode"] = self.mode!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.target != nil {
            map["Target"] = self.target!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Action"] as? String {
            self.action = value
        }
        if let value = dict["Actions"] as? [String: Any?] {
            var model = WafBatchRuleShared.Actions()
            model.fromMap(value)
            self.actions = model
        }
        if let value = dict["CrossSiteId"] as? Int64 {
            self.crossSiteId = value
        }
        if let value = dict["Expression"] as? String {
            self.expression = value
        }
        if let value = dict["Match"] as? [String: Any?] {
            var model = WafRuleMatch2()
            model.fromMap(value)
            self.match = model
        }
        if let value = dict["Mode"] as? String {
            self.mode = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Target"] as? String {
            self.target = value
        }
    }
}

public class WafQuotaInteger : Tea.TeaModel {
    public var equal: Int32?

    public var greaterThan: Int32?

    public var greaterThanOrEqual: Int32?

    public var lessThan: Int32?

    public var lessThanOrEqual: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.equal != nil {
            map["Equal"] = self.equal!
        }
        if self.greaterThan != nil {
            map["GreaterThan"] = self.greaterThan!
        }
        if self.greaterThanOrEqual != nil {
            map["GreaterThanOrEqual"] = self.greaterThanOrEqual!
        }
        if self.lessThan != nil {
            map["LessThan"] = self.lessThan!
        }
        if self.lessThanOrEqual != nil {
            map["LessThanOrEqual"] = self.lessThanOrEqual!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Equal"] as? Int32 {
            self.equal = value
        }
        if let value = dict["GreaterThan"] as? Int32 {
            self.greaterThan = value
        }
        if let value = dict["GreaterThanOrEqual"] as? Int32 {
            self.greaterThanOrEqual = value
        }
        if let value = dict["LessThan"] as? Int32 {
            self.lessThan = value
        }
        if let value = dict["LessThanOrEqual"] as? Int32 {
            self.lessThanOrEqual = value
        }
    }
}

public class WafQuotaString : Tea.TeaModel {
    public var regexp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regexp != nil {
            map["Regexp"] = self.regexp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Regexp"] as? String {
            self.regexp = value
        }
    }
}

public class WafRuleConfig : Tea.TeaModel {
    public class Actions : Tea.TeaModel {
        public class Bypass : Tea.TeaModel {
            public var customRules: [Int64]?

            public var regularRules: [Int64]?

            public var regularTypes: [String]?

            public var skip: String?

            public var tags: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.customRules != nil {
                    map["CustomRules"] = self.customRules!
                }
                if self.regularRules != nil {
                    map["RegularRules"] = self.regularRules!
                }
                if self.regularTypes != nil {
                    map["RegularTypes"] = self.regularTypes!
                }
                if self.skip != nil {
                    map["Skip"] = self.skip!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CustomRules"] as? [Int64] {
                    self.customRules = value
                }
                if let value = dict["RegularRules"] as? [Int64] {
                    self.regularRules = value
                }
                if let value = dict["RegularTypes"] as? [String] {
                    self.regularTypes = value
                }
                if let value = dict["Skip"] as? String {
                    self.skip = value
                }
                if let value = dict["Tags"] as? [String] {
                    self.tags = value
                }
            }
        }
        public class Response : Tea.TeaModel {
            public var code: Int32?

            public var id: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Code"] as? Int32 {
                    self.code = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
            }
        }
        public var bypass: WafRuleConfig.Actions.Bypass?

        public var response: WafRuleConfig.Actions.Response?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.bypass?.validate()
            try self.response?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bypass != nil {
                map["Bypass"] = self.bypass?.toMap()
            }
            if self.response != nil {
                map["Response"] = self.response?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Bypass"] as? [String: Any?] {
                var model = WafRuleConfig.Actions.Bypass()
                model.fromMap(value)
                self.bypass = model
            }
            if let value = dict["Response"] as? [String: Any?] {
                var model = WafRuleConfig.Actions.Response()
                model.fromMap(value)
                self.response = model
            }
        }
    }
    public class AppPackage : Tea.TeaModel {
        public class PackageSigns : Tea.TeaModel {
            public var name: String?

            public var sign: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.sign != nil {
                    map["Sign"] = self.sign!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Sign"] as? String {
                    self.sign = value
                }
            }
        }
        public var packageSigns: [WafRuleConfig.AppPackage.PackageSigns]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.packageSigns != nil {
                var tmp : [Any] = []
                for k in self.packageSigns! {
                    tmp.append(k.toMap())
                }
                map["PackageSigns"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PackageSigns"] as? [Any?] {
                var tmp : [WafRuleConfig.AppPackage.PackageSigns] = []
                for v in value {
                    if v != nil {
                        var model = WafRuleConfig.AppPackage.PackageSigns()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.packageSigns = tmp
            }
        }
    }
    public class AppSdk : Tea.TeaModel {
        public class CustomSign : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var customSign: WafRuleConfig.AppSdk.CustomSign?

        public var customSignStatus: String?

        public var featureAbnormal: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.customSign?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customSign != nil {
                map["CustomSign"] = self.customSign?.toMap()
            }
            if self.customSignStatus != nil {
                map["CustomSignStatus"] = self.customSignStatus!
            }
            if self.featureAbnormal != nil {
                map["FeatureAbnormal"] = self.featureAbnormal!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomSign"] as? [String: Any?] {
                var model = WafRuleConfig.AppSdk.CustomSign()
                model.fromMap(value)
                self.customSign = model
            }
            if let value = dict["CustomSignStatus"] as? String {
                self.customSignStatus = value
            }
            if let value = dict["FeatureAbnormal"] as? [String] {
                self.featureAbnormal = value
            }
        }
    }
    public class ManagedRulesets : Tea.TeaModel {
        public class ManagedRules : Tea.TeaModel {
            public var action: String?

            public var id: Int64?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.action != nil {
                    map["Action"] = self.action!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Action"] as? String {
                    self.action = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var action: String?

        public var attackType: Int32?

        public var managedRules: [WafRuleConfig.ManagedRulesets.ManagedRules]?

        public var numberEnabled: Int32?

        public var numberTotal: Int32?

        public var protectionLevel: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.action != nil {
                map["Action"] = self.action!
            }
            if self.attackType != nil {
                map["AttackType"] = self.attackType!
            }
            if self.managedRules != nil {
                var tmp : [Any] = []
                for k in self.managedRules! {
                    tmp.append(k.toMap())
                }
                map["ManagedRules"] = tmp
            }
            if self.numberEnabled != nil {
                map["NumberEnabled"] = self.numberEnabled!
            }
            if self.numberTotal != nil {
                map["NumberTotal"] = self.numberTotal!
            }
            if self.protectionLevel != nil {
                map["ProtectionLevel"] = self.protectionLevel!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Action"] as? String {
                self.action = value
            }
            if let value = dict["AttackType"] as? Int32 {
                self.attackType = value
            }
            if let value = dict["ManagedRules"] as? [Any?] {
                var tmp : [WafRuleConfig.ManagedRulesets.ManagedRules] = []
                for v in value {
                    if v != nil {
                        var model = WafRuleConfig.ManagedRulesets.ManagedRules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.managedRules = tmp
            }
            if let value = dict["NumberEnabled"] as? Int32 {
                self.numberEnabled = value
            }
            if let value = dict["NumberTotal"] as? Int32 {
                self.numberTotal = value
            }
            if let value = dict["ProtectionLevel"] as? Int32 {
                self.protectionLevel = value
            }
        }
    }
    public class RateLimit : Tea.TeaModel {
        public class Threshold : Tea.TeaModel {
            public class ResponseStatus : Tea.TeaModel {
                public var code: Int32?

                public var count: Int32?

                public var ratio: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.code != nil {
                        map["Code"] = self.code!
                    }
                    if self.count != nil {
                        map["Count"] = self.count!
                    }
                    if self.ratio != nil {
                        map["Ratio"] = self.ratio!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Code"] as? Int32 {
                        self.code = value
                    }
                    if let value = dict["Count"] as? Int32 {
                        self.count = value
                    }
                    if let value = dict["Ratio"] as? Int32 {
                        self.ratio = value
                    }
                }
            }
            public var distinctManagedRules: Int32?

            public var managedRulesBlocked: Int32?

            public var request: Int32?

            public var responseStatus: WafRuleConfig.RateLimit.Threshold.ResponseStatus?

            public var traffic: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.responseStatus?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.distinctManagedRules != nil {
                    map["DistinctManagedRules"] = self.distinctManagedRules!
                }
                if self.managedRulesBlocked != nil {
                    map["ManagedRulesBlocked"] = self.managedRulesBlocked!
                }
                if self.request != nil {
                    map["Request"] = self.request!
                }
                if self.responseStatus != nil {
                    map["ResponseStatus"] = self.responseStatus?.toMap()
                }
                if self.traffic != nil {
                    map["Traffic"] = self.traffic!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DistinctManagedRules"] as? Int32 {
                    self.distinctManagedRules = value
                }
                if let value = dict["ManagedRulesBlocked"] as? Int32 {
                    self.managedRulesBlocked = value
                }
                if let value = dict["Request"] as? Int32 {
                    self.request = value
                }
                if let value = dict["ResponseStatus"] as? [String: Any?] {
                    var model = WafRuleConfig.RateLimit.Threshold.ResponseStatus()
                    model.fromMap(value)
                    self.responseStatus = model
                }
                if let value = dict["Traffic"] as? String {
                    self.traffic = value
                }
            }
        }
        public var characteristics: WafRuleMatch2?

        public var interval: Int32?

        public var onHit: Bool?

        public var TTL: Int32?

        public var threshold: WafRuleConfig.RateLimit.Threshold?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.characteristics?.validate()
            try self.threshold?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.characteristics != nil {
                map["Characteristics"] = self.characteristics?.toMap()
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.onHit != nil {
                map["OnHit"] = self.onHit!
            }
            if self.TTL != nil {
                map["TTL"] = self.TTL!
            }
            if self.threshold != nil {
                map["Threshold"] = self.threshold?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Characteristics"] as? [String: Any?] {
                var model = WafRuleMatch2()
                model.fromMap(value)
                self.characteristics = model
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["OnHit"] as? Bool {
                self.onHit = value
            }
            if let value = dict["TTL"] as? Int32 {
                self.TTL = value
            }
            if let value = dict["Threshold"] as? [String: Any?] {
                var model = WafRuleConfig.RateLimit.Threshold()
                model.fromMap(value)
                self.threshold = model
            }
        }
    }
    public class SecurityLevel : Tea.TeaModel {
        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var action: String?

    public var actions: WafRuleConfig.Actions?

    public var appPackage: WafRuleConfig.AppPackage?

    public var appSdk: WafRuleConfig.AppSdk?

    public var expression: String?

    public var id: Int64?

    public var managedGroupId: Int64?

    public var managedList: String?

    public var managedRulesets: [WafRuleConfig.ManagedRulesets]?

    public var name: String?

    public var notes: String?

    public var rateLimit: WafRuleConfig.RateLimit?

    public var securityLevel: WafRuleConfig.SecurityLevel?

    public var sigchl: [String]?

    public var status: String?

    public var timer: WafTimer?

    public var type: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.actions?.validate()
        try self.appPackage?.validate()
        try self.appSdk?.validate()
        try self.rateLimit?.validate()
        try self.securityLevel?.validate()
        try self.timer?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.action != nil {
            map["Action"] = self.action!
        }
        if self.actions != nil {
            map["Actions"] = self.actions?.toMap()
        }
        if self.appPackage != nil {
            map["AppPackage"] = self.appPackage?.toMap()
        }
        if self.appSdk != nil {
            map["AppSdk"] = self.appSdk?.toMap()
        }
        if self.expression != nil {
            map["Expression"] = self.expression!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.managedGroupId != nil {
            map["ManagedGroupId"] = self.managedGroupId!
        }
        if self.managedList != nil {
            map["ManagedList"] = self.managedList!
        }
        if self.managedRulesets != nil {
            var tmp : [Any] = []
            for k in self.managedRulesets! {
                tmp.append(k.toMap())
            }
            map["ManagedRulesets"] = tmp
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.notes != nil {
            map["Notes"] = self.notes!
        }
        if self.rateLimit != nil {
            map["RateLimit"] = self.rateLimit?.toMap()
        }
        if self.securityLevel != nil {
            map["SecurityLevel"] = self.securityLevel?.toMap()
        }
        if self.sigchl != nil {
            map["Sigchl"] = self.sigchl!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.timer != nil {
            map["Timer"] = self.timer?.toMap()
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Action"] as? String {
            self.action = value
        }
        if let value = dict["Actions"] as? [String: Any?] {
            var model = WafRuleConfig.Actions()
            model.fromMap(value)
            self.actions = model
        }
        if let value = dict["AppPackage"] as? [String: Any?] {
            var model = WafRuleConfig.AppPackage()
            model.fromMap(value)
            self.appPackage = model
        }
        if let value = dict["AppSdk"] as? [String: Any?] {
            var model = WafRuleConfig.AppSdk()
            model.fromMap(value)
            self.appSdk = model
        }
        if let value = dict["Expression"] as? String {
            self.expression = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["ManagedGroupId"] as? Int64 {
            self.managedGroupId = value
        }
        if let value = dict["ManagedList"] as? String {
            self.managedList = value
        }
        if let value = dict["ManagedRulesets"] as? [Any?] {
            var tmp : [WafRuleConfig.ManagedRulesets] = []
            for v in value {
                if v != nil {
                    var model = WafRuleConfig.ManagedRulesets()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.managedRulesets = tmp
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Notes"] as? String {
            self.notes = value
        }
        if let value = dict["RateLimit"] as? [String: Any?] {
            var model = WafRuleConfig.RateLimit()
            model.fromMap(value)
            self.rateLimit = model
        }
        if let value = dict["SecurityLevel"] as? [String: Any?] {
            var model = WafRuleConfig.SecurityLevel()
            model.fromMap(value)
            self.securityLevel = model
        }
        if let value = dict["Sigchl"] as? [String] {
            self.sigchl = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["Timer"] as? [String: Any?] {
            var model = WafTimer()
            model.fromMap(value)
            self.timer = model
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
    }
}

public class WafRuleMatch : Tea.TeaModel {
    public var convertToLower: Bool?

    public var criteria: [WafRuleMatch]?

    public var logic: String?

    public var matchOperator: String?

    public var matchType: String?

    public var matchValue: Any?

    public var negate: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.convertToLower != nil {
            map["ConvertToLower"] = self.convertToLower!
        }
        if self.criteria != nil {
            var tmp : [Any] = []
            for k in self.criteria! {
                tmp.append(k.toMap())
            }
            map["Criteria"] = tmp
        }
        if self.logic != nil {
            map["Logic"] = self.logic!
        }
        if self.matchOperator != nil {
            map["MatchOperator"] = self.matchOperator!
        }
        if self.matchType != nil {
            map["MatchType"] = self.matchType!
        }
        if self.matchValue != nil {
            map["MatchValue"] = self.matchValue!
        }
        if self.negate != nil {
            map["Negate"] = self.negate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConvertToLower"] as? Bool {
            self.convertToLower = value
        }
        if let value = dict["Criteria"] as? [Any?] {
            var tmp : [WafRuleMatch] = []
            for v in value {
                if v != nil {
                    var model = WafRuleMatch()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.criteria = tmp
        }
        if let value = dict["Logic"] as? String {
            self.logic = value
        }
        if let value = dict["MatchOperator"] as? String {
            self.matchOperator = value
        }
        if let value = dict["MatchType"] as? String {
            self.matchType = value
        }
        if let value = dict["MatchValue"] as? Any {
            self.matchValue = value
        }
        if let value = dict["Negate"] as? Bool {
            self.negate = value
        }
    }
}

public class WafRuleMatch2 : Tea.TeaModel {
    public class Criteria : Tea.TeaModel {
        public class Criteria : Tea.TeaModel {
            public class Criteria : Tea.TeaModel {
                public var convertToLower: Bool?

                public var matchOperator: String?

                public var matchType: String?

                public var matchValue: Any?

                public var negate: Bool?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.convertToLower != nil {
                        map["ConvertToLower"] = self.convertToLower!
                    }
                    if self.matchOperator != nil {
                        map["MatchOperator"] = self.matchOperator!
                    }
                    if self.matchType != nil {
                        map["MatchType"] = self.matchType!
                    }
                    if self.matchValue != nil {
                        map["MatchValue"] = self.matchValue!
                    }
                    if self.negate != nil {
                        map["Negate"] = self.negate!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConvertToLower"] as? Bool {
                        self.convertToLower = value
                    }
                    if let value = dict["MatchOperator"] as? String {
                        self.matchOperator = value
                    }
                    if let value = dict["MatchType"] as? String {
                        self.matchType = value
                    }
                    if let value = dict["MatchValue"] as? Any {
                        self.matchValue = value
                    }
                    if let value = dict["Negate"] as? Bool {
                        self.negate = value
                    }
                }
            }
            public var convertToLower: Bool?

            public var criteria: [WafRuleMatch2.Criteria.Criteria.Criteria]?

            public var logic: String?

            public var matchOperator: String?

            public var matchType: String?

            public var matchValue: Any?

            public var negate: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.convertToLower != nil {
                    map["ConvertToLower"] = self.convertToLower!
                }
                if self.criteria != nil {
                    var tmp : [Any] = []
                    for k in self.criteria! {
                        tmp.append(k.toMap())
                    }
                    map["Criteria"] = tmp
                }
                if self.logic != nil {
                    map["Logic"] = self.logic!
                }
                if self.matchOperator != nil {
                    map["MatchOperator"] = self.matchOperator!
                }
                if self.matchType != nil {
                    map["MatchType"] = self.matchType!
                }
                if self.matchValue != nil {
                    map["MatchValue"] = self.matchValue!
                }
                if self.negate != nil {
                    map["Negate"] = self.negate!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConvertToLower"] as? Bool {
                    self.convertToLower = value
                }
                if let value = dict["Criteria"] as? [Any?] {
                    var tmp : [WafRuleMatch2.Criteria.Criteria.Criteria] = []
                    for v in value {
                        if v != nil {
                            var model = WafRuleMatch2.Criteria.Criteria.Criteria()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.criteria = tmp
                }
                if let value = dict["Logic"] as? String {
                    self.logic = value
                }
                if let value = dict["MatchOperator"] as? String {
                    self.matchOperator = value
                }
                if let value = dict["MatchType"] as? String {
                    self.matchType = value
                }
                if let value = dict["MatchValue"] as? Any {
                    self.matchValue = value
                }
                if let value = dict["Negate"] as? Bool {
                    self.negate = value
                }
            }
        }
        public var convertToLower: Bool?

        public var criteria: [WafRuleMatch2.Criteria.Criteria]?

        public var logic: String?

        public var matchOperator: String?

        public var matchType: String?

        public var matchValue: Any?

        public var negate: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.convertToLower != nil {
                map["ConvertToLower"] = self.convertToLower!
            }
            if self.criteria != nil {
                var tmp : [Any] = []
                for k in self.criteria! {
                    tmp.append(k.toMap())
                }
                map["Criteria"] = tmp
            }
            if self.logic != nil {
                map["Logic"] = self.logic!
            }
            if self.matchOperator != nil {
                map["MatchOperator"] = self.matchOperator!
            }
            if self.matchType != nil {
                map["MatchType"] = self.matchType!
            }
            if self.matchValue != nil {
                map["MatchValue"] = self.matchValue!
            }
            if self.negate != nil {
                map["Negate"] = self.negate!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConvertToLower"] as? Bool {
                self.convertToLower = value
            }
            if let value = dict["Criteria"] as? [Any?] {
                var tmp : [WafRuleMatch2.Criteria.Criteria] = []
                for v in value {
                    if v != nil {
                        var model = WafRuleMatch2.Criteria.Criteria()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.criteria = tmp
            }
            if let value = dict["Logic"] as? String {
                self.logic = value
            }
            if let value = dict["MatchOperator"] as? String {
                self.matchOperator = value
            }
            if let value = dict["MatchType"] as? String {
                self.matchType = value
            }
            if let value = dict["MatchValue"] as? Any {
                self.matchValue = value
            }
            if let value = dict["Negate"] as? Bool {
                self.negate = value
            }
        }
    }
    public var convertToLower: Bool?

    public var criteria: [WafRuleMatch2.Criteria]?

    public var logic: String?

    public var matchOperator: String?

    public var matchType: String?

    public var matchValue: Any?

    public var negate: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.convertToLower != nil {
            map["ConvertToLower"] = self.convertToLower!
        }
        if self.criteria != nil {
            var tmp : [Any] = []
            for k in self.criteria! {
                tmp.append(k.toMap())
            }
            map["Criteria"] = tmp
        }
        if self.logic != nil {
            map["Logic"] = self.logic!
        }
        if self.matchOperator != nil {
            map["MatchOperator"] = self.matchOperator!
        }
        if self.matchType != nil {
            map["MatchType"] = self.matchType!
        }
        if self.matchValue != nil {
            map["MatchValue"] = self.matchValue!
        }
        if self.negate != nil {
            map["Negate"] = self.negate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConvertToLower"] as? Bool {
            self.convertToLower = value
        }
        if let value = dict["Criteria"] as? [Any?] {
            var tmp : [WafRuleMatch2.Criteria] = []
            for v in value {
                if v != nil {
                    var model = WafRuleMatch2.Criteria()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.criteria = tmp
        }
        if let value = dict["Logic"] as? String {
            self.logic = value
        }
        if let value = dict["MatchOperator"] as? String {
            self.matchOperator = value
        }
        if let value = dict["MatchType"] as? String {
            self.matchType = value
        }
        if let value = dict["MatchValue"] as? Any {
            self.matchValue = value
        }
        if let value = dict["Negate"] as? Bool {
            self.negate = value
        }
    }
}

public class WafSiteSettings : Tea.TeaModel {
    public class AddBotProtectionHeaders : Tea.TeaModel {
        public var enable: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.enable != nil {
                map["Enable"] = self.enable!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Enable"] as? Bool {
                self.enable = value
            }
        }
    }
    public class AddSecurityHeaders : Tea.TeaModel {
        public var enable: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.enable != nil {
                map["Enable"] = self.enable!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Enable"] as? Bool {
                self.enable = value
            }
        }
    }
    public class BotManagement : Tea.TeaModel {
        public class DefiniteBots : Tea.TeaModel {
            public var action: String?

            public var id: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.action != nil {
                    map["Action"] = self.action!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Action"] as? String {
                    self.action = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
            }
        }
        public class EffectOnStatic : Tea.TeaModel {
            public var enable: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.enable != nil {
                    map["Enable"] = self.enable!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Enable"] as? Bool {
                    self.enable = value
                }
            }
        }
        public class JSDetection : Tea.TeaModel {
            public var enable: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.enable != nil {
                    map["Enable"] = self.enable!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Enable"] as? Bool {
                    self.enable = value
                }
            }
        }
        public class LikelyBots : Tea.TeaModel {
            public var action: String?

            public var id: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.action != nil {
                    map["Action"] = self.action!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Action"] as? String {
                    self.action = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
            }
        }
        public class VerifiedBots : Tea.TeaModel {
            public var action: String?

            public var id: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.action != nil {
                    map["Action"] = self.action!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Action"] as? String {
                    self.action = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
            }
        }
        public var definiteBots: WafSiteSettings.BotManagement.DefiniteBots?

        public var effectOnStatic: WafSiteSettings.BotManagement.EffectOnStatic?

        public var JSDetection: WafSiteSettings.BotManagement.JSDetection?

        public var likelyBots: WafSiteSettings.BotManagement.LikelyBots?

        public var verifiedBots: WafSiteSettings.BotManagement.VerifiedBots?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.definiteBots?.validate()
            try self.effectOnStatic?.validate()
            try self.JSDetection?.validate()
            try self.likelyBots?.validate()
            try self.verifiedBots?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.definiteBots != nil {
                map["DefiniteBots"] = self.definiteBots?.toMap()
            }
            if self.effectOnStatic != nil {
                map["EffectOnStatic"] = self.effectOnStatic?.toMap()
            }
            if self.JSDetection != nil {
                map["JSDetection"] = self.JSDetection?.toMap()
            }
            if self.likelyBots != nil {
                map["LikelyBots"] = self.likelyBots?.toMap()
            }
            if self.verifiedBots != nil {
                map["VerifiedBots"] = self.verifiedBots?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DefiniteBots"] as? [String: Any?] {
                var model = WafSiteSettings.BotManagement.DefiniteBots()
                model.fromMap(value)
                self.definiteBots = model
            }
            if let value = dict["EffectOnStatic"] as? [String: Any?] {
                var model = WafSiteSettings.BotManagement.EffectOnStatic()
                model.fromMap(value)
                self.effectOnStatic = model
            }
            if let value = dict["JSDetection"] as? [String: Any?] {
                var model = WafSiteSettings.BotManagement.JSDetection()
                model.fromMap(value)
                self.JSDetection = model
            }
            if let value = dict["LikelyBots"] as? [String: Any?] {
                var model = WafSiteSettings.BotManagement.LikelyBots()
                model.fromMap(value)
                self.likelyBots = model
            }
            if let value = dict["VerifiedBots"] as? [String: Any?] {
                var model = WafSiteSettings.BotManagement.VerifiedBots()
                model.fromMap(value)
                self.verifiedBots = model
            }
        }
    }
    public class ClientIpIdentifier : Tea.TeaModel {
        public var headers: [String]?

        public var mode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.headers != nil {
                map["Headers"] = self.headers!
            }
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Headers"] as? [String] {
                self.headers = value
            }
            if let value = dict["Mode"] as? String {
                self.mode = value
            }
        }
    }
    public class SecurityLevel : Tea.TeaModel {
        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var addBotProtectionHeaders: WafSiteSettings.AddBotProtectionHeaders?

    public var addSecurityHeaders: WafSiteSettings.AddSecurityHeaders?

    public var botManagement: WafSiteSettings.BotManagement?

    public var clientIpIdentifier: WafSiteSettings.ClientIpIdentifier?

    public var securityLevel: WafSiteSettings.SecurityLevel?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.addBotProtectionHeaders?.validate()
        try self.addSecurityHeaders?.validate()
        try self.botManagement?.validate()
        try self.clientIpIdentifier?.validate()
        try self.securityLevel?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addBotProtectionHeaders != nil {
            map["AddBotProtectionHeaders"] = self.addBotProtectionHeaders?.toMap()
        }
        if self.addSecurityHeaders != nil {
            map["AddSecurityHeaders"] = self.addSecurityHeaders?.toMap()
        }
        if self.botManagement != nil {
            map["BotManagement"] = self.botManagement?.toMap()
        }
        if self.clientIpIdentifier != nil {
            map["ClientIpIdentifier"] = self.clientIpIdentifier?.toMap()
        }
        if self.securityLevel != nil {
            map["SecurityLevel"] = self.securityLevel?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddBotProtectionHeaders"] as? [String: Any?] {
            var model = WafSiteSettings.AddBotProtectionHeaders()
            model.fromMap(value)
            self.addBotProtectionHeaders = model
        }
        if let value = dict["AddSecurityHeaders"] as? [String: Any?] {
            var model = WafSiteSettings.AddSecurityHeaders()
            model.fromMap(value)
            self.addSecurityHeaders = model
        }
        if let value = dict["BotManagement"] as? [String: Any?] {
            var model = WafSiteSettings.BotManagement()
            model.fromMap(value)
            self.botManagement = model
        }
        if let value = dict["ClientIpIdentifier"] as? [String: Any?] {
            var model = WafSiteSettings.ClientIpIdentifier()
            model.fromMap(value)
            self.clientIpIdentifier = model
        }
        if let value = dict["SecurityLevel"] as? [String: Any?] {
            var model = WafSiteSettings.SecurityLevel()
            model.fromMap(value)
            self.securityLevel = model
        }
    }
}

public class WafTimer : Tea.TeaModel {
    public class Periods : Tea.TeaModel {
        public var end: String?

        public var start: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.end != nil {
                map["End"] = self.end!
            }
            if self.start != nil {
                map["Start"] = self.start!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["End"] as? String {
                self.end = value
            }
            if let value = dict["Start"] as? String {
                self.start = value
            }
        }
    }
    public class WeeklyPeriods : Tea.TeaModel {
        public class DailyPeriods : Tea.TeaModel {
            public var end: String?

            public var start: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.end != nil {
                    map["End"] = self.end!
                }
                if self.start != nil {
                    map["Start"] = self.start!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["End"] as? String {
                    self.end = value
                }
                if let value = dict["Start"] as? String {
                    self.start = value
                }
            }
        }
        public var dailyPeriods: [WafTimer.WeeklyPeriods.DailyPeriods]?

        public var days: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dailyPeriods != nil {
                var tmp : [Any] = []
                for k in self.dailyPeriods! {
                    tmp.append(k.toMap())
                }
                map["DailyPeriods"] = tmp
            }
            if self.days != nil {
                map["Days"] = self.days!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DailyPeriods"] as? [Any?] {
                var tmp : [WafTimer.WeeklyPeriods.DailyPeriods] = []
                for v in value {
                    if v != nil {
                        var model = WafTimer.WeeklyPeriods.DailyPeriods()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dailyPeriods = tmp
            }
            if let value = dict["Days"] as? String {
                self.days = value
            }
        }
    }
    public var periods: [WafTimer.Periods]?

    public var scopes: String?

    public var weeklyPeriods: [WafTimer.WeeklyPeriods]?

    public var zone: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.periods != nil {
            var tmp : [Any] = []
            for k in self.periods! {
                tmp.append(k.toMap())
            }
            map["Periods"] = tmp
        }
        if self.scopes != nil {
            map["Scopes"] = self.scopes!
        }
        if self.weeklyPeriods != nil {
            var tmp : [Any] = []
            for k in self.weeklyPeriods! {
                tmp.append(k.toMap())
            }
            map["WeeklyPeriods"] = tmp
        }
        if self.zone != nil {
            map["Zone"] = self.zone!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Periods"] as? [Any?] {
            var tmp : [WafTimer.Periods] = []
            for v in value {
                if v != nil {
                    var model = WafTimer.Periods()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.periods = tmp
        }
        if let value = dict["Scopes"] as? String {
            self.scopes = value
        }
        if let value = dict["WeeklyPeriods"] as? [Any?] {
            var tmp : [WafTimer.WeeklyPeriods] = []
            for v in value {
                if v != nil {
                    var model = WafTimer.WeeklyPeriods()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.weeklyPeriods = tmp
        }
        if let value = dict["Zone"] as? Int32 {
            self.zone = value
        }
    }
}

public class HttpDeliveryHeaderParamValue : Tea.TeaModel {
    public var staticValue: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.staticValue != nil {
            map["StaticValue"] = self.staticValue!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["StaticValue"] as? String {
            self.staticValue = value
        }
    }
}

public class HttpDeliveryQueryParamValue : Tea.TeaModel {
    public var staticValue: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.staticValue != nil {
            map["StaticValue"] = self.staticValue!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["StaticValue"] as? String {
            self.staticValue = value
        }
    }
}

public class FieldContentValue : Tea.TeaModel {
    public class FieldList : Tea.TeaModel {
        public var fieldName: String?

        public var description_: String?

        public var descriptionCn: String?

        public var category: String?

        public var dataType: String?

        public var sortOrder: Int64?

        public var isDefault: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fieldName != nil {
                map["FieldName"] = self.fieldName!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.descriptionCn != nil {
                map["DescriptionCn"] = self.descriptionCn!
            }
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.dataType != nil {
                map["DataType"] = self.dataType!
            }
            if self.sortOrder != nil {
                map["SortOrder"] = self.sortOrder!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FieldName"] as? String {
                self.fieldName = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DescriptionCn"] as? String {
                self.descriptionCn = value
            }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["DataType"] as? String {
                self.dataType = value
            }
            if let value = dict["SortOrder"] as? Int64 {
                self.sortOrder = value
            }
            if let value = dict["IsDefault"] as? Bool {
                self.isDefault = value
            }
        }
    }
    public var sortOrder: Int64?

    public var fieldList: [FieldContentValue.FieldList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.sortOrder != nil {
            map["SortOrder"] = self.sortOrder!
        }
        if self.fieldList != nil {
            var tmp : [Any] = []
            for k in self.fieldList! {
                tmp.append(k.toMap())
            }
            map["FieldList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SortOrder"] as? Int64 {
            self.sortOrder = value
        }
        if let value = dict["FieldList"] as? [Any?] {
            var tmp : [FieldContentValue.FieldList] = []
            for v in value {
                if v != nil {
                    var model = FieldContentValue.FieldList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.fieldList = tmp
        }
    }
}

public class QuotaListItemsValue : Tea.TeaModel {
    public var enable: Bool?

    public var value: WafQuotaString?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.value?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.value != nil {
            map["Value"] = self.value?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enable"] as? Bool {
            self.enable = value
        }
        if let value = dict["Value"] as? [String: Any?] {
            var model = WafQuotaString()
            model.fromMap(value)
            self.value = model
        }
    }
}

public class QuotaPageContentTypesValue : Tea.TeaModel {
    public var enable: Bool?

    public var contentLength: WafQuotaInteger?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.contentLength?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.contentLength != nil {
            map["ContentLength"] = self.contentLength?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enable"] as? Bool {
            self.enable = value
        }
        if let value = dict["ContentLength"] as? [String: Any?] {
            var model = WafQuotaInteger()
            model.fromMap(value)
            self.contentLength = model
        }
    }
}

public class ActivateClientCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ActivateClientCertificateResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public var siteId: Int64?

    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class ActivateClientCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ActivateClientCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ActivateClientCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ActivateVersionManagementRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ActivateVersionManagementResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ActivateVersionManagementResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ActivateVersionManagementResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ActivateVersionManagementResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ApplyCertificateRequest : Tea.TeaModel {
    public var domains: String?

    public var siteId: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domains != nil {
            map["Domains"] = self.domains!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Domains"] as? String {
            self.domains = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class ApplyCertificateResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var domain: String?

        public var id: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var requestId: String?

    public var result: [ApplyCertificateResponseBody.Result]?

    public var siteName: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["Result"] = tmp
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [Any?] {
            var tmp : [ApplyCertificateResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = ApplyCertificateResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class ApplyCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ApplyCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchCreateRecordsRequest : Tea.TeaModel {
    public class RecordList : Tea.TeaModel {
        public class AuthConf : Tea.TeaModel {
            public var accessKey: String?

            public var authType: String?

            public var region: String?

            public var secretKey: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accessKey != nil {
                    map["AccessKey"] = self.accessKey!
                }
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.secretKey != nil {
                    map["SecretKey"] = self.secretKey!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccessKey"] as? String {
                    self.accessKey = value
                }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["SecretKey"] as? String {
                    self.secretKey = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public class Data : Tea.TeaModel {
            public var algorithm: Int32?

            public var certificate: String?

            public var fingerprint: String?

            public var flag: Int32?

            public var keyTag: Int32?

            public var matchingType: Int32?

            public var port: Int32?

            public var priority: Int32?

            public var selector: Int32?

            public var tag: String?

            public var type: Int32?

            public var usage: Int32?

            public var value: String?

            public var weight: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.algorithm != nil {
                    map["Algorithm"] = self.algorithm!
                }
                if self.certificate != nil {
                    map["Certificate"] = self.certificate!
                }
                if self.fingerprint != nil {
                    map["Fingerprint"] = self.fingerprint!
                }
                if self.flag != nil {
                    map["Flag"] = self.flag!
                }
                if self.keyTag != nil {
                    map["KeyTag"] = self.keyTag!
                }
                if self.matchingType != nil {
                    map["MatchingType"] = self.matchingType!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.priority != nil {
                    map["Priority"] = self.priority!
                }
                if self.selector != nil {
                    map["Selector"] = self.selector!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                if self.weight != nil {
                    map["Weight"] = self.weight!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Algorithm"] as? Int32 {
                    self.algorithm = value
                }
                if let value = dict["Certificate"] as? String {
                    self.certificate = value
                }
                if let value = dict["Fingerprint"] as? String {
                    self.fingerprint = value
                }
                if let value = dict["Flag"] as? Int32 {
                    self.flag = value
                }
                if let value = dict["KeyTag"] as? Int32 {
                    self.keyTag = value
                }
                if let value = dict["MatchingType"] as? Int32 {
                    self.matchingType = value
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["Priority"] as? Int32 {
                    self.priority = value
                }
                if let value = dict["Selector"] as? Int32 {
                    self.selector = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Type"] as? Int32 {
                    self.type = value
                }
                if let value = dict["Usage"] as? Int32 {
                    self.usage = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
                if let value = dict["Weight"] as? Int32 {
                    self.weight = value
                }
            }
        }
        public var authConf: BatchCreateRecordsRequest.RecordList.AuthConf?

        public var bizName: String?

        public var data: BatchCreateRecordsRequest.RecordList.Data?

        public var proxied: Bool?

        public var recordName: String?

        public var sourceType: String?

        public var ttl: Int32?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.authConf?.validate()
            try self.data?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authConf != nil {
                map["AuthConf"] = self.authConf?.toMap()
            }
            if self.bizName != nil {
                map["BizName"] = self.bizName!
            }
            if self.data != nil {
                map["Data"] = self.data?.toMap()
            }
            if self.proxied != nil {
                map["Proxied"] = self.proxied!
            }
            if self.recordName != nil {
                map["RecordName"] = self.recordName!
            }
            if self.sourceType != nil {
                map["SourceType"] = self.sourceType!
            }
            if self.ttl != nil {
                map["Ttl"] = self.ttl!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuthConf"] as? [String: Any?] {
                var model = BatchCreateRecordsRequest.RecordList.AuthConf()
                model.fromMap(value)
                self.authConf = model
            }
            if let value = dict["BizName"] as? String {
                self.bizName = value
            }
            if let value = dict["Data"] as? [String: Any?] {
                var model = BatchCreateRecordsRequest.RecordList.Data()
                model.fromMap(value)
                self.data = model
            }
            if let value = dict["Proxied"] as? Bool {
                self.proxied = value
            }
            if let value = dict["RecordName"] as? String {
                self.recordName = value
            }
            if let value = dict["SourceType"] as? String {
                self.sourceType = value
            }
            if let value = dict["Ttl"] as? Int32 {
                self.ttl = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var recordList: [BatchCreateRecordsRequest.RecordList]?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.recordList != nil {
            var tmp : [Any] = []
            for k in self.recordList! {
                tmp.append(k.toMap())
            }
            map["RecordList"] = tmp
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RecordList"] as? [Any?] {
            var tmp : [BatchCreateRecordsRequest.RecordList] = []
            for v in value {
                if v != nil {
                    var model = BatchCreateRecordsRequest.RecordList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.recordList = tmp
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class BatchCreateRecordsShrinkRequest : Tea.TeaModel {
    public var recordListShrink: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.recordListShrink != nil {
            map["RecordList"] = self.recordListShrink!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RecordList"] as? String {
            self.recordListShrink = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class BatchCreateRecordsResponseBody : Tea.TeaModel {
    public class RecordResultList : Tea.TeaModel {
        public class Failed : Tea.TeaModel {
            public class Data : Tea.TeaModel {
                public var algorithm: Int32?

                public var certificate: String?

                public var fingerprint: String?

                public var flag: Int32?

                public var keyTag: Int32?

                public var matchingType: Int32?

                public var port: Int32?

                public var priority: Int32?

                public var selector: Int32?

                public var tag: String?

                public var type: Int32?

                public var usage: Int32?

                public var value: String?

                public var weight: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.algorithm != nil {
                        map["Algorithm"] = self.algorithm!
                    }
                    if self.certificate != nil {
                        map["Certificate"] = self.certificate!
                    }
                    if self.fingerprint != nil {
                        map["Fingerprint"] = self.fingerprint!
                    }
                    if self.flag != nil {
                        map["Flag"] = self.flag!
                    }
                    if self.keyTag != nil {
                        map["KeyTag"] = self.keyTag!
                    }
                    if self.matchingType != nil {
                        map["MatchingType"] = self.matchingType!
                    }
                    if self.port != nil {
                        map["Port"] = self.port!
                    }
                    if self.priority != nil {
                        map["Priority"] = self.priority!
                    }
                    if self.selector != nil {
                        map["Selector"] = self.selector!
                    }
                    if self.tag != nil {
                        map["Tag"] = self.tag!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.usage != nil {
                        map["Usage"] = self.usage!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    if self.weight != nil {
                        map["Weight"] = self.weight!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Algorithm"] as? Int32 {
                        self.algorithm = value
                    }
                    if let value = dict["Certificate"] as? String {
                        self.certificate = value
                    }
                    if let value = dict["Fingerprint"] as? String {
                        self.fingerprint = value
                    }
                    if let value = dict["Flag"] as? Int32 {
                        self.flag = value
                    }
                    if let value = dict["KeyTag"] as? Int32 {
                        self.keyTag = value
                    }
                    if let value = dict["MatchingType"] as? Int32 {
                        self.matchingType = value
                    }
                    if let value = dict["Port"] as? Int32 {
                        self.port = value
                    }
                    if let value = dict["Priority"] as? Int32 {
                        self.priority = value
                    }
                    if let value = dict["Selector"] as? Int32 {
                        self.selector = value
                    }
                    if let value = dict["Tag"] as? String {
                        self.tag = value
                    }
                    if let value = dict["Type"] as? Int32 {
                        self.type = value
                    }
                    if let value = dict["Usage"] as? Int32 {
                        self.usage = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                    if let value = dict["Weight"] as? Int32 {
                        self.weight = value
                    }
                }
            }
            public var bizName: String?

            public var data: BatchCreateRecordsResponseBody.RecordResultList.Failed.Data?

            public var description_: String?

            public var proxied: Bool?

            public var recordId: Int64?

            public var recordName: String?

            public var recordType: String?

            public var sourceType: String?

            public var ttl: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.data?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizName != nil {
                    map["BizName"] = self.bizName!
                }
                if self.data != nil {
                    map["Data"] = self.data?.toMap()
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.proxied != nil {
                    map["Proxied"] = self.proxied!
                }
                if self.recordId != nil {
                    map["RecordId"] = self.recordId!
                }
                if self.recordName != nil {
                    map["RecordName"] = self.recordName!
                }
                if self.recordType != nil {
                    map["RecordType"] = self.recordType!
                }
                if self.sourceType != nil {
                    map["SourceType"] = self.sourceType!
                }
                if self.ttl != nil {
                    map["Ttl"] = self.ttl!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizName"] as? String {
                    self.bizName = value
                }
                if let value = dict["Data"] as? [String: Any?] {
                    var model = BatchCreateRecordsResponseBody.RecordResultList.Failed.Data()
                    model.fromMap(value)
                    self.data = model
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Proxied"] as? Bool {
                    self.proxied = value
                }
                if let value = dict["RecordId"] as? Int64 {
                    self.recordId = value
                }
                if let value = dict["RecordName"] as? String {
                    self.recordName = value
                }
                if let value = dict["RecordType"] as? String {
                    self.recordType = value
                }
                if let value = dict["SourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["Ttl"] as? Int32 {
                    self.ttl = value
                }
            }
        }
        public class Success : Tea.TeaModel {
            public class Data : Tea.TeaModel {
                public var algorithm: Int32?

                public var certificate: String?

                public var fingerprint: String?

                public var flag: Int32?

                public var keyTag: Int32?

                public var matchingType: Int32?

                public var port: Int32?

                public var priority: Int32?

                public var selector: Int32?

                public var tag: String?

                public var type: Int32?

                public var usage: Int32?

                public var value: String?

                public var weight: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.algorithm != nil {
                        map["Algorithm"] = self.algorithm!
                    }
                    if self.certificate != nil {
                        map["Certificate"] = self.certificate!
                    }
                    if self.fingerprint != nil {
                        map["Fingerprint"] = self.fingerprint!
                    }
                    if self.flag != nil {
                        map["Flag"] = self.flag!
                    }
                    if self.keyTag != nil {
                        map["KeyTag"] = self.keyTag!
                    }
                    if self.matchingType != nil {
                        map["MatchingType"] = self.matchingType!
                    }
                    if self.port != nil {
                        map["Port"] = self.port!
                    }
                    if self.priority != nil {
                        map["Priority"] = self.priority!
                    }
                    if self.selector != nil {
                        map["Selector"] = self.selector!
                    }
                    if self.tag != nil {
                        map["Tag"] = self.tag!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.usage != nil {
                        map["Usage"] = self.usage!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    if self.weight != nil {
                        map["Weight"] = self.weight!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Algorithm"] as? Int32 {
                        self.algorithm = value
                    }
                    if let value = dict["Certificate"] as? String {
                        self.certificate = value
                    }
                    if let value = dict["Fingerprint"] as? String {
                        self.fingerprint = value
                    }
                    if let value = dict["Flag"] as? Int32 {
                        self.flag = value
                    }
                    if let value = dict["KeyTag"] as? Int32 {
                        self.keyTag = value
                    }
                    if let value = dict["MatchingType"] as? Int32 {
                        self.matchingType = value
                    }
                    if let value = dict["Port"] as? Int32 {
                        self.port = value
                    }
                    if let value = dict["Priority"] as? Int32 {
                        self.priority = value
                    }
                    if let value = dict["Selector"] as? Int32 {
                        self.selector = value
                    }
                    if let value = dict["Tag"] as? String {
                        self.tag = value
                    }
                    if let value = dict["Type"] as? Int32 {
                        self.type = value
                    }
                    if let value = dict["Usage"] as? Int32 {
                        self.usage = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                    if let value = dict["Weight"] as? Int32 {
                        self.weight = value
                    }
                }
            }
            public var bizName: String?

            public var data: BatchCreateRecordsResponseBody.RecordResultList.Success.Data?

            public var description_: String?

            public var proxied: Bool?

            public var recordId: Int64?

            public var recordName: String?

            public var recordType: String?

            public var sourceType: String?

            public var ttl: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.data?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizName != nil {
                    map["BizName"] = self.bizName!
                }
                if self.data != nil {
                    map["Data"] = self.data?.toMap()
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.proxied != nil {
                    map["Proxied"] = self.proxied!
                }
                if self.recordId != nil {
                    map["RecordId"] = self.recordId!
                }
                if self.recordName != nil {
                    map["RecordName"] = self.recordName!
                }
                if self.recordType != nil {
                    map["RecordType"] = self.recordType!
                }
                if self.sourceType != nil {
                    map["SourceType"] = self.sourceType!
                }
                if self.ttl != nil {
                    map["Ttl"] = self.ttl!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizName"] as? String {
                    self.bizName = value
                }
                if let value = dict["Data"] as? [String: Any?] {
                    var model = BatchCreateRecordsResponseBody.RecordResultList.Success.Data()
                    model.fromMap(value)
                    self.data = model
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Proxied"] as? Bool {
                    self.proxied = value
                }
                if let value = dict["RecordId"] as? Int64 {
                    self.recordId = value
                }
                if let value = dict["RecordName"] as? String {
                    self.recordName = value
                }
                if let value = dict["RecordType"] as? String {
                    self.recordType = value
                }
                if let value = dict["SourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["Ttl"] as? Int32 {
                    self.ttl = value
                }
            }
        }
        public var failed: [BatchCreateRecordsResponseBody.RecordResultList.Failed]?

        public var success: [BatchCreateRecordsResponseBody.RecordResultList.Success]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.failed != nil {
                var tmp : [Any] = []
                for k in self.failed! {
                    tmp.append(k.toMap())
                }
                map["Failed"] = tmp
            }
            if self.success != nil {
                var tmp : [Any] = []
                for k in self.success! {
                    tmp.append(k.toMap())
                }
                map["Success"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Failed"] as? [Any?] {
                var tmp : [BatchCreateRecordsResponseBody.RecordResultList.Failed] = []
                for v in value {
                    if v != nil {
                        var model = BatchCreateRecordsResponseBody.RecordResultList.Failed()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.failed = tmp
            }
            if let value = dict["Success"] as? [Any?] {
                var tmp : [BatchCreateRecordsResponseBody.RecordResultList.Success] = []
                for v in value {
                    if v != nil {
                        var model = BatchCreateRecordsResponseBody.RecordResultList.Success()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.success = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var recordResultList: BatchCreateRecordsResponseBody.RecordResultList?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.recordResultList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.recordResultList != nil {
            map["RecordResultList"] = self.recordResultList?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RecordResultList"] as? [String: Any?] {
            var model = BatchCreateRecordsResponseBody.RecordResultList()
            model.fromMap(value)
            self.recordResultList = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BatchCreateRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchCreateRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchCreateRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchCreateWafRulesRequest : Tea.TeaModel {
    public var configs: [WafRuleConfig]?

    public var phase: String?

    public var rulesetId: Int64?

    public var shared: WafBatchRuleShared?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.shared?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.rulesetId != nil {
            map["RulesetId"] = self.rulesetId!
        }
        if self.shared != nil {
            map["Shared"] = self.shared?.toMap()
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [WafRuleConfig] = []
            for v in value {
                if v != nil {
                    var model = WafRuleConfig()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["RulesetId"] as? Int64 {
            self.rulesetId = value
        }
        if let value = dict["Shared"] as? [String: Any?] {
            var model = WafBatchRuleShared()
            model.fromMap(value)
            self.shared = model
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class BatchCreateWafRulesShrinkRequest : Tea.TeaModel {
    public var configsShrink: String?

    public var phase: String?

    public var rulesetId: Int64?

    public var sharedShrink: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configsShrink != nil {
            map["Configs"] = self.configsShrink!
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.rulesetId != nil {
            map["RulesetId"] = self.rulesetId!
        }
        if self.sharedShrink != nil {
            map["Shared"] = self.sharedShrink!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? String {
            self.configsShrink = value
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["RulesetId"] as? Int64 {
            self.rulesetId = value
        }
        if let value = dict["Shared"] as? String {
            self.sharedShrink = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class BatchCreateWafRulesResponseBody : Tea.TeaModel {
    public var ids: [Int64]?

    public var requestId: String?

    public var rulesetId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ids != nil {
            map["Ids"] = self.ids!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rulesetId != nil {
            map["RulesetId"] = self.rulesetId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ids"] as? [Int64] {
            self.ids = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RulesetId"] as? Int64 {
            self.rulesetId = value
        }
    }
}

public class BatchCreateWafRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchCreateWafRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchCreateWafRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchDeleteKvRequest : Tea.TeaModel {
    public var keys: [String]?

    public var namespace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.keys != nil {
            map["Keys"] = self.keys!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Keys"] as? [String] {
            self.keys = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
    }
}

public class BatchDeleteKvShrinkRequest : Tea.TeaModel {
    public var keysShrink: String?

    public var namespace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.keysShrink != nil {
            map["Keys"] = self.keysShrink!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Keys"] as? String {
            self.keysShrink = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
    }
}

public class BatchDeleteKvResponseBody : Tea.TeaModel {
    public var failKeys: [String]?

    public var requestId: String?

    public var successKeys: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failKeys != nil {
            map["FailKeys"] = self.failKeys!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.successKeys != nil {
            map["SuccessKeys"] = self.successKeys!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FailKeys"] as? [String] {
            self.failKeys = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SuccessKeys"] as? [String] {
            self.successKeys = value
        }
    }
}

public class BatchDeleteKvResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchDeleteKvResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchDeleteKvResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchDeleteKvWithHighCapacityRequest : Tea.TeaModel {
    public var namespace: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class BatchDeleteKvWithHighCapacityAdvanceRequest : Tea.TeaModel {
    public var namespace: String?

    public var urlObject: InputStream?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.urlObject != nil {
            map["Url"] = self.urlObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Url"] as? InputStream {
            self.urlObject = value
        }
    }
}

public class BatchDeleteKvWithHighCapacityResponseBody : Tea.TeaModel {
    public var failKeys: [String]?

    public var requestId: String?

    public var successKeys: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failKeys != nil {
            map["FailKeys"] = self.failKeys!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.successKeys != nil {
            map["SuccessKeys"] = self.successKeys!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FailKeys"] as? [String] {
            self.failKeys = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SuccessKeys"] as? [String] {
            self.successKeys = value
        }
    }
}

public class BatchDeleteKvWithHighCapacityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchDeleteKvWithHighCapacityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchDeleteKvWithHighCapacityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchGetExpressionFieldsRequest : Tea.TeaModel {
    public class Expressions : Tea.TeaModel {
        public var expression: String?

        public var id: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expression != nil {
                map["Expression"] = self.expression!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Expression"] as? String {
                self.expression = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
        }
    }
    public var expressions: [BatchGetExpressionFieldsRequest.Expressions]?

    public var phase: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.expressions != nil {
            var tmp : [Any] = []
            for k in self.expressions! {
                tmp.append(k.toMap())
            }
            map["Expressions"] = tmp
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Expressions"] as? [Any?] {
            var tmp : [BatchGetExpressionFieldsRequest.Expressions] = []
            for v in value {
                if v != nil {
                    var model = BatchGetExpressionFieldsRequest.Expressions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.expressions = tmp
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class BatchGetExpressionFieldsShrinkRequest : Tea.TeaModel {
    public var expressionsShrink: String?

    public var phase: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.expressionsShrink != nil {
            map["Expressions"] = self.expressionsShrink!
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Expressions"] as? String {
            self.expressionsShrink = value
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class BatchGetExpressionFieldsResponseBody : Tea.TeaModel {
    public class Fields : Tea.TeaModel {
        public var fields: [String]?

        public var id: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fields != nil {
                map["Fields"] = self.fields!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Fields"] as? [String] {
                self.fields = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
        }
    }
    public var fields: [BatchGetExpressionFieldsResponseBody.Fields]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fields != nil {
            var tmp : [Any] = []
            for k in self.fields! {
                tmp.append(k.toMap())
            }
            map["Fields"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Fields"] as? [Any?] {
            var tmp : [BatchGetExpressionFieldsResponseBody.Fields] = []
            for v in value {
                if v != nil {
                    var model = BatchGetExpressionFieldsResponseBody.Fields()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.fields = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BatchGetExpressionFieldsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchGetExpressionFieldsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchGetExpressionFieldsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchPutKvRequest : Tea.TeaModel {
    public class KvList : Tea.TeaModel {
        public var expiration: Int64?

        public var expirationTtl: Int64?

        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.expiration != nil {
                map["Expiration"] = self.expiration!
            }
            if self.expirationTtl != nil {
                map["ExpirationTtl"] = self.expirationTtl!
            }
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Expiration"] as? Int64 {
                self.expiration = value
            }
            if let value = dict["ExpirationTtl"] as? Int64 {
                self.expirationTtl = value
            }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var kvList: [BatchPutKvRequest.KvList]?

    public var namespace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.kvList != nil {
            var tmp : [Any] = []
            for k in self.kvList! {
                tmp.append(k.toMap())
            }
            map["KvList"] = tmp
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["KvList"] as? [Any?] {
            var tmp : [BatchPutKvRequest.KvList] = []
            for v in value {
                if v != nil {
                    var model = BatchPutKvRequest.KvList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.kvList = tmp
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
    }
}

public class BatchPutKvShrinkRequest : Tea.TeaModel {
    public var kvListShrink: String?

    public var namespace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.kvListShrink != nil {
            map["KvList"] = self.kvListShrink!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["KvList"] as? String {
            self.kvListShrink = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
    }
}

public class BatchPutKvResponseBody : Tea.TeaModel {
    public var failKeys: [String]?

    public var requestId: String?

    public var successKeys: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failKeys != nil {
            map["FailKeys"] = self.failKeys!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.successKeys != nil {
            map["SuccessKeys"] = self.successKeys!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FailKeys"] as? [String] {
            self.failKeys = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SuccessKeys"] as? [String] {
            self.successKeys = value
        }
    }
}

public class BatchPutKvResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchPutKvResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchPutKvResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchPutKvWithHighCapacityRequest : Tea.TeaModel {
    public var namespace: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class BatchPutKvWithHighCapacityAdvanceRequest : Tea.TeaModel {
    public var namespace: String?

    public var urlObject: InputStream?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.urlObject != nil {
            map["Url"] = self.urlObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Url"] as? InputStream {
            self.urlObject = value
        }
    }
}

public class BatchPutKvWithHighCapacityResponseBody : Tea.TeaModel {
    public var failKeys: [String]?

    public var requestId: String?

    public var successKeys: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failKeys != nil {
            map["FailKeys"] = self.failKeys!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.successKeys != nil {
            map["SuccessKeys"] = self.successKeys!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FailKeys"] as? [String] {
            self.failKeys = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SuccessKeys"] as? [String] {
            self.successKeys = value
        }
    }
}

public class BatchPutKvWithHighCapacityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchPutKvWithHighCapacityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchPutKvWithHighCapacityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchUpdateWafRulesRequest : Tea.TeaModel {
    public var configs: [WafRuleConfig]?

    public var phase: String?

    public var rulesetId: Int64?

    public var shared: WafBatchRuleShared?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.shared?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.rulesetId != nil {
            map["RulesetId"] = self.rulesetId!
        }
        if self.shared != nil {
            map["Shared"] = self.shared?.toMap()
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [WafRuleConfig] = []
            for v in value {
                if v != nil {
                    var model = WafRuleConfig()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["RulesetId"] as? Int64 {
            self.rulesetId = value
        }
        if let value = dict["Shared"] as? [String: Any?] {
            var model = WafBatchRuleShared()
            model.fromMap(value)
            self.shared = model
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class BatchUpdateWafRulesShrinkRequest : Tea.TeaModel {
    public var configsShrink: String?

    public var phase: String?

    public var rulesetId: Int64?

    public var sharedShrink: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configsShrink != nil {
            map["Configs"] = self.configsShrink!
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.rulesetId != nil {
            map["RulesetId"] = self.rulesetId!
        }
        if self.sharedShrink != nil {
            map["Shared"] = self.sharedShrink!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? String {
            self.configsShrink = value
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["RulesetId"] as? Int64 {
            self.rulesetId = value
        }
        if let value = dict["Shared"] as? String {
            self.sharedShrink = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class BatchUpdateWafRulesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BatchUpdateWafRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchUpdateWafRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchUpdateWafRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BlockObjectRequest : Tea.TeaModel {
    public var content: [String]?

    public var extension_: String?

    public var maxage: Int32?

    public var siteId: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.extension_ != nil {
            map["Extension"] = self.extension_!
        }
        if self.maxage != nil {
            map["Maxage"] = self.maxage!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? [String] {
            self.content = value
        }
        if let value = dict["Extension"] as? String {
            self.extension_ = value
        }
        if let value = dict["Maxage"] as? Int32 {
            self.maxage = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class BlockObjectShrinkRequest : Tea.TeaModel {
    public var contentShrink: String?

    public var extension_: String?

    public var maxage: Int32?

    public var siteId: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contentShrink != nil {
            map["Content"] = self.contentShrink!
        }
        if self.extension_ != nil {
            map["Extension"] = self.extension_!
        }
        if self.maxage != nil {
            map["Maxage"] = self.maxage!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.contentShrink = value
        }
        if let value = dict["Extension"] as? String {
            self.extension_ = value
        }
        if let value = dict["Maxage"] as? Int32 {
            self.maxage = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class BlockObjectResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class BlockObjectResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BlockObjectResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BlockObjectResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckAssumeSlrRoleResponseBody : Tea.TeaModel {
    public var errorMsg: String?

    public var isExist: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.errorMsg != nil {
            map["ErrorMsg"] = self.errorMsg!
        }
        if self.isExist != nil {
            map["IsExist"] = self.isExist!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ErrorMsg"] as? String {
            self.errorMsg = value
        }
        if let value = dict["IsExist"] as? String {
            self.isExist = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CheckAssumeSlrRoleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckAssumeSlrRoleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckAssumeSlrRoleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckSiteNameRequest : Tea.TeaModel {
    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class CheckSiteNameResponseBody : Tea.TeaModel {
    public var description_: String?

    public var isSubSite: Bool?

    public var messeage: String?

    public var passed: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.isSubSite != nil {
            map["IsSubSite"] = self.isSubSite!
        }
        if self.messeage != nil {
            map["Messeage"] = self.messeage!
        }
        if self.passed != nil {
            map["Passed"] = self.passed!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["IsSubSite"] as? Bool {
            self.isSubSite = value
        }
        if let value = dict["Messeage"] as? String {
            self.messeage = value
        }
        if let value = dict["Passed"] as? Bool {
            self.passed = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CheckSiteNameResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckSiteNameResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckSiteNameResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckSiteProjectNameRequest : Tea.TeaModel {
    public var projectName: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.projectName != nil {
            map["ProjectName"] = self.projectName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ProjectName"] as? String {
            self.projectName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class CheckSiteProjectNameResponseBody : Tea.TeaModel {
    public var check: Bool?

    public var description_: String?

    public var projectName: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.check != nil {
            map["Check"] = self.check!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.projectName != nil {
            map["ProjectName"] = self.projectName!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Check"] as? Bool {
            self.check = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ProjectName"] as? String {
            self.projectName = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CheckSiteProjectNameResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckSiteProjectNameResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckSiteProjectNameResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckUserProjectNameRequest : Tea.TeaModel {
    public var projectName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.projectName != nil {
            map["ProjectName"] = self.projectName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ProjectName"] as? String {
            self.projectName = value
        }
    }
}

public class CheckUserProjectNameResponseBody : Tea.TeaModel {
    public var check: Bool?

    public var description_: String?

    public var projectName: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.check != nil {
            map["Check"] = self.check!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.projectName != nil {
            map["ProjectName"] = self.projectName!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Check"] as? Bool {
            self.check = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ProjectName"] as? String {
            self.projectName = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CheckUserProjectNameResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckUserProjectNameResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckUserProjectNameResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CommitRoutineStagingCodeRequest : Tea.TeaModel {
    public var codeDescription: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.codeDescription != nil {
            map["CodeDescription"] = self.codeDescription!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CodeDescription"] as? String {
            self.codeDescription = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class CommitRoutineStagingCodeResponseBody : Tea.TeaModel {
    public var codeVersion: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.codeVersion != nil {
            map["CodeVersion"] = self.codeVersion!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CodeVersion"] as? String {
            self.codeVersion = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CommitRoutineStagingCodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CommitRoutineStagingCodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CommitRoutineStagingCodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCacheRuleRequest : Tea.TeaModel {
    public var additionalCacheablePorts: String?

    public var browserCacheMode: String?

    public var browserCacheTtl: String?

    public var bypassCache: String?

    public var cacheDeceptionArmor: String?

    public var cacheReserveEligibility: String?

    public var checkPresenceCookie: String?

    public var checkPresenceHeader: String?

    public var edgeCacheMode: String?

    public var edgeCacheTtl: String?

    public var edgeStatusCodeCacheTtl: String?

    public var includeCookie: String?

    public var includeHeader: String?

    public var queryString: String?

    public var queryStringMode: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var serveStale: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public var sortQueryStringForCache: String?

    public var userDeviceType: String?

    public var userGeo: String?

    public var userLanguage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.additionalCacheablePorts != nil {
            map["AdditionalCacheablePorts"] = self.additionalCacheablePorts!
        }
        if self.browserCacheMode != nil {
            map["BrowserCacheMode"] = self.browserCacheMode!
        }
        if self.browserCacheTtl != nil {
            map["BrowserCacheTtl"] = self.browserCacheTtl!
        }
        if self.bypassCache != nil {
            map["BypassCache"] = self.bypassCache!
        }
        if self.cacheDeceptionArmor != nil {
            map["CacheDeceptionArmor"] = self.cacheDeceptionArmor!
        }
        if self.cacheReserveEligibility != nil {
            map["CacheReserveEligibility"] = self.cacheReserveEligibility!
        }
        if self.checkPresenceCookie != nil {
            map["CheckPresenceCookie"] = self.checkPresenceCookie!
        }
        if self.checkPresenceHeader != nil {
            map["CheckPresenceHeader"] = self.checkPresenceHeader!
        }
        if self.edgeCacheMode != nil {
            map["EdgeCacheMode"] = self.edgeCacheMode!
        }
        if self.edgeCacheTtl != nil {
            map["EdgeCacheTtl"] = self.edgeCacheTtl!
        }
        if self.edgeStatusCodeCacheTtl != nil {
            map["EdgeStatusCodeCacheTtl"] = self.edgeStatusCodeCacheTtl!
        }
        if self.includeCookie != nil {
            map["IncludeCookie"] = self.includeCookie!
        }
        if self.includeHeader != nil {
            map["IncludeHeader"] = self.includeHeader!
        }
        if self.queryString != nil {
            map["QueryString"] = self.queryString!
        }
        if self.queryStringMode != nil {
            map["QueryStringMode"] = self.queryStringMode!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.serveStale != nil {
            map["ServeStale"] = self.serveStale!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.sortQueryStringForCache != nil {
            map["SortQueryStringForCache"] = self.sortQueryStringForCache!
        }
        if self.userDeviceType != nil {
            map["UserDeviceType"] = self.userDeviceType!
        }
        if self.userGeo != nil {
            map["UserGeo"] = self.userGeo!
        }
        if self.userLanguage != nil {
            map["UserLanguage"] = self.userLanguage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdditionalCacheablePorts"] as? String {
            self.additionalCacheablePorts = value
        }
        if let value = dict["BrowserCacheMode"] as? String {
            self.browserCacheMode = value
        }
        if let value = dict["BrowserCacheTtl"] as? String {
            self.browserCacheTtl = value
        }
        if let value = dict["BypassCache"] as? String {
            self.bypassCache = value
        }
        if let value = dict["CacheDeceptionArmor"] as? String {
            self.cacheDeceptionArmor = value
        }
        if let value = dict["CacheReserveEligibility"] as? String {
            self.cacheReserveEligibility = value
        }
        if let value = dict["CheckPresenceCookie"] as? String {
            self.checkPresenceCookie = value
        }
        if let value = dict["CheckPresenceHeader"] as? String {
            self.checkPresenceHeader = value
        }
        if let value = dict["EdgeCacheMode"] as? String {
            self.edgeCacheMode = value
        }
        if let value = dict["EdgeCacheTtl"] as? String {
            self.edgeCacheTtl = value
        }
        if let value = dict["EdgeStatusCodeCacheTtl"] as? String {
            self.edgeStatusCodeCacheTtl = value
        }
        if let value = dict["IncludeCookie"] as? String {
            self.includeCookie = value
        }
        if let value = dict["IncludeHeader"] as? String {
            self.includeHeader = value
        }
        if let value = dict["QueryString"] as? String {
            self.queryString = value
        }
        if let value = dict["QueryStringMode"] as? String {
            self.queryStringMode = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["ServeStale"] as? String {
            self.serveStale = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["SortQueryStringForCache"] as? String {
            self.sortQueryStringForCache = value
        }
        if let value = dict["UserDeviceType"] as? String {
            self.userDeviceType = value
        }
        if let value = dict["UserGeo"] as? String {
            self.userGeo = value
        }
        if let value = dict["UserLanguage"] as? String {
            self.userLanguage = value
        }
    }
}

public class CreateCacheRuleResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateCacheRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCacheRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCacheRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateClientCertificateRequest : Tea.TeaModel {
    public var CSR: String?

    public var pkeyType: String?

    public var siteId: Int64?

    public var validityDays: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.CSR != nil {
            map["CSR"] = self.CSR!
        }
        if self.pkeyType != nil {
            map["PkeyType"] = self.pkeyType!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.validityDays != nil {
            map["ValidityDays"] = self.validityDays!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CSR"] as? String {
            self.CSR = value
        }
        if let value = dict["PkeyType"] as? String {
            self.pkeyType = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["ValidityDays"] as? Int64 {
            self.validityDays = value
        }
    }
}

public class CreateClientCertificateResponseBody : Tea.TeaModel {
    public var CACertificateId: String?

    public var certificate: String?

    public var commonName: String?

    public var fingerprintSha256: String?

    public var id: String?

    public var issuer: String?

    public var notAfter: String?

    public var notBefore: String?

    public var privateKey: String?

    public var requestId: String?

    public var serialNumber: String?

    public var signatureAlgorithm: String?

    public var status: String?

    public var validityDays: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.CACertificateId != nil {
            map["CACertificateId"] = self.CACertificateId!
        }
        if self.certificate != nil {
            map["Certificate"] = self.certificate!
        }
        if self.commonName != nil {
            map["CommonName"] = self.commonName!
        }
        if self.fingerprintSha256 != nil {
            map["FingerprintSha256"] = self.fingerprintSha256!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.issuer != nil {
            map["Issuer"] = self.issuer!
        }
        if self.notAfter != nil {
            map["NotAfter"] = self.notAfter!
        }
        if self.notBefore != nil {
            map["NotBefore"] = self.notBefore!
        }
        if self.privateKey != nil {
            map["PrivateKey"] = self.privateKey!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.serialNumber != nil {
            map["SerialNumber"] = self.serialNumber!
        }
        if self.signatureAlgorithm != nil {
            map["SignatureAlgorithm"] = self.signatureAlgorithm!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.validityDays != nil {
            map["ValidityDays"] = self.validityDays!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CACertificateId"] as? String {
            self.CACertificateId = value
        }
        if let value = dict["Certificate"] as? String {
            self.certificate = value
        }
        if let value = dict["CommonName"] as? String {
            self.commonName = value
        }
        if let value = dict["FingerprintSha256"] as? String {
            self.fingerprintSha256 = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Issuer"] as? String {
            self.issuer = value
        }
        if let value = dict["NotAfter"] as? String {
            self.notAfter = value
        }
        if let value = dict["NotBefore"] as? String {
            self.notBefore = value
        }
        if let value = dict["PrivateKey"] as? String {
            self.privateKey = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SerialNumber"] as? String {
            self.serialNumber = value
        }
        if let value = dict["SignatureAlgorithm"] as? String {
            self.signatureAlgorithm = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["ValidityDays"] as? String {
            self.validityDays = value
        }
    }
}

public class CreateClientCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateClientCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateClientCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCompressionRuleRequest : Tea.TeaModel {
    public var brotli: String?

    public var gzip: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public var zstd: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.brotli != nil {
            map["Brotli"] = self.brotli!
        }
        if self.gzip != nil {
            map["Gzip"] = self.gzip!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.zstd != nil {
            map["Zstd"] = self.zstd!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Brotli"] as? String {
            self.brotli = value
        }
        if let value = dict["Gzip"] as? String {
            self.gzip = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["Zstd"] as? String {
            self.zstd = value
        }
    }
}

public class CreateCompressionRuleResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateCompressionRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCompressionRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCompressionRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateCustomScenePolicyRequest : Tea.TeaModel {
    public var endTime: String?

    public var name: String?

    public var objects: String?

    public var siteIds: String?

    public var startTime: String?

    public var template: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.objects != nil {
            map["Objects"] = self.objects!
        }
        if self.siteIds != nil {
            map["SiteIds"] = self.siteIds!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.template != nil {
            map["Template"] = self.template!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Objects"] as? String {
            self.objects = value
        }
        if let value = dict["SiteIds"] as? String {
            self.siteIds = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Template"] as? String {
            self.template = value
        }
    }
}

public class CreateCustomScenePolicyResponseBody : Tea.TeaModel {
    public var endTime: String?

    public var name: String?

    public var objects: [String]?

    public var policyId: Int64?

    public var requestId: String?

    public var siteIds: String?

    public var startTime: String?

    public var template: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.objects != nil {
            map["Objects"] = self.objects!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteIds != nil {
            map["SiteIds"] = self.siteIds!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.template != nil {
            map["Template"] = self.template!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Objects"] as? [String] {
            self.objects = value
        }
        if let value = dict["PolicyId"] as? Int64 {
            self.policyId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteIds"] as? String {
            self.siteIds = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Template"] as? String {
            self.template = value
        }
    }
}

public class CreateCustomScenePolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateCustomScenePolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateCustomScenePolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEdgeContainerAppRequest : Tea.TeaModel {
    public var healthCheckFailTimes: Int32?

    public var healthCheckHost: String?

    public var healthCheckHttpCode: String?

    public var healthCheckInterval: Int32?

    public var healthCheckMethod: String?

    public var healthCheckPort: Int32?

    public var healthCheckSuccTimes: Int32?

    public var healthCheckTimeout: Int32?

    public var healthCheckType: String?

    public var healthCheckURI: String?

    public var name: String?

    public var remarks: String?

    public var servicePort: Int32?

    public var targetPort: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.healthCheckFailTimes != nil {
            map["HealthCheckFailTimes"] = self.healthCheckFailTimes!
        }
        if self.healthCheckHost != nil {
            map["HealthCheckHost"] = self.healthCheckHost!
        }
        if self.healthCheckHttpCode != nil {
            map["HealthCheckHttpCode"] = self.healthCheckHttpCode!
        }
        if self.healthCheckInterval != nil {
            map["HealthCheckInterval"] = self.healthCheckInterval!
        }
        if self.healthCheckMethod != nil {
            map["HealthCheckMethod"] = self.healthCheckMethod!
        }
        if self.healthCheckPort != nil {
            map["HealthCheckPort"] = self.healthCheckPort!
        }
        if self.healthCheckSuccTimes != nil {
            map["HealthCheckSuccTimes"] = self.healthCheckSuccTimes!
        }
        if self.healthCheckTimeout != nil {
            map["HealthCheckTimeout"] = self.healthCheckTimeout!
        }
        if self.healthCheckType != nil {
            map["HealthCheckType"] = self.healthCheckType!
        }
        if self.healthCheckURI != nil {
            map["HealthCheckURI"] = self.healthCheckURI!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.remarks != nil {
            map["Remarks"] = self.remarks!
        }
        if self.servicePort != nil {
            map["ServicePort"] = self.servicePort!
        }
        if self.targetPort != nil {
            map["TargetPort"] = self.targetPort!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["HealthCheckFailTimes"] as? Int32 {
            self.healthCheckFailTimes = value
        }
        if let value = dict["HealthCheckHost"] as? String {
            self.healthCheckHost = value
        }
        if let value = dict["HealthCheckHttpCode"] as? String {
            self.healthCheckHttpCode = value
        }
        if let value = dict["HealthCheckInterval"] as? Int32 {
            self.healthCheckInterval = value
        }
        if let value = dict["HealthCheckMethod"] as? String {
            self.healthCheckMethod = value
        }
        if let value = dict["HealthCheckPort"] as? Int32 {
            self.healthCheckPort = value
        }
        if let value = dict["HealthCheckSuccTimes"] as? Int32 {
            self.healthCheckSuccTimes = value
        }
        if let value = dict["HealthCheckTimeout"] as? Int32 {
            self.healthCheckTimeout = value
        }
        if let value = dict["HealthCheckType"] as? String {
            self.healthCheckType = value
        }
        if let value = dict["HealthCheckURI"] as? String {
            self.healthCheckURI = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Remarks"] as? String {
            self.remarks = value
        }
        if let value = dict["ServicePort"] as? Int32 {
            self.servicePort = value
        }
        if let value = dict["TargetPort"] as? Int32 {
            self.targetPort = value
        }
    }
}

public class CreateEdgeContainerAppResponseBody : Tea.TeaModel {
    public var appId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateEdgeContainerAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEdgeContainerAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEdgeContainerAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEdgeContainerAppRecordRequest : Tea.TeaModel {
    public var appId: String?

    public var recordName: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.recordName != nil {
            map["RecordName"] = self.recordName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["RecordName"] as? String {
            self.recordName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class CreateEdgeContainerAppRecordResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateEdgeContainerAppRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEdgeContainerAppRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEdgeContainerAppRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEdgeContainerAppVersionRequest : Tea.TeaModel {
    public class Containers : Tea.TeaModel {
        public class ACRImageInfo : Tea.TeaModel {
            public var domain: String?

            public var instanceId: String?

            public var isEnterpriseRegistry: Bool?

            public var regionId: String?

            public var repoId: String?

            public var repoName: String?

            public var repoNamespace: String?

            public var tag: String?

            public var tagUrl: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.domain != nil {
                    map["Domain"] = self.domain!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.isEnterpriseRegistry != nil {
                    map["IsEnterpriseRegistry"] = self.isEnterpriseRegistry!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.repoId != nil {
                    map["RepoId"] = self.repoId!
                }
                if self.repoName != nil {
                    map["RepoName"] = self.repoName!
                }
                if self.repoNamespace != nil {
                    map["RepoNamespace"] = self.repoNamespace!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.tagUrl != nil {
                    map["TagUrl"] = self.tagUrl!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Domain"] as? String {
                    self.domain = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["IsEnterpriseRegistry"] as? Bool {
                    self.isEnterpriseRegistry = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["RepoId"] as? String {
                    self.repoId = value
                }
                if let value = dict["RepoName"] as? String {
                    self.repoName = value
                }
                if let value = dict["RepoNamespace"] as? String {
                    self.repoNamespace = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["TagUrl"] as? String {
                    self.tagUrl = value
                }
            }
        }
        public class ProbeContent : Tea.TeaModel {
            public var command: String?

            public var failureThreshold: Int32?

            public var host: String?

            public var httpHeaders: String?

            public var initialDelaySeconds: Int32?

            public var path: String?

            public var periodSeconds: Int32?

            public var port: Int32?

            public var scheme: String?

            public var successThreshold: Int32?

            public var timeoutSeconds: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.command != nil {
                    map["Command"] = self.command!
                }
                if self.failureThreshold != nil {
                    map["FailureThreshold"] = self.failureThreshold!
                }
                if self.host != nil {
                    map["Host"] = self.host!
                }
                if self.httpHeaders != nil {
                    map["HttpHeaders"] = self.httpHeaders!
                }
                if self.initialDelaySeconds != nil {
                    map["InitialDelaySeconds"] = self.initialDelaySeconds!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.periodSeconds != nil {
                    map["PeriodSeconds"] = self.periodSeconds!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.scheme != nil {
                    map["Scheme"] = self.scheme!
                }
                if self.successThreshold != nil {
                    map["SuccessThreshold"] = self.successThreshold!
                }
                if self.timeoutSeconds != nil {
                    map["TimeoutSeconds"] = self.timeoutSeconds!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Command"] as? String {
                    self.command = value
                }
                if let value = dict["FailureThreshold"] as? Int32 {
                    self.failureThreshold = value
                }
                if let value = dict["Host"] as? String {
                    self.host = value
                }
                if let value = dict["HttpHeaders"] as? String {
                    self.httpHeaders = value
                }
                if let value = dict["InitialDelaySeconds"] as? Int32 {
                    self.initialDelaySeconds = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["PeriodSeconds"] as? Int32 {
                    self.periodSeconds = value
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["Scheme"] as? String {
                    self.scheme = value
                }
                if let value = dict["SuccessThreshold"] as? Int32 {
                    self.successThreshold = value
                }
                if let value = dict["TimeoutSeconds"] as? Int32 {
                    self.timeoutSeconds = value
                }
            }
        }
        public var ACRImageInfo: CreateEdgeContainerAppVersionRequest.Containers.ACRImageInfo?

        public var args: String?

        public var command: String?

        public var envVariables: String?

        public var image: String?

        public var isACRImage: Bool?

        public var name: String?

        public var postStart: String?

        public var preStop: String?

        public var probeContent: CreateEdgeContainerAppVersionRequest.Containers.ProbeContent?

        public var probeType: String?

        public var spec: String?

        public var storage: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.ACRImageInfo?.validate()
            try self.probeContent?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ACRImageInfo != nil {
                map["ACRImageInfo"] = self.ACRImageInfo?.toMap()
            }
            if self.args != nil {
                map["Args"] = self.args!
            }
            if self.command != nil {
                map["Command"] = self.command!
            }
            if self.envVariables != nil {
                map["EnvVariables"] = self.envVariables!
            }
            if self.image != nil {
                map["Image"] = self.image!
            }
            if self.isACRImage != nil {
                map["IsACRImage"] = self.isACRImage!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.postStart != nil {
                map["PostStart"] = self.postStart!
            }
            if self.preStop != nil {
                map["PreStop"] = self.preStop!
            }
            if self.probeContent != nil {
                map["ProbeContent"] = self.probeContent?.toMap()
            }
            if self.probeType != nil {
                map["ProbeType"] = self.probeType!
            }
            if self.spec != nil {
                map["Spec"] = self.spec!
            }
            if self.storage != nil {
                map["Storage"] = self.storage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ACRImageInfo"] as? [String: Any?] {
                var model = CreateEdgeContainerAppVersionRequest.Containers.ACRImageInfo()
                model.fromMap(value)
                self.ACRImageInfo = model
            }
            if let value = dict["Args"] as? String {
                self.args = value
            }
            if let value = dict["Command"] as? String {
                self.command = value
            }
            if let value = dict["EnvVariables"] as? String {
                self.envVariables = value
            }
            if let value = dict["Image"] as? String {
                self.image = value
            }
            if let value = dict["IsACRImage"] as? Bool {
                self.isACRImage = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PostStart"] as? String {
                self.postStart = value
            }
            if let value = dict["PreStop"] as? String {
                self.preStop = value
            }
            if let value = dict["ProbeContent"] as? [String: Any?] {
                var model = CreateEdgeContainerAppVersionRequest.Containers.ProbeContent()
                model.fromMap(value)
                self.probeContent = model
            }
            if let value = dict["ProbeType"] as? String {
                self.probeType = value
            }
            if let value = dict["Spec"] as? String {
                self.spec = value
            }
            if let value = dict["Storage"] as? String {
                self.storage = value
            }
        }
    }
    public var appId: String?

    public var containers: [CreateEdgeContainerAppVersionRequest.Containers]?

    public var name: String?

    public var remarks: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.containers != nil {
            var tmp : [Any] = []
            for k in self.containers! {
                tmp.append(k.toMap())
            }
            map["Containers"] = tmp
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.remarks != nil {
            map["Remarks"] = self.remarks!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["Containers"] as? [Any?] {
            var tmp : [CreateEdgeContainerAppVersionRequest.Containers] = []
            for v in value {
                if v != nil {
                    var model = CreateEdgeContainerAppVersionRequest.Containers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.containers = tmp
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Remarks"] as? String {
            self.remarks = value
        }
    }
}

public class CreateEdgeContainerAppVersionShrinkRequest : Tea.TeaModel {
    public var appId: String?

    public var containersShrink: String?

    public var name: String?

    public var remarks: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.containersShrink != nil {
            map["Containers"] = self.containersShrink!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.remarks != nil {
            map["Remarks"] = self.remarks!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["Containers"] as? String {
            self.containersShrink = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Remarks"] as? String {
            self.remarks = value
        }
    }
}

public class CreateEdgeContainerAppVersionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var versionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VersionId"] as? String {
            self.versionId = value
        }
    }
}

public class CreateEdgeContainerAppVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEdgeContainerAppVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEdgeContainerAppVersionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateHttpRequestHeaderModificationRuleRequest : Tea.TeaModel {
    public class RequestHeaderModification : Tea.TeaModel {
        public var name: String?

        public var operation: String?

        public var type: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.operation != nil {
                map["Operation"] = self.operation!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Operation"] as? String {
                self.operation = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var requestHeaderModification: [CreateHttpRequestHeaderModificationRuleRequest.RequestHeaderModification]?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestHeaderModification != nil {
            var tmp : [Any] = []
            for k in self.requestHeaderModification! {
                tmp.append(k.toMap())
            }
            map["RequestHeaderModification"] = tmp
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestHeaderModification"] as? [Any?] {
            var tmp : [CreateHttpRequestHeaderModificationRuleRequest.RequestHeaderModification] = []
            for v in value {
                if v != nil {
                    var model = CreateHttpRequestHeaderModificationRuleRequest.RequestHeaderModification()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.requestHeaderModification = tmp
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class CreateHttpRequestHeaderModificationRuleShrinkRequest : Tea.TeaModel {
    public var requestHeaderModificationShrink: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestHeaderModificationShrink != nil {
            map["RequestHeaderModification"] = self.requestHeaderModificationShrink!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestHeaderModification"] as? String {
            self.requestHeaderModificationShrink = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class CreateHttpRequestHeaderModificationRuleResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateHttpRequestHeaderModificationRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateHttpRequestHeaderModificationRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateHttpRequestHeaderModificationRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateHttpResponseHeaderModificationRuleRequest : Tea.TeaModel {
    public class ResponseHeaderModification : Tea.TeaModel {
        public var name: String?

        public var operation: String?

        public var type: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.operation != nil {
                map["Operation"] = self.operation!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Operation"] as? String {
                self.operation = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var responseHeaderModification: [CreateHttpResponseHeaderModificationRuleRequest.ResponseHeaderModification]?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.responseHeaderModification != nil {
            var tmp : [Any] = []
            for k in self.responseHeaderModification! {
                tmp.append(k.toMap())
            }
            map["ResponseHeaderModification"] = tmp
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ResponseHeaderModification"] as? [Any?] {
            var tmp : [CreateHttpResponseHeaderModificationRuleRequest.ResponseHeaderModification] = []
            for v in value {
                if v != nil {
                    var model = CreateHttpResponseHeaderModificationRuleRequest.ResponseHeaderModification()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.responseHeaderModification = tmp
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class CreateHttpResponseHeaderModificationRuleShrinkRequest : Tea.TeaModel {
    public var responseHeaderModificationShrink: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.responseHeaderModificationShrink != nil {
            map["ResponseHeaderModification"] = self.responseHeaderModificationShrink!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ResponseHeaderModification"] as? String {
            self.responseHeaderModificationShrink = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class CreateHttpResponseHeaderModificationRuleResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateHttpResponseHeaderModificationRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateHttpResponseHeaderModificationRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateHttpResponseHeaderModificationRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateHttpsApplicationConfigurationRequest : Tea.TeaModel {
    public var altSvc: String?

    public var altSvcClear: String?

    public var altSvcMa: String?

    public var altSvcPersist: String?

    public var hsts: String?

    public var hstsIncludeSubdomains: String?

    public var hstsMaxAge: String?

    public var hstsPreload: String?

    public var httpsForce: String?

    public var httpsForceCode: String?

    public var httpsNoSniDeny: String?

    public var httpsSniVerify: String?

    public var httpsSniWhitelist: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.altSvc != nil {
            map["AltSvc"] = self.altSvc!
        }
        if self.altSvcClear != nil {
            map["AltSvcClear"] = self.altSvcClear!
        }
        if self.altSvcMa != nil {
            map["AltSvcMa"] = self.altSvcMa!
        }
        if self.altSvcPersist != nil {
            map["AltSvcPersist"] = self.altSvcPersist!
        }
        if self.hsts != nil {
            map["Hsts"] = self.hsts!
        }
        if self.hstsIncludeSubdomains != nil {
            map["HstsIncludeSubdomains"] = self.hstsIncludeSubdomains!
        }
        if self.hstsMaxAge != nil {
            map["HstsMaxAge"] = self.hstsMaxAge!
        }
        if self.hstsPreload != nil {
            map["HstsPreload"] = self.hstsPreload!
        }
        if self.httpsForce != nil {
            map["HttpsForce"] = self.httpsForce!
        }
        if self.httpsForceCode != nil {
            map["HttpsForceCode"] = self.httpsForceCode!
        }
        if self.httpsNoSniDeny != nil {
            map["HttpsNoSniDeny"] = self.httpsNoSniDeny!
        }
        if self.httpsSniVerify != nil {
            map["HttpsSniVerify"] = self.httpsSniVerify!
        }
        if self.httpsSniWhitelist != nil {
            map["HttpsSniWhitelist"] = self.httpsSniWhitelist!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AltSvc"] as? String {
            self.altSvc = value
        }
        if let value = dict["AltSvcClear"] as? String {
            self.altSvcClear = value
        }
        if let value = dict["AltSvcMa"] as? String {
            self.altSvcMa = value
        }
        if let value = dict["AltSvcPersist"] as? String {
            self.altSvcPersist = value
        }
        if let value = dict["Hsts"] as? String {
            self.hsts = value
        }
        if let value = dict["HstsIncludeSubdomains"] as? String {
            self.hstsIncludeSubdomains = value
        }
        if let value = dict["HstsMaxAge"] as? String {
            self.hstsMaxAge = value
        }
        if let value = dict["HstsPreload"] as? String {
            self.hstsPreload = value
        }
        if let value = dict["HttpsForce"] as? String {
            self.httpsForce = value
        }
        if let value = dict["HttpsForceCode"] as? String {
            self.httpsForceCode = value
        }
        if let value = dict["HttpsNoSniDeny"] as? String {
            self.httpsNoSniDeny = value
        }
        if let value = dict["HttpsSniVerify"] as? String {
            self.httpsSniVerify = value
        }
        if let value = dict["HttpsSniWhitelist"] as? String {
            self.httpsSniWhitelist = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class CreateHttpsApplicationConfigurationResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateHttpsApplicationConfigurationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateHttpsApplicationConfigurationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateHttpsApplicationConfigurationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateHttpsBasicConfigurationRequest : Tea.TeaModel {
    public var ciphersuite: String?

    public var ciphersuiteGroup: String?

    public var http2: String?

    public var http3: String?

    public var https: String?

    public var ocspStapling: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var tls10: String?

    public var tls11: String?

    public var tls12: String?

    public var tls13: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ciphersuite != nil {
            map["Ciphersuite"] = self.ciphersuite!
        }
        if self.ciphersuiteGroup != nil {
            map["CiphersuiteGroup"] = self.ciphersuiteGroup!
        }
        if self.http2 != nil {
            map["Http2"] = self.http2!
        }
        if self.http3 != nil {
            map["Http3"] = self.http3!
        }
        if self.https != nil {
            map["Https"] = self.https!
        }
        if self.ocspStapling != nil {
            map["OcspStapling"] = self.ocspStapling!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.tls10 != nil {
            map["Tls10"] = self.tls10!
        }
        if self.tls11 != nil {
            map["Tls11"] = self.tls11!
        }
        if self.tls12 != nil {
            map["Tls12"] = self.tls12!
        }
        if self.tls13 != nil {
            map["Tls13"] = self.tls13!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ciphersuite"] as? String {
            self.ciphersuite = value
        }
        if let value = dict["CiphersuiteGroup"] as? String {
            self.ciphersuiteGroup = value
        }
        if let value = dict["Http2"] as? String {
            self.http2 = value
        }
        if let value = dict["Http3"] as? String {
            self.http3 = value
        }
        if let value = dict["Https"] as? String {
            self.https = value
        }
        if let value = dict["OcspStapling"] as? String {
            self.ocspStapling = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Tls10"] as? String {
            self.tls10 = value
        }
        if let value = dict["Tls11"] as? String {
            self.tls11 = value
        }
        if let value = dict["Tls12"] as? String {
            self.tls12 = value
        }
        if let value = dict["Tls13"] as? String {
            self.tls13 = value
        }
    }
}

public class CreateHttpsBasicConfigurationResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateHttpsBasicConfigurationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateHttpsBasicConfigurationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateHttpsBasicConfigurationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateImageTransformRequest : Tea.TeaModel {
    public var enable: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class CreateImageTransformResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateImageTransformResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateImageTransformResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateImageTransformResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateKvNamespaceRequest : Tea.TeaModel {
    public var description_: String?

    public var namespace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
    }
}

public class CreateKvNamespaceResponseBody : Tea.TeaModel {
    public var description_: String?

    public var namespace: String?

    public var namespaceId: String?

    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.namespaceId != nil {
            map["NamespaceId"] = self.namespaceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["NamespaceId"] as? String {
            self.namespaceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class CreateKvNamespaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateKvNamespaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateKvNamespaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateListRequest : Tea.TeaModel {
    public var description_: String?

    public var items: [String]?

    public var kind: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.items != nil {
            map["Items"] = self.items!
        }
        if self.kind != nil {
            map["Kind"] = self.kind!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Items"] as? [String] {
            self.items = value
        }
        if let value = dict["Kind"] as? String {
            self.kind = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class CreateListShrinkRequest : Tea.TeaModel {
    public var description_: String?

    public var itemsShrink: String?

    public var kind: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.itemsShrink != nil {
            map["Items"] = self.itemsShrink!
        }
        if self.kind != nil {
            map["Kind"] = self.kind!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Items"] as? String {
            self.itemsShrink = value
        }
        if let value = dict["Kind"] as? String {
            self.kind = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class CreateListResponseBody : Tea.TeaModel {
    public var id: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateLoadBalancerRequest : Tea.TeaModel {
    public class AdaptiveRouting : Tea.TeaModel {
        public var failoverAcrossPools: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.failoverAcrossPools != nil {
                map["FailoverAcrossPools"] = self.failoverAcrossPools!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FailoverAcrossPools"] as? Bool {
                self.failoverAcrossPools = value
            }
        }
    }
    public class Monitor : Tea.TeaModel {
        public var consecutiveDown: Int32?

        public var consecutiveUp: Int32?

        public var expectedCodes: String?

        public var followRedirects: Bool?

        public var header: Any?

        public var interval: Int32?

        public var method: String?

        public var path: String?

        public var port: Int32?

        public var timeout: Int32?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.consecutiveDown != nil {
                map["ConsecutiveDown"] = self.consecutiveDown!
            }
            if self.consecutiveUp != nil {
                map["ConsecutiveUp"] = self.consecutiveUp!
            }
            if self.expectedCodes != nil {
                map["ExpectedCodes"] = self.expectedCodes!
            }
            if self.followRedirects != nil {
                map["FollowRedirects"] = self.followRedirects!
            }
            if self.header != nil {
                map["Header"] = self.header!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.method != nil {
                map["Method"] = self.method!
            }
            if self.path != nil {
                map["Path"] = self.path!
            }
            if self.port != nil {
                map["Port"] = self.port!
            }
            if self.timeout != nil {
                map["Timeout"] = self.timeout!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConsecutiveDown"] as? Int32 {
                self.consecutiveDown = value
            }
            if let value = dict["ConsecutiveUp"] as? Int32 {
                self.consecutiveUp = value
            }
            if let value = dict["ExpectedCodes"] as? String {
                self.expectedCodes = value
            }
            if let value = dict["FollowRedirects"] as? Bool {
                self.followRedirects = value
            }
            if let value = dict["Header"] as? Any {
                self.header = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["Method"] as? String {
                self.method = value
            }
            if let value = dict["Path"] as? String {
                self.path = value
            }
            if let value = dict["Port"] as? Int32 {
                self.port = value
            }
            if let value = dict["Timeout"] as? Int32 {
                self.timeout = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class RandomSteering : Tea.TeaModel {
        public var defaultWeight: Int32?

        public var poolWeights: [String: Int32]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.defaultWeight != nil {
                map["DefaultWeight"] = self.defaultWeight!
            }
            if self.poolWeights != nil {
                map["PoolWeights"] = self.poolWeights!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DefaultWeight"] as? Int32 {
                self.defaultWeight = value
            }
            if let value = dict["PoolWeights"] as? [String: Int32] {
                self.poolWeights = value
            }
        }
    }
    public class Rules : Tea.TeaModel {
        public class FixedResponse : Tea.TeaModel {
            public var contentType: String?

            public var location: String?

            public var messageBody: String?

            public var statusCode: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contentType != nil {
                    map["ContentType"] = self.contentType!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.messageBody != nil {
                    map["MessageBody"] = self.messageBody!
                }
                if self.statusCode != nil {
                    map["StatusCode"] = self.statusCode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContentType"] as? String {
                    self.contentType = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["MessageBody"] as? String {
                    self.messageBody = value
                }
                if let value = dict["StatusCode"] as? Int32 {
                    self.statusCode = value
                }
            }
        }
        public var fixedResponse: CreateLoadBalancerRequest.Rules.FixedResponse?

        public var overrides: Any?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var terminates: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.fixedResponse?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fixedResponse != nil {
                map["FixedResponse"] = self.fixedResponse?.toMap()
            }
            if self.overrides != nil {
                map["Overrides"] = self.overrides!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.terminates != nil {
                map["Terminates"] = self.terminates!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FixedResponse"] as? [String: Any?] {
                var model = CreateLoadBalancerRequest.Rules.FixedResponse()
                model.fromMap(value)
                self.fixedResponse = model
            }
            if let value = dict["Overrides"] as? Any {
                self.overrides = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["Terminates"] as? Bool {
                self.terminates = value
            }
        }
    }
    public var adaptiveRouting: CreateLoadBalancerRequest.AdaptiveRouting?

    public var defaultPools: [Int64]?

    public var description_: String?

    public var enabled: Bool?

    public var fallbackPool: Int64?

    public var monitor: CreateLoadBalancerRequest.Monitor?

    public var name: String?

    public var randomSteering: CreateLoadBalancerRequest.RandomSteering?

    public var regionPools: Any?

    public var rules: [CreateLoadBalancerRequest.Rules]?

    public var sessionAffinity: String?

    public var siteId: Int64?

    public var steeringPolicy: String?

    public var subRegionPools: Any?

    public var ttl: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.adaptiveRouting?.validate()
        try self.monitor?.validate()
        try self.randomSteering?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adaptiveRouting != nil {
            map["AdaptiveRouting"] = self.adaptiveRouting?.toMap()
        }
        if self.defaultPools != nil {
            map["DefaultPools"] = self.defaultPools!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.fallbackPool != nil {
            map["FallbackPool"] = self.fallbackPool!
        }
        if self.monitor != nil {
            map["Monitor"] = self.monitor?.toMap()
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.randomSteering != nil {
            map["RandomSteering"] = self.randomSteering?.toMap()
        }
        if self.regionPools != nil {
            map["RegionPools"] = self.regionPools!
        }
        if self.rules != nil {
            var tmp : [Any] = []
            for k in self.rules! {
                tmp.append(k.toMap())
            }
            map["Rules"] = tmp
        }
        if self.sessionAffinity != nil {
            map["SessionAffinity"] = self.sessionAffinity!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.steeringPolicy != nil {
            map["SteeringPolicy"] = self.steeringPolicy!
        }
        if self.subRegionPools != nil {
            map["SubRegionPools"] = self.subRegionPools!
        }
        if self.ttl != nil {
            map["Ttl"] = self.ttl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdaptiveRouting"] as? [String: Any?] {
            var model = CreateLoadBalancerRequest.AdaptiveRouting()
            model.fromMap(value)
            self.adaptiveRouting = model
        }
        if let value = dict["DefaultPools"] as? [Int64] {
            self.defaultPools = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["FallbackPool"] as? Int64 {
            self.fallbackPool = value
        }
        if let value = dict["Monitor"] as? [String: Any?] {
            var model = CreateLoadBalancerRequest.Monitor()
            model.fromMap(value)
            self.monitor = model
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RandomSteering"] as? [String: Any?] {
            var model = CreateLoadBalancerRequest.RandomSteering()
            model.fromMap(value)
            self.randomSteering = model
        }
        if let value = dict["RegionPools"] as? Any {
            self.regionPools = value
        }
        if let value = dict["Rules"] as? [Any?] {
            var tmp : [CreateLoadBalancerRequest.Rules] = []
            for v in value {
                if v != nil {
                    var model = CreateLoadBalancerRequest.Rules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rules = tmp
        }
        if let value = dict["SessionAffinity"] as? String {
            self.sessionAffinity = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SteeringPolicy"] as? String {
            self.steeringPolicy = value
        }
        if let value = dict["SubRegionPools"] as? Any {
            self.subRegionPools = value
        }
        if let value = dict["Ttl"] as? Int32 {
            self.ttl = value
        }
    }
}

public class CreateLoadBalancerShrinkRequest : Tea.TeaModel {
    public var adaptiveRoutingShrink: String?

    public var defaultPoolsShrink: String?

    public var description_: String?

    public var enabled: Bool?

    public var fallbackPool: Int64?

    public var monitorShrink: String?

    public var name: String?

    public var randomSteeringShrink: String?

    public var regionPools: Any?

    public var rulesShrink: String?

    public var sessionAffinity: String?

    public var siteId: Int64?

    public var steeringPolicy: String?

    public var subRegionPools: Any?

    public var ttl: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adaptiveRoutingShrink != nil {
            map["AdaptiveRouting"] = self.adaptiveRoutingShrink!
        }
        if self.defaultPoolsShrink != nil {
            map["DefaultPools"] = self.defaultPoolsShrink!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.fallbackPool != nil {
            map["FallbackPool"] = self.fallbackPool!
        }
        if self.monitorShrink != nil {
            map["Monitor"] = self.monitorShrink!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.randomSteeringShrink != nil {
            map["RandomSteering"] = self.randomSteeringShrink!
        }
        if self.regionPools != nil {
            map["RegionPools"] = self.regionPools!
        }
        if self.rulesShrink != nil {
            map["Rules"] = self.rulesShrink!
        }
        if self.sessionAffinity != nil {
            map["SessionAffinity"] = self.sessionAffinity!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.steeringPolicy != nil {
            map["SteeringPolicy"] = self.steeringPolicy!
        }
        if self.subRegionPools != nil {
            map["SubRegionPools"] = self.subRegionPools!
        }
        if self.ttl != nil {
            map["Ttl"] = self.ttl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdaptiveRouting"] as? String {
            self.adaptiveRoutingShrink = value
        }
        if let value = dict["DefaultPools"] as? String {
            self.defaultPoolsShrink = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["FallbackPool"] as? Int64 {
            self.fallbackPool = value
        }
        if let value = dict["Monitor"] as? String {
            self.monitorShrink = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RandomSteering"] as? String {
            self.randomSteeringShrink = value
        }
        if let value = dict["RegionPools"] as? Any {
            self.regionPools = value
        }
        if let value = dict["Rules"] as? String {
            self.rulesShrink = value
        }
        if let value = dict["SessionAffinity"] as? String {
            self.sessionAffinity = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SteeringPolicy"] as? String {
            self.steeringPolicy = value
        }
        if let value = dict["SubRegionPools"] as? Any {
            self.subRegionPools = value
        }
        if let value = dict["Ttl"] as? Int32 {
            self.ttl = value
        }
    }
}

public class CreateLoadBalancerResponseBody : Tea.TeaModel {
    public var id: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateLoadBalancerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateLoadBalancerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateLoadBalancerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateNetworkOptimizationRequest : Tea.TeaModel {
    public var grpc: String?

    public var http2Origin: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public var smartRouting: String?

    public var uploadMaxFilesize: String?

    public var websocket: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.grpc != nil {
            map["Grpc"] = self.grpc!
        }
        if self.http2Origin != nil {
            map["Http2Origin"] = self.http2Origin!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.smartRouting != nil {
            map["SmartRouting"] = self.smartRouting!
        }
        if self.uploadMaxFilesize != nil {
            map["UploadMaxFilesize"] = self.uploadMaxFilesize!
        }
        if self.websocket != nil {
            map["Websocket"] = self.websocket!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Grpc"] as? String {
            self.grpc = value
        }
        if let value = dict["Http2Origin"] as? String {
            self.http2Origin = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["SmartRouting"] as? String {
            self.smartRouting = value
        }
        if let value = dict["UploadMaxFilesize"] as? String {
            self.uploadMaxFilesize = value
        }
        if let value = dict["Websocket"] as? String {
            self.websocket = value
        }
    }
}

public class CreateNetworkOptimizationResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateNetworkOptimizationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateNetworkOptimizationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateNetworkOptimizationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateOriginPoolRequest : Tea.TeaModel {
    public class Origins : Tea.TeaModel {
        public class AuthConf : Tea.TeaModel {
            public var accessKey: String?

            public var authType: String?

            public var region: String?

            public var secretKey: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accessKey != nil {
                    map["AccessKey"] = self.accessKey!
                }
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.secretKey != nil {
                    map["SecretKey"] = self.secretKey!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccessKey"] as? String {
                    self.accessKey = value
                }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["SecretKey"] as? String {
                    self.secretKey = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public var address: String?

        public var authConf: CreateOriginPoolRequest.Origins.AuthConf?

        public var enabled: Bool?

        public var header: Any?

        public var name: String?

        public var type: String?

        public var weight: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.authConf?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.address != nil {
                map["Address"] = self.address!
            }
            if self.authConf != nil {
                map["AuthConf"] = self.authConf?.toMap()
            }
            if self.enabled != nil {
                map["Enabled"] = self.enabled!
            }
            if self.header != nil {
                map["Header"] = self.header!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.weight != nil {
                map["Weight"] = self.weight!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Address"] as? String {
                self.address = value
            }
            if let value = dict["AuthConf"] as? [String: Any?] {
                var model = CreateOriginPoolRequest.Origins.AuthConf()
                model.fromMap(value)
                self.authConf = model
            }
            if let value = dict["Enabled"] as? Bool {
                self.enabled = value
            }
            if let value = dict["Header"] as? Any {
                self.header = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Weight"] as? Int32 {
                self.weight = value
            }
        }
    }
    public var enabled: Bool?

    public var name: String?

    public var origins: [CreateOriginPoolRequest.Origins]?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.origins != nil {
            var tmp : [Any] = []
            for k in self.origins! {
                tmp.append(k.toMap())
            }
            map["Origins"] = tmp
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Origins"] as? [Any?] {
            var tmp : [CreateOriginPoolRequest.Origins] = []
            for v in value {
                if v != nil {
                    var model = CreateOriginPoolRequest.Origins()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.origins = tmp
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class CreateOriginPoolShrinkRequest : Tea.TeaModel {
    public var enabled: Bool?

    public var name: String?

    public var originsShrink: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.originsShrink != nil {
            map["Origins"] = self.originsShrink!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Origins"] as? String {
            self.originsShrink = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class CreateOriginPoolResponseBody : Tea.TeaModel {
    public var id: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateOriginPoolResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateOriginPoolResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateOriginPoolResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateOriginProtectionRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class CreateOriginProtectionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateOriginProtectionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateOriginProtectionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateOriginProtectionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateOriginRuleRequest : Tea.TeaModel {
    public var dnsRecord: String?

    public var follow302Enable: String?

    public var follow302MaxTries: String?

    public var follow302RetainArgs: String?

    public var follow302RetainHeader: String?

    public var follow302TargetHost: String?

    public var originHost: String?

    public var originHttpPort: String?

    public var originHttpsPort: String?

    public var originMtls: String?

    public var originReadTimeout: String?

    public var originScheme: String?

    public var originSni: String?

    public var originVerify: String?

    public var range: String?

    public var rangeChunkSize: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dnsRecord != nil {
            map["DnsRecord"] = self.dnsRecord!
        }
        if self.follow302Enable != nil {
            map["Follow302Enable"] = self.follow302Enable!
        }
        if self.follow302MaxTries != nil {
            map["Follow302MaxTries"] = self.follow302MaxTries!
        }
        if self.follow302RetainArgs != nil {
            map["Follow302RetainArgs"] = self.follow302RetainArgs!
        }
        if self.follow302RetainHeader != nil {
            map["Follow302RetainHeader"] = self.follow302RetainHeader!
        }
        if self.follow302TargetHost != nil {
            map["Follow302TargetHost"] = self.follow302TargetHost!
        }
        if self.originHost != nil {
            map["OriginHost"] = self.originHost!
        }
        if self.originHttpPort != nil {
            map["OriginHttpPort"] = self.originHttpPort!
        }
        if self.originHttpsPort != nil {
            map["OriginHttpsPort"] = self.originHttpsPort!
        }
        if self.originMtls != nil {
            map["OriginMtls"] = self.originMtls!
        }
        if self.originReadTimeout != nil {
            map["OriginReadTimeout"] = self.originReadTimeout!
        }
        if self.originScheme != nil {
            map["OriginScheme"] = self.originScheme!
        }
        if self.originSni != nil {
            map["OriginSni"] = self.originSni!
        }
        if self.originVerify != nil {
            map["OriginVerify"] = self.originVerify!
        }
        if self.range != nil {
            map["Range"] = self.range!
        }
        if self.rangeChunkSize != nil {
            map["RangeChunkSize"] = self.rangeChunkSize!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DnsRecord"] as? String {
            self.dnsRecord = value
        }
        if let value = dict["Follow302Enable"] as? String {
            self.follow302Enable = value
        }
        if let value = dict["Follow302MaxTries"] as? String {
            self.follow302MaxTries = value
        }
        if let value = dict["Follow302RetainArgs"] as? String {
            self.follow302RetainArgs = value
        }
        if let value = dict["Follow302RetainHeader"] as? String {
            self.follow302RetainHeader = value
        }
        if let value = dict["Follow302TargetHost"] as? String {
            self.follow302TargetHost = value
        }
        if let value = dict["OriginHost"] as? String {
            self.originHost = value
        }
        if let value = dict["OriginHttpPort"] as? String {
            self.originHttpPort = value
        }
        if let value = dict["OriginHttpsPort"] as? String {
            self.originHttpsPort = value
        }
        if let value = dict["OriginMtls"] as? String {
            self.originMtls = value
        }
        if let value = dict["OriginReadTimeout"] as? String {
            self.originReadTimeout = value
        }
        if let value = dict["OriginScheme"] as? String {
            self.originScheme = value
        }
        if let value = dict["OriginSni"] as? String {
            self.originSni = value
        }
        if let value = dict["OriginVerify"] as? String {
            self.originVerify = value
        }
        if let value = dict["Range"] as? String {
            self.range = value
        }
        if let value = dict["RangeChunkSize"] as? String {
            self.rangeChunkSize = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class CreateOriginRuleResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateOriginRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateOriginRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateOriginRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePageRequest : Tea.TeaModel {
    public var content: String?

    public var contentType: String?

    public var description_: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.contentType != nil {
            map["ContentType"] = self.contentType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["ContentType"] as? String {
            self.contentType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class CreatePageResponseBody : Tea.TeaModel {
    public var id: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreatePageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRecordRequest : Tea.TeaModel {
    public class AuthConf : Tea.TeaModel {
        public var accessKey: String?

        public var authType: String?

        public var region: String?

        public var secretKey: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessKey != nil {
                map["AccessKey"] = self.accessKey!
            }
            if self.authType != nil {
                map["AuthType"] = self.authType!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.secretKey != nil {
                map["SecretKey"] = self.secretKey!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessKey"] as? String {
                self.accessKey = value
            }
            if let value = dict["AuthType"] as? String {
                self.authType = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["SecretKey"] as? String {
                self.secretKey = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public class Data : Tea.TeaModel {
        public var algorithm: Int32?

        public var certificate: String?

        public var fingerprint: String?

        public var flag: Int32?

        public var keyTag: Int32?

        public var matchingType: Int32?

        public var port: Int32?

        public var priority: Int32?

        public var selector: Int32?

        public var tag: String?

        public var type: Int32?

        public var usage: Int32?

        public var value: String?

        public var weight: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.algorithm != nil {
                map["Algorithm"] = self.algorithm!
            }
            if self.certificate != nil {
                map["Certificate"] = self.certificate!
            }
            if self.fingerprint != nil {
                map["Fingerprint"] = self.fingerprint!
            }
            if self.flag != nil {
                map["Flag"] = self.flag!
            }
            if self.keyTag != nil {
                map["KeyTag"] = self.keyTag!
            }
            if self.matchingType != nil {
                map["MatchingType"] = self.matchingType!
            }
            if self.port != nil {
                map["Port"] = self.port!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.selector != nil {
                map["Selector"] = self.selector!
            }
            if self.tag != nil {
                map["Tag"] = self.tag!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.usage != nil {
                map["Usage"] = self.usage!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            if self.weight != nil {
                map["Weight"] = self.weight!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Algorithm"] as? Int32 {
                self.algorithm = value
            }
            if let value = dict["Certificate"] as? String {
                self.certificate = value
            }
            if let value = dict["Fingerprint"] as? String {
                self.fingerprint = value
            }
            if let value = dict["Flag"] as? Int32 {
                self.flag = value
            }
            if let value = dict["KeyTag"] as? Int32 {
                self.keyTag = value
            }
            if let value = dict["MatchingType"] as? Int32 {
                self.matchingType = value
            }
            if let value = dict["Port"] as? Int32 {
                self.port = value
            }
            if let value = dict["Priority"] as? Int32 {
                self.priority = value
            }
            if let value = dict["Selector"] as? Int32 {
                self.selector = value
            }
            if let value = dict["Tag"] as? String {
                self.tag = value
            }
            if let value = dict["Type"] as? Int32 {
                self.type = value
            }
            if let value = dict["Usage"] as? Int32 {
                self.usage = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
            if let value = dict["Weight"] as? Int32 {
                self.weight = value
            }
        }
    }
    public var authConf: CreateRecordRequest.AuthConf?

    public var bizName: String?

    public var comment: String?

    public var data: CreateRecordRequest.Data?

    public var hostPolicy: String?

    public var proxied: Bool?

    public var recordName: String?

    public var siteId: Int64?

    public var sourceType: String?

    public var ttl: Int32?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.authConf?.validate()
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authConf != nil {
            map["AuthConf"] = self.authConf?.toMap()
        }
        if self.bizName != nil {
            map["BizName"] = self.bizName!
        }
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.hostPolicy != nil {
            map["HostPolicy"] = self.hostPolicy!
        }
        if self.proxied != nil {
            map["Proxied"] = self.proxied!
        }
        if self.recordName != nil {
            map["RecordName"] = self.recordName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.sourceType != nil {
            map["SourceType"] = self.sourceType!
        }
        if self.ttl != nil {
            map["Ttl"] = self.ttl!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthConf"] as? [String: Any?] {
            var model = CreateRecordRequest.AuthConf()
            model.fromMap(value)
            self.authConf = model
        }
        if let value = dict["BizName"] as? String {
            self.bizName = value
        }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateRecordRequest.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HostPolicy"] as? String {
            self.hostPolicy = value
        }
        if let value = dict["Proxied"] as? Bool {
            self.proxied = value
        }
        if let value = dict["RecordName"] as? String {
            self.recordName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SourceType"] as? String {
            self.sourceType = value
        }
        if let value = dict["Ttl"] as? Int32 {
            self.ttl = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreateRecordShrinkRequest : Tea.TeaModel {
    public var authConfShrink: String?

    public var bizName: String?

    public var comment: String?

    public var dataShrink: String?

    public var hostPolicy: String?

    public var proxied: Bool?

    public var recordName: String?

    public var siteId: Int64?

    public var sourceType: String?

    public var ttl: Int32?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authConfShrink != nil {
            map["AuthConf"] = self.authConfShrink!
        }
        if self.bizName != nil {
            map["BizName"] = self.bizName!
        }
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.dataShrink != nil {
            map["Data"] = self.dataShrink!
        }
        if self.hostPolicy != nil {
            map["HostPolicy"] = self.hostPolicy!
        }
        if self.proxied != nil {
            map["Proxied"] = self.proxied!
        }
        if self.recordName != nil {
            map["RecordName"] = self.recordName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.sourceType != nil {
            map["SourceType"] = self.sourceType!
        }
        if self.ttl != nil {
            map["Ttl"] = self.ttl!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthConf"] as? String {
            self.authConfShrink = value
        }
        if let value = dict["BizName"] as? String {
            self.bizName = value
        }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["Data"] as? String {
            self.dataShrink = value
        }
        if let value = dict["HostPolicy"] as? String {
            self.hostPolicy = value
        }
        if let value = dict["Proxied"] as? Bool {
            self.proxied = value
        }
        if let value = dict["RecordName"] as? String {
            self.recordName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SourceType"] as? String {
            self.sourceType = value
        }
        if let value = dict["Ttl"] as? Int32 {
            self.ttl = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreateRecordResponseBody : Tea.TeaModel {
    public var recordId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.recordId != nil {
            map["RecordId"] = self.recordId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RecordId"] as? Int64 {
            self.recordId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRedirectRuleRequest : Tea.TeaModel {
    public var reserveQueryString: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public var statusCode: String?

    public var targetUrl: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.reserveQueryString != nil {
            map["ReserveQueryString"] = self.reserveQueryString!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.statusCode != nil {
            map["StatusCode"] = self.statusCode!
        }
        if self.targetUrl != nil {
            map["TargetUrl"] = self.targetUrl!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ReserveQueryString"] as? String {
            self.reserveQueryString = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["StatusCode"] as? String {
            self.statusCode = value
        }
        if let value = dict["TargetUrl"] as? String {
            self.targetUrl = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreateRedirectRuleResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateRedirectRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRedirectRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRedirectRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRewriteUrlRuleRequest : Tea.TeaModel {
    public var queryString: String?

    public var rewriteQueryStringType: String?

    public var rewriteUriType: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public var uri: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.queryString != nil {
            map["QueryString"] = self.queryString!
        }
        if self.rewriteQueryStringType != nil {
            map["RewriteQueryStringType"] = self.rewriteQueryStringType!
        }
        if self.rewriteUriType != nil {
            map["RewriteUriType"] = self.rewriteUriType!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.uri != nil {
            map["Uri"] = self.uri!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["QueryString"] as? String {
            self.queryString = value
        }
        if let value = dict["RewriteQueryStringType"] as? String {
            self.rewriteQueryStringType = value
        }
        if let value = dict["RewriteUriType"] as? String {
            self.rewriteUriType = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["Uri"] as? String {
            self.uri = value
        }
    }
}

public class CreateRewriteUrlRuleResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateRewriteUrlRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRewriteUrlRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRewriteUrlRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRoutineRequest : Tea.TeaModel {
    public var description_: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class CreateRoutineResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class CreateRoutineResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRoutineResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRoutineResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRoutineRelatedRecordRequest : Tea.TeaModel {
    public var name: String?

    public var recordName: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.recordName != nil {
            map["RecordName"] = self.recordName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RecordName"] as? String {
            self.recordName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class CreateRoutineRelatedRecordResponseBody : Tea.TeaModel {
    public var recordId: Int64?

    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.recordId != nil {
            map["RecordId"] = self.recordId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RecordId"] as? Int64 {
            self.recordId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class CreateRoutineRelatedRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRoutineRelatedRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRoutineRelatedRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRoutineRouteRequest : Tea.TeaModel {
    public var bypass: String?

    public var routeEnable: String?

    public var routeName: String?

    public var routineName: String?

    public var rule: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bypass != nil {
            map["Bypass"] = self.bypass!
        }
        if self.routeEnable != nil {
            map["RouteEnable"] = self.routeEnable!
        }
        if self.routeName != nil {
            map["RouteName"] = self.routeName!
        }
        if self.routineName != nil {
            map["RoutineName"] = self.routineName!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Bypass"] as? String {
            self.bypass = value
        }
        if let value = dict["RouteEnable"] as? String {
            self.routeEnable = value
        }
        if let value = dict["RouteName"] as? String {
            self.routeName = value
        }
        if let value = dict["RoutineName"] as? String {
            self.routineName = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class CreateRoutineRouteResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateRoutineRouteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRoutineRouteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRoutineRouteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateScheduledPreloadExecutionsRequest : Tea.TeaModel {
    public class Executions : Tea.TeaModel {
        public var endTime: String?

        public var interval: Int32?

        public var sliceLen: Int32?

        public var startTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.sliceLen != nil {
                map["SliceLen"] = self.sliceLen!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["SliceLen"] as? Int32 {
                self.sliceLen = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
        }
    }
    public var executions: [CreateScheduledPreloadExecutionsRequest.Executions]?

    public var id: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.executions != nil {
            var tmp : [Any] = []
            for k in self.executions! {
                tmp.append(k.toMap())
            }
            map["Executions"] = tmp
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Executions"] as? [Any?] {
            var tmp : [CreateScheduledPreloadExecutionsRequest.Executions] = []
            for v in value {
                if v != nil {
                    var model = CreateScheduledPreloadExecutionsRequest.Executions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.executions = tmp
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
    }
}

public class CreateScheduledPreloadExecutionsShrinkRequest : Tea.TeaModel {
    public var executionsShrink: String?

    public var id: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.executionsShrink != nil {
            map["Executions"] = self.executionsShrink!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Executions"] as? String {
            self.executionsShrink = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
    }
}

public class CreateScheduledPreloadExecutionsResponseBody : Tea.TeaModel {
    public class FailedExecutions : Tea.TeaModel {
        public var aliUid: String?

        public var endTime: String?

        public var id: String?

        public var interval: Int32?

        public var jobId: String?

        public var sliceLen: Int32?

        public var startTime: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliUid != nil {
                map["AliUid"] = self.aliUid!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.sliceLen != nil {
                map["SliceLen"] = self.sliceLen!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AliUid"] as? String {
                self.aliUid = value
            }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["SliceLen"] as? Int32 {
                self.sliceLen = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public class SuccessExecutions : Tea.TeaModel {
        public var aliUid: String?

        public var endTime: String?

        public var id: String?

        public var interval: Int32?

        public var jobId: String?

        public var sliceLen: Int32?

        public var startTime: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliUid != nil {
                map["AliUid"] = self.aliUid!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.sliceLen != nil {
                map["SliceLen"] = self.sliceLen!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AliUid"] as? String {
                self.aliUid = value
            }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["SliceLen"] as? Int32 {
                self.sliceLen = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var failedExecutions: [CreateScheduledPreloadExecutionsResponseBody.FailedExecutions]?

    public var failedMessages: [String]?

    public var requestId: String?

    public var successCount: Int32?

    public var successExecutions: [CreateScheduledPreloadExecutionsResponseBody.SuccessExecutions]?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failedExecutions != nil {
            var tmp : [Any] = []
            for k in self.failedExecutions! {
                tmp.append(k.toMap())
            }
            map["FailedExecutions"] = tmp
        }
        if self.failedMessages != nil {
            map["FailedMessages"] = self.failedMessages!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.successCount != nil {
            map["SuccessCount"] = self.successCount!
        }
        if self.successExecutions != nil {
            var tmp : [Any] = []
            for k in self.successExecutions! {
                tmp.append(k.toMap())
            }
            map["SuccessExecutions"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FailedExecutions"] as? [Any?] {
            var tmp : [CreateScheduledPreloadExecutionsResponseBody.FailedExecutions] = []
            for v in value {
                if v != nil {
                    var model = CreateScheduledPreloadExecutionsResponseBody.FailedExecutions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.failedExecutions = tmp
        }
        if let value = dict["FailedMessages"] as? [String] {
            self.failedMessages = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SuccessCount"] as? Int32 {
            self.successCount = value
        }
        if let value = dict["SuccessExecutions"] as? [Any?] {
            var tmp : [CreateScheduledPreloadExecutionsResponseBody.SuccessExecutions] = []
            for v in value {
                if v != nil {
                    var model = CreateScheduledPreloadExecutionsResponseBody.SuccessExecutions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.successExecutions = tmp
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class CreateScheduledPreloadExecutionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateScheduledPreloadExecutionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateScheduledPreloadExecutionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateScheduledPreloadJobRequest : Tea.TeaModel {
    public var insertWay: String?

    public var name: String?

    public var ossUrl: String?

    public var siteId: Int64?

    public var urlList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.insertWay != nil {
            map["InsertWay"] = self.insertWay!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.ossUrl != nil {
            map["OssUrl"] = self.ossUrl!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.urlList != nil {
            map["UrlList"] = self.urlList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InsertWay"] as? String {
            self.insertWay = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OssUrl"] as? String {
            self.ossUrl = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["UrlList"] as? String {
            self.urlList = value
        }
    }
}

public class CreateScheduledPreloadJobResponseBody : Tea.TeaModel {
    public var aliUid: String?

    public var createdAt: String?

    public var domains: String?

    public var errorInfo: String?

    public var failedFileOss: String?

    public var fileId: String?

    public var id: String?

    public var insertWay: String?

    public var name: String?

    public var requestId: String?

    public var siteId: Int64?

    public var taskSubmitted: Int32?

    public var taskType: String?

    public var urlCount: Int32?

    public var urlSubmitted: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliUid != nil {
            map["AliUid"] = self.aliUid!
        }
        if self.createdAt != nil {
            map["CreatedAt"] = self.createdAt!
        }
        if self.domains != nil {
            map["Domains"] = self.domains!
        }
        if self.errorInfo != nil {
            map["ErrorInfo"] = self.errorInfo!
        }
        if self.failedFileOss != nil {
            map["FailedFileOss"] = self.failedFileOss!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.insertWay != nil {
            map["InsertWay"] = self.insertWay!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.taskSubmitted != nil {
            map["TaskSubmitted"] = self.taskSubmitted!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.urlCount != nil {
            map["UrlCount"] = self.urlCount!
        }
        if self.urlSubmitted != nil {
            map["UrlSubmitted"] = self.urlSubmitted!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliUid"] as? String {
            self.aliUid = value
        }
        if let value = dict["CreatedAt"] as? String {
            self.createdAt = value
        }
        if let value = dict["Domains"] as? String {
            self.domains = value
        }
        if let value = dict["ErrorInfo"] as? String {
            self.errorInfo = value
        }
        if let value = dict["FailedFileOss"] as? String {
            self.failedFileOss = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["InsertWay"] as? String {
            self.insertWay = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["TaskSubmitted"] as? Int32 {
            self.taskSubmitted = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
        if let value = dict["UrlCount"] as? Int32 {
            self.urlCount = value
        }
        if let value = dict["UrlSubmitted"] as? Int32 {
            self.urlSubmitted = value
        }
    }
}

public class CreateScheduledPreloadJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateScheduledPreloadJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateScheduledPreloadJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSiteRequest : Tea.TeaModel {
    public var accessType: String?

    public var coverage: String?

    public var instanceId: String?

    public var resourceGroupId: String?

    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessType != nil {
            map["AccessType"] = self.accessType!
        }
        if self.coverage != nil {
            map["Coverage"] = self.coverage!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessType"] as? String {
            self.accessType = value
        }
        if let value = dict["Coverage"] as? String {
            self.coverage = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class CreateSiteResponseBody : Tea.TeaModel {
    public var nameServerList: String?

    public var requestId: String?

    public var siteId: Int64?

    public var verifyCode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nameServerList != nil {
            map["NameServerList"] = self.nameServerList!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.verifyCode != nil {
            map["VerifyCode"] = self.verifyCode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NameServerList"] as? String {
            self.nameServerList = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["VerifyCode"] as? String {
            self.verifyCode = value
        }
    }
}

public class CreateSiteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSiteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSiteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSiteCustomLogRequest : Tea.TeaModel {
    public var cookies: [String]?

    public var requestHeaders: [String]?

    public var responseHeaders: [String]?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cookies != nil {
            map["Cookies"] = self.cookies!
        }
        if self.requestHeaders != nil {
            map["RequestHeaders"] = self.requestHeaders!
        }
        if self.responseHeaders != nil {
            map["ResponseHeaders"] = self.responseHeaders!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Cookies"] as? [String] {
            self.cookies = value
        }
        if let value = dict["RequestHeaders"] as? [String] {
            self.requestHeaders = value
        }
        if let value = dict["ResponseHeaders"] as? [String] {
            self.responseHeaders = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class CreateSiteCustomLogShrinkRequest : Tea.TeaModel {
    public var cookiesShrink: String?

    public var requestHeadersShrink: String?

    public var responseHeadersShrink: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cookiesShrink != nil {
            map["Cookies"] = self.cookiesShrink!
        }
        if self.requestHeadersShrink != nil {
            map["RequestHeaders"] = self.requestHeadersShrink!
        }
        if self.responseHeadersShrink != nil {
            map["ResponseHeaders"] = self.responseHeadersShrink!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Cookies"] as? String {
            self.cookiesShrink = value
        }
        if let value = dict["RequestHeaders"] as? String {
            self.requestHeadersShrink = value
        }
        if let value = dict["ResponseHeaders"] as? String {
            self.responseHeadersShrink = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class CreateSiteCustomLogResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSiteCustomLogResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSiteCustomLogResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSiteCustomLogResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSiteDeliveryTaskRequest : Tea.TeaModel {
    public class HttpDelivery : Tea.TeaModel {
        public class StandardAuthParam : Tea.TeaModel {
            public var expiredTime: Int32?

            public var privateKey: String?

            public var urlPath: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.expiredTime != nil {
                    map["ExpiredTime"] = self.expiredTime!
                }
                if self.privateKey != nil {
                    map["PrivateKey"] = self.privateKey!
                }
                if self.urlPath != nil {
                    map["UrlPath"] = self.urlPath!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ExpiredTime"] as? Int32 {
                    self.expiredTime = value
                }
                if let value = dict["PrivateKey"] as? String {
                    self.privateKey = value
                }
                if let value = dict["UrlPath"] as? String {
                    self.urlPath = value
                }
            }
        }
        public var compress: String?

        public var destUrl: String?

        public var headerParam: [String: HttpDeliveryHeaderParamValue]?

        public var logBodyPrefix: String?

        public var logBodySuffix: String?

        public var maxBatchMB: Int64?

        public var maxBatchSize: Int64?

        public var maxRetry: Int64?

        public var queryParam: [String: HttpDeliveryQueryParamValue]?

        public var standardAuthOn: Bool?

        public var standardAuthParam: CreateSiteDeliveryTaskRequest.HttpDelivery.StandardAuthParam?

        public var transformTimeout: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.standardAuthParam?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.compress != nil {
                map["Compress"] = self.compress!
            }
            if self.destUrl != nil {
                map["DestUrl"] = self.destUrl!
            }
            if self.headerParam != nil {
                var tmp : [String: Any] = [:]
                for (k, v) in self.headerParam! {
                    tmp[k] = v.toMap()
                }
                map["HeaderParam"] = tmp
            }
            if self.logBodyPrefix != nil {
                map["LogBodyPrefix"] = self.logBodyPrefix!
            }
            if self.logBodySuffix != nil {
                map["LogBodySuffix"] = self.logBodySuffix!
            }
            if self.maxBatchMB != nil {
                map["MaxBatchMB"] = self.maxBatchMB!
            }
            if self.maxBatchSize != nil {
                map["MaxBatchSize"] = self.maxBatchSize!
            }
            if self.maxRetry != nil {
                map["MaxRetry"] = self.maxRetry!
            }
            if self.queryParam != nil {
                var tmp : [String: Any] = [:]
                for (k, v) in self.queryParam! {
                    tmp[k] = v.toMap()
                }
                map["QueryParam"] = tmp
            }
            if self.standardAuthOn != nil {
                map["StandardAuthOn"] = self.standardAuthOn!
            }
            if self.standardAuthParam != nil {
                map["StandardAuthParam"] = self.standardAuthParam?.toMap()
            }
            if self.transformTimeout != nil {
                map["TransformTimeout"] = self.transformTimeout!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Compress"] as? String {
                self.compress = value
            }
            if let value = dict["DestUrl"] as? String {
                self.destUrl = value
            }
            if let value = dict["HeaderParam"] as? [String: Any?] {
                var tmp : [String: HttpDeliveryHeaderParamValue] = [:]
                for (k, v) in value {
                    if v != nil {
                        var model = HttpDeliveryHeaderParamValue()
                        model.fromMap(v as? [String: Any?])
                        tmp[k] = model
                    }
                }
                self.headerParam = tmp
            }
            if let value = dict["LogBodyPrefix"] as? String {
                self.logBodyPrefix = value
            }
            if let value = dict["LogBodySuffix"] as? String {
                self.logBodySuffix = value
            }
            if let value = dict["MaxBatchMB"] as? Int64 {
                self.maxBatchMB = value
            }
            if let value = dict["MaxBatchSize"] as? Int64 {
                self.maxBatchSize = value
            }
            if let value = dict["MaxRetry"] as? Int64 {
                self.maxRetry = value
            }
            if let value = dict["QueryParam"] as? [String: Any?] {
                var tmp : [String: HttpDeliveryQueryParamValue] = [:]
                for (k, v) in value {
                    if v != nil {
                        var model = HttpDeliveryQueryParamValue()
                        model.fromMap(v as? [String: Any?])
                        tmp[k] = model
                    }
                }
                self.queryParam = tmp
            }
            if let value = dict["StandardAuthOn"] as? Bool {
                self.standardAuthOn = value
            }
            if let value = dict["StandardAuthParam"] as? [String: Any?] {
                var model = CreateSiteDeliveryTaskRequest.HttpDelivery.StandardAuthParam()
                model.fromMap(value)
                self.standardAuthParam = model
            }
            if let value = dict["TransformTimeout"] as? Int64 {
                self.transformTimeout = value
            }
        }
    }
    public class KafkaDelivery : Tea.TeaModel {
        public var balancer: String?

        public var brokers: [String]?

        public var compress: String?

        public var machanismType: String?

        public var password: String?

        public var topic: String?

        public var userAuth: Bool?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.balancer != nil {
                map["Balancer"] = self.balancer!
            }
            if self.brokers != nil {
                map["Brokers"] = self.brokers!
            }
            if self.compress != nil {
                map["Compress"] = self.compress!
            }
            if self.machanismType != nil {
                map["MachanismType"] = self.machanismType!
            }
            if self.password != nil {
                map["Password"] = self.password!
            }
            if self.topic != nil {
                map["Topic"] = self.topic!
            }
            if self.userAuth != nil {
                map["UserAuth"] = self.userAuth!
            }
            if self.userName != nil {
                map["UserName"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Balancer"] as? String {
                self.balancer = value
            }
            if let value = dict["Brokers"] as? [String] {
                self.brokers = value
            }
            if let value = dict["Compress"] as? String {
                self.compress = value
            }
            if let value = dict["MachanismType"] as? String {
                self.machanismType = value
            }
            if let value = dict["Password"] as? String {
                self.password = value
            }
            if let value = dict["Topic"] as? String {
                self.topic = value
            }
            if let value = dict["UserAuth"] as? Bool {
                self.userAuth = value
            }
            if let value = dict["UserName"] as? String {
                self.userName = value
            }
        }
    }
    public class OssDelivery : Tea.TeaModel {
        public var aliuid: String?

        public var bucketName: String?

        public var prefixPath: String?

        public var region: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliuid != nil {
                map["Aliuid"] = self.aliuid!
            }
            if self.bucketName != nil {
                map["BucketName"] = self.bucketName!
            }
            if self.prefixPath != nil {
                map["PrefixPath"] = self.prefixPath!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Aliuid"] as? String {
                self.aliuid = value
            }
            if let value = dict["BucketName"] as? String {
                self.bucketName = value
            }
            if let value = dict["PrefixPath"] as? String {
                self.prefixPath = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
        }
    }
    public class S3Delivery : Tea.TeaModel {
        public var accessKey: String?

        public var bucketPath: String?

        public var endpoint: String?

        public var prefixPath: String?

        public var region: String?

        public var s3Cmpt: Bool?

        public var secretKey: String?

        public var serverSideEncryption: Bool?

        public var vertifyType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessKey != nil {
                map["AccessKey"] = self.accessKey!
            }
            if self.bucketPath != nil {
                map["BucketPath"] = self.bucketPath!
            }
            if self.endpoint != nil {
                map["Endpoint"] = self.endpoint!
            }
            if self.prefixPath != nil {
                map["PrefixPath"] = self.prefixPath!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.s3Cmpt != nil {
                map["S3Cmpt"] = self.s3Cmpt!
            }
            if self.secretKey != nil {
                map["SecretKey"] = self.secretKey!
            }
            if self.serverSideEncryption != nil {
                map["ServerSideEncryption"] = self.serverSideEncryption!
            }
            if self.vertifyType != nil {
                map["VertifyType"] = self.vertifyType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessKey"] as? String {
                self.accessKey = value
            }
            if let value = dict["BucketPath"] as? String {
                self.bucketPath = value
            }
            if let value = dict["Endpoint"] as? String {
                self.endpoint = value
            }
            if let value = dict["PrefixPath"] as? String {
                self.prefixPath = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["S3Cmpt"] as? Bool {
                self.s3Cmpt = value
            }
            if let value = dict["SecretKey"] as? String {
                self.secretKey = value
            }
            if let value = dict["ServerSideEncryption"] as? Bool {
                self.serverSideEncryption = value
            }
            if let value = dict["VertifyType"] as? String {
                self.vertifyType = value
            }
        }
    }
    public class SlsDelivery : Tea.TeaModel {
        public var SLSLogStore: String?

        public var SLSProject: String?

        public var SLSRegion: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.SLSLogStore != nil {
                map["SLSLogStore"] = self.SLSLogStore!
            }
            if self.SLSProject != nil {
                map["SLSProject"] = self.SLSProject!
            }
            if self.SLSRegion != nil {
                map["SLSRegion"] = self.SLSRegion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SLSLogStore"] as? String {
                self.SLSLogStore = value
            }
            if let value = dict["SLSProject"] as? String {
                self.SLSProject = value
            }
            if let value = dict["SLSRegion"] as? String {
                self.SLSRegion = value
            }
        }
    }
    public var businessType: String?

    public var dataCenter: String?

    public var deliveryType: String?

    public var discardRate: Double?

    public var fieldName: String?

    public var httpDelivery: CreateSiteDeliveryTaskRequest.HttpDelivery?

    public var kafkaDelivery: CreateSiteDeliveryTaskRequest.KafkaDelivery?

    public var ossDelivery: CreateSiteDeliveryTaskRequest.OssDelivery?

    public var s3Delivery: CreateSiteDeliveryTaskRequest.S3Delivery?

    public var siteId: Int64?

    public var slsDelivery: CreateSiteDeliveryTaskRequest.SlsDelivery?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.httpDelivery?.validate()
        try self.kafkaDelivery?.validate()
        try self.ossDelivery?.validate()
        try self.s3Delivery?.validate()
        try self.slsDelivery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.dataCenter != nil {
            map["DataCenter"] = self.dataCenter!
        }
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.discardRate != nil {
            map["DiscardRate"] = self.discardRate!
        }
        if self.fieldName != nil {
            map["FieldName"] = self.fieldName!
        }
        if self.httpDelivery != nil {
            map["HttpDelivery"] = self.httpDelivery?.toMap()
        }
        if self.kafkaDelivery != nil {
            map["KafkaDelivery"] = self.kafkaDelivery?.toMap()
        }
        if self.ossDelivery != nil {
            map["OssDelivery"] = self.ossDelivery?.toMap()
        }
        if self.s3Delivery != nil {
            map["S3Delivery"] = self.s3Delivery?.toMap()
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.slsDelivery != nil {
            map["SlsDelivery"] = self.slsDelivery?.toMap()
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["DataCenter"] as? String {
            self.dataCenter = value
        }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["DiscardRate"] as? Double {
            self.discardRate = value
        }
        if let value = dict["FieldName"] as? String {
            self.fieldName = value
        }
        if let value = dict["HttpDelivery"] as? [String: Any?] {
            var model = CreateSiteDeliveryTaskRequest.HttpDelivery()
            model.fromMap(value)
            self.httpDelivery = model
        }
        if let value = dict["KafkaDelivery"] as? [String: Any?] {
            var model = CreateSiteDeliveryTaskRequest.KafkaDelivery()
            model.fromMap(value)
            self.kafkaDelivery = model
        }
        if let value = dict["OssDelivery"] as? [String: Any?] {
            var model = CreateSiteDeliveryTaskRequest.OssDelivery()
            model.fromMap(value)
            self.ossDelivery = model
        }
        if let value = dict["S3Delivery"] as? [String: Any?] {
            var model = CreateSiteDeliveryTaskRequest.S3Delivery()
            model.fromMap(value)
            self.s3Delivery = model
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SlsDelivery"] as? [String: Any?] {
            var model = CreateSiteDeliveryTaskRequest.SlsDelivery()
            model.fromMap(value)
            self.slsDelivery = model
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class CreateSiteDeliveryTaskShrinkRequest : Tea.TeaModel {
    public var businessType: String?

    public var dataCenter: String?

    public var deliveryType: String?

    public var discardRate: Double?

    public var fieldName: String?

    public var httpDeliveryShrink: String?

    public var kafkaDeliveryShrink: String?

    public var ossDeliveryShrink: String?

    public var s3DeliveryShrink: String?

    public var siteId: Int64?

    public var slsDeliveryShrink: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.dataCenter != nil {
            map["DataCenter"] = self.dataCenter!
        }
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.discardRate != nil {
            map["DiscardRate"] = self.discardRate!
        }
        if self.fieldName != nil {
            map["FieldName"] = self.fieldName!
        }
        if self.httpDeliveryShrink != nil {
            map["HttpDelivery"] = self.httpDeliveryShrink!
        }
        if self.kafkaDeliveryShrink != nil {
            map["KafkaDelivery"] = self.kafkaDeliveryShrink!
        }
        if self.ossDeliveryShrink != nil {
            map["OssDelivery"] = self.ossDeliveryShrink!
        }
        if self.s3DeliveryShrink != nil {
            map["S3Delivery"] = self.s3DeliveryShrink!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.slsDeliveryShrink != nil {
            map["SlsDelivery"] = self.slsDeliveryShrink!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["DataCenter"] as? String {
            self.dataCenter = value
        }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["DiscardRate"] as? Double {
            self.discardRate = value
        }
        if let value = dict["FieldName"] as? String {
            self.fieldName = value
        }
        if let value = dict["HttpDelivery"] as? String {
            self.httpDeliveryShrink = value
        }
        if let value = dict["KafkaDelivery"] as? String {
            self.kafkaDeliveryShrink = value
        }
        if let value = dict["OssDelivery"] as? String {
            self.ossDeliveryShrink = value
        }
        if let value = dict["S3Delivery"] as? String {
            self.s3DeliveryShrink = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SlsDelivery"] as? String {
            self.slsDeliveryShrink = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class CreateSiteDeliveryTaskResponseBody : Tea.TeaModel {
    public var dataCenter: String?

    public var requestId: String?

    public var siteId: Int64?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataCenter != nil {
            map["DataCenter"] = self.dataCenter!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataCenter"] as? String {
            self.dataCenter = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class CreateSiteDeliveryTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSiteDeliveryTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSiteDeliveryTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSlrRoleForRealtimeLogResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateSlrRoleForRealtimeLogResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSlrRoleForRealtimeLogResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSlrRoleForRealtimeLogResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateUserDeliveryTaskRequest : Tea.TeaModel {
    public class HttpDelivery : Tea.TeaModel {
        public class StandardAuthParam : Tea.TeaModel {
            public var expiredTime: Int32?

            public var privateKey: String?

            public var urlPath: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.expiredTime != nil {
                    map["ExpiredTime"] = self.expiredTime!
                }
                if self.privateKey != nil {
                    map["PrivateKey"] = self.privateKey!
                }
                if self.urlPath != nil {
                    map["UrlPath"] = self.urlPath!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ExpiredTime"] as? Int32 {
                    self.expiredTime = value
                }
                if let value = dict["PrivateKey"] as? String {
                    self.privateKey = value
                }
                if let value = dict["UrlPath"] as? String {
                    self.urlPath = value
                }
            }
        }
        public var compress: String?

        public var destUrl: String?

        public var headerParam: [String: HttpDeliveryHeaderParamValue]?

        public var lastLogSplit: String?

        public var logBodyPrefix: String?

        public var logBodySuffix: String?

        public var logSplit: String?

        public var logSplitWords: String?

        public var maxBackoffMS: Int64?

        public var maxBatchMB: Int64?

        public var maxBatchSize: Int64?

        public var maxRetry: Int64?

        public var minBackoffMS: Int64?

        public var queryParam: [String: HttpDeliveryQueryParamValue]?

        public var responseBodyKey: String?

        public var standardAuthOn: Bool?

        public var standardAuthParam: CreateUserDeliveryTaskRequest.HttpDelivery.StandardAuthParam?

        public var successCode: Int64?

        public var transformTimeout: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.standardAuthParam?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.compress != nil {
                map["Compress"] = self.compress!
            }
            if self.destUrl != nil {
                map["DestUrl"] = self.destUrl!
            }
            if self.headerParam != nil {
                var tmp : [String: Any] = [:]
                for (k, v) in self.headerParam! {
                    tmp[k] = v.toMap()
                }
                map["HeaderParam"] = tmp
            }
            if self.lastLogSplit != nil {
                map["LastLogSplit"] = self.lastLogSplit!
            }
            if self.logBodyPrefix != nil {
                map["LogBodyPrefix"] = self.logBodyPrefix!
            }
            if self.logBodySuffix != nil {
                map["LogBodySuffix"] = self.logBodySuffix!
            }
            if self.logSplit != nil {
                map["LogSplit"] = self.logSplit!
            }
            if self.logSplitWords != nil {
                map["LogSplitWords"] = self.logSplitWords!
            }
            if self.maxBackoffMS != nil {
                map["MaxBackoffMS"] = self.maxBackoffMS!
            }
            if self.maxBatchMB != nil {
                map["MaxBatchMB"] = self.maxBatchMB!
            }
            if self.maxBatchSize != nil {
                map["MaxBatchSize"] = self.maxBatchSize!
            }
            if self.maxRetry != nil {
                map["MaxRetry"] = self.maxRetry!
            }
            if self.minBackoffMS != nil {
                map["MinBackoffMS"] = self.minBackoffMS!
            }
            if self.queryParam != nil {
                var tmp : [String: Any] = [:]
                for (k, v) in self.queryParam! {
                    tmp[k] = v.toMap()
                }
                map["QueryParam"] = tmp
            }
            if self.responseBodyKey != nil {
                map["ResponseBodyKey"] = self.responseBodyKey!
            }
            if self.standardAuthOn != nil {
                map["StandardAuthOn"] = self.standardAuthOn!
            }
            if self.standardAuthParam != nil {
                map["StandardAuthParam"] = self.standardAuthParam?.toMap()
            }
            if self.successCode != nil {
                map["SuccessCode"] = self.successCode!
            }
            if self.transformTimeout != nil {
                map["TransformTimeout"] = self.transformTimeout!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Compress"] as? String {
                self.compress = value
            }
            if let value = dict["DestUrl"] as? String {
                self.destUrl = value
            }
            if let value = dict["HeaderParam"] as? [String: Any?] {
                var tmp : [String: HttpDeliveryHeaderParamValue] = [:]
                for (k, v) in value {
                    if v != nil {
                        var model = HttpDeliveryHeaderParamValue()
                        model.fromMap(v as? [String: Any?])
                        tmp[k] = model
                    }
                }
                self.headerParam = tmp
            }
            if let value = dict["LastLogSplit"] as? String {
                self.lastLogSplit = value
            }
            if let value = dict["LogBodyPrefix"] as? String {
                self.logBodyPrefix = value
            }
            if let value = dict["LogBodySuffix"] as? String {
                self.logBodySuffix = value
            }
            if let value = dict["LogSplit"] as? String {
                self.logSplit = value
            }
            if let value = dict["LogSplitWords"] as? String {
                self.logSplitWords = value
            }
            if let value = dict["MaxBackoffMS"] as? Int64 {
                self.maxBackoffMS = value
            }
            if let value = dict["MaxBatchMB"] as? Int64 {
                self.maxBatchMB = value
            }
            if let value = dict["MaxBatchSize"] as? Int64 {
                self.maxBatchSize = value
            }
            if let value = dict["MaxRetry"] as? Int64 {
                self.maxRetry = value
            }
            if let value = dict["MinBackoffMS"] as? Int64 {
                self.minBackoffMS = value
            }
            if let value = dict["QueryParam"] as? [String: Any?] {
                var tmp : [String: HttpDeliveryQueryParamValue] = [:]
                for (k, v) in value {
                    if v != nil {
                        var model = HttpDeliveryQueryParamValue()
                        model.fromMap(v as? [String: Any?])
                        tmp[k] = model
                    }
                }
                self.queryParam = tmp
            }
            if let value = dict["ResponseBodyKey"] as? String {
                self.responseBodyKey = value
            }
            if let value = dict["StandardAuthOn"] as? Bool {
                self.standardAuthOn = value
            }
            if let value = dict["StandardAuthParam"] as? [String: Any?] {
                var model = CreateUserDeliveryTaskRequest.HttpDelivery.StandardAuthParam()
                model.fromMap(value)
                self.standardAuthParam = model
            }
            if let value = dict["SuccessCode"] as? Int64 {
                self.successCode = value
            }
            if let value = dict["TransformTimeout"] as? Int64 {
                self.transformTimeout = value
            }
        }
    }
    public class KafkaDelivery : Tea.TeaModel {
        public var balancer: String?

        public var brokers: [String]?

        public var compress: String?

        public var machanismType: String?

        public var password: String?

        public var topic: String?

        public var userAuth: Bool?

        public var userName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.balancer != nil {
                map["Balancer"] = self.balancer!
            }
            if self.brokers != nil {
                map["Brokers"] = self.brokers!
            }
            if self.compress != nil {
                map["Compress"] = self.compress!
            }
            if self.machanismType != nil {
                map["MachanismType"] = self.machanismType!
            }
            if self.password != nil {
                map["Password"] = self.password!
            }
            if self.topic != nil {
                map["Topic"] = self.topic!
            }
            if self.userAuth != nil {
                map["UserAuth"] = self.userAuth!
            }
            if self.userName != nil {
                map["UserName"] = self.userName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Balancer"] as? String {
                self.balancer = value
            }
            if let value = dict["Brokers"] as? [String] {
                self.brokers = value
            }
            if let value = dict["Compress"] as? String {
                self.compress = value
            }
            if let value = dict["MachanismType"] as? String {
                self.machanismType = value
            }
            if let value = dict["Password"] as? String {
                self.password = value
            }
            if let value = dict["Topic"] as? String {
                self.topic = value
            }
            if let value = dict["UserAuth"] as? Bool {
                self.userAuth = value
            }
            if let value = dict["UserName"] as? String {
                self.userName = value
            }
        }
    }
    public class OssDelivery : Tea.TeaModel {
        public var aliuid: String?

        public var bucketName: String?

        public var prefixPath: String?

        public var region: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliuid != nil {
                map["Aliuid"] = self.aliuid!
            }
            if self.bucketName != nil {
                map["BucketName"] = self.bucketName!
            }
            if self.prefixPath != nil {
                map["PrefixPath"] = self.prefixPath!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Aliuid"] as? String {
                self.aliuid = value
            }
            if let value = dict["BucketName"] as? String {
                self.bucketName = value
            }
            if let value = dict["PrefixPath"] as? String {
                self.prefixPath = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
        }
    }
    public class S3Delivery : Tea.TeaModel {
        public var accessKey: String?

        public var bucketPath: String?

        public var endpoint: String?

        public var prefixPath: String?

        public var region: String?

        public var s3Cmpt: Bool?

        public var secretKey: String?

        public var serverSideEncryption: Bool?

        public var vertifyType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessKey != nil {
                map["AccessKey"] = self.accessKey!
            }
            if self.bucketPath != nil {
                map["BucketPath"] = self.bucketPath!
            }
            if self.endpoint != nil {
                map["Endpoint"] = self.endpoint!
            }
            if self.prefixPath != nil {
                map["PrefixPath"] = self.prefixPath!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.s3Cmpt != nil {
                map["S3Cmpt"] = self.s3Cmpt!
            }
            if self.secretKey != nil {
                map["SecretKey"] = self.secretKey!
            }
            if self.serverSideEncryption != nil {
                map["ServerSideEncryption"] = self.serverSideEncryption!
            }
            if self.vertifyType != nil {
                map["VertifyType"] = self.vertifyType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessKey"] as? String {
                self.accessKey = value
            }
            if let value = dict["BucketPath"] as? String {
                self.bucketPath = value
            }
            if let value = dict["Endpoint"] as? String {
                self.endpoint = value
            }
            if let value = dict["PrefixPath"] as? String {
                self.prefixPath = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["S3Cmpt"] as? Bool {
                self.s3Cmpt = value
            }
            if let value = dict["SecretKey"] as? String {
                self.secretKey = value
            }
            if let value = dict["ServerSideEncryption"] as? Bool {
                self.serverSideEncryption = value
            }
            if let value = dict["VertifyType"] as? String {
                self.vertifyType = value
            }
        }
    }
    public class SlsDelivery : Tea.TeaModel {
        public var SLSLogStore: String?

        public var SLSProject: String?

        public var SLSRegion: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.SLSLogStore != nil {
                map["SLSLogStore"] = self.SLSLogStore!
            }
            if self.SLSProject != nil {
                map["SLSProject"] = self.SLSProject!
            }
            if self.SLSRegion != nil {
                map["SLSRegion"] = self.SLSRegion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SLSLogStore"] as? String {
                self.SLSLogStore = value
            }
            if let value = dict["SLSProject"] as? String {
                self.SLSProject = value
            }
            if let value = dict["SLSRegion"] as? String {
                self.SLSRegion = value
            }
        }
    }
    public var businessType: String?

    public var dataCenter: String?

    public var deliveryType: String?

    public var details: String?

    public var discardRate: Double?

    public var fieldName: String?

    public var httpDelivery: CreateUserDeliveryTaskRequest.HttpDelivery?

    public var kafkaDelivery: CreateUserDeliveryTaskRequest.KafkaDelivery?

    public var ossDelivery: CreateUserDeliveryTaskRequest.OssDelivery?

    public var s3Delivery: CreateUserDeliveryTaskRequest.S3Delivery?

    public var slsDelivery: CreateUserDeliveryTaskRequest.SlsDelivery?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.httpDelivery?.validate()
        try self.kafkaDelivery?.validate()
        try self.ossDelivery?.validate()
        try self.s3Delivery?.validate()
        try self.slsDelivery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.dataCenter != nil {
            map["DataCenter"] = self.dataCenter!
        }
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.details != nil {
            map["Details"] = self.details!
        }
        if self.discardRate != nil {
            map["DiscardRate"] = self.discardRate!
        }
        if self.fieldName != nil {
            map["FieldName"] = self.fieldName!
        }
        if self.httpDelivery != nil {
            map["HttpDelivery"] = self.httpDelivery?.toMap()
        }
        if self.kafkaDelivery != nil {
            map["KafkaDelivery"] = self.kafkaDelivery?.toMap()
        }
        if self.ossDelivery != nil {
            map["OssDelivery"] = self.ossDelivery?.toMap()
        }
        if self.s3Delivery != nil {
            map["S3Delivery"] = self.s3Delivery?.toMap()
        }
        if self.slsDelivery != nil {
            map["SlsDelivery"] = self.slsDelivery?.toMap()
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["DataCenter"] as? String {
            self.dataCenter = value
        }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["Details"] as? String {
            self.details = value
        }
        if let value = dict["DiscardRate"] as? Double {
            self.discardRate = value
        }
        if let value = dict["FieldName"] as? String {
            self.fieldName = value
        }
        if let value = dict["HttpDelivery"] as? [String: Any?] {
            var model = CreateUserDeliveryTaskRequest.HttpDelivery()
            model.fromMap(value)
            self.httpDelivery = model
        }
        if let value = dict["KafkaDelivery"] as? [String: Any?] {
            var model = CreateUserDeliveryTaskRequest.KafkaDelivery()
            model.fromMap(value)
            self.kafkaDelivery = model
        }
        if let value = dict["OssDelivery"] as? [String: Any?] {
            var model = CreateUserDeliveryTaskRequest.OssDelivery()
            model.fromMap(value)
            self.ossDelivery = model
        }
        if let value = dict["S3Delivery"] as? [String: Any?] {
            var model = CreateUserDeliveryTaskRequest.S3Delivery()
            model.fromMap(value)
            self.s3Delivery = model
        }
        if let value = dict["SlsDelivery"] as? [String: Any?] {
            var model = CreateUserDeliveryTaskRequest.SlsDelivery()
            model.fromMap(value)
            self.slsDelivery = model
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class CreateUserDeliveryTaskShrinkRequest : Tea.TeaModel {
    public var businessType: String?

    public var dataCenter: String?

    public var deliveryType: String?

    public var details: String?

    public var discardRate: Double?

    public var fieldName: String?

    public var httpDeliveryShrink: String?

    public var kafkaDeliveryShrink: String?

    public var ossDeliveryShrink: String?

    public var s3DeliveryShrink: String?

    public var slsDeliveryShrink: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.dataCenter != nil {
            map["DataCenter"] = self.dataCenter!
        }
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.details != nil {
            map["Details"] = self.details!
        }
        if self.discardRate != nil {
            map["DiscardRate"] = self.discardRate!
        }
        if self.fieldName != nil {
            map["FieldName"] = self.fieldName!
        }
        if self.httpDeliveryShrink != nil {
            map["HttpDelivery"] = self.httpDeliveryShrink!
        }
        if self.kafkaDeliveryShrink != nil {
            map["KafkaDelivery"] = self.kafkaDeliveryShrink!
        }
        if self.ossDeliveryShrink != nil {
            map["OssDelivery"] = self.ossDeliveryShrink!
        }
        if self.s3DeliveryShrink != nil {
            map["S3Delivery"] = self.s3DeliveryShrink!
        }
        if self.slsDeliveryShrink != nil {
            map["SlsDelivery"] = self.slsDeliveryShrink!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["DataCenter"] as? String {
            self.dataCenter = value
        }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["Details"] as? String {
            self.details = value
        }
        if let value = dict["DiscardRate"] as? Double {
            self.discardRate = value
        }
        if let value = dict["FieldName"] as? String {
            self.fieldName = value
        }
        if let value = dict["HttpDelivery"] as? String {
            self.httpDeliveryShrink = value
        }
        if let value = dict["KafkaDelivery"] as? String {
            self.kafkaDeliveryShrink = value
        }
        if let value = dict["OssDelivery"] as? String {
            self.ossDeliveryShrink = value
        }
        if let value = dict["S3Delivery"] as? String {
            self.s3DeliveryShrink = value
        }
        if let value = dict["SlsDelivery"] as? String {
            self.slsDeliveryShrink = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class CreateUserDeliveryTaskResponseBody : Tea.TeaModel {
    public var dataCenter: String?

    public var requestId: String?

    public var status: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataCenter != nil {
            map["DataCenter"] = self.dataCenter!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataCenter"] as? String {
            self.dataCenter = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class CreateUserDeliveryTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateUserDeliveryTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateUserDeliveryTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWafRuleRequest : Tea.TeaModel {
    public var config: WafRuleConfig?

    public var phase: String?

    public var rulesetId: Int64?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.config?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.config != nil {
            map["Config"] = self.config?.toMap()
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.rulesetId != nil {
            map["RulesetId"] = self.rulesetId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Config"] as? [String: Any?] {
            var model = WafRuleConfig()
            model.fromMap(value)
            self.config = model
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["RulesetId"] as? Int64 {
            self.rulesetId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class CreateWafRuleShrinkRequest : Tea.TeaModel {
    public var configShrink: String?

    public var phase: String?

    public var rulesetId: Int64?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configShrink != nil {
            map["Config"] = self.configShrink!
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.rulesetId != nil {
            map["RulesetId"] = self.rulesetId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Config"] as? String {
            self.configShrink = value
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["RulesetId"] as? Int64 {
            self.rulesetId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class CreateWafRuleResponseBody : Tea.TeaModel {
    public var id: Int64?

    public var requestId: String?

    public var rulesetId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rulesetId != nil {
            map["RulesetId"] = self.rulesetId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RulesetId"] as? Int64 {
            self.rulesetId = value
        }
    }
}

public class CreateWafRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWafRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWafRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWafRulesetRequest : Tea.TeaModel {
    public var name: String?

    public var phase: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class CreateWafRulesetResponseBody : Tea.TeaModel {
    public var id: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateWafRulesetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWafRulesetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWafRulesetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWaitingRoomRequest : Tea.TeaModel {
    public class HostNameAndPath : Tea.TeaModel {
        public var domain: String?

        public var path: String?

        public var subdomain: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.path != nil {
                map["Path"] = self.path!
            }
            if self.subdomain != nil {
                map["Subdomain"] = self.subdomain!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["Path"] as? String {
                self.path = value
            }
            if let value = dict["Subdomain"] as? String {
                self.subdomain = value
            }
        }
    }
    public var cookieName: String?

    public var customPageHtml: String?

    public var description_: String?

    public var disableSessionRenewalEnable: String?

    public var enable: String?

    public var hostNameAndPath: [CreateWaitingRoomRequest.HostNameAndPath]?

    public var jsonResponseEnable: String?

    public var language: String?

    public var name: String?

    public var newUsersPerMinute: String?

    public var queueAllEnable: String?

    public var queuingMethod: String?

    public var queuingStatusCode: String?

    public var sessionDuration: String?

    public var siteId: Int64?

    public var totalActiveUsers: String?

    public var waitingRoomType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cookieName != nil {
            map["CookieName"] = self.cookieName!
        }
        if self.customPageHtml != nil {
            map["CustomPageHtml"] = self.customPageHtml!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableSessionRenewalEnable != nil {
            map["DisableSessionRenewalEnable"] = self.disableSessionRenewalEnable!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.hostNameAndPath != nil {
            var tmp : [Any] = []
            for k in self.hostNameAndPath! {
                tmp.append(k.toMap())
            }
            map["HostNameAndPath"] = tmp
        }
        if self.jsonResponseEnable != nil {
            map["JsonResponseEnable"] = self.jsonResponseEnable!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.newUsersPerMinute != nil {
            map["NewUsersPerMinute"] = self.newUsersPerMinute!
        }
        if self.queueAllEnable != nil {
            map["QueueAllEnable"] = self.queueAllEnable!
        }
        if self.queuingMethod != nil {
            map["QueuingMethod"] = self.queuingMethod!
        }
        if self.queuingStatusCode != nil {
            map["QueuingStatusCode"] = self.queuingStatusCode!
        }
        if self.sessionDuration != nil {
            map["SessionDuration"] = self.sessionDuration!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.totalActiveUsers != nil {
            map["TotalActiveUsers"] = self.totalActiveUsers!
        }
        if self.waitingRoomType != nil {
            map["WaitingRoomType"] = self.waitingRoomType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CookieName"] as? String {
            self.cookieName = value
        }
        if let value = dict["CustomPageHtml"] as? String {
            self.customPageHtml = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableSessionRenewalEnable"] as? String {
            self.disableSessionRenewalEnable = value
        }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["HostNameAndPath"] as? [Any?] {
            var tmp : [CreateWaitingRoomRequest.HostNameAndPath] = []
            for v in value {
                if v != nil {
                    var model = CreateWaitingRoomRequest.HostNameAndPath()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.hostNameAndPath = tmp
        }
        if let value = dict["JsonResponseEnable"] as? String {
            self.jsonResponseEnable = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NewUsersPerMinute"] as? String {
            self.newUsersPerMinute = value
        }
        if let value = dict["QueueAllEnable"] as? String {
            self.queueAllEnable = value
        }
        if let value = dict["QueuingMethod"] as? String {
            self.queuingMethod = value
        }
        if let value = dict["QueuingStatusCode"] as? String {
            self.queuingStatusCode = value
        }
        if let value = dict["SessionDuration"] as? String {
            self.sessionDuration = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["TotalActiveUsers"] as? String {
            self.totalActiveUsers = value
        }
        if let value = dict["WaitingRoomType"] as? String {
            self.waitingRoomType = value
        }
    }
}

public class CreateWaitingRoomShrinkRequest : Tea.TeaModel {
    public var cookieName: String?

    public var customPageHtml: String?

    public var description_: String?

    public var disableSessionRenewalEnable: String?

    public var enable: String?

    public var hostNameAndPathShrink: String?

    public var jsonResponseEnable: String?

    public var language: String?

    public var name: String?

    public var newUsersPerMinute: String?

    public var queueAllEnable: String?

    public var queuingMethod: String?

    public var queuingStatusCode: String?

    public var sessionDuration: String?

    public var siteId: Int64?

    public var totalActiveUsers: String?

    public var waitingRoomType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cookieName != nil {
            map["CookieName"] = self.cookieName!
        }
        if self.customPageHtml != nil {
            map["CustomPageHtml"] = self.customPageHtml!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableSessionRenewalEnable != nil {
            map["DisableSessionRenewalEnable"] = self.disableSessionRenewalEnable!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.hostNameAndPathShrink != nil {
            map["HostNameAndPath"] = self.hostNameAndPathShrink!
        }
        if self.jsonResponseEnable != nil {
            map["JsonResponseEnable"] = self.jsonResponseEnable!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.newUsersPerMinute != nil {
            map["NewUsersPerMinute"] = self.newUsersPerMinute!
        }
        if self.queueAllEnable != nil {
            map["QueueAllEnable"] = self.queueAllEnable!
        }
        if self.queuingMethod != nil {
            map["QueuingMethod"] = self.queuingMethod!
        }
        if self.queuingStatusCode != nil {
            map["QueuingStatusCode"] = self.queuingStatusCode!
        }
        if self.sessionDuration != nil {
            map["SessionDuration"] = self.sessionDuration!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.totalActiveUsers != nil {
            map["TotalActiveUsers"] = self.totalActiveUsers!
        }
        if self.waitingRoomType != nil {
            map["WaitingRoomType"] = self.waitingRoomType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CookieName"] as? String {
            self.cookieName = value
        }
        if let value = dict["CustomPageHtml"] as? String {
            self.customPageHtml = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableSessionRenewalEnable"] as? String {
            self.disableSessionRenewalEnable = value
        }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["HostNameAndPath"] as? String {
            self.hostNameAndPathShrink = value
        }
        if let value = dict["JsonResponseEnable"] as? String {
            self.jsonResponseEnable = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NewUsersPerMinute"] as? String {
            self.newUsersPerMinute = value
        }
        if let value = dict["QueueAllEnable"] as? String {
            self.queueAllEnable = value
        }
        if let value = dict["QueuingMethod"] as? String {
            self.queuingMethod = value
        }
        if let value = dict["QueuingStatusCode"] as? String {
            self.queuingStatusCode = value
        }
        if let value = dict["SessionDuration"] as? String {
            self.sessionDuration = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["TotalActiveUsers"] as? String {
            self.totalActiveUsers = value
        }
        if let value = dict["WaitingRoomType"] as? String {
            self.waitingRoomType = value
        }
    }
}

public class CreateWaitingRoomResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var waitingRoomId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.waitingRoomId != nil {
            map["WaitingRoomId"] = self.waitingRoomId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["WaitingRoomId"] as? String {
            self.waitingRoomId = value
        }
    }
}

public class CreateWaitingRoomResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWaitingRoomResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWaitingRoomResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWaitingRoomEventRequest : Tea.TeaModel {
    public var customPageHtml: String?

    public var description_: String?

    public var disableSessionRenewalEnable: String?

    public var enable: String?

    public var endTime: String?

    public var jsonResponseEnable: String?

    public var language: String?

    public var name: String?

    public var newUsersPerMinute: String?

    public var preQueueEnable: String?

    public var preQueueStartTime: String?

    public var queuingMethod: String?

    public var queuingStatusCode: String?

    public var randomPreQueueEnable: String?

    public var sessionDuration: String?

    public var siteId: Int64?

    public var startTime: String?

    public var totalActiveUsers: String?

    public var waitingRoomId: String?

    public var waitingRoomType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customPageHtml != nil {
            map["CustomPageHtml"] = self.customPageHtml!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableSessionRenewalEnable != nil {
            map["DisableSessionRenewalEnable"] = self.disableSessionRenewalEnable!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.jsonResponseEnable != nil {
            map["JsonResponseEnable"] = self.jsonResponseEnable!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.newUsersPerMinute != nil {
            map["NewUsersPerMinute"] = self.newUsersPerMinute!
        }
        if self.preQueueEnable != nil {
            map["PreQueueEnable"] = self.preQueueEnable!
        }
        if self.preQueueStartTime != nil {
            map["PreQueueStartTime"] = self.preQueueStartTime!
        }
        if self.queuingMethod != nil {
            map["QueuingMethod"] = self.queuingMethod!
        }
        if self.queuingStatusCode != nil {
            map["QueuingStatusCode"] = self.queuingStatusCode!
        }
        if self.randomPreQueueEnable != nil {
            map["RandomPreQueueEnable"] = self.randomPreQueueEnable!
        }
        if self.sessionDuration != nil {
            map["SessionDuration"] = self.sessionDuration!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.totalActiveUsers != nil {
            map["TotalActiveUsers"] = self.totalActiveUsers!
        }
        if self.waitingRoomId != nil {
            map["WaitingRoomId"] = self.waitingRoomId!
        }
        if self.waitingRoomType != nil {
            map["WaitingRoomType"] = self.waitingRoomType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomPageHtml"] as? String {
            self.customPageHtml = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableSessionRenewalEnable"] as? String {
            self.disableSessionRenewalEnable = value
        }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["JsonResponseEnable"] as? String {
            self.jsonResponseEnable = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NewUsersPerMinute"] as? String {
            self.newUsersPerMinute = value
        }
        if let value = dict["PreQueueEnable"] as? String {
            self.preQueueEnable = value
        }
        if let value = dict["PreQueueStartTime"] as? String {
            self.preQueueStartTime = value
        }
        if let value = dict["QueuingMethod"] as? String {
            self.queuingMethod = value
        }
        if let value = dict["QueuingStatusCode"] as? String {
            self.queuingStatusCode = value
        }
        if let value = dict["RandomPreQueueEnable"] as? String {
            self.randomPreQueueEnable = value
        }
        if let value = dict["SessionDuration"] as? String {
            self.sessionDuration = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TotalActiveUsers"] as? String {
            self.totalActiveUsers = value
        }
        if let value = dict["WaitingRoomId"] as? String {
            self.waitingRoomId = value
        }
        if let value = dict["WaitingRoomType"] as? String {
            self.waitingRoomType = value
        }
    }
}

public class CreateWaitingRoomEventResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var waitingRoomEventId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.waitingRoomEventId != nil {
            map["WaitingRoomEventId"] = self.waitingRoomEventId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["WaitingRoomEventId"] as? Int64 {
            self.waitingRoomEventId = value
        }
    }
}

public class CreateWaitingRoomEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWaitingRoomEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWaitingRoomEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateWaitingRoomRuleRequest : Tea.TeaModel {
    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var siteId: Int64?

    public var waitingRoomId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.waitingRoomId != nil {
            map["WaitingRoomId"] = self.waitingRoomId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["WaitingRoomId"] as? String {
            self.waitingRoomId = value
        }
    }
}

public class CreateWaitingRoomRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var waitingRoomRuleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.waitingRoomRuleId != nil {
            map["WaitingRoomRuleId"] = self.waitingRoomRuleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["WaitingRoomRuleId"] as? Int64 {
            self.waitingRoomRuleId = value
        }
    }
}

public class CreateWaitingRoomRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateWaitingRoomRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateWaitingRoomRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeactivateVersionManagementRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeactivateVersionManagementResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeactivateVersionManagementResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeactivateVersionManagementResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeactivateVersionManagementResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCacheRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteCacheRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteCacheRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCacheRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCacheRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteCertificateResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public var siteId: Int64?

    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class DeleteCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteClientCaCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteClientCaCertificateResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public var siteId: Int64?

    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class DeleteClientCaCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteClientCaCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteClientCaCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteClientCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteClientCertificateResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public var siteId: Int64?

    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class DeleteClientCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteClientCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteClientCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCompressionRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteCompressionRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteCompressionRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCompressionRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCompressionRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCustomScenePolicyRequest : Tea.TeaModel {
    public var policyId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? Int64 {
            self.policyId = value
        }
    }
}

public class DeleteCustomScenePolicyResponseBody : Tea.TeaModel {
    public var policyId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? Int64 {
            self.policyId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteCustomScenePolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCustomScenePolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCustomScenePolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEdgeContainerAppRequest : Tea.TeaModel {
    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class DeleteEdgeContainerAppResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var state: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["State"] as? String {
            self.state = value
        }
    }
}

public class DeleteEdgeContainerAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEdgeContainerAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEdgeContainerAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEdgeContainerAppRecordRequest : Tea.TeaModel {
    public var appId: String?

    public var recordName: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.recordName != nil {
            map["RecordName"] = self.recordName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["RecordName"] as? String {
            self.recordName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteEdgeContainerAppRecordResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteEdgeContainerAppRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEdgeContainerAppRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEdgeContainerAppRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEdgeContainerAppVersionRequest : Tea.TeaModel {
    public var appId: String?

    public var versionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["VersionId"] as? String {
            self.versionId = value
        }
    }
}

public class DeleteEdgeContainerAppVersionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteEdgeContainerAppVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEdgeContainerAppVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEdgeContainerAppVersionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteHttpRequestHeaderModificationRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteHttpRequestHeaderModificationRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteHttpRequestHeaderModificationRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteHttpRequestHeaderModificationRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteHttpRequestHeaderModificationRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteHttpResponseHeaderModificationRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteHttpResponseHeaderModificationRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteHttpResponseHeaderModificationRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteHttpResponseHeaderModificationRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteHttpResponseHeaderModificationRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteHttpsApplicationConfigurationRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteHttpsApplicationConfigurationResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteHttpsApplicationConfigurationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteHttpsApplicationConfigurationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteHttpsApplicationConfigurationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteHttpsBasicConfigurationRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteHttpsBasicConfigurationResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteHttpsBasicConfigurationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteHttpsBasicConfigurationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteHttpsBasicConfigurationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteImageTransformRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteImageTransformResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteImageTransformResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteImageTransformResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteImageTransformResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteKvRequest : Tea.TeaModel {
    public var key: String?

    public var namespace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
    }
}

public class DeleteKvResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteKvResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteKvResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteKvResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteKvNamespaceRequest : Tea.TeaModel {
    public var namespace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
    }
}

public class DeleteKvNamespaceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteKvNamespaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteKvNamespaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteKvNamespaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteListRequest : Tea.TeaModel {
    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class DeleteListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteLoadBalancerRequest : Tea.TeaModel {
    public var id: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteLoadBalancerResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteLoadBalancerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteLoadBalancerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteLoadBalancerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteNetworkOptimizationRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteNetworkOptimizationResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteNetworkOptimizationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteNetworkOptimizationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteNetworkOptimizationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteOriginCaCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteOriginCaCertificateResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public var siteId: Int64?

    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class DeleteOriginCaCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteOriginCaCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteOriginCaCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteOriginClientCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteOriginClientCertificateResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public var siteId: Int64?

    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class DeleteOriginClientCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteOriginClientCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteOriginClientCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteOriginPoolRequest : Tea.TeaModel {
    public var id: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteOriginPoolResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteOriginPoolResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteOriginPoolResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteOriginPoolResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteOriginProtectionRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteOriginProtectionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteOriginProtectionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteOriginProtectionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteOriginProtectionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteOriginRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteOriginRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteOriginRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteOriginRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteOriginRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePageRequest : Tea.TeaModel {
    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class DeletePageResponseBody : Tea.TeaModel {
    public var id: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeletePageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRecordRequest : Tea.TeaModel {
    public var recordId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.recordId != nil {
            map["RecordId"] = self.recordId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RecordId"] as? Int64 {
            self.recordId = value
        }
    }
}

public class DeleteRecordResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRedirectRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteRedirectRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteRedirectRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRedirectRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRedirectRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRewriteUrlRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteRewriteUrlRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteRewriteUrlRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRewriteUrlRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRewriteUrlRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRoutineRequest : Tea.TeaModel {
    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class DeleteRoutineResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class DeleteRoutineResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRoutineResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRoutineResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRoutineCodeVersionRequest : Tea.TeaModel {
    public var codeVersion: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.codeVersion != nil {
            map["CodeVersion"] = self.codeVersion!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CodeVersion"] as? String {
            self.codeVersion = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class DeleteRoutineCodeVersionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class DeleteRoutineCodeVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRoutineCodeVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRoutineCodeVersionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRoutineRelatedRecordRequest : Tea.TeaModel {
    public var name: String?

    public var recordId: Int64?

    public var recordName: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.recordId != nil {
            map["RecordId"] = self.recordId!
        }
        if self.recordName != nil {
            map["RecordName"] = self.recordName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RecordId"] as? Int64 {
            self.recordId = value
        }
        if let value = dict["RecordName"] as? String {
            self.recordName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteRoutineRelatedRecordResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class DeleteRoutineRelatedRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRoutineRelatedRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRoutineRelatedRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRoutineRouteRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteRoutineRouteResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteRoutineRouteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRoutineRouteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRoutineRouteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteScheduledPreloadExecutionRequest : Tea.TeaModel {
    public var id: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
    }
}

public class DeleteScheduledPreloadExecutionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteScheduledPreloadExecutionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteScheduledPreloadExecutionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteScheduledPreloadExecutionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteScheduledPreloadJobRequest : Tea.TeaModel {
    public var id: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
    }
}

public class DeleteScheduledPreloadJobResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteScheduledPreloadJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteScheduledPreloadJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteScheduledPreloadJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSiteRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var securityToken: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteSiteResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteSiteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSiteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSiteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSiteDeliveryTaskRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class DeleteSiteDeliveryTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteSiteDeliveryTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSiteDeliveryTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSiteDeliveryTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSiteOriginClientCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DeleteSiteOriginClientCertificateResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public var siteId: Int64?

    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class DeleteSiteOriginClientCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSiteOriginClientCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSiteOriginClientCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteUserDeliveryTaskRequest : Tea.TeaModel {
    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class DeleteUserDeliveryTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteUserDeliveryTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteUserDeliveryTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteUserDeliveryTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteWafRuleRequest : Tea.TeaModel {
    public var id: Int64?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class DeleteWafRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteWafRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteWafRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteWafRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteWafRulesetRequest : Tea.TeaModel {
    public var id: Int64?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class DeleteWafRulesetResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteWafRulesetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteWafRulesetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteWafRulesetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteWaitingRoomRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var waitingRoomId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.waitingRoomId != nil {
            map["WaitingRoomId"] = self.waitingRoomId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["WaitingRoomId"] as? String {
            self.waitingRoomId = value
        }
    }
}

public class DeleteWaitingRoomResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteWaitingRoomResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteWaitingRoomResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteWaitingRoomResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteWaitingRoomEventRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var waitingRoomEventId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.waitingRoomEventId != nil {
            map["WaitingRoomEventId"] = self.waitingRoomEventId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["WaitingRoomEventId"] as? Int64 {
            self.waitingRoomEventId = value
        }
    }
}

public class DeleteWaitingRoomEventResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteWaitingRoomEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteWaitingRoomEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteWaitingRoomEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteWaitingRoomRuleRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var waitingRoomRuleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.waitingRoomRuleId != nil {
            map["WaitingRoomRuleId"] = self.waitingRoomRuleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["WaitingRoomRuleId"] as? Int64 {
            self.waitingRoomRuleId = value
        }
    }
}

public class DeleteWaitingRoomRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteWaitingRoomRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteWaitingRoomRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteWaitingRoomRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeCustomScenePoliciesRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var policyId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PolicyId"] as? Int64 {
            self.policyId = value
        }
    }
}

public class DescribeCustomScenePoliciesResponseBody : Tea.TeaModel {
    public class DataModule : Tea.TeaModel {
        public var endTime: String?

        public var name: String?

        public var objects: [String]?

        public var policyId: Int64?

        public var siteIds: String?

        public var startTime: String?

        public var status: String?

        public var template: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.objects != nil {
                map["Objects"] = self.objects!
            }
            if self.policyId != nil {
                map["PolicyId"] = self.policyId!
            }
            if self.siteIds != nil {
                map["SiteIds"] = self.siteIds!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.template != nil {
                map["Template"] = self.template!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Objects"] as? [String] {
                self.objects = value
            }
            if let value = dict["PolicyId"] as? Int64 {
                self.policyId = value
            }
            if let value = dict["SiteIds"] as? String {
                self.siteIds = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Template"] as? String {
                self.template = value
            }
        }
    }
    public var dataModule: [DescribeCustomScenePoliciesResponseBody.DataModule]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var quota: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataModule != nil {
            var tmp : [Any] = []
            for k in self.dataModule! {
                tmp.append(k.toMap())
            }
            map["DataModule"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.quota != nil {
            map["Quota"] = self.quota!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataModule"] as? [Any?] {
            var tmp : [DescribeCustomScenePoliciesResponseBody.DataModule] = []
            for v in value {
                if v != nil {
                    var model = DescribeCustomScenePoliciesResponseBody.DataModule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dataModule = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Quota"] as? Int32 {
            self.quota = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeCustomScenePoliciesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeCustomScenePoliciesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeCustomScenePoliciesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDDoSAllEventListRequest : Tea.TeaModel {
    public var endTime: String?

    public var eventType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var siteId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.eventType != nil {
            map["EventType"] = self.eventType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["EventType"] as? String {
            self.eventType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeDDoSAllEventListResponseBody : Tea.TeaModel {
    public class DataList : Tea.TeaModel {
        public var bps: Int64?

        public var coverage: String?

        public var cps: Int64?

        public var endTime: String?

        public var eventId: String?

        public var eventResult: String?

        public var eventType: String?

        public var pps: Int64?

        public var qps: Int64?

        public var startTime: String?

        public var target: String?

        public var targetId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bps != nil {
                map["Bps"] = self.bps!
            }
            if self.coverage != nil {
                map["Coverage"] = self.coverage!
            }
            if self.cps != nil {
                map["Cps"] = self.cps!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.eventId != nil {
                map["EventId"] = self.eventId!
            }
            if self.eventResult != nil {
                map["EventResult"] = self.eventResult!
            }
            if self.eventType != nil {
                map["EventType"] = self.eventType!
            }
            if self.pps != nil {
                map["Pps"] = self.pps!
            }
            if self.qps != nil {
                map["Qps"] = self.qps!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.target != nil {
                map["Target"] = self.target!
            }
            if self.targetId != nil {
                map["TargetId"] = self.targetId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Bps"] as? Int64 {
                self.bps = value
            }
            if let value = dict["Coverage"] as? String {
                self.coverage = value
            }
            if let value = dict["Cps"] as? Int64 {
                self.cps = value
            }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["EventId"] as? String {
                self.eventId = value
            }
            if let value = dict["EventResult"] as? String {
                self.eventResult = value
            }
            if let value = dict["EventType"] as? String {
                self.eventType = value
            }
            if let value = dict["Pps"] as? Int64 {
                self.pps = value
            }
            if let value = dict["Qps"] as? Int64 {
                self.qps = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
            if let value = dict["Target"] as? String {
                self.target = value
            }
            if let value = dict["TargetId"] as? String {
                self.targetId = value
            }
        }
    }
    public var dataList: [DescribeDDoSAllEventListResponseBody.DataList]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var siteId: Int64?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataList != nil {
            var tmp : [Any] = []
            for k in self.dataList! {
                tmp.append(k.toMap())
            }
            map["DataList"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataList"] as? [Any?] {
            var tmp : [DescribeDDoSAllEventListResponseBody.DataList] = []
            for v in value {
                if v != nil {
                    var model = DescribeDDoSAllEventListResponseBody.DataList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dataList = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeDDoSAllEventListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDDoSAllEventListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDDoSAllEventListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDDoSBpsListRequest : Tea.TeaModel {
    public var coverage: String?

    public var endTime: String?

    public var siteId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coverage != nil {
            map["Coverage"] = self.coverage!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Coverage"] as? String {
            self.coverage = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeDDoSBpsListResponseBody : Tea.TeaModel {
    public class DataModule : Tea.TeaModel {
        public var attackBps: Int64?

        public var attackPps: Int64?

        public var normalBps: Int64?

        public var normalPps: Int64?

        public var timeStamp: String?

        public var totalBps: Int64?

        public var totalPps: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attackBps != nil {
                map["AttackBps"] = self.attackBps!
            }
            if self.attackPps != nil {
                map["AttackPps"] = self.attackPps!
            }
            if self.normalBps != nil {
                map["NormalBps"] = self.normalBps!
            }
            if self.normalPps != nil {
                map["NormalPps"] = self.normalPps!
            }
            if self.timeStamp != nil {
                map["TimeStamp"] = self.timeStamp!
            }
            if self.totalBps != nil {
                map["TotalBps"] = self.totalBps!
            }
            if self.totalPps != nil {
                map["TotalPps"] = self.totalPps!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AttackBps"] as? Int64 {
                self.attackBps = value
            }
            if let value = dict["AttackPps"] as? Int64 {
                self.attackPps = value
            }
            if let value = dict["NormalBps"] as? Int64 {
                self.normalBps = value
            }
            if let value = dict["NormalPps"] as? Int64 {
                self.normalPps = value
            }
            if let value = dict["TimeStamp"] as? String {
                self.timeStamp = value
            }
            if let value = dict["TotalBps"] as? Int64 {
                self.totalBps = value
            }
            if let value = dict["TotalPps"] as? Int64 {
                self.totalPps = value
            }
        }
    }
    public var dataInterval: Int32?

    public var dataModule: [DescribeDDoSBpsListResponseBody.DataModule]?

    public var endTime: String?

    public var requestId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.dataModule != nil {
            var tmp : [Any] = []
            for k in self.dataModule! {
                tmp.append(k.toMap())
            }
            map["DataModule"] = tmp
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataInterval"] as? Int32 {
            self.dataInterval = value
        }
        if let value = dict["DataModule"] as? [Any?] {
            var tmp : [DescribeDDoSBpsListResponseBody.DataModule] = []
            for v in value {
                if v != nil {
                    var model = DescribeDDoSBpsListResponseBody.DataModule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dataModule = tmp
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeDDoSBpsListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDDoSBpsListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDDoSBpsListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDDoSL7QpsListRequest : Tea.TeaModel {
    public var endTime: String?

    public var interval: Int32?

    public var recordId: Int64?

    public var siteId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.recordId != nil {
            map["RecordId"] = self.recordId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Interval"] as? Int32 {
            self.interval = value
        }
        if let value = dict["RecordId"] as? Int64 {
            self.recordId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeDDoSL7QpsListResponseBody : Tea.TeaModel {
    public class DataModule : Tea.TeaModel {
        public var attack: Int64?

        public var normal: Int64?

        public var timeStamp: String?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.attack != nil {
                map["Attack"] = self.attack!
            }
            if self.normal != nil {
                map["Normal"] = self.normal!
            }
            if self.timeStamp != nil {
                map["TimeStamp"] = self.timeStamp!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Attack"] as? Int64 {
                self.attack = value
            }
            if let value = dict["Normal"] as? Int64 {
                self.normal = value
            }
            if let value = dict["TimeStamp"] as? String {
                self.timeStamp = value
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var dataInterval: Int32?

    public var dataModule: [DescribeDDoSL7QpsListResponseBody.DataModule]?

    public var endTime: String?

    public var recordId: Int64?

    public var requestId: String?

    public var siteId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.dataModule != nil {
            var tmp : [Any] = []
            for k in self.dataModule! {
                tmp.append(k.toMap())
            }
            map["DataModule"] = tmp
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.recordId != nil {
            map["RecordId"] = self.recordId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataInterval"] as? Int32 {
            self.dataInterval = value
        }
        if let value = dict["DataModule"] as? [Any?] {
            var tmp : [DescribeDDoSL7QpsListResponseBody.DataModule] = []
            for v in value {
                if v != nil {
                    var model = DescribeDDoSL7QpsListResponseBody.DataModule()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dataModule = tmp
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["RecordId"] as? Int64 {
            self.recordId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeDDoSL7QpsListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDDoSL7QpsListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDDoSL7QpsListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeEdgeContainerAppStatsRequest : Tea.TeaModel {
    public var app: String?

    public var endTime: String?

    public var fields: String?

    public var isp: String?

    public var locate: String?

    public var startTime: String?

    public var tenant: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.app != nil {
            map["App"] = self.app!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.fields != nil {
            map["Fields"] = self.fields!
        }
        if self.isp != nil {
            map["Isp"] = self.isp!
        }
        if self.locate != nil {
            map["Locate"] = self.locate!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.tenant != nil {
            map["Tenant"] = self.tenant!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["App"] as? String {
            self.app = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Fields"] as? String {
            self.fields = value
        }
        if let value = dict["Isp"] as? String {
            self.isp = value
        }
        if let value = dict["Locate"] as? String {
            self.locate = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Tenant"] as? String {
            self.tenant = value
        }
    }
}

public class DescribeEdgeContainerAppStatsResponseBody : Tea.TeaModel {
    public class Points : Tea.TeaModel {
        public var containerCpuUsageSecondsQuotaRate: Double?

        public var containerCpuUsageSecondsTotal: Double?

        public var containerFsReadsBytesAvg: Double?

        public var containerFsWritesBytesAvg: Double?

        public var containerMemoryRss: Double?

        public var containerMemoryRssQuotaRate: Double?

        public var podReadyRate: Double?

        public var time: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.containerCpuUsageSecondsQuotaRate != nil {
                map["ContainerCpuUsageSecondsQuotaRate"] = self.containerCpuUsageSecondsQuotaRate!
            }
            if self.containerCpuUsageSecondsTotal != nil {
                map["ContainerCpuUsageSecondsTotal"] = self.containerCpuUsageSecondsTotal!
            }
            if self.containerFsReadsBytesAvg != nil {
                map["ContainerFsReadsBytesAvg"] = self.containerFsReadsBytesAvg!
            }
            if self.containerFsWritesBytesAvg != nil {
                map["ContainerFsWritesBytesAvg"] = self.containerFsWritesBytesAvg!
            }
            if self.containerMemoryRss != nil {
                map["ContainerMemoryRss"] = self.containerMemoryRss!
            }
            if self.containerMemoryRssQuotaRate != nil {
                map["ContainerMemoryRssQuotaRate"] = self.containerMemoryRssQuotaRate!
            }
            if self.podReadyRate != nil {
                map["PodReadyRate"] = self.podReadyRate!
            }
            if self.time != nil {
                map["Time"] = self.time!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContainerCpuUsageSecondsQuotaRate"] as? Double {
                self.containerCpuUsageSecondsQuotaRate = value
            }
            if let value = dict["ContainerCpuUsageSecondsTotal"] as? Double {
                self.containerCpuUsageSecondsTotal = value
            }
            if let value = dict["ContainerFsReadsBytesAvg"] as? Double {
                self.containerFsReadsBytesAvg = value
            }
            if let value = dict["ContainerFsWritesBytesAvg"] as? Double {
                self.containerFsWritesBytesAvg = value
            }
            if let value = dict["ContainerMemoryRss"] as? Double {
                self.containerMemoryRss = value
            }
            if let value = dict["ContainerMemoryRssQuotaRate"] as? Double {
                self.containerMemoryRssQuotaRate = value
            }
            if let value = dict["PodReadyRate"] as? Double {
                self.podReadyRate = value
            }
            if let value = dict["Time"] as? String {
                self.time = value
            }
        }
    }
    public var cpuUsageSecondsQuotaRateAvg: Double?

    public var cpuUsageSecondsTotalAvg: Double?

    public var fsReadsBytesAvgAvg: Double?

    public var fsWritesBytesAvgAvg: Double?

    public var memoryRssAvg: Double?

    public var memoryRssQuotaRateAvg: Double?

    public var podReadyRateAvg: Double?

    public var points: [DescribeEdgeContainerAppStatsResponseBody.Points]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cpuUsageSecondsQuotaRateAvg != nil {
            map["CpuUsageSecondsQuotaRateAvg"] = self.cpuUsageSecondsQuotaRateAvg!
        }
        if self.cpuUsageSecondsTotalAvg != nil {
            map["CpuUsageSecondsTotalAvg"] = self.cpuUsageSecondsTotalAvg!
        }
        if self.fsReadsBytesAvgAvg != nil {
            map["FsReadsBytesAvgAvg"] = self.fsReadsBytesAvgAvg!
        }
        if self.fsWritesBytesAvgAvg != nil {
            map["FsWritesBytesAvgAvg"] = self.fsWritesBytesAvgAvg!
        }
        if self.memoryRssAvg != nil {
            map["MemoryRssAvg"] = self.memoryRssAvg!
        }
        if self.memoryRssQuotaRateAvg != nil {
            map["MemoryRssQuotaRateAvg"] = self.memoryRssQuotaRateAvg!
        }
        if self.podReadyRateAvg != nil {
            map["PodReadyRateAvg"] = self.podReadyRateAvg!
        }
        if self.points != nil {
            var tmp : [Any] = []
            for k in self.points! {
                tmp.append(k.toMap())
            }
            map["Points"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CpuUsageSecondsQuotaRateAvg"] as? Double {
            self.cpuUsageSecondsQuotaRateAvg = value
        }
        if let value = dict["CpuUsageSecondsTotalAvg"] as? Double {
            self.cpuUsageSecondsTotalAvg = value
        }
        if let value = dict["FsReadsBytesAvgAvg"] as? Double {
            self.fsReadsBytesAvgAvg = value
        }
        if let value = dict["FsWritesBytesAvgAvg"] as? Double {
            self.fsWritesBytesAvgAvg = value
        }
        if let value = dict["MemoryRssAvg"] as? Double {
            self.memoryRssAvg = value
        }
        if let value = dict["MemoryRssQuotaRateAvg"] as? Double {
            self.memoryRssQuotaRateAvg = value
        }
        if let value = dict["PodReadyRateAvg"] as? Double {
            self.podReadyRateAvg = value
        }
        if let value = dict["Points"] as? [Any?] {
            var tmp : [DescribeEdgeContainerAppStatsResponseBody.Points] = []
            for v in value {
                if v != nil {
                    var model = DescribeEdgeContainerAppStatsResponseBody.Points()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.points = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeEdgeContainerAppStatsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeEdgeContainerAppStatsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeEdgeContainerAppStatsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHttpDDoSAttackIntelligentProtectionRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DescribeHttpDDoSAttackIntelligentProtectionResponseBody : Tea.TeaModel {
    public var aiMode: String?

    public var aiTemplate: String?

    public var requestId: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aiMode != nil {
            map["AiMode"] = self.aiMode!
        }
        if self.aiTemplate != nil {
            map["AiTemplate"] = self.aiTemplate!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AiMode"] as? String {
            self.aiMode = value
        }
        if let value = dict["AiTemplate"] as? String {
            self.aiTemplate = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DescribeHttpDDoSAttackIntelligentProtectionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHttpDDoSAttackIntelligentProtectionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHttpDDoSAttackIntelligentProtectionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHttpDDoSAttackProtectionRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DescribeHttpDDoSAttackProtectionResponseBody : Tea.TeaModel {
    public var globalMode: String?

    public var requestId: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.globalMode != nil {
            map["GlobalMode"] = self.globalMode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GlobalMode"] as? String {
            self.globalMode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class DescribeHttpDDoSAttackProtectionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHttpDDoSAttackProtectionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHttpDDoSAttackProtectionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeKvAccountStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class DescribeKvAccountStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeKvAccountStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeKvAccountStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePreloadTasksRequest : Tea.TeaModel {
    public var content: String?

    public var endTime: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var siteId: Int64?

    public var startTime: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class DescribePreloadTasksResponseBody : Tea.TeaModel {
    public class Tasks : Tea.TeaModel {
        public var content: String?

        public var createTime: String?

        public var description_: String?

        public var process: String?

        public var status: String?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.process != nil {
                map["Process"] = self.process!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Process"] as? String {
                self.process = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var requestId: String?

    public var tasks: [DescribePreloadTasksResponseBody.Tasks]?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tasks != nil {
            var tmp : [Any] = []
            for k in self.tasks! {
                tmp.append(k.toMap())
            }
            map["Tasks"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Tasks"] as? [Any?] {
            var tmp : [DescribePreloadTasksResponseBody.Tasks] = []
            for v in value {
                if v != nil {
                    var model = DescribePreloadTasksResponseBody.Tasks()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tasks = tmp
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribePreloadTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePreloadTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePreloadTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePurgeTasksRequest : Tea.TeaModel {
    public var content: String?

    public var endTime: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var siteId: Int64?

    public var startTime: String?

    public var status: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribePurgeTasksResponseBody : Tea.TeaModel {
    public class Tasks : Tea.TeaModel {
        public var content: String?

        public var createTime: String?

        public var description_: String?

        public var process: String?

        public var status: String?

        public var taskId: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.process != nil {
                map["Process"] = self.process!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Process"] as? String {
                self.process = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var requestId: String?

    public var tasks: [DescribePurgeTasksResponseBody.Tasks]?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tasks != nil {
            var tmp : [Any] = []
            for k in self.tasks! {
                tmp.append(k.toMap())
            }
            map["Tasks"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Tasks"] as? [Any?] {
            var tmp : [DescribePurgeTasksResponseBody.Tasks] = []
            for v in value {
                if v != nil {
                    var model = DescribePurgeTasksResponseBody.Tasks()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tasks = tmp
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribePurgeTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePurgeTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePurgeTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRatePlanInstanceStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
    }
}

public class DescribeRatePlanInstanceStatusResponseBody : Tea.TeaModel {
    public var instanceId: String?

    public var instanceStatus: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.instanceStatus != nil {
            map["InstanceStatus"] = self.instanceStatus!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["InstanceStatus"] as? String {
            self.instanceStatus = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeRatePlanInstanceStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRatePlanInstanceStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRatePlanInstanceStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSiteLogsRequest : Tea.TeaModel {
    public var endTime: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var siteId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeSiteLogsResponseBody : Tea.TeaModel {
    public class SiteLogDetails : Tea.TeaModel {
        public class LogInfos : Tea.TeaModel {
            public var endTime: String?

            public var logName: String?

            public var logPath: String?

            public var logSize: Int32?

            public var startTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.logName != nil {
                    map["LogName"] = self.logName!
                }
                if self.logPath != nil {
                    map["LogPath"] = self.logPath!
                }
                if self.logSize != nil {
                    map["LogSize"] = self.logSize!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["LogName"] as? String {
                    self.logName = value
                }
                if let value = dict["LogPath"] as? String {
                    self.logPath = value
                }
                if let value = dict["LogSize"] as? Int32 {
                    self.logSize = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
            }
        }
        public class PageInfos : Tea.TeaModel {
            public var pageIndex: Int32?

            public var pageSize: Int32?

            public var totalCount: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.pageIndex != nil {
                    map["PageIndex"] = self.pageIndex!
                }
                if self.pageSize != nil {
                    map["PageSize"] = self.pageSize!
                }
                if self.totalCount != nil {
                    map["TotalCount"] = self.totalCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PageIndex"] as? Int32 {
                    self.pageIndex = value
                }
                if let value = dict["PageSize"] as? Int32 {
                    self.pageSize = value
                }
                if let value = dict["TotalCount"] as? Int32 {
                    self.totalCount = value
                }
            }
        }
        public var logCount: Int32?

        public var logInfos: [DescribeSiteLogsResponseBody.SiteLogDetails.LogInfos]?

        public var pageInfos: DescribeSiteLogsResponseBody.SiteLogDetails.PageInfos?

        public var siteId: Int64?

        public var siteName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.pageInfos?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.logCount != nil {
                map["LogCount"] = self.logCount!
            }
            if self.logInfos != nil {
                var tmp : [Any] = []
                for k in self.logInfos! {
                    tmp.append(k.toMap())
                }
                map["LogInfos"] = tmp
            }
            if self.pageInfos != nil {
                map["PageInfos"] = self.pageInfos?.toMap()
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            if self.siteName != nil {
                map["SiteName"] = self.siteName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["LogCount"] as? Int32 {
                self.logCount = value
            }
            if let value = dict["LogInfos"] as? [Any?] {
                var tmp : [DescribeSiteLogsResponseBody.SiteLogDetails.LogInfos] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSiteLogsResponseBody.SiteLogDetails.LogInfos()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.logInfos = tmp
            }
            if let value = dict["PageInfos"] as? [String: Any?] {
                var model = DescribeSiteLogsResponseBody.SiteLogDetails.PageInfos()
                model.fromMap(value)
                self.pageInfos = model
            }
            if let value = dict["SiteId"] as? Int64 {
                self.siteId = value
            }
            if let value = dict["SiteName"] as? String {
                self.siteName = value
            }
        }
    }
    public var requestId: String?

    public var siteLogDetails: [DescribeSiteLogsResponseBody.SiteLogDetails]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteLogDetails != nil {
            var tmp : [Any] = []
            for k in self.siteLogDetails! {
                tmp.append(k.toMap())
            }
            map["SiteLogDetails"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteLogDetails"] as? [Any?] {
            var tmp : [DescribeSiteLogsResponseBody.SiteLogDetails] = []
            for v in value {
                if v != nil {
                    var model = DescribeSiteLogsResponseBody.SiteLogDetails()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.siteLogDetails = tmp
        }
    }
}

public class DescribeSiteLogsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSiteLogsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSiteLogsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSiteTimeSeriesDataRequest : Tea.TeaModel {
    public class Fields : Tea.TeaModel {
        public var dimension: [String]?

        public var fieldName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dimension != nil {
                map["Dimension"] = self.dimension!
            }
            if self.fieldName != nil {
                map["FieldName"] = self.fieldName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Dimension"] as? [String] {
                self.dimension = value
            }
            if let value = dict["FieldName"] as? String {
                self.fieldName = value
            }
        }
    }
    public var endTime: String?

    public var fields: [DescribeSiteTimeSeriesDataRequest.Fields]?

    public var interval: String?

    public var siteId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.fields != nil {
            var tmp : [Any] = []
            for k in self.fields! {
                tmp.append(k.toMap())
            }
            map["Fields"] = tmp
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Fields"] as? [Any?] {
            var tmp : [DescribeSiteTimeSeriesDataRequest.Fields] = []
            for v in value {
                if v != nil {
                    var model = DescribeSiteTimeSeriesDataRequest.Fields()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.fields = tmp
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["SiteId"] as? String {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeSiteTimeSeriesDataShrinkRequest : Tea.TeaModel {
    public var endTime: String?

    public var fieldsShrink: String?

    public var interval: String?

    public var siteId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.fieldsShrink != nil {
            map["Fields"] = self.fieldsShrink!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Fields"] as? String {
            self.fieldsShrink = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["SiteId"] as? String {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeSiteTimeSeriesDataResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class DetailData : Tea.TeaModel {
            public var timeStamp: String?

            public var value: Any?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
                if let value = dict["Value"] as? Any {
                    self.value = value
                }
            }
        }
        public var detailData: [DescribeSiteTimeSeriesDataResponseBody.Data.DetailData]?

        public var dimensionName: String?

        public var dimensionValue: String?

        public var fieldName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.detailData != nil {
                var tmp : [Any] = []
                for k in self.detailData! {
                    tmp.append(k.toMap())
                }
                map["DetailData"] = tmp
            }
            if self.dimensionName != nil {
                map["DimensionName"] = self.dimensionName!
            }
            if self.dimensionValue != nil {
                map["DimensionValue"] = self.dimensionValue!
            }
            if self.fieldName != nil {
                map["FieldName"] = self.fieldName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DetailData"] as? [Any?] {
                var tmp : [DescribeSiteTimeSeriesDataResponseBody.Data.DetailData] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSiteTimeSeriesDataResponseBody.Data.DetailData()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.detailData = tmp
            }
            if let value = dict["DimensionName"] as? String {
                self.dimensionName = value
            }
            if let value = dict["DimensionValue"] as? String {
                self.dimensionValue = value
            }
            if let value = dict["FieldName"] as? String {
                self.fieldName = value
            }
        }
    }
    public class SummarizedData : Tea.TeaModel {
        public var aggMethod: String?

        public var dimensionName: String?

        public var dimensionValue: String?

        public var fieldName: String?

        public var value: Any?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aggMethod != nil {
                map["AggMethod"] = self.aggMethod!
            }
            if self.dimensionName != nil {
                map["DimensionName"] = self.dimensionName!
            }
            if self.dimensionValue != nil {
                map["DimensionValue"] = self.dimensionValue!
            }
            if self.fieldName != nil {
                map["FieldName"] = self.fieldName!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AggMethod"] as? String {
                self.aggMethod = value
            }
            if let value = dict["DimensionName"] as? String {
                self.dimensionName = value
            }
            if let value = dict["DimensionValue"] as? String {
                self.dimensionValue = value
            }
            if let value = dict["FieldName"] as? String {
                self.fieldName = value
            }
            if let value = dict["Value"] as? Any {
                self.value = value
            }
        }
    }
    public var data: [DescribeSiteTimeSeriesDataResponseBody.Data]?

    public var endTime: String?

    public var interval: Int64?

    public var requestId: String?

    public var samplingRate: Double?

    public var startTime: String?

    public var summarizedData: [DescribeSiteTimeSeriesDataResponseBody.SummarizedData]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.samplingRate != nil {
            map["SamplingRate"] = self.samplingRate!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.summarizedData != nil {
            var tmp : [Any] = []
            for k in self.summarizedData! {
                tmp.append(k.toMap())
            }
            map["SummarizedData"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeSiteTimeSeriesDataResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeSiteTimeSeriesDataResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Interval"] as? Int64 {
            self.interval = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SamplingRate"] as? Double {
            self.samplingRate = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["SummarizedData"] as? [Any?] {
            var tmp : [DescribeSiteTimeSeriesDataResponseBody.SummarizedData] = []
            for v in value {
                if v != nil {
                    var model = DescribeSiteTimeSeriesDataResponseBody.SummarizedData()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.summarizedData = tmp
        }
    }
}

public class DescribeSiteTimeSeriesDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSiteTimeSeriesDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSiteTimeSeriesDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSiteTopDataRequest : Tea.TeaModel {
    public class Fields : Tea.TeaModel {
        public var dimension: [String]?

        public var fieldName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dimension != nil {
                map["Dimension"] = self.dimension!
            }
            if self.fieldName != nil {
                map["FieldName"] = self.fieldName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Dimension"] as? [String] {
                self.dimension = value
            }
            if let value = dict["FieldName"] as? String {
                self.fieldName = value
            }
        }
    }
    public var endTime: String?

    public var fields: [DescribeSiteTopDataRequest.Fields]?

    public var interval: String?

    public var limit: String?

    public var siteId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.fields != nil {
            var tmp : [Any] = []
            for k in self.fields! {
                tmp.append(k.toMap())
            }
            map["Fields"] = tmp
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Fields"] as? [Any?] {
            var tmp : [DescribeSiteTopDataRequest.Fields] = []
            for v in value {
                if v != nil {
                    var model = DescribeSiteTopDataRequest.Fields()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.fields = tmp
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["Limit"] as? String {
            self.limit = value
        }
        if let value = dict["SiteId"] as? String {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeSiteTopDataShrinkRequest : Tea.TeaModel {
    public var endTime: String?

    public var fieldsShrink: String?

    public var interval: String?

    public var limit: String?

    public var siteId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.fieldsShrink != nil {
            map["Fields"] = self.fieldsShrink!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Fields"] as? String {
            self.fieldsShrink = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["Limit"] as? String {
            self.limit = value
        }
        if let value = dict["SiteId"] as? String {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeSiteTopDataResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class DetailData : Tea.TeaModel {
            public var dimensionValue: String?

            public var value: Any?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dimensionValue != nil {
                    map["DimensionValue"] = self.dimensionValue!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DimensionValue"] as? String {
                    self.dimensionValue = value
                }
                if let value = dict["Value"] as? Any {
                    self.value = value
                }
            }
        }
        public var detailData: [DescribeSiteTopDataResponseBody.Data.DetailData]?

        public var dimensionName: String?

        public var fieldName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.detailData != nil {
                var tmp : [Any] = []
                for k in self.detailData! {
                    tmp.append(k.toMap())
                }
                map["DetailData"] = tmp
            }
            if self.dimensionName != nil {
                map["DimensionName"] = self.dimensionName!
            }
            if self.fieldName != nil {
                map["FieldName"] = self.fieldName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DetailData"] as? [Any?] {
                var tmp : [DescribeSiteTopDataResponseBody.Data.DetailData] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSiteTopDataResponseBody.Data.DetailData()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.detailData = tmp
            }
            if let value = dict["DimensionName"] as? String {
                self.dimensionName = value
            }
            if let value = dict["FieldName"] as? String {
                self.fieldName = value
            }
        }
    }
    public var data: [DescribeSiteTopDataResponseBody.Data]?

    public var endTime: String?

    public var requestId: String?

    public var samplingRate: Double?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.samplingRate != nil {
            map["SamplingRate"] = self.samplingRate!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [DescribeSiteTopDataResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = DescribeSiteTopDataResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SamplingRate"] as? Double {
            self.samplingRate = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeSiteTopDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSiteTopDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSiteTopDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DisableCustomScenePolicyRequest : Tea.TeaModel {
    public var policyId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? Int64 {
            self.policyId = value
        }
    }
}

public class DisableCustomScenePolicyResponseBody : Tea.TeaModel {
    public var policyId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? Int64 {
            self.policyId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DisableCustomScenePolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisableCustomScenePolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DisableCustomScenePolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EditSiteWafSettingsRequest : Tea.TeaModel {
    public var settings: WafSiteSettings?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.settings?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.settings != nil {
            map["Settings"] = self.settings?.toMap()
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Settings"] as? [String: Any?] {
            var model = WafSiteSettings()
            model.fromMap(value)
            self.settings = model
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class EditSiteWafSettingsShrinkRequest : Tea.TeaModel {
    public var settingsShrink: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.settingsShrink != nil {
            map["Settings"] = self.settingsShrink!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Settings"] as? String {
            self.settingsShrink = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class EditSiteWafSettingsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class EditSiteWafSettingsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EditSiteWafSettingsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EditSiteWafSettingsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EnableCustomScenePolicyRequest : Tea.TeaModel {
    public var policyId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? Int64 {
            self.policyId = value
        }
    }
}

public class EnableCustomScenePolicyResponseBody : Tea.TeaModel {
    public var policyId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyId"] as? Int64 {
            self.policyId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class EnableCustomScenePolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EnableCustomScenePolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EnableCustomScenePolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportRecordsRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ExportRecordsResponseBody : Tea.TeaModel {
    public var content: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ExportRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCacheReserveSpecificationResponseBody : Tea.TeaModel {
    public var cacheReserveCapacity: [String]?

    public var cacheReserveRegion: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cacheReserveCapacity != nil {
            map["CacheReserveCapacity"] = self.cacheReserveCapacity!
        }
        if self.cacheReserveRegion != nil {
            map["CacheReserveRegion"] = self.cacheReserveRegion!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CacheReserveCapacity"] as? [String] {
            self.cacheReserveCapacity = value
        }
        if let value = dict["CacheReserveRegion"] as? [String] {
            self.cacheReserveRegion = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetCacheReserveSpecificationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCacheReserveSpecificationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCacheReserveSpecificationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCacheRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetCacheRuleResponseBody : Tea.TeaModel {
    public var additionalCacheablePorts: String?

    public var browserCacheMode: String?

    public var browserCacheTtl: String?

    public var bypassCache: String?

    public var cacheDeceptionArmor: String?

    public var cacheReserveEligibility: String?

    public var checkPresenceCookie: String?

    public var checkPresenceHeader: String?

    public var configId: Int64?

    public var configType: String?

    public var edgeCacheMode: String?

    public var edgeCacheTtl: String?

    public var edgeStatusCodeCacheTtl: String?

    public var includeCookie: String?

    public var includeHeader: String?

    public var queryString: String?

    public var queryStringMode: String?

    public var requestId: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var serveStale: String?

    public var siteVersion: Int32?

    public var sortQueryStringForCache: String?

    public var userDeviceType: String?

    public var userGeo: String?

    public var userLanguage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.additionalCacheablePorts != nil {
            map["AdditionalCacheablePorts"] = self.additionalCacheablePorts!
        }
        if self.browserCacheMode != nil {
            map["BrowserCacheMode"] = self.browserCacheMode!
        }
        if self.browserCacheTtl != nil {
            map["BrowserCacheTtl"] = self.browserCacheTtl!
        }
        if self.bypassCache != nil {
            map["BypassCache"] = self.bypassCache!
        }
        if self.cacheDeceptionArmor != nil {
            map["CacheDeceptionArmor"] = self.cacheDeceptionArmor!
        }
        if self.cacheReserveEligibility != nil {
            map["CacheReserveEligibility"] = self.cacheReserveEligibility!
        }
        if self.checkPresenceCookie != nil {
            map["CheckPresenceCookie"] = self.checkPresenceCookie!
        }
        if self.checkPresenceHeader != nil {
            map["CheckPresenceHeader"] = self.checkPresenceHeader!
        }
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.edgeCacheMode != nil {
            map["EdgeCacheMode"] = self.edgeCacheMode!
        }
        if self.edgeCacheTtl != nil {
            map["EdgeCacheTtl"] = self.edgeCacheTtl!
        }
        if self.edgeStatusCodeCacheTtl != nil {
            map["EdgeStatusCodeCacheTtl"] = self.edgeStatusCodeCacheTtl!
        }
        if self.includeCookie != nil {
            map["IncludeCookie"] = self.includeCookie!
        }
        if self.includeHeader != nil {
            map["IncludeHeader"] = self.includeHeader!
        }
        if self.queryString != nil {
            map["QueryString"] = self.queryString!
        }
        if self.queryStringMode != nil {
            map["QueryStringMode"] = self.queryStringMode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.serveStale != nil {
            map["ServeStale"] = self.serveStale!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.sortQueryStringForCache != nil {
            map["SortQueryStringForCache"] = self.sortQueryStringForCache!
        }
        if self.userDeviceType != nil {
            map["UserDeviceType"] = self.userDeviceType!
        }
        if self.userGeo != nil {
            map["UserGeo"] = self.userGeo!
        }
        if self.userLanguage != nil {
            map["UserLanguage"] = self.userLanguage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdditionalCacheablePorts"] as? String {
            self.additionalCacheablePorts = value
        }
        if let value = dict["BrowserCacheMode"] as? String {
            self.browserCacheMode = value
        }
        if let value = dict["BrowserCacheTtl"] as? String {
            self.browserCacheTtl = value
        }
        if let value = dict["BypassCache"] as? String {
            self.bypassCache = value
        }
        if let value = dict["CacheDeceptionArmor"] as? String {
            self.cacheDeceptionArmor = value
        }
        if let value = dict["CacheReserveEligibility"] as? String {
            self.cacheReserveEligibility = value
        }
        if let value = dict["CheckPresenceCookie"] as? String {
            self.checkPresenceCookie = value
        }
        if let value = dict["CheckPresenceHeader"] as? String {
            self.checkPresenceHeader = value
        }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["EdgeCacheMode"] as? String {
            self.edgeCacheMode = value
        }
        if let value = dict["EdgeCacheTtl"] as? String {
            self.edgeCacheTtl = value
        }
        if let value = dict["EdgeStatusCodeCacheTtl"] as? String {
            self.edgeStatusCodeCacheTtl = value
        }
        if let value = dict["IncludeCookie"] as? String {
            self.includeCookie = value
        }
        if let value = dict["IncludeHeader"] as? String {
            self.includeHeader = value
        }
        if let value = dict["QueryString"] as? String {
            self.queryString = value
        }
        if let value = dict["QueryStringMode"] as? String {
            self.queryStringMode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["ServeStale"] as? String {
            self.serveStale = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["SortQueryStringForCache"] as? String {
            self.sortQueryStringForCache = value
        }
        if let value = dict["UserDeviceType"] as? String {
            self.userDeviceType = value
        }
        if let value = dict["UserGeo"] as? String {
            self.userGeo = value
        }
        if let value = dict["UserLanguage"] as? String {
            self.userLanguage = value
        }
    }
}

public class GetCacheRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCacheRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCacheRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCacheTagRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class GetCacheTagResponseBody : Tea.TeaModel {
    public var caseInsensitive: String?

    public var requestId: String?

    public var siteVersion: Int32?

    public var tagName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.caseInsensitive != nil {
            map["CaseInsensitive"] = self.caseInsensitive!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.tagName != nil {
            map["TagName"] = self.tagName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CaseInsensitive"] as? String {
            self.caseInsensitive = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["TagName"] as? String {
            self.tagName = value
        }
    }
}

public class GetCacheTagResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCacheTagResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCacheTagResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetCertificateResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public class DCV : Tea.TeaModel {
            public var id: String?

            public var key: String?

            public var status: String?

            public var type: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var applyCode: Int64?

        public var applyMessage: String?

        public var casId: String?

        public var commonName: String?

        public var createTime: String?

        public var DCV: [GetCertificateResponseBody.Result.DCV]?

        public var fingerprintSha256: String?

        public var id: String?

        public var issuer: String?

        public var issuerCN: String?

        public var name: String?

        public var notAfter: String?

        public var notBefore: String?

        public var pubAlg: String?

        public var region: String?

        public var SAN: String?

        public var serialNumber: String?

        public var sigAlg: String?

        public var status: String?

        public var type: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyCode != nil {
                map["ApplyCode"] = self.applyCode!
            }
            if self.applyMessage != nil {
                map["ApplyMessage"] = self.applyMessage!
            }
            if self.casId != nil {
                map["CasId"] = self.casId!
            }
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.DCV != nil {
                var tmp : [Any] = []
                for k in self.DCV! {
                    tmp.append(k.toMap())
                }
                map["DCV"] = tmp
            }
            if self.fingerprintSha256 != nil {
                map["FingerprintSha256"] = self.fingerprintSha256!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.issuer != nil {
                map["Issuer"] = self.issuer!
            }
            if self.issuerCN != nil {
                map["IssuerCN"] = self.issuerCN!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.notAfter != nil {
                map["NotAfter"] = self.notAfter!
            }
            if self.notBefore != nil {
                map["NotBefore"] = self.notBefore!
            }
            if self.pubAlg != nil {
                map["PubAlg"] = self.pubAlg!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.SAN != nil {
                map["SAN"] = self.SAN!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.sigAlg != nil {
                map["SigAlg"] = self.sigAlg!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplyCode"] as? Int64 {
                self.applyCode = value
            }
            if let value = dict["ApplyMessage"] as? String {
                self.applyMessage = value
            }
            if let value = dict["CasId"] as? String {
                self.casId = value
            }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["DCV"] as? [Any?] {
                var tmp : [GetCertificateResponseBody.Result.DCV] = []
                for v in value {
                    if v != nil {
                        var model = GetCertificateResponseBody.Result.DCV()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.DCV = tmp
            }
            if let value = dict["FingerprintSha256"] as? String {
                self.fingerprintSha256 = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Issuer"] as? String {
                self.issuer = value
            }
            if let value = dict["IssuerCN"] as? String {
                self.issuerCN = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NotAfter"] as? String {
                self.notAfter = value
            }
            if let value = dict["NotBefore"] as? String {
                self.notBefore = value
            }
            if let value = dict["PubAlg"] as? String {
                self.pubAlg = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["SAN"] as? String {
                self.SAN = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["SigAlg"] as? String {
                self.sigAlg = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var certificate: String?

    public var requestId: String?

    public var result: GetCertificateResponseBody.Result?

    public var siteId: Int64?

    public var siteName: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.result?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificate != nil {
            map["Certificate"] = self.certificate!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result?.toMap()
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Certificate"] as? String {
            self.certificate = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [String: Any?] {
            var model = GetCertificateResponseBody.Result()
            model.fromMap(value)
            self.result = model
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class GetCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCertificateQuotaRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class GetCertificateQuotaResponseBody : Tea.TeaModel {
    public class SiteUsage : Tea.TeaModel {
        public var siteId: String?

        public var siteName: String?

        public var siteUsage: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            if self.siteName != nil {
                map["SiteName"] = self.siteName!
            }
            if self.siteUsage != nil {
                map["SiteUsage"] = self.siteUsage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SiteId"] as? String {
                self.siteId = value
            }
            if let value = dict["SiteName"] as? String {
                self.siteName = value
            }
            if let value = dict["SiteUsage"] as? Int64 {
                self.siteUsage = value
            }
        }
    }
    public var quota: Int64?

    public var quotaUsage: Int64?

    public var requestId: String?

    public var siteCount: Int64?

    public var siteUsage: [GetCertificateQuotaResponseBody.SiteUsage]?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.quota != nil {
            map["Quota"] = self.quota!
        }
        if self.quotaUsage != nil {
            map["QuotaUsage"] = self.quotaUsage!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteCount != nil {
            map["SiteCount"] = self.siteCount!
        }
        if self.siteUsage != nil {
            var tmp : [Any] = []
            for k in self.siteUsage! {
                tmp.append(k.toMap())
            }
            map["SiteUsage"] = tmp
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Quota"] as? Int64 {
            self.quota = value
        }
        if let value = dict["QuotaUsage"] as? Int64 {
            self.quotaUsage = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteCount"] as? Int64 {
            self.siteCount = value
        }
        if let value = dict["SiteUsage"] as? [Any?] {
            var tmp : [GetCertificateQuotaResponseBody.SiteUsage] = []
            for v in value {
                if v != nil {
                    var model = GetCertificateQuotaResponseBody.SiteUsage()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.siteUsage = tmp
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class GetCertificateQuotaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCertificateQuotaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCertificateQuotaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetClientCaCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetClientCaCertificateResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var commonName: String?

        public var createTime: String?

        public var fingerprintSha256: String?

        public var id: String?

        public var issuer: String?

        public var name: String?

        public var notAfter: String?

        public var notBefore: String?

        public var pubkeyAlgorithm: String?

        public var SAN: String?

        public var serialNumber: String?

        public var signatureAlgorithm: String?

        public var status: String?

        public var type: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.fingerprintSha256 != nil {
                map["FingerprintSha256"] = self.fingerprintSha256!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.issuer != nil {
                map["Issuer"] = self.issuer!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.notAfter != nil {
                map["NotAfter"] = self.notAfter!
            }
            if self.notBefore != nil {
                map["NotBefore"] = self.notBefore!
            }
            if self.pubkeyAlgorithm != nil {
                map["PubkeyAlgorithm"] = self.pubkeyAlgorithm!
            }
            if self.SAN != nil {
                map["SAN"] = self.SAN!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.signatureAlgorithm != nil {
                map["SignatureAlgorithm"] = self.signatureAlgorithm!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["FingerprintSha256"] as? String {
                self.fingerprintSha256 = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Issuer"] as? String {
                self.issuer = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NotAfter"] as? String {
                self.notAfter = value
            }
            if let value = dict["NotBefore"] as? String {
                self.notBefore = value
            }
            if let value = dict["PubkeyAlgorithm"] as? String {
                self.pubkeyAlgorithm = value
            }
            if let value = dict["SAN"] as? String {
                self.SAN = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["SignatureAlgorithm"] as? String {
                self.signatureAlgorithm = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var certificate: String?

    public var requestId: String?

    public var result: GetClientCaCertificateResponseBody.Result?

    public var siteId: Int64?

    public var siteName: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.result?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificate != nil {
            map["Certificate"] = self.certificate!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result?.toMap()
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Certificate"] as? String {
            self.certificate = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [String: Any?] {
            var model = GetClientCaCertificateResponseBody.Result()
            model.fromMap(value)
            self.result = model
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class GetClientCaCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetClientCaCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetClientCaCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetClientCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetClientCertificateResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var CACertificateId: String?

        public var commonName: String?

        public var createTime: String?

        public var fingerprintSha256: String?

        public var id: String?

        public var issuer: String?

        public var name: String?

        public var notAfter: String?

        public var notBefore: String?

        public var pubkeyAlgorithm: String?

        public var SAN: String?

        public var serialNumber: String?

        public var signatureAlgorithm: String?

        public var status: String?

        public var type: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.CACertificateId != nil {
                map["CACertificateId"] = self.CACertificateId!
            }
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.fingerprintSha256 != nil {
                map["FingerprintSha256"] = self.fingerprintSha256!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.issuer != nil {
                map["Issuer"] = self.issuer!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.notAfter != nil {
                map["NotAfter"] = self.notAfter!
            }
            if self.notBefore != nil {
                map["NotBefore"] = self.notBefore!
            }
            if self.pubkeyAlgorithm != nil {
                map["PubkeyAlgorithm"] = self.pubkeyAlgorithm!
            }
            if self.SAN != nil {
                map["SAN"] = self.SAN!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.signatureAlgorithm != nil {
                map["SignatureAlgorithm"] = self.signatureAlgorithm!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CACertificateId"] as? String {
                self.CACertificateId = value
            }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["FingerprintSha256"] as? String {
                self.fingerprintSha256 = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Issuer"] as? String {
                self.issuer = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NotAfter"] as? String {
                self.notAfter = value
            }
            if let value = dict["NotBefore"] as? String {
                self.notBefore = value
            }
            if let value = dict["PubkeyAlgorithm"] as? String {
                self.pubkeyAlgorithm = value
            }
            if let value = dict["SAN"] as? String {
                self.SAN = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["SignatureAlgorithm"] as? String {
                self.signatureAlgorithm = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var certificate: String?

    public var requestId: String?

    public var result: GetClientCertificateResponseBody.Result?

    public var siteId: Int64?

    public var siteName: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.result?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificate != nil {
            map["Certificate"] = self.certificate!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result?.toMap()
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Certificate"] as? String {
            self.certificate = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [String: Any?] {
            var model = GetClientCertificateResponseBody.Result()
            model.fromMap(value)
            self.result = model
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class GetClientCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetClientCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetClientCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetClientCertificateHostnamesRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetClientCertificateHostnamesResponseBody : Tea.TeaModel {
    public var hostnames: [String]?

    public var id: String?

    public var requestId: String?

    public var siteId: Int64?

    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hostnames != nil {
            map["Hostnames"] = self.hostnames!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Hostnames"] as? [String] {
            self.hostnames = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class GetClientCertificateHostnamesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetClientCertificateHostnamesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetClientCertificateHostnamesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCnameFlatteningRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetCnameFlatteningResponseBody : Tea.TeaModel {
    public var flattenMode: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.flattenMode != nil {
            map["FlattenMode"] = self.flattenMode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FlattenMode"] as? String {
            self.flattenMode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetCnameFlatteningResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCnameFlatteningResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCnameFlatteningResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCompressionRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetCompressionRuleResponseBody : Tea.TeaModel {
    public var brotli: String?

    public var configId: Int64?

    public var configType: String?

    public var gzip: String?

    public var requestId: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteVersion: Int32?

    public var zstd: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.brotli != nil {
            map["Brotli"] = self.brotli!
        }
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.gzip != nil {
            map["Gzip"] = self.gzip!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.zstd != nil {
            map["Zstd"] = self.zstd!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Brotli"] as? String {
            self.brotli = value
        }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["Gzip"] as? String {
            self.gzip = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["Zstd"] as? String {
            self.zstd = value
        }
    }
}

public class GetCompressionRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCompressionRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCompressionRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCrossBorderOptimizationRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetCrossBorderOptimizationResponseBody : Tea.TeaModel {
    public var enable: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetCrossBorderOptimizationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCrossBorderOptimizationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCrossBorderOptimizationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDevelopmentModeRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetDevelopmentModeResponseBody : Tea.TeaModel {
    public var enable: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetDevelopmentModeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDevelopmentModeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDevelopmentModeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEdgeContainerAppRequest : Tea.TeaModel {
    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class GetEdgeContainerAppResponseBody : Tea.TeaModel {
    public class App : Tea.TeaModel {
        public class HealthCheck : Tea.TeaModel {
            public var failTimes: Int32?

            public var host: String?

            public var httpCode: String?

            public var interval: Int32?

            public var method: String?

            public var port: Int32?

            public var succTimes: Int32?

            public var timeout: Int32?

            public var type: String?

            public var uri: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.failTimes != nil {
                    map["FailTimes"] = self.failTimes!
                }
                if self.host != nil {
                    map["Host"] = self.host!
                }
                if self.httpCode != nil {
                    map["HttpCode"] = self.httpCode!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.succTimes != nil {
                    map["SuccTimes"] = self.succTimes!
                }
                if self.timeout != nil {
                    map["Timeout"] = self.timeout!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.uri != nil {
                    map["Uri"] = self.uri!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FailTimes"] as? Int32 {
                    self.failTimes = value
                }
                if let value = dict["Host"] as? String {
                    self.host = value
                }
                if let value = dict["HttpCode"] as? String {
                    self.httpCode = value
                }
                if let value = dict["Interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["SuccTimes"] as? Int32 {
                    self.succTimes = value
                }
                if let value = dict["Timeout"] as? Int32 {
                    self.timeout = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Uri"] as? String {
                    self.uri = value
                }
            }
        }
        public var appId: String?

        public var createTime: String?

        public var domainName: String?

        public var gatewayType: String?

        public var healthCheck: GetEdgeContainerAppResponseBody.App.HealthCheck?

        public var name: String?

        public var quicCid: String?

        public var remarks: String?

        public var servicePort: Int32?

        public var status: String?

        public var targetPort: Int32?

        public var updateTime: String?

        public var versionCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.healthCheck?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.domainName != nil {
                map["DomainName"] = self.domainName!
            }
            if self.gatewayType != nil {
                map["GatewayType"] = self.gatewayType!
            }
            if self.healthCheck != nil {
                map["HealthCheck"] = self.healthCheck?.toMap()
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.quicCid != nil {
                map["QuicCid"] = self.quicCid!
            }
            if self.remarks != nil {
                map["Remarks"] = self.remarks!
            }
            if self.servicePort != nil {
                map["ServicePort"] = self.servicePort!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.targetPort != nil {
                map["TargetPort"] = self.targetPort!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.versionCount != nil {
                map["VersionCount"] = self.versionCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["DomainName"] as? String {
                self.domainName = value
            }
            if let value = dict["GatewayType"] as? String {
                self.gatewayType = value
            }
            if let value = dict["HealthCheck"] as? [String: Any?] {
                var model = GetEdgeContainerAppResponseBody.App.HealthCheck()
                model.fromMap(value)
                self.healthCheck = model
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["QuicCid"] as? String {
                self.quicCid = value
            }
            if let value = dict["Remarks"] as? String {
                self.remarks = value
            }
            if let value = dict["ServicePort"] as? Int32 {
                self.servicePort = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TargetPort"] as? Int32 {
                self.targetPort = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["VersionCount"] as? Int32 {
                self.versionCount = value
            }
        }
    }
    public var app: GetEdgeContainerAppResponseBody.App?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.app?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.app != nil {
            map["App"] = self.app?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["App"] as? [String: Any?] {
            var model = GetEdgeContainerAppResponseBody.App()
            model.fromMap(value)
            self.app = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetEdgeContainerAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEdgeContainerAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEdgeContainerAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEdgeContainerAppLogRiverRequest : Tea.TeaModel {
    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class GetEdgeContainerAppLogRiverResponseBody : Tea.TeaModel {
    public var path: String?

    public var requestId: String?

    public var stdout: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.path != nil {
            map["Path"] = self.path!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.stdout != nil {
            map["Stdout"] = self.stdout!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Path"] as? String {
            self.path = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Stdout"] as? Bool {
            self.stdout = value
        }
    }
}

public class GetEdgeContainerAppLogRiverResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEdgeContainerAppLogRiverResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEdgeContainerAppLogRiverResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEdgeContainerAppResourceReserveRequest : Tea.TeaModel {
    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class GetEdgeContainerAppResourceReserveResponseBody : Tea.TeaModel {
    public class ReserveSet : Tea.TeaModel {
        public var isp: String?

        public var region: String?

        public var replicas: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.isp != nil {
                map["Isp"] = self.isp!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.replicas != nil {
                map["Replicas"] = self.replicas!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Isp"] as? String {
                self.isp = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["Replicas"] as? Int32 {
                self.replicas = value
            }
        }
    }
    public var durationTime: String?

    public var enable: Bool?

    public var forever: Bool?

    public var requestId: String?

    public var reserveSet: [GetEdgeContainerAppResourceReserveResponseBody.ReserveSet]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.durationTime != nil {
            map["DurationTime"] = self.durationTime!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.forever != nil {
            map["Forever"] = self.forever!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.reserveSet != nil {
            var tmp : [Any] = []
            for k in self.reserveSet! {
                tmp.append(k.toMap())
            }
            map["ReserveSet"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DurationTime"] as? String {
            self.durationTime = value
        }
        if let value = dict["Enable"] as? Bool {
            self.enable = value
        }
        if let value = dict["Forever"] as? Bool {
            self.forever = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ReserveSet"] as? [Any?] {
            var tmp : [GetEdgeContainerAppResourceReserveResponseBody.ReserveSet] = []
            for v in value {
                if v != nil {
                    var model = GetEdgeContainerAppResourceReserveResponseBody.ReserveSet()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.reserveSet = tmp
        }
    }
}

public class GetEdgeContainerAppResourceReserveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEdgeContainerAppResourceReserveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEdgeContainerAppResourceReserveResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEdgeContainerAppResourceStatusRequest : Tea.TeaModel {
    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class GetEdgeContainerAppResourceStatusResponseBody : Tea.TeaModel {
    public class Regions : Tea.TeaModel {
        public var isp: String?

        public var ready: Int32?

        public var region: String?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.isp != nil {
                map["Isp"] = self.isp!
            }
            if self.ready != nil {
                map["Ready"] = self.ready!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Isp"] as? String {
                self.isp = value
            }
            if let value = dict["Ready"] as? Int32 {
                self.ready = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var regions: [GetEdgeContainerAppResourceStatusResponseBody.Regions]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regions != nil {
            var tmp : [Any] = []
            for k in self.regions! {
                tmp.append(k.toMap())
            }
            map["Regions"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Regions"] as? [Any?] {
            var tmp : [GetEdgeContainerAppResourceStatusResponseBody.Regions] = []
            for v in value {
                if v != nil {
                    var model = GetEdgeContainerAppResourceStatusResponseBody.Regions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.regions = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetEdgeContainerAppResourceStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEdgeContainerAppResourceStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEdgeContainerAppResourceStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEdgeContainerAppStatusRequest : Tea.TeaModel {
    public var appId: String?

    public var publishEnv: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.publishEnv != nil {
            map["PublishEnv"] = self.publishEnv!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["PublishEnv"] as? String {
            self.publishEnv = value
        }
    }
}

public class GetEdgeContainerAppStatusResponseBody : Tea.TeaModel {
    public class AppStatus : Tea.TeaModel {
        public class Regions : Tea.TeaModel {
            public var region: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.region != nil {
                    map["Region"] = self.region!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Region"] as? [String] {
                    self.region = value
                }
            }
        }
        public var baseLineVersion: String?

        public var deployStatus: String?

        public var deployTime: String?

        public var deployedVersion: String?

        public var expectPercentage: Int32?

        public var fullRelease: Bool?

        public var publishEnv: String?

        public var publishPercentage: Int32?

        public var publishStatus: String?

        public var publishTime: String?

        public var publishType: String?

        public var publishingVersion: String?

        public var regions: GetEdgeContainerAppStatusResponseBody.AppStatus.Regions?

        public var rollbackTime: String?

        public var unDeployTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.regions?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.baseLineVersion != nil {
                map["BaseLineVersion"] = self.baseLineVersion!
            }
            if self.deployStatus != nil {
                map["DeployStatus"] = self.deployStatus!
            }
            if self.deployTime != nil {
                map["DeployTime"] = self.deployTime!
            }
            if self.deployedVersion != nil {
                map["DeployedVersion"] = self.deployedVersion!
            }
            if self.expectPercentage != nil {
                map["ExpectPercentage"] = self.expectPercentage!
            }
            if self.fullRelease != nil {
                map["FullRelease"] = self.fullRelease!
            }
            if self.publishEnv != nil {
                map["PublishEnv"] = self.publishEnv!
            }
            if self.publishPercentage != nil {
                map["PublishPercentage"] = self.publishPercentage!
            }
            if self.publishStatus != nil {
                map["PublishStatus"] = self.publishStatus!
            }
            if self.publishTime != nil {
                map["PublishTime"] = self.publishTime!
            }
            if self.publishType != nil {
                map["PublishType"] = self.publishType!
            }
            if self.publishingVersion != nil {
                map["PublishingVersion"] = self.publishingVersion!
            }
            if self.regions != nil {
                map["Regions"] = self.regions?.toMap()
            }
            if self.rollbackTime != nil {
                map["RollbackTime"] = self.rollbackTime!
            }
            if self.unDeployTime != nil {
                map["UnDeployTime"] = self.unDeployTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BaseLineVersion"] as? String {
                self.baseLineVersion = value
            }
            if let value = dict["DeployStatus"] as? String {
                self.deployStatus = value
            }
            if let value = dict["DeployTime"] as? String {
                self.deployTime = value
            }
            if let value = dict["DeployedVersion"] as? String {
                self.deployedVersion = value
            }
            if let value = dict["ExpectPercentage"] as? Int32 {
                self.expectPercentage = value
            }
            if let value = dict["FullRelease"] as? Bool {
                self.fullRelease = value
            }
            if let value = dict["PublishEnv"] as? String {
                self.publishEnv = value
            }
            if let value = dict["PublishPercentage"] as? Int32 {
                self.publishPercentage = value
            }
            if let value = dict["PublishStatus"] as? String {
                self.publishStatus = value
            }
            if let value = dict["PublishTime"] as? String {
                self.publishTime = value
            }
            if let value = dict["PublishType"] as? String {
                self.publishType = value
            }
            if let value = dict["PublishingVersion"] as? String {
                self.publishingVersion = value
            }
            if let value = dict["Regions"] as? [String: Any?] {
                var model = GetEdgeContainerAppStatusResponseBody.AppStatus.Regions()
                model.fromMap(value)
                self.regions = model
            }
            if let value = dict["RollbackTime"] as? String {
                self.rollbackTime = value
            }
            if let value = dict["UnDeployTime"] as? String {
                self.unDeployTime = value
            }
        }
    }
    public var appStatus: GetEdgeContainerAppStatusResponseBody.AppStatus?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.appStatus?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appStatus != nil {
            map["AppStatus"] = self.appStatus?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppStatus"] as? [String: Any?] {
            var model = GetEdgeContainerAppStatusResponseBody.AppStatus()
            model.fromMap(value)
            self.appStatus = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetEdgeContainerAppStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEdgeContainerAppStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEdgeContainerAppStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEdgeContainerAppVersionRequest : Tea.TeaModel {
    public var appId: String?

    public var versionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["VersionId"] as? String {
            self.versionId = value
        }
    }
}

public class GetEdgeContainerAppVersionResponseBody : Tea.TeaModel {
    public class Version : Tea.TeaModel {
        public class Containers : Tea.TeaModel {
            public class ACRImageInfo : Tea.TeaModel {
                public var domain: String?

                public var instanceId: String?

                public var isEnterpriseRegistry: Bool?

                public var regionId: String?

                public var repoId: String?

                public var repoName: String?

                public var repoNamespace: String?

                public var tag: String?

                public var tagUrl: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.domain != nil {
                        map["Domain"] = self.domain!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.isEnterpriseRegistry != nil {
                        map["IsEnterpriseRegistry"] = self.isEnterpriseRegistry!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    if self.repoId != nil {
                        map["RepoId"] = self.repoId!
                    }
                    if self.repoName != nil {
                        map["RepoName"] = self.repoName!
                    }
                    if self.repoNamespace != nil {
                        map["RepoNamespace"] = self.repoNamespace!
                    }
                    if self.tag != nil {
                        map["Tag"] = self.tag!
                    }
                    if self.tagUrl != nil {
                        map["TagUrl"] = self.tagUrl!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Domain"] as? String {
                        self.domain = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["IsEnterpriseRegistry"] as? Bool {
                        self.isEnterpriseRegistry = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                    if let value = dict["RepoId"] as? String {
                        self.repoId = value
                    }
                    if let value = dict["RepoName"] as? String {
                        self.repoName = value
                    }
                    if let value = dict["RepoNamespace"] as? String {
                        self.repoNamespace = value
                    }
                    if let value = dict["Tag"] as? String {
                        self.tag = value
                    }
                    if let value = dict["TagUrl"] as? String {
                        self.tagUrl = value
                    }
                }
            }
            public class ProbeContent : Tea.TeaModel {
                public var command: String?

                public var failureThreshold: Int32?

                public var host: String?

                public var httpHeaders: String?

                public var initialDelaySeconds: Int32?

                public var path: String?

                public var periodSeconds: Int32?

                public var port: Int32?

                public var scheme: String?

                public var successThreshold: Int32?

                public var timeoutSeconds: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.command != nil {
                        map["Command"] = self.command!
                    }
                    if self.failureThreshold != nil {
                        map["FailureThreshold"] = self.failureThreshold!
                    }
                    if self.host != nil {
                        map["Host"] = self.host!
                    }
                    if self.httpHeaders != nil {
                        map["HttpHeaders"] = self.httpHeaders!
                    }
                    if self.initialDelaySeconds != nil {
                        map["InitialDelaySeconds"] = self.initialDelaySeconds!
                    }
                    if self.path != nil {
                        map["Path"] = self.path!
                    }
                    if self.periodSeconds != nil {
                        map["PeriodSeconds"] = self.periodSeconds!
                    }
                    if self.port != nil {
                        map["Port"] = self.port!
                    }
                    if self.scheme != nil {
                        map["Scheme"] = self.scheme!
                    }
                    if self.successThreshold != nil {
                        map["SuccessThreshold"] = self.successThreshold!
                    }
                    if self.timeoutSeconds != nil {
                        map["TimeoutSeconds"] = self.timeoutSeconds!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Command"] as? String {
                        self.command = value
                    }
                    if let value = dict["FailureThreshold"] as? Int32 {
                        self.failureThreshold = value
                    }
                    if let value = dict["Host"] as? String {
                        self.host = value
                    }
                    if let value = dict["HttpHeaders"] as? String {
                        self.httpHeaders = value
                    }
                    if let value = dict["InitialDelaySeconds"] as? Int32 {
                        self.initialDelaySeconds = value
                    }
                    if let value = dict["Path"] as? String {
                        self.path = value
                    }
                    if let value = dict["PeriodSeconds"] as? Int32 {
                        self.periodSeconds = value
                    }
                    if let value = dict["Port"] as? Int32 {
                        self.port = value
                    }
                    if let value = dict["Scheme"] as? String {
                        self.scheme = value
                    }
                    if let value = dict["SuccessThreshold"] as? Int32 {
                        self.successThreshold = value
                    }
                    if let value = dict["TimeoutSeconds"] as? Int32 {
                        self.timeoutSeconds = value
                    }
                }
            }
            public var ACRImageInfo: GetEdgeContainerAppVersionResponseBody.Version.Containers.ACRImageInfo?

            public var args: String?

            public var command: String?

            public var envVariables: String?

            public var image: String?

            public var isACRImage: Bool?

            public var name: String?

            public var postStart: String?

            public var preStop: String?

            public var probeContent: GetEdgeContainerAppVersionResponseBody.Version.Containers.ProbeContent?

            public var probeType: String?

            public var spec: String?

            public var storage: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.ACRImageInfo?.validate()
                try self.probeContent?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ACRImageInfo != nil {
                    map["ACRImageInfo"] = self.ACRImageInfo?.toMap()
                }
                if self.args != nil {
                    map["Args"] = self.args!
                }
                if self.command != nil {
                    map["Command"] = self.command!
                }
                if self.envVariables != nil {
                    map["EnvVariables"] = self.envVariables!
                }
                if self.image != nil {
                    map["Image"] = self.image!
                }
                if self.isACRImage != nil {
                    map["IsACRImage"] = self.isACRImage!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.postStart != nil {
                    map["PostStart"] = self.postStart!
                }
                if self.preStop != nil {
                    map["PreStop"] = self.preStop!
                }
                if self.probeContent != nil {
                    map["ProbeContent"] = self.probeContent?.toMap()
                }
                if self.probeType != nil {
                    map["ProbeType"] = self.probeType!
                }
                if self.spec != nil {
                    map["Spec"] = self.spec!
                }
                if self.storage != nil {
                    map["Storage"] = self.storage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ACRImageInfo"] as? [String: Any?] {
                    var model = GetEdgeContainerAppVersionResponseBody.Version.Containers.ACRImageInfo()
                    model.fromMap(value)
                    self.ACRImageInfo = model
                }
                if let value = dict["Args"] as? String {
                    self.args = value
                }
                if let value = dict["Command"] as? String {
                    self.command = value
                }
                if let value = dict["EnvVariables"] as? String {
                    self.envVariables = value
                }
                if let value = dict["Image"] as? String {
                    self.image = value
                }
                if let value = dict["IsACRImage"] as? Bool {
                    self.isACRImage = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PostStart"] as? String {
                    self.postStart = value
                }
                if let value = dict["PreStop"] as? String {
                    self.preStop = value
                }
                if let value = dict["ProbeContent"] as? [String: Any?] {
                    var model = GetEdgeContainerAppVersionResponseBody.Version.Containers.ProbeContent()
                    model.fromMap(value)
                    self.probeContent = model
                }
                if let value = dict["ProbeType"] as? String {
                    self.probeType = value
                }
                if let value = dict["Spec"] as? String {
                    self.spec = value
                }
                if let value = dict["Storage"] as? String {
                    self.storage = value
                }
            }
        }
        public var appId: String?

        public var containers: [GetEdgeContainerAppVersionResponseBody.Version.Containers]?

        public var createTime: String?

        public var lastPublishTime: String?

        public var name: String?

        public var publishTime: String?

        public var remarks: String?

        public var status: String?

        public var updateTime: String?

        public var versionId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.containers != nil {
                var tmp : [Any] = []
                for k in self.containers! {
                    tmp.append(k.toMap())
                }
                map["Containers"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.lastPublishTime != nil {
                map["LastPublishTime"] = self.lastPublishTime!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.publishTime != nil {
                map["PublishTime"] = self.publishTime!
            }
            if self.remarks != nil {
                map["Remarks"] = self.remarks!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.versionId != nil {
                map["VersionId"] = self.versionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["Containers"] as? [Any?] {
                var tmp : [GetEdgeContainerAppVersionResponseBody.Version.Containers] = []
                for v in value {
                    if v != nil {
                        var model = GetEdgeContainerAppVersionResponseBody.Version.Containers()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.containers = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["LastPublishTime"] as? String {
                self.lastPublishTime = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PublishTime"] as? String {
                self.publishTime = value
            }
            if let value = dict["Remarks"] as? String {
                self.remarks = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["VersionId"] as? String {
                self.versionId = value
            }
        }
    }
    public var requestId: String?

    public var version: GetEdgeContainerAppVersionResponseBody.Version?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.version?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.version != nil {
            map["Version"] = self.version?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Version"] as? [String: Any?] {
            var model = GetEdgeContainerAppVersionResponseBody.Version()
            model.fromMap(value)
            self.version = model
        }
    }
}

public class GetEdgeContainerAppVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEdgeContainerAppVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEdgeContainerAppVersionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEdgeContainerDeployRegionsRequest : Tea.TeaModel {
    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class GetEdgeContainerDeployRegionsResponseBody : Tea.TeaModel {
    public var regions: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regions != nil {
            map["Regions"] = self.regions!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Regions"] as? [String] {
            self.regions = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetEdgeContainerDeployRegionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEdgeContainerDeployRegionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEdgeContainerDeployRegionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEdgeContainerLogsRequest : Tea.TeaModel {
    public var appId: String?

    public var lines: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.lines != nil {
            map["Lines"] = self.lines!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["Lines"] as? Int32 {
            self.lines = value
        }
    }
}

public class GetEdgeContainerLogsResponseBody : Tea.TeaModel {
    public var items: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.items != nil {
            map["Items"] = self.items!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Items"] as? [String] {
            self.items = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetEdgeContainerLogsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEdgeContainerLogsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEdgeContainerLogsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEdgeContainerStagingDeployStatusRequest : Tea.TeaModel {
    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class GetEdgeContainerStagingDeployStatusResponseBody : Tea.TeaModel {
    public class PodRestartState : Tea.TeaModel {
        public var lastTerminatedReason: String?

        public var restartCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.lastTerminatedReason != nil {
                map["LastTerminatedReason"] = self.lastTerminatedReason!
            }
            if self.restartCount != nil {
                map["RestartCount"] = self.restartCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["LastTerminatedReason"] as? String {
                self.lastTerminatedReason = value
            }
            if let value = dict["RestartCount"] as? Int32 {
                self.restartCount = value
            }
        }
    }
    public var containersReady: String?

    public var creationTimestamp: String?

    public var initialized: String?

    public var phase: String?

    public var podRestartState: GetEdgeContainerStagingDeployStatusResponseBody.PodRestartState?

    public var ready: String?

    public var requestId: String?

    public var scheduled: String?

    public var VIPs: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.podRestartState?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.containersReady != nil {
            map["ContainersReady"] = self.containersReady!
        }
        if self.creationTimestamp != nil {
            map["CreationTimestamp"] = self.creationTimestamp!
        }
        if self.initialized != nil {
            map["Initialized"] = self.initialized!
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.podRestartState != nil {
            map["PodRestartState"] = self.podRestartState?.toMap()
        }
        if self.ready != nil {
            map["Ready"] = self.ready!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.scheduled != nil {
            map["Scheduled"] = self.scheduled!
        }
        if self.VIPs != nil {
            map["VIPs"] = self.VIPs!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ContainersReady"] as? String {
            self.containersReady = value
        }
        if let value = dict["CreationTimestamp"] as? String {
            self.creationTimestamp = value
        }
        if let value = dict["Initialized"] as? String {
            self.initialized = value
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["PodRestartState"] as? [String: Any?] {
            var model = GetEdgeContainerStagingDeployStatusResponseBody.PodRestartState()
            model.fromMap(value)
            self.podRestartState = model
        }
        if let value = dict["Ready"] as? String {
            self.ready = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Scheduled"] as? String {
            self.scheduled = value
        }
        if let value = dict["VIPs"] as? [String] {
            self.VIPs = value
        }
    }
}

public class GetEdgeContainerStagingDeployStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEdgeContainerStagingDeployStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEdgeContainerStagingDeployStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEdgeContainerTerminalRequest : Tea.TeaModel {
    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class GetEdgeContainerTerminalResponseBody : Tea.TeaModel {
    public var cluster: String?

    public var container: String?

    public var namespace: String?

    public var pod: String?

    public var requestId: String?

    public var sessionId: String?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cluster != nil {
            map["Cluster"] = self.cluster!
        }
        if self.container != nil {
            map["Container"] = self.container!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.pod != nil {
            map["Pod"] = self.pod!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Cluster"] as? String {
            self.cluster = value
        }
        if let value = dict["Container"] as? String {
            self.container = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Pod"] as? String {
            self.pod = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class GetEdgeContainerTerminalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEdgeContainerTerminalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEdgeContainerTerminalResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetErServiceRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class GetErServiceResponseBody : Tea.TeaModel {
    public var planName: String?

    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.planName != nil {
            map["PlanName"] = self.planName!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PlanName"] as? String {
            self.planName = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class GetErServiceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetErServiceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetErServiceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetHttpRequestHeaderModificationRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetHttpRequestHeaderModificationRuleResponseBody : Tea.TeaModel {
    public class RequestHeaderModification : Tea.TeaModel {
        public var name: String?

        public var operation: String?

        public var type: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.operation != nil {
                map["Operation"] = self.operation!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Operation"] as? String {
                self.operation = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var configId: Int64?

    public var configType: String?

    public var requestHeaderModification: [GetHttpRequestHeaderModificationRuleResponseBody.RequestHeaderModification]?

    public var requestId: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.requestHeaderModification != nil {
            var tmp : [Any] = []
            for k in self.requestHeaderModification! {
                tmp.append(k.toMap())
            }
            map["RequestHeaderModification"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["RequestHeaderModification"] as? [Any?] {
            var tmp : [GetHttpRequestHeaderModificationRuleResponseBody.RequestHeaderModification] = []
            for v in value {
                if v != nil {
                    var model = GetHttpRequestHeaderModificationRuleResponseBody.RequestHeaderModification()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.requestHeaderModification = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class GetHttpRequestHeaderModificationRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetHttpRequestHeaderModificationRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetHttpRequestHeaderModificationRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetHttpResponseHeaderModificationRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetHttpResponseHeaderModificationRuleResponseBody : Tea.TeaModel {
    public class ResponseHeaderModification : Tea.TeaModel {
        public var name: String?

        public var operation: String?

        public var type: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.operation != nil {
                map["Operation"] = self.operation!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Operation"] as? String {
                self.operation = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var configId: Int64?

    public var configType: String?

    public var requestId: String?

    public var responseHeaderModification: [GetHttpResponseHeaderModificationRuleResponseBody.ResponseHeaderModification]?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.responseHeaderModification != nil {
            var tmp : [Any] = []
            for k in self.responseHeaderModification! {
                tmp.append(k.toMap())
            }
            map["ResponseHeaderModification"] = tmp
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResponseHeaderModification"] as? [Any?] {
            var tmp : [GetHttpResponseHeaderModificationRuleResponseBody.ResponseHeaderModification] = []
            for v in value {
                if v != nil {
                    var model = GetHttpResponseHeaderModificationRuleResponseBody.ResponseHeaderModification()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.responseHeaderModification = tmp
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class GetHttpResponseHeaderModificationRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetHttpResponseHeaderModificationRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetHttpResponseHeaderModificationRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetHttpsApplicationConfigurationRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetHttpsApplicationConfigurationResponseBody : Tea.TeaModel {
    public var altSvc: String?

    public var altSvcClear: String?

    public var altSvcMa: String?

    public var altSvcPersist: String?

    public var configId: Int64?

    public var configType: String?

    public var hsts: String?

    public var hstsIncludeSubdomains: String?

    public var hstsMaxAge: String?

    public var hstsPreload: String?

    public var httpsForce: String?

    public var httpsForceCode: String?

    public var httpsNoSniDeny: String?

    public var httpsSniVerify: String?

    public var httpsSniWhitelist: String?

    public var requestId: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.altSvc != nil {
            map["AltSvc"] = self.altSvc!
        }
        if self.altSvcClear != nil {
            map["AltSvcClear"] = self.altSvcClear!
        }
        if self.altSvcMa != nil {
            map["AltSvcMa"] = self.altSvcMa!
        }
        if self.altSvcPersist != nil {
            map["AltSvcPersist"] = self.altSvcPersist!
        }
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.hsts != nil {
            map["Hsts"] = self.hsts!
        }
        if self.hstsIncludeSubdomains != nil {
            map["HstsIncludeSubdomains"] = self.hstsIncludeSubdomains!
        }
        if self.hstsMaxAge != nil {
            map["HstsMaxAge"] = self.hstsMaxAge!
        }
        if self.hstsPreload != nil {
            map["HstsPreload"] = self.hstsPreload!
        }
        if self.httpsForce != nil {
            map["HttpsForce"] = self.httpsForce!
        }
        if self.httpsForceCode != nil {
            map["HttpsForceCode"] = self.httpsForceCode!
        }
        if self.httpsNoSniDeny != nil {
            map["HttpsNoSniDeny"] = self.httpsNoSniDeny!
        }
        if self.httpsSniVerify != nil {
            map["HttpsSniVerify"] = self.httpsSniVerify!
        }
        if self.httpsSniWhitelist != nil {
            map["HttpsSniWhitelist"] = self.httpsSniWhitelist!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AltSvc"] as? String {
            self.altSvc = value
        }
        if let value = dict["AltSvcClear"] as? String {
            self.altSvcClear = value
        }
        if let value = dict["AltSvcMa"] as? String {
            self.altSvcMa = value
        }
        if let value = dict["AltSvcPersist"] as? String {
            self.altSvcPersist = value
        }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["Hsts"] as? String {
            self.hsts = value
        }
        if let value = dict["HstsIncludeSubdomains"] as? String {
            self.hstsIncludeSubdomains = value
        }
        if let value = dict["HstsMaxAge"] as? String {
            self.hstsMaxAge = value
        }
        if let value = dict["HstsPreload"] as? String {
            self.hstsPreload = value
        }
        if let value = dict["HttpsForce"] as? String {
            self.httpsForce = value
        }
        if let value = dict["HttpsForceCode"] as? String {
            self.httpsForceCode = value
        }
        if let value = dict["HttpsNoSniDeny"] as? String {
            self.httpsNoSniDeny = value
        }
        if let value = dict["HttpsSniVerify"] as? String {
            self.httpsSniVerify = value
        }
        if let value = dict["HttpsSniWhitelist"] as? String {
            self.httpsSniWhitelist = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class GetHttpsApplicationConfigurationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetHttpsApplicationConfigurationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetHttpsApplicationConfigurationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetHttpsBasicConfigurationRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetHttpsBasicConfigurationResponseBody : Tea.TeaModel {
    public var ciphersuite: String?

    public var ciphersuiteGroup: String?

    public var configId: Int64?

    public var configType: String?

    public var http2: String?

    public var http3: String?

    public var https: String?

    public var ocspStapling: String?

    public var requestId: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var tls10: String?

    public var tls11: String?

    public var tls12: String?

    public var tls13: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ciphersuite != nil {
            map["Ciphersuite"] = self.ciphersuite!
        }
        if self.ciphersuiteGroup != nil {
            map["CiphersuiteGroup"] = self.ciphersuiteGroup!
        }
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.http2 != nil {
            map["Http2"] = self.http2!
        }
        if self.http3 != nil {
            map["Http3"] = self.http3!
        }
        if self.https != nil {
            map["Https"] = self.https!
        }
        if self.ocspStapling != nil {
            map["OcspStapling"] = self.ocspStapling!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.tls10 != nil {
            map["Tls10"] = self.tls10!
        }
        if self.tls11 != nil {
            map["Tls11"] = self.tls11!
        }
        if self.tls12 != nil {
            map["Tls12"] = self.tls12!
        }
        if self.tls13 != nil {
            map["Tls13"] = self.tls13!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ciphersuite"] as? String {
            self.ciphersuite = value
        }
        if let value = dict["CiphersuiteGroup"] as? String {
            self.ciphersuiteGroup = value
        }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["Http2"] as? String {
            self.http2 = value
        }
        if let value = dict["Http3"] as? String {
            self.http3 = value
        }
        if let value = dict["Https"] as? String {
            self.https = value
        }
        if let value = dict["OcspStapling"] as? String {
            self.ocspStapling = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["Tls10"] as? String {
            self.tls10 = value
        }
        if let value = dict["Tls11"] as? String {
            self.tls11 = value
        }
        if let value = dict["Tls12"] as? String {
            self.tls12 = value
        }
        if let value = dict["Tls13"] as? String {
            self.tls13 = value
        }
    }
}

public class GetHttpsBasicConfigurationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetHttpsBasicConfigurationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetHttpsBasicConfigurationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetIPv6Request : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetIPv6ResponseBody : Tea.TeaModel {
    public var enable: String?

    public var region: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetIPv6Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetIPv6ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetIPv6ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetImageTransformRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetImageTransformResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var enable: String?

    public var requestId: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class GetImageTransformResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetImageTransformResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetImageTransformResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetKvRequest : Tea.TeaModel {
    public var base64: Bool?

    public var key: String?

    public var namespace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.base64 != nil {
            map["Base64"] = self.base64!
        }
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Base64"] as? Bool {
            self.base64 = value
        }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
    }
}

public class GetKvResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
    }
}

public class GetKvResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetKvResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetKvResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetKvAccountResponseBody : Tea.TeaModel {
    public class NamespaceList : Tea.TeaModel {
        public var capacity: Int64?

        public var capacityString: String?

        public var capacityUsed: Int64?

        public var capacityUsedString: String?

        public var description_: String?

        public var namespace: String?

        public var namespaceId: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.capacity != nil {
                map["Capacity"] = self.capacity!
            }
            if self.capacityString != nil {
                map["CapacityString"] = self.capacityString!
            }
            if self.capacityUsed != nil {
                map["CapacityUsed"] = self.capacityUsed!
            }
            if self.capacityUsedString != nil {
                map["CapacityUsedString"] = self.capacityUsedString!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.namespaceId != nil {
                map["NamespaceId"] = self.namespaceId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Capacity"] as? Int64 {
                self.capacity = value
            }
            if let value = dict["CapacityString"] as? String {
                self.capacityString = value
            }
            if let value = dict["CapacityUsed"] as? Int64 {
                self.capacityUsed = value
            }
            if let value = dict["CapacityUsedString"] as? String {
                self.capacityUsedString = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["NamespaceId"] as? String {
                self.namespaceId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var capacity: Int64?

    public var capacityString: String?

    public var capacityUsed: Int64?

    public var capacityUsedString: String?

    public var namespaceList: [GetKvAccountResponseBody.NamespaceList]?

    public var namespaceQuota: Int32?

    public var namespaceUsed: Int32?

    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.capacity != nil {
            map["Capacity"] = self.capacity!
        }
        if self.capacityString != nil {
            map["CapacityString"] = self.capacityString!
        }
        if self.capacityUsed != nil {
            map["CapacityUsed"] = self.capacityUsed!
        }
        if self.capacityUsedString != nil {
            map["CapacityUsedString"] = self.capacityUsedString!
        }
        if self.namespaceList != nil {
            var tmp : [Any] = []
            for k in self.namespaceList! {
                tmp.append(k.toMap())
            }
            map["NamespaceList"] = tmp
        }
        if self.namespaceQuota != nil {
            map["NamespaceQuota"] = self.namespaceQuota!
        }
        if self.namespaceUsed != nil {
            map["NamespaceUsed"] = self.namespaceUsed!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Capacity"] as? Int64 {
            self.capacity = value
        }
        if let value = dict["CapacityString"] as? String {
            self.capacityString = value
        }
        if let value = dict["CapacityUsed"] as? Int64 {
            self.capacityUsed = value
        }
        if let value = dict["CapacityUsedString"] as? String {
            self.capacityUsedString = value
        }
        if let value = dict["NamespaceList"] as? [Any?] {
            var tmp : [GetKvAccountResponseBody.NamespaceList] = []
            for v in value {
                if v != nil {
                    var model = GetKvAccountResponseBody.NamespaceList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.namespaceList = tmp
        }
        if let value = dict["NamespaceQuota"] as? Int32 {
            self.namespaceQuota = value
        }
        if let value = dict["NamespaceUsed"] as? Int32 {
            self.namespaceUsed = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class GetKvAccountResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetKvAccountResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetKvAccountResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetKvNamespaceRequest : Tea.TeaModel {
    public var namespace: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
    }
}

public class GetKvNamespaceResponseBody : Tea.TeaModel {
    public var capacity: Int64?

    public var capacityString: String?

    public var capacityUsed: Int64?

    public var capacityUsedString: String?

    public var description_: String?

    public var namespace: String?

    public var namespaceId: String?

    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.capacity != nil {
            map["Capacity"] = self.capacity!
        }
        if self.capacityString != nil {
            map["CapacityString"] = self.capacityString!
        }
        if self.capacityUsed != nil {
            map["CapacityUsed"] = self.capacityUsed!
        }
        if self.capacityUsedString != nil {
            map["CapacityUsedString"] = self.capacityUsedString!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.namespaceId != nil {
            map["NamespaceId"] = self.namespaceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Capacity"] as? Int64 {
            self.capacity = value
        }
        if let value = dict["CapacityString"] as? String {
            self.capacityString = value
        }
        if let value = dict["CapacityUsed"] as? Int64 {
            self.capacityUsed = value
        }
        if let value = dict["CapacityUsedString"] as? String {
            self.capacityUsedString = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["NamespaceId"] as? String {
            self.namespaceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class GetKvNamespaceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetKvNamespaceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetKvNamespaceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetListRequest : Tea.TeaModel {
    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class GetListResponseBody : Tea.TeaModel {
    public var description_: String?

    public var id: Int64?

    public var items: [String]?

    public var kind: String?

    public var name: String?

    public var requestId: String?

    public var updateTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.items != nil {
            map["Items"] = self.items!
        }
        if self.kind != nil {
            map["Kind"] = self.kind!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.updateTime != nil {
            map["UpdateTime"] = self.updateTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Items"] as? [String] {
            self.items = value
        }
        if let value = dict["Kind"] as? String {
            self.kind = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UpdateTime"] as? String {
            self.updateTime = value
        }
    }
}

public class GetListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetLoadBalancerRequest : Tea.TeaModel {
    public var id: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetLoadBalancerResponseBody : Tea.TeaModel {
    public class AdaptiveRouting : Tea.TeaModel {
        public var failoverAcrossPools: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.failoverAcrossPools != nil {
                map["FailoverAcrossPools"] = self.failoverAcrossPools!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FailoverAcrossPools"] as? Bool {
                self.failoverAcrossPools = value
            }
        }
    }
    public class Monitor : Tea.TeaModel {
        public var consecutiveDown: Int32?

        public var consecutiveUp: Int32?

        public var expectedCodes: String?

        public var followRedirects: Bool?

        public var header: Any?

        public var interval: Int32?

        public var method: String?

        public var path: String?

        public var port: Int32?

        public var timeout: Int32?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.consecutiveDown != nil {
                map["ConsecutiveDown"] = self.consecutiveDown!
            }
            if self.consecutiveUp != nil {
                map["ConsecutiveUp"] = self.consecutiveUp!
            }
            if self.expectedCodes != nil {
                map["ExpectedCodes"] = self.expectedCodes!
            }
            if self.followRedirects != nil {
                map["FollowRedirects"] = self.followRedirects!
            }
            if self.header != nil {
                map["Header"] = self.header!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.method != nil {
                map["Method"] = self.method!
            }
            if self.path != nil {
                map["Path"] = self.path!
            }
            if self.port != nil {
                map["Port"] = self.port!
            }
            if self.timeout != nil {
                map["Timeout"] = self.timeout!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConsecutiveDown"] as? Int32 {
                self.consecutiveDown = value
            }
            if let value = dict["ConsecutiveUp"] as? Int32 {
                self.consecutiveUp = value
            }
            if let value = dict["ExpectedCodes"] as? String {
                self.expectedCodes = value
            }
            if let value = dict["FollowRedirects"] as? Bool {
                self.followRedirects = value
            }
            if let value = dict["Header"] as? Any {
                self.header = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["Method"] as? String {
                self.method = value
            }
            if let value = dict["Path"] as? String {
                self.path = value
            }
            if let value = dict["Port"] as? Int32 {
                self.port = value
            }
            if let value = dict["Timeout"] as? Int32 {
                self.timeout = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class RandomSteering : Tea.TeaModel {
        public var defaultWeight: Int32?

        public var poolWeights: [String: Int32]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.defaultWeight != nil {
                map["DefaultWeight"] = self.defaultWeight!
            }
            if self.poolWeights != nil {
                map["PoolWeights"] = self.poolWeights!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DefaultWeight"] as? Int32 {
                self.defaultWeight = value
            }
            if let value = dict["PoolWeights"] as? [String: Int32] {
                self.poolWeights = value
            }
        }
    }
    public class Rules : Tea.TeaModel {
        public class FixedResponse : Tea.TeaModel {
            public var contentType: String?

            public var location: String?

            public var messageBody: String?

            public var statusCode: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contentType != nil {
                    map["ContentType"] = self.contentType!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.messageBody != nil {
                    map["MessageBody"] = self.messageBody!
                }
                if self.statusCode != nil {
                    map["StatusCode"] = self.statusCode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContentType"] as? String {
                    self.contentType = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["MessageBody"] as? String {
                    self.messageBody = value
                }
                if let value = dict["StatusCode"] as? Int32 {
                    self.statusCode = value
                }
            }
        }
        public var fixedResponse: GetLoadBalancerResponseBody.Rules.FixedResponse?

        public var overrides: Any?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var terminates: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.fixedResponse?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fixedResponse != nil {
                map["FixedResponse"] = self.fixedResponse?.toMap()
            }
            if self.overrides != nil {
                map["Overrides"] = self.overrides!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.terminates != nil {
                map["Terminates"] = self.terminates!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FixedResponse"] as? [String: Any?] {
                var model = GetLoadBalancerResponseBody.Rules.FixedResponse()
                model.fromMap(value)
                self.fixedResponse = model
            }
            if let value = dict["Overrides"] as? Any {
                self.overrides = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["Terminates"] as? Bool {
                self.terminates = value
            }
        }
    }
    public var adaptiveRouting: GetLoadBalancerResponseBody.AdaptiveRouting?

    public var defaultPools: [Int64]?

    public var description_: String?

    public var enabled: Bool?

    public var fallbackPool: Int64?

    public var id: Int64?

    public var monitor: GetLoadBalancerResponseBody.Monitor?

    public var name: String?

    public var randomSteering: GetLoadBalancerResponseBody.RandomSteering?

    public var regionPools: Any?

    public var requestId: String?

    public var rules: [GetLoadBalancerResponseBody.Rules]?

    public var sessionAffinity: String?

    public var siteId: Int64?

    public var status: String?

    public var steeringPolicy: String?

    public var subRegionPools: Any?

    public var ttl: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.adaptiveRouting?.validate()
        try self.monitor?.validate()
        try self.randomSteering?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adaptiveRouting != nil {
            map["AdaptiveRouting"] = self.adaptiveRouting?.toMap()
        }
        if self.defaultPools != nil {
            map["DefaultPools"] = self.defaultPools!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.fallbackPool != nil {
            map["FallbackPool"] = self.fallbackPool!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.monitor != nil {
            map["Monitor"] = self.monitor?.toMap()
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.randomSteering != nil {
            map["RandomSteering"] = self.randomSteering?.toMap()
        }
        if self.regionPools != nil {
            map["RegionPools"] = self.regionPools!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rules != nil {
            var tmp : [Any] = []
            for k in self.rules! {
                tmp.append(k.toMap())
            }
            map["Rules"] = tmp
        }
        if self.sessionAffinity != nil {
            map["SessionAffinity"] = self.sessionAffinity!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.steeringPolicy != nil {
            map["SteeringPolicy"] = self.steeringPolicy!
        }
        if self.subRegionPools != nil {
            map["SubRegionPools"] = self.subRegionPools!
        }
        if self.ttl != nil {
            map["Ttl"] = self.ttl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdaptiveRouting"] as? [String: Any?] {
            var model = GetLoadBalancerResponseBody.AdaptiveRouting()
            model.fromMap(value)
            self.adaptiveRouting = model
        }
        if let value = dict["DefaultPools"] as? [Int64] {
            self.defaultPools = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["FallbackPool"] as? Int64 {
            self.fallbackPool = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Monitor"] as? [String: Any?] {
            var model = GetLoadBalancerResponseBody.Monitor()
            model.fromMap(value)
            self.monitor = model
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RandomSteering"] as? [String: Any?] {
            var model = GetLoadBalancerResponseBody.RandomSteering()
            model.fromMap(value)
            self.randomSteering = model
        }
        if let value = dict["RegionPools"] as? Any {
            self.regionPools = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rules"] as? [Any?] {
            var tmp : [GetLoadBalancerResponseBody.Rules] = []
            for v in value {
                if v != nil {
                    var model = GetLoadBalancerResponseBody.Rules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rules = tmp
        }
        if let value = dict["SessionAffinity"] as? String {
            self.sessionAffinity = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["SteeringPolicy"] as? String {
            self.steeringPolicy = value
        }
        if let value = dict["SubRegionPools"] as? Any {
            self.subRegionPools = value
        }
        if let value = dict["Ttl"] as? Int32 {
            self.ttl = value
        }
    }
}

public class GetLoadBalancerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetLoadBalancerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetLoadBalancerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetManagedTransformRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class GetManagedTransformResponseBody : Tea.TeaModel {
    public var addClientGeolocationHeader: String?

    public var addRealClientIpHeader: String?

    public var realClientIpHeaderName: String?

    public var requestId: String?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addClientGeolocationHeader != nil {
            map["AddClientGeolocationHeader"] = self.addClientGeolocationHeader!
        }
        if self.addRealClientIpHeader != nil {
            map["AddRealClientIpHeader"] = self.addRealClientIpHeader!
        }
        if self.realClientIpHeaderName != nil {
            map["RealClientIpHeaderName"] = self.realClientIpHeaderName!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddClientGeolocationHeader"] as? String {
            self.addClientGeolocationHeader = value
        }
        if let value = dict["AddRealClientIpHeader"] as? String {
            self.addRealClientIpHeader = value
        }
        if let value = dict["RealClientIpHeaderName"] as? String {
            self.realClientIpHeaderName = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class GetManagedTransformResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetManagedTransformResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetManagedTransformResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetNetworkOptimizationRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetNetworkOptimizationResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var grpc: String?

    public var http2Origin: String?

    public var requestId: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteVersion: Int32?

    public var smartRouting: String?

    public var uploadMaxFilesize: String?

    public var websocket: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.grpc != nil {
            map["Grpc"] = self.grpc!
        }
        if self.http2Origin != nil {
            map["Http2Origin"] = self.http2Origin!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.smartRouting != nil {
            map["SmartRouting"] = self.smartRouting!
        }
        if self.uploadMaxFilesize != nil {
            map["UploadMaxFilesize"] = self.uploadMaxFilesize!
        }
        if self.websocket != nil {
            map["Websocket"] = self.websocket!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["Grpc"] as? String {
            self.grpc = value
        }
        if let value = dict["Http2Origin"] as? String {
            self.http2Origin = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["SmartRouting"] as? String {
            self.smartRouting = value
        }
        if let value = dict["UploadMaxFilesize"] as? String {
            self.uploadMaxFilesize = value
        }
        if let value = dict["Websocket"] as? String {
            self.websocket = value
        }
    }
}

public class GetNetworkOptimizationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetNetworkOptimizationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetNetworkOptimizationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOriginCaCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetOriginCaCertificateResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var commonName: String?

        public var createTime: String?

        public var fingerprintSha256: String?

        public var id: String?

        public var issuer: String?

        public var name: String?

        public var notAfter: String?

        public var notBefore: String?

        public var pubkeyAlgorithm: String?

        public var SAN: String?

        public var serialNumber: String?

        public var signatureAlgorithm: String?

        public var status: String?

        public var type: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.fingerprintSha256 != nil {
                map["FingerprintSha256"] = self.fingerprintSha256!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.issuer != nil {
                map["Issuer"] = self.issuer!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.notAfter != nil {
                map["NotAfter"] = self.notAfter!
            }
            if self.notBefore != nil {
                map["NotBefore"] = self.notBefore!
            }
            if self.pubkeyAlgorithm != nil {
                map["PubkeyAlgorithm"] = self.pubkeyAlgorithm!
            }
            if self.SAN != nil {
                map["SAN"] = self.SAN!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.signatureAlgorithm != nil {
                map["SignatureAlgorithm"] = self.signatureAlgorithm!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["FingerprintSha256"] as? String {
                self.fingerprintSha256 = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Issuer"] as? String {
                self.issuer = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NotAfter"] as? String {
                self.notAfter = value
            }
            if let value = dict["NotBefore"] as? String {
                self.notBefore = value
            }
            if let value = dict["PubkeyAlgorithm"] as? String {
                self.pubkeyAlgorithm = value
            }
            if let value = dict["SAN"] as? String {
                self.SAN = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["SignatureAlgorithm"] as? String {
                self.signatureAlgorithm = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var certificate: String?

    public var requestId: String?

    public var result: GetOriginCaCertificateResponseBody.Result?

    public var siteId: Int64?

    public var siteName: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.result?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificate != nil {
            map["Certificate"] = self.certificate!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result?.toMap()
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Certificate"] as? String {
            self.certificate = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [String: Any?] {
            var model = GetOriginCaCertificateResponseBody.Result()
            model.fromMap(value)
            self.result = model
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class GetOriginCaCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOriginCaCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOriginCaCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOriginClientCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetOriginClientCertificateResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var commonName: String?

        public var createTime: String?

        public var fingerprintSha256: String?

        public var hostnames: [String]?

        public var id: String?

        public var issuer: String?

        public var name: String?

        public var notAfter: String?

        public var notBefore: String?

        public var pubkeyAlgorithm: String?

        public var SAN: String?

        public var serialNumber: String?

        public var signatureAlgorithm: String?

        public var status: String?

        public var type: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.fingerprintSha256 != nil {
                map["FingerprintSha256"] = self.fingerprintSha256!
            }
            if self.hostnames != nil {
                map["Hostnames"] = self.hostnames!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.issuer != nil {
                map["Issuer"] = self.issuer!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.notAfter != nil {
                map["NotAfter"] = self.notAfter!
            }
            if self.notBefore != nil {
                map["NotBefore"] = self.notBefore!
            }
            if self.pubkeyAlgorithm != nil {
                map["PubkeyAlgorithm"] = self.pubkeyAlgorithm!
            }
            if self.SAN != nil {
                map["SAN"] = self.SAN!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.signatureAlgorithm != nil {
                map["SignatureAlgorithm"] = self.signatureAlgorithm!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["FingerprintSha256"] as? String {
                self.fingerprintSha256 = value
            }
            if let value = dict["Hostnames"] as? [String] {
                self.hostnames = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Issuer"] as? String {
                self.issuer = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NotAfter"] as? String {
                self.notAfter = value
            }
            if let value = dict["NotBefore"] as? String {
                self.notBefore = value
            }
            if let value = dict["PubkeyAlgorithm"] as? String {
                self.pubkeyAlgorithm = value
            }
            if let value = dict["SAN"] as? String {
                self.SAN = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["SignatureAlgorithm"] as? String {
                self.signatureAlgorithm = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var certificate: String?

    public var requestId: String?

    public var result: GetOriginClientCertificateResponseBody.Result?

    public var siteId: Int64?

    public var siteName: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.result?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificate != nil {
            map["Certificate"] = self.certificate!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result?.toMap()
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Certificate"] as? String {
            self.certificate = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [String: Any?] {
            var model = GetOriginClientCertificateResponseBody.Result()
            model.fromMap(value)
            self.result = model
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class GetOriginClientCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOriginClientCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOriginClientCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOriginClientCertificateHostnamesRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetOriginClientCertificateHostnamesResponseBody : Tea.TeaModel {
    public var hostnames: [String]?

    public var id: String?

    public var requestId: String?

    public var siteId: Int64?

    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hostnames != nil {
            map["Hostnames"] = self.hostnames!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Hostnames"] as? [String] {
            self.hostnames = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class GetOriginClientCertificateHostnamesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOriginClientCertificateHostnamesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOriginClientCertificateHostnamesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOriginPoolRequest : Tea.TeaModel {
    public var id: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetOriginPoolResponseBody : Tea.TeaModel {
    public class Origins : Tea.TeaModel {
        public class AuthConf : Tea.TeaModel {
            public var accessKey: String?

            public var authType: String?

            public var region: String?

            public var secretKey: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accessKey != nil {
                    map["AccessKey"] = self.accessKey!
                }
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.secretKey != nil {
                    map["SecretKey"] = self.secretKey!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccessKey"] as? String {
                    self.accessKey = value
                }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["SecretKey"] as? String {
                    self.secretKey = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public var address: String?

        public var authConf: GetOriginPoolResponseBody.Origins.AuthConf?

        public var enabled: Bool?

        public var header: Any?

        public var id: Int64?

        public var name: String?

        public var type: String?

        public var weight: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.authConf?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.address != nil {
                map["Address"] = self.address!
            }
            if self.authConf != nil {
                map["AuthConf"] = self.authConf?.toMap()
            }
            if self.enabled != nil {
                map["Enabled"] = self.enabled!
            }
            if self.header != nil {
                map["Header"] = self.header!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.weight != nil {
                map["Weight"] = self.weight!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Address"] as? String {
                self.address = value
            }
            if let value = dict["AuthConf"] as? [String: Any?] {
                var model = GetOriginPoolResponseBody.Origins.AuthConf()
                model.fromMap(value)
                self.authConf = model
            }
            if let value = dict["Enabled"] as? Bool {
                self.enabled = value
            }
            if let value = dict["Header"] as? Any {
                self.header = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Weight"] as? Int32 {
                self.weight = value
            }
        }
    }
    public class References : Tea.TeaModel {
        public class DnsRecords : Tea.TeaModel {
            public var id: Int64?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public class IPARecords : Tea.TeaModel {
            public var id: Int64?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public class LoadBalancers : Tea.TeaModel {
            public var id: Int64?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var dnsRecords: [GetOriginPoolResponseBody.References.DnsRecords]?

        public var IPARecords: [GetOriginPoolResponseBody.References.IPARecords]?

        public var loadBalancers: [GetOriginPoolResponseBody.References.LoadBalancers]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dnsRecords != nil {
                var tmp : [Any] = []
                for k in self.dnsRecords! {
                    tmp.append(k.toMap())
                }
                map["DnsRecords"] = tmp
            }
            if self.IPARecords != nil {
                var tmp : [Any] = []
                for k in self.IPARecords! {
                    tmp.append(k.toMap())
                }
                map["IPARecords"] = tmp
            }
            if self.loadBalancers != nil {
                var tmp : [Any] = []
                for k in self.loadBalancers! {
                    tmp.append(k.toMap())
                }
                map["LoadBalancers"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DnsRecords"] as? [Any?] {
                var tmp : [GetOriginPoolResponseBody.References.DnsRecords] = []
                for v in value {
                    if v != nil {
                        var model = GetOriginPoolResponseBody.References.DnsRecords()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dnsRecords = tmp
            }
            if let value = dict["IPARecords"] as? [Any?] {
                var tmp : [GetOriginPoolResponseBody.References.IPARecords] = []
                for v in value {
                    if v != nil {
                        var model = GetOriginPoolResponseBody.References.IPARecords()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.IPARecords = tmp
            }
            if let value = dict["LoadBalancers"] as? [Any?] {
                var tmp : [GetOriginPoolResponseBody.References.LoadBalancers] = []
                for v in value {
                    if v != nil {
                        var model = GetOriginPoolResponseBody.References.LoadBalancers()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.loadBalancers = tmp
            }
        }
    }
    public var enabled: Bool?

    public var id: Int64?

    public var name: String?

    public var origins: [GetOriginPoolResponseBody.Origins]?

    public var recordName: String?

    public var referenceLBCount: Int32?

    public var references: GetOriginPoolResponseBody.References?

    public var requestId: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.references?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.origins != nil {
            var tmp : [Any] = []
            for k in self.origins! {
                tmp.append(k.toMap())
            }
            map["Origins"] = tmp
        }
        if self.recordName != nil {
            map["RecordName"] = self.recordName!
        }
        if self.referenceLBCount != nil {
            map["ReferenceLBCount"] = self.referenceLBCount!
        }
        if self.references != nil {
            map["References"] = self.references?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Origins"] as? [Any?] {
            var tmp : [GetOriginPoolResponseBody.Origins] = []
            for v in value {
                if v != nil {
                    var model = GetOriginPoolResponseBody.Origins()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.origins = tmp
        }
        if let value = dict["RecordName"] as? String {
            self.recordName = value
        }
        if let value = dict["ReferenceLBCount"] as? Int32 {
            self.referenceLBCount = value
        }
        if let value = dict["References"] as? [String: Any?] {
            var model = GetOriginPoolResponseBody.References()
            model.fromMap(value)
            self.references = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetOriginPoolResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOriginPoolResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOriginPoolResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOriginProtectionRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetOriginProtectionResponseBody : Tea.TeaModel {
    public class CurrentIPWhitelist : Tea.TeaModel {
        public var IPv4: [String]?

        public var IPv6: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.IPv4 != nil {
                map["IPv4"] = self.IPv4!
            }
            if self.IPv6 != nil {
                map["IPv6"] = self.IPv6!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IPv4"] as? [String] {
                self.IPv4 = value
            }
            if let value = dict["IPv6"] as? [String] {
                self.IPv6 = value
            }
        }
    }
    public class DiffIPWhitelist : Tea.TeaModel {
        public class AddedIPWhitelist : Tea.TeaModel {
            public var IPv4: [String]?

            public var IPv6: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.IPv4 != nil {
                    map["IPv4"] = self.IPv4!
                }
                if self.IPv6 != nil {
                    map["IPv6"] = self.IPv6!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IPv4"] as? [String] {
                    self.IPv4 = value
                }
                if let value = dict["IPv6"] as? [String] {
                    self.IPv6 = value
                }
            }
        }
        public class NoChangeIpWhitelist : Tea.TeaModel {
            public var IPv4: [String]?

            public var IPv6: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.IPv4 != nil {
                    map["IPv4"] = self.IPv4!
                }
                if self.IPv6 != nil {
                    map["IPv6"] = self.IPv6!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IPv4"] as? [String] {
                    self.IPv4 = value
                }
                if let value = dict["IPv6"] as? [String] {
                    self.IPv6 = value
                }
            }
        }
        public class RemovedIPWhitelist : Tea.TeaModel {
            public var IPv4: [String]?

            public var IPv6: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.IPv4 != nil {
                    map["IPv4"] = self.IPv4!
                }
                if self.IPv6 != nil {
                    map["IPv6"] = self.IPv6!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IPv4"] as? [String] {
                    self.IPv4 = value
                }
                if let value = dict["IPv6"] as? [String] {
                    self.IPv6 = value
                }
            }
        }
        public var addedIPWhitelist: GetOriginProtectionResponseBody.DiffIPWhitelist.AddedIPWhitelist?

        public var noChangeIpWhitelist: GetOriginProtectionResponseBody.DiffIPWhitelist.NoChangeIpWhitelist?

        public var removedIPWhitelist: GetOriginProtectionResponseBody.DiffIPWhitelist.RemovedIPWhitelist?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.addedIPWhitelist?.validate()
            try self.noChangeIpWhitelist?.validate()
            try self.removedIPWhitelist?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.addedIPWhitelist != nil {
                map["AddedIPWhitelist"] = self.addedIPWhitelist?.toMap()
            }
            if self.noChangeIpWhitelist != nil {
                map["NoChangeIpWhitelist"] = self.noChangeIpWhitelist?.toMap()
            }
            if self.removedIPWhitelist != nil {
                map["RemovedIPWhitelist"] = self.removedIPWhitelist?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AddedIPWhitelist"] as? [String: Any?] {
                var model = GetOriginProtectionResponseBody.DiffIPWhitelist.AddedIPWhitelist()
                model.fromMap(value)
                self.addedIPWhitelist = model
            }
            if let value = dict["NoChangeIpWhitelist"] as? [String: Any?] {
                var model = GetOriginProtectionResponseBody.DiffIPWhitelist.NoChangeIpWhitelist()
                model.fromMap(value)
                self.noChangeIpWhitelist = model
            }
            if let value = dict["RemovedIPWhitelist"] as? [String: Any?] {
                var model = GetOriginProtectionResponseBody.DiffIPWhitelist.RemovedIPWhitelist()
                model.fromMap(value)
                self.removedIPWhitelist = model
            }
        }
    }
    public class LatestIPWhitelist : Tea.TeaModel {
        public var IPv4: [String]?

        public var IPv6: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.IPv4 != nil {
                map["IPv4"] = self.IPv4!
            }
            if self.IPv6 != nil {
                map["IPv6"] = self.IPv6!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IPv4"] as? [String] {
                self.IPv4 = value
            }
            if let value = dict["IPv6"] as? [String] {
                self.IPv6 = value
            }
        }
    }
    public var currentIPWhitelist: GetOriginProtectionResponseBody.CurrentIPWhitelist?

    public var diffIPWhitelist: GetOriginProtectionResponseBody.DiffIPWhitelist?

    public var latestIPWhitelist: GetOriginProtectionResponseBody.LatestIPWhitelist?

    public var needUpdate: Bool?

    public var originConverge: String?

    public var originProtection: String?

    public var requestId: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.currentIPWhitelist?.validate()
        try self.diffIPWhitelist?.validate()
        try self.latestIPWhitelist?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentIPWhitelist != nil {
            map["CurrentIPWhitelist"] = self.currentIPWhitelist?.toMap()
        }
        if self.diffIPWhitelist != nil {
            map["DiffIPWhitelist"] = self.diffIPWhitelist?.toMap()
        }
        if self.latestIPWhitelist != nil {
            map["LatestIPWhitelist"] = self.latestIPWhitelist?.toMap()
        }
        if self.needUpdate != nil {
            map["NeedUpdate"] = self.needUpdate!
        }
        if self.originConverge != nil {
            map["OriginConverge"] = self.originConverge!
        }
        if self.originProtection != nil {
            map["OriginProtection"] = self.originProtection!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CurrentIPWhitelist"] as? [String: Any?] {
            var model = GetOriginProtectionResponseBody.CurrentIPWhitelist()
            model.fromMap(value)
            self.currentIPWhitelist = model
        }
        if let value = dict["DiffIPWhitelist"] as? [String: Any?] {
            var model = GetOriginProtectionResponseBody.DiffIPWhitelist()
            model.fromMap(value)
            self.diffIPWhitelist = model
        }
        if let value = dict["LatestIPWhitelist"] as? [String: Any?] {
            var model = GetOriginProtectionResponseBody.LatestIPWhitelist()
            model.fromMap(value)
            self.latestIPWhitelist = model
        }
        if let value = dict["NeedUpdate"] as? Bool {
            self.needUpdate = value
        }
        if let value = dict["OriginConverge"] as? String {
            self.originConverge = value
        }
        if let value = dict["OriginProtection"] as? String {
            self.originProtection = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetOriginProtectionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOriginProtectionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOriginProtectionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOriginRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetOriginRuleResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var dnsRecord: String?

    public var follow302Enable: String?

    public var follow302MaxTries: String?

    public var follow302RetainArgs: String?

    public var follow302RetainHeader: String?

    public var follow302TargetHost: String?

    public var originHost: String?

    public var originHttpPort: String?

    public var originHttpsPort: String?

    public var originMtls: String?

    public var originReadTimeout: String?

    public var originScheme: String?

    public var originSni: String?

    public var originVerify: String?

    public var range: String?

    public var rangeChunkSize: String?

    public var requestId: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.dnsRecord != nil {
            map["DnsRecord"] = self.dnsRecord!
        }
        if self.follow302Enable != nil {
            map["Follow302Enable"] = self.follow302Enable!
        }
        if self.follow302MaxTries != nil {
            map["Follow302MaxTries"] = self.follow302MaxTries!
        }
        if self.follow302RetainArgs != nil {
            map["Follow302RetainArgs"] = self.follow302RetainArgs!
        }
        if self.follow302RetainHeader != nil {
            map["Follow302RetainHeader"] = self.follow302RetainHeader!
        }
        if self.follow302TargetHost != nil {
            map["Follow302TargetHost"] = self.follow302TargetHost!
        }
        if self.originHost != nil {
            map["OriginHost"] = self.originHost!
        }
        if self.originHttpPort != nil {
            map["OriginHttpPort"] = self.originHttpPort!
        }
        if self.originHttpsPort != nil {
            map["OriginHttpsPort"] = self.originHttpsPort!
        }
        if self.originMtls != nil {
            map["OriginMtls"] = self.originMtls!
        }
        if self.originReadTimeout != nil {
            map["OriginReadTimeout"] = self.originReadTimeout!
        }
        if self.originScheme != nil {
            map["OriginScheme"] = self.originScheme!
        }
        if self.originSni != nil {
            map["OriginSni"] = self.originSni!
        }
        if self.originVerify != nil {
            map["OriginVerify"] = self.originVerify!
        }
        if self.range != nil {
            map["Range"] = self.range!
        }
        if self.rangeChunkSize != nil {
            map["RangeChunkSize"] = self.rangeChunkSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["DnsRecord"] as? String {
            self.dnsRecord = value
        }
        if let value = dict["Follow302Enable"] as? String {
            self.follow302Enable = value
        }
        if let value = dict["Follow302MaxTries"] as? String {
            self.follow302MaxTries = value
        }
        if let value = dict["Follow302RetainArgs"] as? String {
            self.follow302RetainArgs = value
        }
        if let value = dict["Follow302RetainHeader"] as? String {
            self.follow302RetainHeader = value
        }
        if let value = dict["Follow302TargetHost"] as? String {
            self.follow302TargetHost = value
        }
        if let value = dict["OriginHost"] as? String {
            self.originHost = value
        }
        if let value = dict["OriginHttpPort"] as? String {
            self.originHttpPort = value
        }
        if let value = dict["OriginHttpsPort"] as? String {
            self.originHttpsPort = value
        }
        if let value = dict["OriginMtls"] as? String {
            self.originMtls = value
        }
        if let value = dict["OriginReadTimeout"] as? String {
            self.originReadTimeout = value
        }
        if let value = dict["OriginScheme"] as? String {
            self.originScheme = value
        }
        if let value = dict["OriginSni"] as? String {
            self.originSni = value
        }
        if let value = dict["OriginVerify"] as? String {
            self.originVerify = value
        }
        if let value = dict["Range"] as? String {
            self.range = value
        }
        if let value = dict["RangeChunkSize"] as? String {
            self.rangeChunkSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class GetOriginRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOriginRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOriginRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPageRequest : Tea.TeaModel {
    public var id: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
    }
}

public class GetPageResponseBody : Tea.TeaModel {
    public var content: String?

    public var contentType: String?

    public var description_: String?

    public var id: Int64?

    public var kind: String?

    public var name: String?

    public var requestId: String?

    public var updateTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.contentType != nil {
            map["ContentType"] = self.contentType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.kind != nil {
            map["Kind"] = self.kind!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.updateTime != nil {
            map["UpdateTime"] = self.updateTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["ContentType"] as? String {
            self.contentType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Kind"] as? String {
            self.kind = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UpdateTime"] as? String {
            self.updateTime = value
        }
    }
}

public class GetPageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPurgeQuotaRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class GetPurgeQuotaResponseBody : Tea.TeaModel {
    public var quota: String?

    public var requestId: String?

    public var usage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.quota != nil {
            map["Quota"] = self.quota!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.usage != nil {
            map["Usage"] = self.usage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Quota"] as? String {
            self.quota = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Usage"] as? String {
            self.usage = value
        }
    }
}

public class GetPurgeQuotaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPurgeQuotaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPurgeQuotaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRealtimeDeliveryFieldRequest : Tea.TeaModel {
    public var businessType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
    }
}

public class GetRealtimeDeliveryFieldResponseBody : Tea.TeaModel {
    public var fieldContent: [String: FieldContentValue]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fieldContent != nil {
            var tmp : [String: Any] = [:]
            for (k, v) in self.fieldContent! {
                tmp[k] = v.toMap()
            }
            map["FieldContent"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FieldContent"] as? [String: Any?] {
            var tmp : [String: FieldContentValue] = [:]
            for (k, v) in value {
                if v != nil {
                    var model = FieldContentValue()
                    model.fromMap(v as? [String: Any?])
                    tmp[k] = model
                }
            }
            self.fieldContent = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetRealtimeDeliveryFieldResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRealtimeDeliveryFieldResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRealtimeDeliveryFieldResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRecordRequest : Tea.TeaModel {
    public var recordId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.recordId != nil {
            map["RecordId"] = self.recordId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RecordId"] as? Int64 {
            self.recordId = value
        }
    }
}

public class GetRecordResponseBody : Tea.TeaModel {
    public class RecordModel : Tea.TeaModel {
        public class AuthConf : Tea.TeaModel {
            public var accessKey: String?

            public var authType: String?

            public var region: String?

            public var secretKey: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accessKey != nil {
                    map["AccessKey"] = self.accessKey!
                }
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.secretKey != nil {
                    map["SecretKey"] = self.secretKey!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccessKey"] as? String {
                    self.accessKey = value
                }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["SecretKey"] as? String {
                    self.secretKey = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public class Data : Tea.TeaModel {
            public var algorithm: Int32?

            public var certificate: String?

            public var fingerprint: String?

            public var flag: Int32?

            public var keyTag: Int32?

            public var matchingType: Int32?

            public var port: Int32?

            public var priority: Int32?

            public var selector: Int32?

            public var tag: String?

            public var type: Int32?

            public var usage: Int32?

            public var value: String?

            public var weight: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.algorithm != nil {
                    map["Algorithm"] = self.algorithm!
                }
                if self.certificate != nil {
                    map["Certificate"] = self.certificate!
                }
                if self.fingerprint != nil {
                    map["Fingerprint"] = self.fingerprint!
                }
                if self.flag != nil {
                    map["Flag"] = self.flag!
                }
                if self.keyTag != nil {
                    map["KeyTag"] = self.keyTag!
                }
                if self.matchingType != nil {
                    map["MatchingType"] = self.matchingType!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.priority != nil {
                    map["Priority"] = self.priority!
                }
                if self.selector != nil {
                    map["Selector"] = self.selector!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                if self.weight != nil {
                    map["Weight"] = self.weight!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Algorithm"] as? Int32 {
                    self.algorithm = value
                }
                if let value = dict["Certificate"] as? String {
                    self.certificate = value
                }
                if let value = dict["Fingerprint"] as? String {
                    self.fingerprint = value
                }
                if let value = dict["Flag"] as? Int32 {
                    self.flag = value
                }
                if let value = dict["KeyTag"] as? Int32 {
                    self.keyTag = value
                }
                if let value = dict["MatchingType"] as? Int32 {
                    self.matchingType = value
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["Priority"] as? Int32 {
                    self.priority = value
                }
                if let value = dict["Selector"] as? Int32 {
                    self.selector = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Type"] as? Int32 {
                    self.type = value
                }
                if let value = dict["Usage"] as? Int32 {
                    self.usage = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
                if let value = dict["Weight"] as? Int32 {
                    self.weight = value
                }
            }
        }
        public var authConf: GetRecordResponseBody.RecordModel.AuthConf?

        public var bizName: String?

        public var comment: String?

        public var createTime: String?

        public var data: GetRecordResponseBody.RecordModel.Data?

        public var hostPolicy: String?

        public var proxied: Bool?

        public var recordCname: String?

        public var recordId: Int64?

        public var recordName: String?

        public var recordSourceType: String?

        public var recordType: String?

        public var siteId: Int64?

        public var siteName: String?

        public var ttl: Int32?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.authConf?.validate()
            try self.data?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authConf != nil {
                map["AuthConf"] = self.authConf?.toMap()
            }
            if self.bizName != nil {
                map["BizName"] = self.bizName!
            }
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.data != nil {
                map["Data"] = self.data?.toMap()
            }
            if self.hostPolicy != nil {
                map["HostPolicy"] = self.hostPolicy!
            }
            if self.proxied != nil {
                map["Proxied"] = self.proxied!
            }
            if self.recordCname != nil {
                map["RecordCname"] = self.recordCname!
            }
            if self.recordId != nil {
                map["RecordId"] = self.recordId!
            }
            if self.recordName != nil {
                map["RecordName"] = self.recordName!
            }
            if self.recordSourceType != nil {
                map["RecordSourceType"] = self.recordSourceType!
            }
            if self.recordType != nil {
                map["RecordType"] = self.recordType!
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            if self.siteName != nil {
                map["SiteName"] = self.siteName!
            }
            if self.ttl != nil {
                map["Ttl"] = self.ttl!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuthConf"] as? [String: Any?] {
                var model = GetRecordResponseBody.RecordModel.AuthConf()
                model.fromMap(value)
                self.authConf = model
            }
            if let value = dict["BizName"] as? String {
                self.bizName = value
            }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Data"] as? [String: Any?] {
                var model = GetRecordResponseBody.RecordModel.Data()
                model.fromMap(value)
                self.data = model
            }
            if let value = dict["HostPolicy"] as? String {
                self.hostPolicy = value
            }
            if let value = dict["Proxied"] as? Bool {
                self.proxied = value
            }
            if let value = dict["RecordCname"] as? String {
                self.recordCname = value
            }
            if let value = dict["RecordId"] as? Int64 {
                self.recordId = value
            }
            if let value = dict["RecordName"] as? String {
                self.recordName = value
            }
            if let value = dict["RecordSourceType"] as? String {
                self.recordSourceType = value
            }
            if let value = dict["RecordType"] as? String {
                self.recordType = value
            }
            if let value = dict["SiteId"] as? Int64 {
                self.siteId = value
            }
            if let value = dict["SiteName"] as? String {
                self.siteName = value
            }
            if let value = dict["Ttl"] as? Int32 {
                self.ttl = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var recordModel: GetRecordResponseBody.RecordModel?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.recordModel?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.recordModel != nil {
            map["RecordModel"] = self.recordModel?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RecordModel"] as? [String: Any?] {
            var model = GetRecordResponseBody.RecordModel()
            model.fromMap(value)
            self.recordModel = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRedirectRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetRedirectRuleResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var requestId: String?

    public var reserveQueryString: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteVersion: Int32?

    public var statusCode: String?

    public var targetUrl: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.reserveQueryString != nil {
            map["ReserveQueryString"] = self.reserveQueryString!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.statusCode != nil {
            map["StatusCode"] = self.statusCode!
        }
        if self.targetUrl != nil {
            map["TargetUrl"] = self.targetUrl!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ReserveQueryString"] as? String {
            self.reserveQueryString = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["StatusCode"] as? String {
            self.statusCode = value
        }
        if let value = dict["TargetUrl"] as? String {
            self.targetUrl = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class GetRedirectRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRedirectRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRedirectRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRewriteUrlRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetRewriteUrlRuleResponseBody : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var queryString: String?

    public var requestId: String?

    public var rewriteQueryStringType: String?

    public var rewriteUriType: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteVersion: Int32?

    public var uri: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.queryString != nil {
            map["QueryString"] = self.queryString!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rewriteQueryStringType != nil {
            map["RewriteQueryStringType"] = self.rewriteQueryStringType!
        }
        if self.rewriteUriType != nil {
            map["RewriteUriType"] = self.rewriteUriType!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.uri != nil {
            map["Uri"] = self.uri!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["QueryString"] as? String {
            self.queryString = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RewriteQueryStringType"] as? String {
            self.rewriteQueryStringType = value
        }
        if let value = dict["RewriteUriType"] as? String {
            self.rewriteUriType = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["Uri"] as? String {
            self.uri = value
        }
    }
}

public class GetRewriteUrlRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRewriteUrlRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRewriteUrlRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRoutineRequest : Tea.TeaModel {
    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class GetRoutineResponseBody : Tea.TeaModel {
    public class Envs : Tea.TeaModel {
        public var canaryAreaList: [String]?

        public var canaryCodeVersion: String?

        public var codeVersion: String?

        public var env: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.canaryAreaList != nil {
                map["CanaryAreaList"] = self.canaryAreaList!
            }
            if self.canaryCodeVersion != nil {
                map["CanaryCodeVersion"] = self.canaryCodeVersion!
            }
            if self.codeVersion != nil {
                map["CodeVersion"] = self.codeVersion!
            }
            if self.env != nil {
                map["Env"] = self.env!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CanaryAreaList"] as? [String] {
                self.canaryAreaList = value
            }
            if let value = dict["CanaryCodeVersion"] as? String {
                self.canaryCodeVersion = value
            }
            if let value = dict["CodeVersion"] as? String {
                self.codeVersion = value
            }
            if let value = dict["Env"] as? String {
                self.env = value
            }
        }
    }
    public var createTime: String?

    public var defaultRelatedRecord: String?

    public var description_: String?

    public var envs: [GetRoutineResponseBody.Envs]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createTime != nil {
            map["CreateTime"] = self.createTime!
        }
        if self.defaultRelatedRecord != nil {
            map["DefaultRelatedRecord"] = self.defaultRelatedRecord!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.envs != nil {
            var tmp : [Any] = []
            for k in self.envs! {
                tmp.append(k.toMap())
            }
            map["Envs"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateTime"] as? String {
            self.createTime = value
        }
        if let value = dict["DefaultRelatedRecord"] as? String {
            self.defaultRelatedRecord = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Envs"] as? [Any?] {
            var tmp : [GetRoutineResponseBody.Envs] = []
            for v in value {
                if v != nil {
                    var model = GetRoutineResponseBody.Envs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.envs = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetRoutineResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRoutineResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRoutineResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRoutineRouteRequest : Tea.TeaModel {
    public var configId: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetRoutineRouteResponseBody : Tea.TeaModel {
    public var bypass: String?

    public var configId: Int64?

    public var configType: String?

    public var mode: String?

    public var requestId: String?

    public var routeEnable: String?

    public var routeName: String?

    public var routineName: String?

    public var rule: String?

    public var sequence: Int32?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bypass != nil {
            map["Bypass"] = self.bypass!
        }
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.mode != nil {
            map["Mode"] = self.mode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.routeEnable != nil {
            map["RouteEnable"] = self.routeEnable!
        }
        if self.routeName != nil {
            map["RouteName"] = self.routeName!
        }
        if self.routineName != nil {
            map["RoutineName"] = self.routineName!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Bypass"] as? String {
            self.bypass = value
        }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["Mode"] as? String {
            self.mode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RouteEnable"] as? String {
            self.routeEnable = value
        }
        if let value = dict["RouteName"] as? String {
            self.routeName = value
        }
        if let value = dict["RoutineName"] as? String {
            self.routineName = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class GetRoutineRouteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRoutineRouteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRoutineRouteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRoutineStagingCodeUploadInfoRequest : Tea.TeaModel {
    public var codeDescription: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.codeDescription != nil {
            map["CodeDescription"] = self.codeDescription!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CodeDescription"] as? String {
            self.codeDescription = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class GetRoutineStagingCodeUploadInfoResponseBody : Tea.TeaModel {
    public var codeVersion: String?

    public var ossPostConfig: [String: Any]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.codeVersion != nil {
            map["CodeVersion"] = self.codeVersion!
        }
        if self.ossPostConfig != nil {
            map["OssPostConfig"] = self.ossPostConfig!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CodeVersion"] as? String {
            self.codeVersion = value
        }
        if let value = dict["OssPostConfig"] as? [String: Any] {
            self.ossPostConfig = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetRoutineStagingCodeUploadInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRoutineStagingCodeUploadInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRoutineStagingCodeUploadInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRoutineStagingEnvIpResponseBody : Tea.TeaModel {
    public var IPV4: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.IPV4 != nil {
            map["IPV4"] = self.IPV4!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IPV4"] as? [String] {
            self.IPV4 = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetRoutineStagingEnvIpResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRoutineStagingEnvIpResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRoutineStagingEnvIpResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRoutineUserInfoResponseBody : Tea.TeaModel {
    public class Routines : Tea.TeaModel {
        public var createTime: String?

        public var description_: String?

        public var routineName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.routineName != nil {
                map["RoutineName"] = self.routineName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["RoutineName"] as? String {
                self.routineName = value
            }
        }
    }
    public var requestId: String?

    public var routines: [GetRoutineUserInfoResponseBody.Routines]?

    public var subdomains: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.routines != nil {
            var tmp : [Any] = []
            for k in self.routines! {
                tmp.append(k.toMap())
            }
            map["Routines"] = tmp
        }
        if self.subdomains != nil {
            map["Subdomains"] = self.subdomains!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Routines"] as? [Any?] {
            var tmp : [GetRoutineUserInfoResponseBody.Routines] = []
            for v in value {
                if v != nil {
                    var model = GetRoutineUserInfoResponseBody.Routines()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.routines = tmp
        }
        if let value = dict["Subdomains"] as? [String] {
            self.subdomains = value
        }
    }
}

public class GetRoutineUserInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRoutineUserInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRoutineUserInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetScheduledPreloadJobRequest : Tea.TeaModel {
    public var id: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
    }
}

public class GetScheduledPreloadJobResponseBody : Tea.TeaModel {
    public var aliUid: String?

    public var createdAt: String?

    public var domains: String?

    public var errorInfo: String?

    public var failedFileOss: String?

    public var fileId: String?

    public var id: String?

    public var insertWay: String?

    public var name: String?

    public var requestId: String?

    public var siteId: Int64?

    public var taskSubmitted: Int32?

    public var taskType: String?

    public var urlCount: Int32?

    public var urlSubmitted: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliUid != nil {
            map["AliUid"] = self.aliUid!
        }
        if self.createdAt != nil {
            map["CreatedAt"] = self.createdAt!
        }
        if self.domains != nil {
            map["Domains"] = self.domains!
        }
        if self.errorInfo != nil {
            map["ErrorInfo"] = self.errorInfo!
        }
        if self.failedFileOss != nil {
            map["FailedFileOss"] = self.failedFileOss!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.insertWay != nil {
            map["InsertWay"] = self.insertWay!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.taskSubmitted != nil {
            map["TaskSubmitted"] = self.taskSubmitted!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.urlCount != nil {
            map["UrlCount"] = self.urlCount!
        }
        if self.urlSubmitted != nil {
            map["UrlSubmitted"] = self.urlSubmitted!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliUid"] as? String {
            self.aliUid = value
        }
        if let value = dict["CreatedAt"] as? String {
            self.createdAt = value
        }
        if let value = dict["Domains"] as? String {
            self.domains = value
        }
        if let value = dict["ErrorInfo"] as? String {
            self.errorInfo = value
        }
        if let value = dict["FailedFileOss"] as? String {
            self.failedFileOss = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["InsertWay"] as? String {
            self.insertWay = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["TaskSubmitted"] as? Int32 {
            self.taskSubmitted = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
        if let value = dict["UrlCount"] as? Int32 {
            self.urlCount = value
        }
        if let value = dict["UrlSubmitted"] as? Int32 {
            self.urlSubmitted = value
        }
    }
}

public class GetScheduledPreloadJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetScheduledPreloadJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetScheduledPreloadJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSeoBypassRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetSeoBypassResponseBody : Tea.TeaModel {
    public var enable: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetSeoBypassResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSeoBypassResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSeoBypassResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSiteRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetSiteResponseBody : Tea.TeaModel {
    public class SiteModel : Tea.TeaModel {
        public var accessType: String?

        public var cnameZone: String?

        public var coverage: String?

        public var createTime: String?

        public var instanceId: String?

        public var nameServerList: String?

        public var offlineReason: String?

        public var planName: String?

        public var planSpecName: String?

        public var resourceGroupId: String?

        public var siteId: Int64?

        public var siteName: String?

        public var status: String?

        public var tags: [String: Any]?

        public var updateTime: String?

        public var vanityNSList: [String: String]?

        public var verifyCode: String?

        public var versionManagement: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessType != nil {
                map["AccessType"] = self.accessType!
            }
            if self.cnameZone != nil {
                map["CnameZone"] = self.cnameZone!
            }
            if self.coverage != nil {
                map["Coverage"] = self.coverage!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.nameServerList != nil {
                map["NameServerList"] = self.nameServerList!
            }
            if self.offlineReason != nil {
                map["OfflineReason"] = self.offlineReason!
            }
            if self.planName != nil {
                map["PlanName"] = self.planName!
            }
            if self.planSpecName != nil {
                map["PlanSpecName"] = self.planSpecName!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            if self.siteName != nil {
                map["SiteName"] = self.siteName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tags != nil {
                map["Tags"] = self.tags!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.vanityNSList != nil {
                map["VanityNSList"] = self.vanityNSList!
            }
            if self.verifyCode != nil {
                map["VerifyCode"] = self.verifyCode!
            }
            if self.versionManagement != nil {
                map["VersionManagement"] = self.versionManagement!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessType"] as? String {
                self.accessType = value
            }
            if let value = dict["CnameZone"] as? String {
                self.cnameZone = value
            }
            if let value = dict["Coverage"] as? String {
                self.coverage = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["NameServerList"] as? String {
                self.nameServerList = value
            }
            if let value = dict["OfflineReason"] as? String {
                self.offlineReason = value
            }
            if let value = dict["PlanName"] as? String {
                self.planName = value
            }
            if let value = dict["PlanSpecName"] as? String {
                self.planSpecName = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["SiteId"] as? Int64 {
                self.siteId = value
            }
            if let value = dict["SiteName"] as? String {
                self.siteName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Tags"] as? [String: Any] {
                self.tags = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["VanityNSList"] as? [String: String] {
                self.vanityNSList = value
            }
            if let value = dict["VerifyCode"] as? String {
                self.verifyCode = value
            }
            if let value = dict["VersionManagement"] as? Bool {
                self.versionManagement = value
            }
        }
    }
    public var requestId: String?

    public var siteModel: GetSiteResponseBody.SiteModel?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.siteModel?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteModel != nil {
            map["SiteModel"] = self.siteModel?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteModel"] as? [String: Any?] {
            var model = GetSiteResponseBody.SiteModel()
            model.fromMap(value)
            self.siteModel = model
        }
    }
}

public class GetSiteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSiteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSiteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSiteCurrentNSRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetSiteCurrentNSResponseBody : Tea.TeaModel {
    public var NSList: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.NSList != nil {
            map["NSList"] = self.NSList!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NSList"] as? [String] {
            self.NSList = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetSiteCurrentNSResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSiteCurrentNSResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSiteCurrentNSResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSiteCustomLogRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetSiteCustomLogResponseBody : Tea.TeaModel {
    public class LogCustomField : Tea.TeaModel {
        public var cookies: [String]?

        public var requestHeaders: [String]?

        public var responseHeaders: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cookies != nil {
                map["Cookies"] = self.cookies!
            }
            if self.requestHeaders != nil {
                map["RequestHeaders"] = self.requestHeaders!
            }
            if self.responseHeaders != nil {
                map["ResponseHeaders"] = self.responseHeaders!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Cookies"] as? [String] {
                self.cookies = value
            }
            if let value = dict["RequestHeaders"] as? [String] {
                self.requestHeaders = value
            }
            if let value = dict["ResponseHeaders"] as? [String] {
                self.responseHeaders = value
            }
        }
    }
    public var configId: Int64?

    public var isExist: Bool?

    public var logCustomField: GetSiteCustomLogResponseBody.LogCustomField?

    public var requestId: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.logCustomField?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.isExist != nil {
            map["IsExist"] = self.isExist!
        }
        if self.logCustomField != nil {
            map["LogCustomField"] = self.logCustomField?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["IsExist"] as? Bool {
            self.isExist = value
        }
        if let value = dict["LogCustomField"] as? [String: Any?] {
            var model = GetSiteCustomLogResponseBody.LogCustomField()
            model.fromMap(value)
            self.logCustomField = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetSiteCustomLogResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSiteCustomLogResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSiteCustomLogResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSiteDeliveryTaskRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class GetSiteDeliveryTaskResponseBody : Tea.TeaModel {
    public var businessType: String?

    public var dataCenter: String?

    public var deliveryType: String?

    public var discardRate: Double?

    public var fieldList: String?

    public var filterRules: String?

    public var requestId: String?

    public var sinkConfig: Any?

    public var siteId: Int64?

    public var siteName: String?

    public var status: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.dataCenter != nil {
            map["DataCenter"] = self.dataCenter!
        }
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.discardRate != nil {
            map["DiscardRate"] = self.discardRate!
        }
        if self.fieldList != nil {
            map["FieldList"] = self.fieldList!
        }
        if self.filterRules != nil {
            map["FilterRules"] = self.filterRules!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sinkConfig != nil {
            map["SinkConfig"] = self.sinkConfig!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["DataCenter"] as? String {
            self.dataCenter = value
        }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["DiscardRate"] as? Double {
            self.discardRate = value
        }
        if let value = dict["FieldList"] as? String {
            self.fieldList = value
        }
        if let value = dict["FilterRules"] as? String {
            self.filterRules = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SinkConfig"] as? Any {
            self.sinkConfig = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class GetSiteDeliveryTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSiteDeliveryTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSiteDeliveryTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSiteLogDeliveryQuotaRequest : Tea.TeaModel {
    public var businessType: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetSiteLogDeliveryQuotaResponseBody : Tea.TeaModel {
    public var businessType: String?

    public var freeQuota: Int64?

    public var requestId: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.freeQuota != nil {
            map["FreeQuota"] = self.freeQuota!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["FreeQuota"] as? Int64 {
            self.freeQuota = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetSiteLogDeliveryQuotaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSiteLogDeliveryQuotaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSiteLogDeliveryQuotaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSiteNameExclusiveRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetSiteNameExclusiveResponseBody : Tea.TeaModel {
    public var enable: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetSiteNameExclusiveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSiteNameExclusiveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSiteNameExclusiveResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSiteOriginClientCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetSiteOriginClientCertificateResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var commonName: String?

        public var createTime: String?

        public var fingerprintSha256: String?

        public var id: String?

        public var issuer: String?

        public var name: String?

        public var notAfter: String?

        public var notBefore: String?

        public var pubkeyAlgorithm: String?

        public var SAN: String?

        public var serialNumber: String?

        public var signatureAlgorithm: String?

        public var status: String?

        public var type: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.fingerprintSha256 != nil {
                map["FingerprintSha256"] = self.fingerprintSha256!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.issuer != nil {
                map["Issuer"] = self.issuer!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.notAfter != nil {
                map["NotAfter"] = self.notAfter!
            }
            if self.notBefore != nil {
                map["NotBefore"] = self.notBefore!
            }
            if self.pubkeyAlgorithm != nil {
                map["PubkeyAlgorithm"] = self.pubkeyAlgorithm!
            }
            if self.SAN != nil {
                map["SAN"] = self.SAN!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.signatureAlgorithm != nil {
                map["SignatureAlgorithm"] = self.signatureAlgorithm!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["FingerprintSha256"] as? String {
                self.fingerprintSha256 = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Issuer"] as? String {
                self.issuer = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NotAfter"] as? String {
                self.notAfter = value
            }
            if let value = dict["NotBefore"] as? String {
                self.notBefore = value
            }
            if let value = dict["PubkeyAlgorithm"] as? String {
                self.pubkeyAlgorithm = value
            }
            if let value = dict["SAN"] as? String {
                self.SAN = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["SignatureAlgorithm"] as? String {
                self.signatureAlgorithm = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var certificate: String?

    public var requestId: String?

    public var result: GetSiteOriginClientCertificateResponseBody.Result?

    public var siteId: Int64?

    public var siteName: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.result?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificate != nil {
            map["Certificate"] = self.certificate!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result?.toMap()
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Certificate"] as? String {
            self.certificate = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [String: Any?] {
            var model = GetSiteOriginClientCertificateResponseBody.Result()
            model.fromMap(value)
            self.result = model
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class GetSiteOriginClientCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSiteOriginClientCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSiteOriginClientCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSitePauseRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetSitePauseResponseBody : Tea.TeaModel {
    public var paused: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.paused != nil {
            map["Paused"] = self.paused!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Paused"] as? Bool {
            self.paused = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetSitePauseResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSitePauseResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSitePauseResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSiteWafSettingsRequest : Tea.TeaModel {
    public var path: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.path != nil {
            map["Path"] = self.path!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Path"] as? String {
            self.path = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class GetSiteWafSettingsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var settings: WafSiteSettings?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.settings?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.settings != nil {
            map["Settings"] = self.settings?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Settings"] as? [String: Any?] {
            var model = WafSiteSettings()
            model.fromMap(value)
            self.settings = model
        }
    }
}

public class GetSiteWafSettingsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSiteWafSettingsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSiteWafSettingsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTieredCacheRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetTieredCacheResponseBody : Tea.TeaModel {
    public var cacheArchitectureMode: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cacheArchitectureMode != nil {
            map["CacheArchitectureMode"] = self.cacheArchitectureMode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CacheArchitectureMode"] as? String {
            self.cacheArchitectureMode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetTieredCacheResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTieredCacheResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTieredCacheResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUploadTaskRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var uploadId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.uploadId != nil {
            map["UploadId"] = self.uploadId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["UploadId"] as? Int64 {
            self.uploadId = value
        }
    }
}

public class GetUploadTaskResponseBody : Tea.TeaModel {
    public var description_: String?

    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class GetUploadTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUploadTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUploadTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUserDeliveryTaskRequest : Tea.TeaModel {
    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class GetUserDeliveryTaskResponseBody : Tea.TeaModel {
    public var businessType: String?

    public var dataCenter: String?

    public var deliveryType: String?

    public var details: String?

    public var discardRate: Double?

    public var fieldList: String?

    public var filterRules: String?

    public var requestId: String?

    public var sinkConfig: Any?

    public var status: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.dataCenter != nil {
            map["DataCenter"] = self.dataCenter!
        }
        if self.deliveryType != nil {
            map["DeliveryType"] = self.deliveryType!
        }
        if self.details != nil {
            map["Details"] = self.details!
        }
        if self.discardRate != nil {
            map["DiscardRate"] = self.discardRate!
        }
        if self.fieldList != nil {
            map["FieldList"] = self.fieldList!
        }
        if self.filterRules != nil {
            map["FilterRules"] = self.filterRules!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sinkConfig != nil {
            map["SinkConfig"] = self.sinkConfig!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["DataCenter"] as? String {
            self.dataCenter = value
        }
        if let value = dict["DeliveryType"] as? String {
            self.deliveryType = value
        }
        if let value = dict["Details"] as? String {
            self.details = value
        }
        if let value = dict["DiscardRate"] as? Double {
            self.discardRate = value
        }
        if let value = dict["FieldList"] as? String {
            self.fieldList = value
        }
        if let value = dict["FilterRules"] as? String {
            self.filterRules = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SinkConfig"] as? Any {
            self.sinkConfig = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class GetUserDeliveryTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUserDeliveryTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUserDeliveryTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUserLogDeliveryQuotaRequest : Tea.TeaModel {
    public var businessType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
    }
}

public class GetUserLogDeliveryQuotaResponseBody : Tea.TeaModel {
    public var businessType: String?

    public var freeQuota: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.freeQuota != nil {
            map["FreeQuota"] = self.freeQuota!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["FreeQuota"] as? Int64 {
            self.freeQuota = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetUserLogDeliveryQuotaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUserLogDeliveryQuotaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUserLogDeliveryQuotaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetWafBotAppKeyResponseBody : Tea.TeaModel {
    public var appKey: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appKey != nil {
            map["AppKey"] = self.appKey!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppKey"] as? String {
            self.appKey = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetWafBotAppKeyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetWafBotAppKeyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetWafBotAppKeyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetWafFilterRequest : Tea.TeaModel {
    public var phase: String?

    public var siteId: Int64?

    public var target: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.target != nil {
            map["Target"] = self.target!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Target"] as? String {
            self.target = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class GetWafFilterResponseBody : Tea.TeaModel {
    public class Filter : Tea.TeaModel {
        public class Fields : Tea.TeaModel {
            public class Logics : Tea.TeaModel {
                public class Validator : Tea.TeaModel {
                    public var errMsg: String?

                    public var length: WafQuotaInteger?

                    public var pattern: String?

                    public var range: WafQuotaInteger?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.length?.validate()
                        try self.range?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.errMsg != nil {
                            map["ErrMsg"] = self.errMsg!
                        }
                        if self.length != nil {
                            map["Length"] = self.length?.toMap()
                        }
                        if self.pattern != nil {
                            map["Pattern"] = self.pattern!
                        }
                        if self.range != nil {
                            map["Range"] = self.range?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ErrMsg"] as? String {
                            self.errMsg = value
                        }
                        if let value = dict["Length"] as? [String: Any?] {
                            var model = WafQuotaInteger()
                            model.fromMap(value)
                            self.length = model
                        }
                        if let value = dict["Pattern"] as? String {
                            self.pattern = value
                        }
                        if let value = dict["Range"] as? [String: Any?] {
                            var model = WafQuotaInteger()
                            model.fromMap(value)
                            self.range = model
                        }
                    }
                }
                public var attributes: Int32?

                public var enable: Bool?

                public var kind: String?

                public var minPlan: String?

                public var negative: Bool?

                public var operator_: String?

                public var symbol: String?

                public var tip: String?

                public var type: String?

                public var validator: GetWafFilterResponseBody.Filter.Fields.Logics.Validator?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.validator?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.attributes != nil {
                        map["Attributes"] = self.attributes!
                    }
                    if self.enable != nil {
                        map["Enable"] = self.enable!
                    }
                    if self.kind != nil {
                        map["Kind"] = self.kind!
                    }
                    if self.minPlan != nil {
                        map["MinPlan"] = self.minPlan!
                    }
                    if self.negative != nil {
                        map["Negative"] = self.negative!
                    }
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.symbol != nil {
                        map["Symbol"] = self.symbol!
                    }
                    if self.tip != nil {
                        map["Tip"] = self.tip!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.validator != nil {
                        map["Validator"] = self.validator?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Attributes"] as? Int32 {
                        self.attributes = value
                    }
                    if let value = dict["Enable"] as? Bool {
                        self.enable = value
                    }
                    if let value = dict["Kind"] as? String {
                        self.kind = value
                    }
                    if let value = dict["MinPlan"] as? String {
                        self.minPlan = value
                    }
                    if let value = dict["Negative"] as? Bool {
                        self.negative = value
                    }
                    if let value = dict["Operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["Symbol"] as? String {
                        self.symbol = value
                    }
                    if let value = dict["Tip"] as? String {
                        self.tip = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                    if let value = dict["Validator"] as? [String: Any?] {
                        var model = GetWafFilterResponseBody.Filter.Fields.Logics.Validator()
                        model.fromMap(value)
                        self.validator = model
                    }
                }
            }
            public class Selector : Tea.TeaModel {
                public class Data : Tea.TeaModel {
                    public var label: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var data: [GetWafFilterResponseBody.Filter.Fields.Selector.Data]?

                public var kind: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.data != nil {
                        var tmp : [Any] = []
                        for k in self.data! {
                            tmp.append(k.toMap())
                        }
                        map["Data"] = tmp
                    }
                    if self.kind != nil {
                        map["Kind"] = self.kind!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Data"] as? [Any?] {
                        var tmp : [GetWafFilterResponseBody.Filter.Fields.Selector.Data] = []
                        for v in value {
                            if v != nil {
                                var model = GetWafFilterResponseBody.Filter.Fields.Selector.Data()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.data = tmp
                    }
                    if let value = dict["Kind"] as? String {
                        self.kind = value
                    }
                }
            }
            public var enable: Bool?

            public var key: String?

            public var label: String?

            public var logics: [GetWafFilterResponseBody.Filter.Fields.Logics]?

            public var minPlan: String?

            public var selector: GetWafFilterResponseBody.Filter.Fields.Selector?

            public var sub: Bool?

            public var subTip: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.selector?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.enable != nil {
                    map["Enable"] = self.enable!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.logics != nil {
                    var tmp : [Any] = []
                    for k in self.logics! {
                        tmp.append(k.toMap())
                    }
                    map["Logics"] = tmp
                }
                if self.minPlan != nil {
                    map["MinPlan"] = self.minPlan!
                }
                if self.selector != nil {
                    map["Selector"] = self.selector?.toMap()
                }
                if self.sub != nil {
                    map["Sub"] = self.sub!
                }
                if self.subTip != nil {
                    map["SubTip"] = self.subTip!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Enable"] as? Bool {
                    self.enable = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["Logics"] as? [Any?] {
                    var tmp : [GetWafFilterResponseBody.Filter.Fields.Logics] = []
                    for v in value {
                        if v != nil {
                            var model = GetWafFilterResponseBody.Filter.Fields.Logics()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.logics = tmp
                }
                if let value = dict["MinPlan"] as? String {
                    self.minPlan = value
                }
                if let value = dict["Selector"] as? [String: Any?] {
                    var model = GetWafFilterResponseBody.Filter.Fields.Selector()
                    model.fromMap(value)
                    self.selector = model
                }
                if let value = dict["Sub"] as? Bool {
                    self.sub = value
                }
                if let value = dict["SubTip"] as? String {
                    self.subTip = value
                }
            }
        }
        public var fields: [GetWafFilterResponseBody.Filter.Fields]?

        public var phase: String?

        public var target: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fields != nil {
                var tmp : [Any] = []
                for k in self.fields! {
                    tmp.append(k.toMap())
                }
                map["Fields"] = tmp
            }
            if self.phase != nil {
                map["Phase"] = self.phase!
            }
            if self.target != nil {
                map["Target"] = self.target!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Fields"] as? [Any?] {
                var tmp : [GetWafFilterResponseBody.Filter.Fields] = []
                for v in value {
                    if v != nil {
                        var model = GetWafFilterResponseBody.Filter.Fields()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.fields = tmp
            }
            if let value = dict["Phase"] as? String {
                self.phase = value
            }
            if let value = dict["Target"] as? String {
                self.target = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var filter: GetWafFilterResponseBody.Filter?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.filter?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.filter != nil {
            map["Filter"] = self.filter?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Filter"] as? [String: Any?] {
            var model = GetWafFilterResponseBody.Filter()
            model.fromMap(value)
            self.filter = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetWafFilterResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetWafFilterResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetWafFilterResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetWafQuotaRequest : Tea.TeaModel {
    public var paths: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.paths != nil {
            map["Paths"] = self.paths!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Paths"] as? String {
            self.paths = value
        }
    }
}

public class GetWafQuotaResponseBody : Tea.TeaModel {
    public class Quota : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var enable: Bool?

            public var items: [String: QuotaListItemsValue]?

            public var numberItemsPerList: WafQuotaInteger?

            public var numberItemsTotal: WafQuotaInteger?

            public var numberTotal: WafQuotaInteger?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.numberItemsPerList?.validate()
                try self.numberItemsTotal?.validate()
                try self.numberTotal?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.enable != nil {
                    map["Enable"] = self.enable!
                }
                if self.items != nil {
                    var tmp : [String: Any] = [:]
                    for (k, v) in self.items! {
                        tmp[k] = v.toMap()
                    }
                    map["Items"] = tmp
                }
                if self.numberItemsPerList != nil {
                    map["NumberItemsPerList"] = self.numberItemsPerList?.toMap()
                }
                if self.numberItemsTotal != nil {
                    map["NumberItemsTotal"] = self.numberItemsTotal?.toMap()
                }
                if self.numberTotal != nil {
                    map["NumberTotal"] = self.numberTotal?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Enable"] as? Bool {
                    self.enable = value
                }
                if let value = dict["Items"] as? [String: Any?] {
                    var tmp : [String: QuotaListItemsValue] = [:]
                    for (k, v) in value {
                        if v != nil {
                            var model = QuotaListItemsValue()
                            model.fromMap(v as? [String: Any?])
                            tmp[k] = model
                        }
                    }
                    self.items = tmp
                }
                if let value = dict["NumberItemsPerList"] as? [String: Any?] {
                    var model = WafQuotaInteger()
                    model.fromMap(value)
                    self.numberItemsPerList = model
                }
                if let value = dict["NumberItemsTotal"] as? [String: Any?] {
                    var model = WafQuotaInteger()
                    model.fromMap(value)
                    self.numberItemsTotal = model
                }
                if let value = dict["NumberTotal"] as? [String: Any?] {
                    var model = WafQuotaInteger()
                    model.fromMap(value)
                    self.numberTotal = model
                }
            }
        }
        public class ManagedRulesGroup : Tea.TeaModel {
            public var enable: Bool?

            public var numberTotal: WafQuotaInteger?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.numberTotal?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.enable != nil {
                    map["Enable"] = self.enable!
                }
                if self.numberTotal != nil {
                    map["NumberTotal"] = self.numberTotal?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Enable"] as? Bool {
                    self.enable = value
                }
                if let value = dict["NumberTotal"] as? [String: Any?] {
                    var model = WafQuotaInteger()
                    model.fromMap(value)
                    self.numberTotal = model
                }
            }
        }
        public class Page : Tea.TeaModel {
            public var contentTypes: [String: QuotaPageContentTypesValue]?

            public var enable: Bool?

            public var numberTotal: WafQuotaInteger?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.numberTotal?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contentTypes != nil {
                    var tmp : [String: Any] = [:]
                    for (k, v) in self.contentTypes! {
                        tmp[k] = v.toMap()
                    }
                    map["ContentTypes"] = tmp
                }
                if self.enable != nil {
                    map["Enable"] = self.enable!
                }
                if self.numberTotal != nil {
                    map["NumberTotal"] = self.numberTotal?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContentTypes"] as? [String: Any?] {
                    var tmp : [String: QuotaPageContentTypesValue] = [:]
                    for (k, v) in value {
                        if v != nil {
                            var model = QuotaPageContentTypesValue()
                            model.fromMap(v as? [String: Any?])
                            tmp[k] = model
                        }
                    }
                    self.contentTypes = tmp
                }
                if let value = dict["Enable"] as? Bool {
                    self.enable = value
                }
                if let value = dict["NumberTotal"] as? [String: Any?] {
                    var model = WafQuotaInteger()
                    model.fromMap(value)
                    self.numberTotal = model
                }
            }
        }
        public class ScenePolicy : Tea.TeaModel {
            public var enable: Bool?

            public var numberTotal: WafQuotaInteger?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.numberTotal?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.enable != nil {
                    map["Enable"] = self.enable!
                }
                if self.numberTotal != nil {
                    map["NumberTotal"] = self.numberTotal?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Enable"] as? Bool {
                    self.enable = value
                }
                if let value = dict["NumberTotal"] as? [String: Any?] {
                    var model = WafQuotaInteger()
                    model.fromMap(value)
                    self.numberTotal = model
                }
            }
        }
        public var list: GetWafQuotaResponseBody.Quota.List?

        public var managedRulesGroup: GetWafQuotaResponseBody.Quota.ManagedRulesGroup?

        public var page: GetWafQuotaResponseBody.Quota.Page?

        public var scenePolicy: GetWafQuotaResponseBody.Quota.ScenePolicy?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
            try self.managedRulesGroup?.validate()
            try self.page?.validate()
            try self.scenePolicy?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.managedRulesGroup != nil {
                map["ManagedRulesGroup"] = self.managedRulesGroup?.toMap()
            }
            if self.page != nil {
                map["Page"] = self.page?.toMap()
            }
            if self.scenePolicy != nil {
                map["ScenePolicy"] = self.scenePolicy?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [String: Any?] {
                var model = GetWafQuotaResponseBody.Quota.List()
                model.fromMap(value)
                self.list = model
            }
            if let value = dict["ManagedRulesGroup"] as? [String: Any?] {
                var model = GetWafQuotaResponseBody.Quota.ManagedRulesGroup()
                model.fromMap(value)
                self.managedRulesGroup = model
            }
            if let value = dict["Page"] as? [String: Any?] {
                var model = GetWafQuotaResponseBody.Quota.Page()
                model.fromMap(value)
                self.page = model
            }
            if let value = dict["ScenePolicy"] as? [String: Any?] {
                var model = GetWafQuotaResponseBody.Quota.ScenePolicy()
                model.fromMap(value)
                self.scenePolicy = model
            }
        }
    }
    public var quota: GetWafQuotaResponseBody.Quota?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.quota?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.quota != nil {
            map["Quota"] = self.quota?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Quota"] as? [String: Any?] {
            var model = GetWafQuotaResponseBody.Quota()
            model.fromMap(value)
            self.quota = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetWafQuotaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetWafQuotaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetWafQuotaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetWafRuleRequest : Tea.TeaModel {
    public var id: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetWafRuleResponseBody : Tea.TeaModel {
    public var config: WafRuleConfig?

    public var id: Int64?

    public var name: String?

    public var phase: String?

    public var position: Int64?

    public var requestId: String?

    public var rulesetId: Int64?

    public var status: String?

    public var updateTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.config?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.config != nil {
            map["Config"] = self.config?.toMap()
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.position != nil {
            map["Position"] = self.position!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rulesetId != nil {
            map["RulesetId"] = self.rulesetId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.updateTime != nil {
            map["UpdateTime"] = self.updateTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Config"] as? [String: Any?] {
            var model = WafRuleConfig()
            model.fromMap(value)
            self.config = model
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["Position"] as? Int64 {
            self.position = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RulesetId"] as? Int64 {
            self.rulesetId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["UpdateTime"] as? String {
            self.updateTime = value
        }
    }
}

public class GetWafRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetWafRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetWafRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetWafRulesetRequest : Tea.TeaModel {
    public var id: Int64?

    public var phase: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class GetWafRulesetResponseBody : Tea.TeaModel {
    public var id: Int64?

    public var name: String?

    public var phase: String?

    public var requestId: String?

    public var rules: [WafRuleConfig]?

    public var shared: WafBatchRuleShared?

    public var status: String?

    public var updateTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.shared?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rules != nil {
            var tmp : [Any] = []
            for k in self.rules! {
                tmp.append(k.toMap())
            }
            map["Rules"] = tmp
        }
        if self.shared != nil {
            map["Shared"] = self.shared?.toMap()
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.updateTime != nil {
            map["UpdateTime"] = self.updateTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rules"] as? [Any?] {
            var tmp : [WafRuleConfig] = []
            for v in value {
                if v != nil {
                    var model = WafRuleConfig()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rules = tmp
        }
        if let value = dict["Shared"] as? [String: Any?] {
            var model = WafBatchRuleShared()
            model.fromMap(value)
            self.shared = model
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["UpdateTime"] as? String {
            self.updateTime = value
        }
    }
}

public class GetWafRulesetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetWafRulesetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetWafRulesetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCacheReserveInstancesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var sortBy: String?

    public var sortOrder: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.sortBy != nil {
            map["SortBy"] = self.sortBy!
        }
        if self.sortOrder != nil {
            map["SortOrder"] = self.sortOrder!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SortBy"] as? String {
            self.sortBy = value
        }
        if let value = dict["SortOrder"] as? String {
            self.sortOrder = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class ListCacheReserveInstancesResponseBody : Tea.TeaModel {
    public class InstanceInfo : Tea.TeaModel {
        public var cacheReserveCapacity: Int64?

        public var cacheReserveRegion: String?

        public var chargeType: String?

        public var createTime: String?

        public var duration: Int32?

        public var expireTime: String?

        public var instanceId: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cacheReserveCapacity != nil {
                map["CacheReserveCapacity"] = self.cacheReserveCapacity!
            }
            if self.cacheReserveRegion != nil {
                map["CacheReserveRegion"] = self.cacheReserveRegion!
            }
            if self.chargeType != nil {
                map["ChargeType"] = self.chargeType!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.expireTime != nil {
                map["ExpireTime"] = self.expireTime!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CacheReserveCapacity"] as? Int64 {
                self.cacheReserveCapacity = value
            }
            if let value = dict["CacheReserveRegion"] as? String {
                self.cacheReserveRegion = value
            }
            if let value = dict["ChargeType"] as? String {
                self.chargeType = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Duration"] as? Int32 {
                self.duration = value
            }
            if let value = dict["ExpireTime"] as? String {
                self.expireTime = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var instanceInfo: [ListCacheReserveInstancesResponseBody.InstanceInfo]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceInfo != nil {
            var tmp : [Any] = []
            for k in self.instanceInfo! {
                tmp.append(k.toMap())
            }
            map["InstanceInfo"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceInfo"] as? [Any?] {
            var tmp : [ListCacheReserveInstancesResponseBody.InstanceInfo] = []
            for v in value {
                if v != nil {
                    var model = ListCacheReserveInstancesResponseBody.InstanceInfo()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.instanceInfo = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListCacheReserveInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCacheReserveInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCacheReserveInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCacheRulesRequest : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var ruleName: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListCacheRulesResponseBody : Tea.TeaModel {
    public class Configs : Tea.TeaModel {
        public var additionalCacheablePorts: String?

        public var browserCacheMode: String?

        public var browserCacheTtl: String?

        public var bypassCache: String?

        public var cacheDeceptionArmor: String?

        public var cacheReserveEligibility: String?

        public var checkPresenceCookie: String?

        public var checkPresenceHeader: String?

        public var configId: Int64?

        public var configType: String?

        public var edgeCacheMode: String?

        public var edgeCacheTtl: String?

        public var edgeStatusCodeCacheTtl: String?

        public var includeCookie: String?

        public var includeHeader: String?

        public var queryString: String?

        public var queryStringMode: String?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var serveStale: String?

        public var siteVersion: Int32?

        public var sortQueryStringForCache: String?

        public var userDeviceType: String?

        public var userGeo: String?

        public var userLanguage: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.additionalCacheablePorts != nil {
                map["AdditionalCacheablePorts"] = self.additionalCacheablePorts!
            }
            if self.browserCacheMode != nil {
                map["BrowserCacheMode"] = self.browserCacheMode!
            }
            if self.browserCacheTtl != nil {
                map["BrowserCacheTtl"] = self.browserCacheTtl!
            }
            if self.bypassCache != nil {
                map["BypassCache"] = self.bypassCache!
            }
            if self.cacheDeceptionArmor != nil {
                map["CacheDeceptionArmor"] = self.cacheDeceptionArmor!
            }
            if self.cacheReserveEligibility != nil {
                map["CacheReserveEligibility"] = self.cacheReserveEligibility!
            }
            if self.checkPresenceCookie != nil {
                map["CheckPresenceCookie"] = self.checkPresenceCookie!
            }
            if self.checkPresenceHeader != nil {
                map["CheckPresenceHeader"] = self.checkPresenceHeader!
            }
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.configType != nil {
                map["ConfigType"] = self.configType!
            }
            if self.edgeCacheMode != nil {
                map["EdgeCacheMode"] = self.edgeCacheMode!
            }
            if self.edgeCacheTtl != nil {
                map["EdgeCacheTtl"] = self.edgeCacheTtl!
            }
            if self.edgeStatusCodeCacheTtl != nil {
                map["EdgeStatusCodeCacheTtl"] = self.edgeStatusCodeCacheTtl!
            }
            if self.includeCookie != nil {
                map["IncludeCookie"] = self.includeCookie!
            }
            if self.includeHeader != nil {
                map["IncludeHeader"] = self.includeHeader!
            }
            if self.queryString != nil {
                map["QueryString"] = self.queryString!
            }
            if self.queryStringMode != nil {
                map["QueryStringMode"] = self.queryStringMode!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.serveStale != nil {
                map["ServeStale"] = self.serveStale!
            }
            if self.siteVersion != nil {
                map["SiteVersion"] = self.siteVersion!
            }
            if self.sortQueryStringForCache != nil {
                map["SortQueryStringForCache"] = self.sortQueryStringForCache!
            }
            if self.userDeviceType != nil {
                map["UserDeviceType"] = self.userDeviceType!
            }
            if self.userGeo != nil {
                map["UserGeo"] = self.userGeo!
            }
            if self.userLanguage != nil {
                map["UserLanguage"] = self.userLanguage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AdditionalCacheablePorts"] as? String {
                self.additionalCacheablePorts = value
            }
            if let value = dict["BrowserCacheMode"] as? String {
                self.browserCacheMode = value
            }
            if let value = dict["BrowserCacheTtl"] as? String {
                self.browserCacheTtl = value
            }
            if let value = dict["BypassCache"] as? String {
                self.bypassCache = value
            }
            if let value = dict["CacheDeceptionArmor"] as? String {
                self.cacheDeceptionArmor = value
            }
            if let value = dict["CacheReserveEligibility"] as? String {
                self.cacheReserveEligibility = value
            }
            if let value = dict["CheckPresenceCookie"] as? String {
                self.checkPresenceCookie = value
            }
            if let value = dict["CheckPresenceHeader"] as? String {
                self.checkPresenceHeader = value
            }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["ConfigType"] as? String {
                self.configType = value
            }
            if let value = dict["EdgeCacheMode"] as? String {
                self.edgeCacheMode = value
            }
            if let value = dict["EdgeCacheTtl"] as? String {
                self.edgeCacheTtl = value
            }
            if let value = dict["EdgeStatusCodeCacheTtl"] as? String {
                self.edgeStatusCodeCacheTtl = value
            }
            if let value = dict["IncludeCookie"] as? String {
                self.includeCookie = value
            }
            if let value = dict["IncludeHeader"] as? String {
                self.includeHeader = value
            }
            if let value = dict["QueryString"] as? String {
                self.queryString = value
            }
            if let value = dict["QueryStringMode"] as? String {
                self.queryStringMode = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["ServeStale"] as? String {
                self.serveStale = value
            }
            if let value = dict["SiteVersion"] as? Int32 {
                self.siteVersion = value
            }
            if let value = dict["SortQueryStringForCache"] as? String {
                self.sortQueryStringForCache = value
            }
            if let value = dict["UserDeviceType"] as? String {
                self.userDeviceType = value
            }
            if let value = dict["UserGeo"] as? String {
                self.userGeo = value
            }
            if let value = dict["UserLanguage"] as? String {
                self.userLanguage = value
            }
        }
    }
    public var configs: [ListCacheRulesResponseBody.Configs]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [ListCacheRulesResponseBody.Configs] = []
            for v in value {
                if v != nil {
                    var model = ListCacheRulesResponseBody.Configs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListCacheRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCacheRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCacheRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCertificatesRequest : Tea.TeaModel {
    public var keyword: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var siteId: Int64?

    public var validOnly: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.keyword != nil {
            map["Keyword"] = self.keyword!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.validOnly != nil {
            map["ValidOnly"] = self.validOnly!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Keyword"] as? String {
            self.keyword = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["ValidOnly"] as? Bool {
            self.validOnly = value
        }
    }
}

public class ListCertificatesResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public class DCV : Tea.TeaModel {
            public var id: String?

            public var key: String?

            public var status: String?

            public var type: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var applyCode: Int64?

        public var applyMessage: String?

        public var casId: String?

        public var commonName: String?

        public var createTime: String?

        public var DCV: [ListCertificatesResponseBody.Result.DCV]?

        public var fingerprintSha256: String?

        public var id: String?

        public var issuer: String?

        public var issuerCN: String?

        public var name: String?

        public var notAfter: String?

        public var notBefore: String?

        public var pubAlg: String?

        public var region: String?

        public var SAN: String?

        public var serialNumber: String?

        public var sigAlg: String?

        public var status: String?

        public var type: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applyCode != nil {
                map["ApplyCode"] = self.applyCode!
            }
            if self.applyMessage != nil {
                map["ApplyMessage"] = self.applyMessage!
            }
            if self.casId != nil {
                map["CasId"] = self.casId!
            }
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.DCV != nil {
                var tmp : [Any] = []
                for k in self.DCV! {
                    tmp.append(k.toMap())
                }
                map["DCV"] = tmp
            }
            if self.fingerprintSha256 != nil {
                map["FingerprintSha256"] = self.fingerprintSha256!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.issuer != nil {
                map["Issuer"] = self.issuer!
            }
            if self.issuerCN != nil {
                map["IssuerCN"] = self.issuerCN!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.notAfter != nil {
                map["NotAfter"] = self.notAfter!
            }
            if self.notBefore != nil {
                map["NotBefore"] = self.notBefore!
            }
            if self.pubAlg != nil {
                map["PubAlg"] = self.pubAlg!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.SAN != nil {
                map["SAN"] = self.SAN!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.sigAlg != nil {
                map["SigAlg"] = self.sigAlg!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplyCode"] as? Int64 {
                self.applyCode = value
            }
            if let value = dict["ApplyMessage"] as? String {
                self.applyMessage = value
            }
            if let value = dict["CasId"] as? String {
                self.casId = value
            }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["DCV"] as? [Any?] {
                var tmp : [ListCertificatesResponseBody.Result.DCV] = []
                for v in value {
                    if v != nil {
                        var model = ListCertificatesResponseBody.Result.DCV()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.DCV = tmp
            }
            if let value = dict["FingerprintSha256"] as? String {
                self.fingerprintSha256 = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Issuer"] as? String {
                self.issuer = value
            }
            if let value = dict["IssuerCN"] as? String {
                self.issuerCN = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NotAfter"] as? String {
                self.notAfter = value
            }
            if let value = dict["NotBefore"] as? String {
                self.notBefore = value
            }
            if let value = dict["PubAlg"] as? String {
                self.pubAlg = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["SAN"] as? String {
                self.SAN = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["SigAlg"] as? String {
                self.sigAlg = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var requestId: String?

    public var result: [ListCertificatesResponseBody.Result]?

    public var siteId: Int64?

    public var siteName: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["Result"] = tmp
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [Any?] {
            var tmp : [ListCertificatesResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = ListCertificatesResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class ListCertificatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCertificatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCertificatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCertificatesByRecordRequest : Tea.TeaModel {
    public var detail: Bool?

    public var recordName: String?

    public var siteId: Int64?

    public var validOnly: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.detail != nil {
            map["Detail"] = self.detail!
        }
        if self.recordName != nil {
            map["RecordName"] = self.recordName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.validOnly != nil {
            map["ValidOnly"] = self.validOnly!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Detail"] as? Bool {
            self.detail = value
        }
        if let value = dict["RecordName"] as? String {
            self.recordName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["ValidOnly"] as? Bool {
            self.validOnly = value
        }
    }
}

public class ListCertificatesByRecordResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public class Certificates : Tea.TeaModel {
            public var casId: String?

            public var commonName: String?

            public var createTime: String?

            public var fingerprintSha256: String?

            public var id: String?

            public var issuer: String?

            public var issuerCN: String?

            public var name: String?

            public var notAfter: String?

            public var notBefore: String?

            public var pubAlg: String?

            public var region: String?

            public var SAN: String?

            public var serialNumber: String?

            public var sigAlg: String?

            public var status: String?

            public var type: String?

            public var updateTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.casId != nil {
                    map["CasId"] = self.casId!
                }
                if self.commonName != nil {
                    map["CommonName"] = self.commonName!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.fingerprintSha256 != nil {
                    map["FingerprintSha256"] = self.fingerprintSha256!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.issuer != nil {
                    map["Issuer"] = self.issuer!
                }
                if self.issuerCN != nil {
                    map["IssuerCN"] = self.issuerCN!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.notAfter != nil {
                    map["NotAfter"] = self.notAfter!
                }
                if self.notBefore != nil {
                    map["NotBefore"] = self.notBefore!
                }
                if self.pubAlg != nil {
                    map["PubAlg"] = self.pubAlg!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.SAN != nil {
                    map["SAN"] = self.SAN!
                }
                if self.serialNumber != nil {
                    map["SerialNumber"] = self.serialNumber!
                }
                if self.sigAlg != nil {
                    map["SigAlg"] = self.sigAlg!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CasId"] as? String {
                    self.casId = value
                }
                if let value = dict["CommonName"] as? String {
                    self.commonName = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["FingerprintSha256"] as? String {
                    self.fingerprintSha256 = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Issuer"] as? String {
                    self.issuer = value
                }
                if let value = dict["IssuerCN"] as? String {
                    self.issuerCN = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NotAfter"] as? String {
                    self.notAfter = value
                }
                if let value = dict["NotBefore"] as? String {
                    self.notBefore = value
                }
                if let value = dict["PubAlg"] as? String {
                    self.pubAlg = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["SAN"] as? String {
                    self.SAN = value
                }
                if let value = dict["SerialNumber"] as? String {
                    self.serialNumber = value
                }
                if let value = dict["SigAlg"] as? String {
                    self.sigAlg = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
            }
        }
        public var applylingCount: Int64?

        public var certificates: [ListCertificatesByRecordResponseBody.Result.Certificates]?

        public var count: Int64?

        public var recordName: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.applylingCount != nil {
                map["ApplylingCount"] = self.applylingCount!
            }
            if self.certificates != nil {
                var tmp : [Any] = []
                for k in self.certificates! {
                    tmp.append(k.toMap())
                }
                map["Certificates"] = tmp
            }
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.recordName != nil {
                map["RecordName"] = self.recordName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApplylingCount"] as? Int64 {
                self.applylingCount = value
            }
            if let value = dict["Certificates"] as? [Any?] {
                var tmp : [ListCertificatesByRecordResponseBody.Result.Certificates] = []
                for v in value {
                    if v != nil {
                        var model = ListCertificatesByRecordResponseBody.Result.Certificates()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.certificates = tmp
            }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["RecordName"] as? String {
                self.recordName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var requestId: String?

    public var result: [ListCertificatesByRecordResponseBody.Result]?

    public var siteId: Int64?

    public var siteName: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["Result"] = tmp
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [Any?] {
            var tmp : [ListCertificatesByRecordResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = ListCertificatesByRecordResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class ListCertificatesByRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCertificatesByRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCertificatesByRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCiphersRequest : Tea.TeaModel {
    public var ciphersGroup: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ciphersGroup != nil {
            map["CiphersGroup"] = self.ciphersGroup!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CiphersGroup"] as? String {
            self.ciphersGroup = value
        }
    }
}

public class ListCiphersResponseBody : Tea.TeaModel {
    public var ciphersGroup: String?

    public var requestId: String?

    public var result: [String]?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ciphersGroup != nil {
            map["CiphersGroup"] = self.ciphersGroup!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CiphersGroup"] as? String {
            self.ciphersGroup = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [String] {
            self.result = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class ListCiphersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCiphersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCiphersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListClientCaCertificatesRequest : Tea.TeaModel {
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListClientCaCertificatesResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var commonName: String?

        public var createTime: String?

        public var fingerprintSha256: String?

        public var id: String?

        public var issuer: String?

        public var name: String?

        public var notAfter: String?

        public var notBefore: String?

        public var pubkeyAlgorithm: String?

        public var SAN: String?

        public var serialNumber: String?

        public var signatureAlgorithm: String?

        public var status: String?

        public var type: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.fingerprintSha256 != nil {
                map["FingerprintSha256"] = self.fingerprintSha256!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.issuer != nil {
                map["Issuer"] = self.issuer!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.notAfter != nil {
                map["NotAfter"] = self.notAfter!
            }
            if self.notBefore != nil {
                map["NotBefore"] = self.notBefore!
            }
            if self.pubkeyAlgorithm != nil {
                map["PubkeyAlgorithm"] = self.pubkeyAlgorithm!
            }
            if self.SAN != nil {
                map["SAN"] = self.SAN!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.signatureAlgorithm != nil {
                map["SignatureAlgorithm"] = self.signatureAlgorithm!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["FingerprintSha256"] as? String {
                self.fingerprintSha256 = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Issuer"] as? String {
                self.issuer = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NotAfter"] as? String {
                self.notAfter = value
            }
            if let value = dict["NotBefore"] as? String {
                self.notBefore = value
            }
            if let value = dict["PubkeyAlgorithm"] as? String {
                self.pubkeyAlgorithm = value
            }
            if let value = dict["SAN"] as? String {
                self.SAN = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["SignatureAlgorithm"] as? String {
                self.signatureAlgorithm = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var requestId: String?

    public var result: [ListClientCaCertificatesResponseBody.Result]?

    public var siteId: Int64?

    public var siteName: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["Result"] = tmp
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [Any?] {
            var tmp : [ListClientCaCertificatesResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = ListClientCaCertificatesResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class ListClientCaCertificatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListClientCaCertificatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListClientCaCertificatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListClientCertificatesRequest : Tea.TeaModel {
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListClientCertificatesResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var CACertificateId: String?

        public var commonName: String?

        public var createTime: String?

        public var fingerprintSha256: String?

        public var id: String?

        public var issuer: String?

        public var name: String?

        public var notAfter: String?

        public var notBefore: String?

        public var pubkeyAlgorithm: String?

        public var SAN: String?

        public var serialNumber: String?

        public var signatureAlgorithm: String?

        public var status: String?

        public var type: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.CACertificateId != nil {
                map["CACertificateId"] = self.CACertificateId!
            }
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.fingerprintSha256 != nil {
                map["FingerprintSha256"] = self.fingerprintSha256!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.issuer != nil {
                map["Issuer"] = self.issuer!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.notAfter != nil {
                map["NotAfter"] = self.notAfter!
            }
            if self.notBefore != nil {
                map["NotBefore"] = self.notBefore!
            }
            if self.pubkeyAlgorithm != nil {
                map["PubkeyAlgorithm"] = self.pubkeyAlgorithm!
            }
            if self.SAN != nil {
                map["SAN"] = self.SAN!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.signatureAlgorithm != nil {
                map["SignatureAlgorithm"] = self.signatureAlgorithm!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CACertificateId"] as? String {
                self.CACertificateId = value
            }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["FingerprintSha256"] as? String {
                self.fingerprintSha256 = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Issuer"] as? String {
                self.issuer = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NotAfter"] as? String {
                self.notAfter = value
            }
            if let value = dict["NotBefore"] as? String {
                self.notBefore = value
            }
            if let value = dict["PubkeyAlgorithm"] as? String {
                self.pubkeyAlgorithm = value
            }
            if let value = dict["SAN"] as? String {
                self.SAN = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["SignatureAlgorithm"] as? String {
                self.signatureAlgorithm = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var requestId: String?

    public var result: [ListClientCertificatesResponseBody.Result]?

    public var siteId: Int64?

    public var siteName: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["Result"] = tmp
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [Any?] {
            var tmp : [ListClientCertificatesResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = ListClientCertificatesResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class ListClientCertificatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListClientCertificatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListClientCertificatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListCompressionRulesRequest : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var ruleName: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListCompressionRulesResponseBody : Tea.TeaModel {
    public class Configs : Tea.TeaModel {
        public var brotli: String?

        public var configId: Int64?

        public var configType: String?

        public var gzip: String?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var siteVersion: Int32?

        public var zstd: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.brotli != nil {
                map["Brotli"] = self.brotli!
            }
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.configType != nil {
                map["ConfigType"] = self.configType!
            }
            if self.gzip != nil {
                map["Gzip"] = self.gzip!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.siteVersion != nil {
                map["SiteVersion"] = self.siteVersion!
            }
            if self.zstd != nil {
                map["Zstd"] = self.zstd!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Brotli"] as? String {
                self.brotli = value
            }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["ConfigType"] as? String {
                self.configType = value
            }
            if let value = dict["Gzip"] as? String {
                self.gzip = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["SiteVersion"] as? Int32 {
                self.siteVersion = value
            }
            if let value = dict["Zstd"] as? String {
                self.zstd = value
            }
        }
    }
    public var configs: [ListCompressionRulesResponseBody.Configs]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [ListCompressionRulesResponseBody.Configs] = []
            for v in value {
                if v != nil {
                    var model = ListCompressionRulesResponseBody.Configs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListCompressionRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCompressionRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListCompressionRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEdgeContainerAppRecordsRequest : Tea.TeaModel {
    public var appId: String?

    public var orderKey: String?

    public var orderType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.orderKey != nil {
            map["OrderKey"] = self.orderKey!
        }
        if self.orderType != nil {
            map["OrderType"] = self.orderType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchKey != nil {
            map["SearchKey"] = self.searchKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["OrderKey"] as? String {
            self.orderKey = value
        }
        if let value = dict["OrderType"] as? String {
            self.orderType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchKey"] as? String {
            self.searchKey = value
        }
    }
}

public class ListEdgeContainerAppRecordsResponseBody : Tea.TeaModel {
    public class Records : Tea.TeaModel {
        public var appId: String?

        public var cname: String?

        public var configId: Int64?

        public var createTime: String?

        public var recordId: Int64?

        public var recordName: String?

        public var schemdId: Int32?

        public var siteId: Int64?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.cname != nil {
                map["Cname"] = self.cname!
            }
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.recordId != nil {
                map["RecordId"] = self.recordId!
            }
            if self.recordName != nil {
                map["RecordName"] = self.recordName!
            }
            if self.schemdId != nil {
                map["SchemdId"] = self.schemdId!
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["Cname"] as? String {
                self.cname = value
            }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["RecordId"] as? Int64 {
                self.recordId = value
            }
            if let value = dict["RecordName"] as? String {
                self.recordName = value
            }
            if let value = dict["SchemdId"] as? Int32 {
                self.schemdId = value
            }
            if let value = dict["SiteId"] as? Int64 {
                self.siteId = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var records: [ListEdgeContainerAppRecordsResponseBody.Records]?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.records != nil {
            var tmp : [Any] = []
            for k in self.records! {
                tmp.append(k.toMap())
            }
            map["Records"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Records"] as? [Any?] {
            var tmp : [ListEdgeContainerAppRecordsResponseBody.Records] = []
            for v in value {
                if v != nil {
                    var model = ListEdgeContainerAppRecordsResponseBody.Records()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.records = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListEdgeContainerAppRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEdgeContainerAppRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEdgeContainerAppRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEdgeContainerAppVersionsRequest : Tea.TeaModel {
    public var appId: String?

    public var orderKey: String?

    public var orderType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchKey: String?

    public var searchType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.orderKey != nil {
            map["OrderKey"] = self.orderKey!
        }
        if self.orderType != nil {
            map["OrderType"] = self.orderType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchKey != nil {
            map["SearchKey"] = self.searchKey!
        }
        if self.searchType != nil {
            map["SearchType"] = self.searchType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["OrderKey"] as? String {
            self.orderKey = value
        }
        if let value = dict["OrderType"] as? String {
            self.orderType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchKey"] as? String {
            self.searchKey = value
        }
        if let value = dict["SearchType"] as? String {
            self.searchType = value
        }
    }
}

public class ListEdgeContainerAppVersionsResponseBody : Tea.TeaModel {
    public class Versions : Tea.TeaModel {
        public class Containers : Tea.TeaModel {
            public class ProbeContent : Tea.TeaModel {
                public var command: String?

                public var failureThreshold: Int32?

                public var host: String?

                public var httpHeaders: String?

                public var initialDelaySeconds: Int32?

                public var path: String?

                public var periodSeconds: Int32?

                public var port: Int32?

                public var scheme: String?

                public var successThreshold: Int32?

                public var timeoutSeconds: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.command != nil {
                        map["Command"] = self.command!
                    }
                    if self.failureThreshold != nil {
                        map["FailureThreshold"] = self.failureThreshold!
                    }
                    if self.host != nil {
                        map["Host"] = self.host!
                    }
                    if self.httpHeaders != nil {
                        map["HttpHeaders"] = self.httpHeaders!
                    }
                    if self.initialDelaySeconds != nil {
                        map["InitialDelaySeconds"] = self.initialDelaySeconds!
                    }
                    if self.path != nil {
                        map["Path"] = self.path!
                    }
                    if self.periodSeconds != nil {
                        map["PeriodSeconds"] = self.periodSeconds!
                    }
                    if self.port != nil {
                        map["Port"] = self.port!
                    }
                    if self.scheme != nil {
                        map["Scheme"] = self.scheme!
                    }
                    if self.successThreshold != nil {
                        map["SuccessThreshold"] = self.successThreshold!
                    }
                    if self.timeoutSeconds != nil {
                        map["TimeoutSeconds"] = self.timeoutSeconds!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Command"] as? String {
                        self.command = value
                    }
                    if let value = dict["FailureThreshold"] as? Int32 {
                        self.failureThreshold = value
                    }
                    if let value = dict["Host"] as? String {
                        self.host = value
                    }
                    if let value = dict["HttpHeaders"] as? String {
                        self.httpHeaders = value
                    }
                    if let value = dict["InitialDelaySeconds"] as? Int32 {
                        self.initialDelaySeconds = value
                    }
                    if let value = dict["Path"] as? String {
                        self.path = value
                    }
                    if let value = dict["PeriodSeconds"] as? Int32 {
                        self.periodSeconds = value
                    }
                    if let value = dict["Port"] as? Int32 {
                        self.port = value
                    }
                    if let value = dict["Scheme"] as? String {
                        self.scheme = value
                    }
                    if let value = dict["SuccessThreshold"] as? Int32 {
                        self.successThreshold = value
                    }
                    if let value = dict["TimeoutSeconds"] as? Int32 {
                        self.timeoutSeconds = value
                    }
                }
            }
            public var args: String?

            public var command: String?

            public var envVariables: String?

            public var image: String?

            public var name: String?

            public var postStart: String?

            public var preStop: String?

            public var probeContent: ListEdgeContainerAppVersionsResponseBody.Versions.Containers.ProbeContent?

            public var probeType: String?

            public var spec: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.probeContent?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.args != nil {
                    map["Args"] = self.args!
                }
                if self.command != nil {
                    map["Command"] = self.command!
                }
                if self.envVariables != nil {
                    map["EnvVariables"] = self.envVariables!
                }
                if self.image != nil {
                    map["Image"] = self.image!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.postStart != nil {
                    map["PostStart"] = self.postStart!
                }
                if self.preStop != nil {
                    map["PreStop"] = self.preStop!
                }
                if self.probeContent != nil {
                    map["ProbeContent"] = self.probeContent?.toMap()
                }
                if self.probeType != nil {
                    map["ProbeType"] = self.probeType!
                }
                if self.spec != nil {
                    map["Spec"] = self.spec!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Args"] as? String {
                    self.args = value
                }
                if let value = dict["Command"] as? String {
                    self.command = value
                }
                if let value = dict["EnvVariables"] as? String {
                    self.envVariables = value
                }
                if let value = dict["Image"] as? String {
                    self.image = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["PostStart"] as? String {
                    self.postStart = value
                }
                if let value = dict["PreStop"] as? String {
                    self.preStop = value
                }
                if let value = dict["ProbeContent"] as? [String: Any?] {
                    var model = ListEdgeContainerAppVersionsResponseBody.Versions.Containers.ProbeContent()
                    model.fromMap(value)
                    self.probeContent = model
                }
                if let value = dict["ProbeType"] as? String {
                    self.probeType = value
                }
                if let value = dict["Spec"] as? String {
                    self.spec = value
                }
            }
        }
        public var appId: String?

        public var containers: [ListEdgeContainerAppVersionsResponseBody.Versions.Containers]?

        public var createTime: String?

        public var lastPublishTime: String?

        public var name: String?

        public var publishTime: String?

        public var remarks: String?

        public var status: String?

        public var updateTime: String?

        public var versionId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.containers != nil {
                var tmp : [Any] = []
                for k in self.containers! {
                    tmp.append(k.toMap())
                }
                map["Containers"] = tmp
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.lastPublishTime != nil {
                map["LastPublishTime"] = self.lastPublishTime!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.publishTime != nil {
                map["PublishTime"] = self.publishTime!
            }
            if self.remarks != nil {
                map["Remarks"] = self.remarks!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.versionId != nil {
                map["VersionId"] = self.versionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["Containers"] as? [Any?] {
                var tmp : [ListEdgeContainerAppVersionsResponseBody.Versions.Containers] = []
                for v in value {
                    if v != nil {
                        var model = ListEdgeContainerAppVersionsResponseBody.Versions.Containers()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.containers = tmp
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["LastPublishTime"] as? String {
                self.lastPublishTime = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["PublishTime"] as? String {
                self.publishTime = value
            }
            if let value = dict["Remarks"] as? String {
                self.remarks = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["VersionId"] as? String {
                self.versionId = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var versions: [ListEdgeContainerAppVersionsResponseBody.Versions]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.versions != nil {
            var tmp : [Any] = []
            for k in self.versions! {
                tmp.append(k.toMap())
            }
            map["Versions"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["Versions"] as? [Any?] {
            var tmp : [ListEdgeContainerAppVersionsResponseBody.Versions] = []
            for v in value {
                if v != nil {
                    var model = ListEdgeContainerAppVersionsResponseBody.Versions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.versions = tmp
        }
    }
}

public class ListEdgeContainerAppVersionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEdgeContainerAppVersionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEdgeContainerAppVersionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEdgeContainerAppsRequest : Tea.TeaModel {
    public var orderKey: String?

    public var orderType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var searchKey: String?

    public var searchType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderKey != nil {
            map["OrderKey"] = self.orderKey!
        }
        if self.orderType != nil {
            map["OrderType"] = self.orderType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchKey != nil {
            map["SearchKey"] = self.searchKey!
        }
        if self.searchType != nil {
            map["SearchType"] = self.searchType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderKey"] as? String {
            self.orderKey = value
        }
        if let value = dict["OrderType"] as? String {
            self.orderType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SearchKey"] as? String {
            self.searchKey = value
        }
        if let value = dict["SearchType"] as? String {
            self.searchType = value
        }
    }
}

public class ListEdgeContainerAppsResponseBody : Tea.TeaModel {
    public class Apps : Tea.TeaModel {
        public class HealthCheck : Tea.TeaModel {
            public var failTimes: Int32?

            public var host: String?

            public var httpCode: String?

            public var interval: Int32?

            public var method: String?

            public var port: Int32?

            public var succTimes: Int32?

            public var timeout: Int32?

            public var type: String?

            public var uri: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.failTimes != nil {
                    map["FailTimes"] = self.failTimes!
                }
                if self.host != nil {
                    map["Host"] = self.host!
                }
                if self.httpCode != nil {
                    map["HttpCode"] = self.httpCode!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.succTimes != nil {
                    map["SuccTimes"] = self.succTimes!
                }
                if self.timeout != nil {
                    map["Timeout"] = self.timeout!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.uri != nil {
                    map["Uri"] = self.uri!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FailTimes"] as? Int32 {
                    self.failTimes = value
                }
                if let value = dict["Host"] as? String {
                    self.host = value
                }
                if let value = dict["HttpCode"] as? String {
                    self.httpCode = value
                }
                if let value = dict["Interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["SuccTimes"] as? Int32 {
                    self.succTimes = value
                }
                if let value = dict["Timeout"] as? Int32 {
                    self.timeout = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Uri"] as? String {
                    self.uri = value
                }
            }
        }
        public var appId: String?

        public var createTime: String?

        public var domainName: String?

        public var gatewayType: String?

        public var healthCheck: ListEdgeContainerAppsResponseBody.Apps.HealthCheck?

        public var name: String?

        public var percentage: Int32?

        public var quicCid: String?

        public var remarks: String?

        public var servicePort: Int32?

        public var status: String?

        public var targetPort: Int32?

        public var updateTime: String?

        public var versionCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.healthCheck?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.domainName != nil {
                map["DomainName"] = self.domainName!
            }
            if self.gatewayType != nil {
                map["GatewayType"] = self.gatewayType!
            }
            if self.healthCheck != nil {
                map["HealthCheck"] = self.healthCheck?.toMap()
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.percentage != nil {
                map["Percentage"] = self.percentage!
            }
            if self.quicCid != nil {
                map["QuicCid"] = self.quicCid!
            }
            if self.remarks != nil {
                map["Remarks"] = self.remarks!
            }
            if self.servicePort != nil {
                map["ServicePort"] = self.servicePort!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.targetPort != nil {
                map["TargetPort"] = self.targetPort!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.versionCount != nil {
                map["VersionCount"] = self.versionCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["DomainName"] as? String {
                self.domainName = value
            }
            if let value = dict["GatewayType"] as? String {
                self.gatewayType = value
            }
            if let value = dict["HealthCheck"] as? [String: Any?] {
                var model = ListEdgeContainerAppsResponseBody.Apps.HealthCheck()
                model.fromMap(value)
                self.healthCheck = model
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Percentage"] as? Int32 {
                self.percentage = value
            }
            if let value = dict["QuicCid"] as? String {
                self.quicCid = value
            }
            if let value = dict["Remarks"] as? String {
                self.remarks = value
            }
            if let value = dict["ServicePort"] as? Int32 {
                self.servicePort = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TargetPort"] as? Int32 {
                self.targetPort = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["VersionCount"] as? Int32 {
                self.versionCount = value
            }
        }
    }
    public var apps: [ListEdgeContainerAppsResponseBody.Apps]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apps != nil {
            var tmp : [Any] = []
            for k in self.apps! {
                tmp.append(k.toMap())
            }
            map["Apps"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Apps"] as? [Any?] {
            var tmp : [ListEdgeContainerAppsResponseBody.Apps] = []
            for v in value {
                if v != nil {
                    var model = ListEdgeContainerAppsResponseBody.Apps()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.apps = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListEdgeContainerAppsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEdgeContainerAppsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEdgeContainerAppsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEdgeContainerRecordsRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var recordMatchType: String?

    public var recordName: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.recordMatchType != nil {
            map["RecordMatchType"] = self.recordMatchType!
        }
        if self.recordName != nil {
            map["RecordName"] = self.recordName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RecordMatchType"] as? String {
            self.recordMatchType = value
        }
        if let value = dict["RecordName"] as? String {
            self.recordName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListEdgeContainerRecordsResponseBody : Tea.TeaModel {
    public class Records : Tea.TeaModel {
        public var createTime: String?

        public var recordCname: String?

        public var recordName: String?

        public var siteId: Int64?

        public var siteName: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.recordCname != nil {
                map["RecordCname"] = self.recordCname!
            }
            if self.recordName != nil {
                map["RecordName"] = self.recordName!
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            if self.siteName != nil {
                map["SiteName"] = self.siteName!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["RecordCname"] as? String {
                self.recordCname = value
            }
            if let value = dict["RecordName"] as? String {
                self.recordName = value
            }
            if let value = dict["SiteId"] as? Int64 {
                self.siteId = value
            }
            if let value = dict["SiteName"] as? String {
                self.siteName = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var records: [ListEdgeContainerRecordsResponseBody.Records]?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.records != nil {
            var tmp : [Any] = []
            for k in self.records! {
                tmp.append(k.toMap())
            }
            map["Records"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Records"] as? [Any?] {
            var tmp : [ListEdgeContainerRecordsResponseBody.Records] = []
            for v in value {
                if v != nil {
                    var model = ListEdgeContainerRecordsResponseBody.Records()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.records = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListEdgeContainerRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEdgeContainerRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEdgeContainerRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEdgeRoutinePlansResponseBody : Tea.TeaModel {
    public class PlanInfo : Tea.TeaModel {
        public var billingMode: String?

        public var erRoutineCodeVersionQuota: String?

        public var erRoutineQuota: String?

        public var erRoutineRouteSiteCountQuota: String?

        public var paymentMethod: String?

        public var planName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.billingMode != nil {
                map["BillingMode"] = self.billingMode!
            }
            if self.erRoutineCodeVersionQuota != nil {
                map["ErRoutineCodeVersionQuota"] = self.erRoutineCodeVersionQuota!
            }
            if self.erRoutineQuota != nil {
                map["ErRoutineQuota"] = self.erRoutineQuota!
            }
            if self.erRoutineRouteSiteCountQuota != nil {
                map["ErRoutineRouteSiteCountQuota"] = self.erRoutineRouteSiteCountQuota!
            }
            if self.paymentMethod != nil {
                map["PaymentMethod"] = self.paymentMethod!
            }
            if self.planName != nil {
                map["PlanName"] = self.planName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BillingMode"] as? String {
                self.billingMode = value
            }
            if let value = dict["ErRoutineCodeVersionQuota"] as? String {
                self.erRoutineCodeVersionQuota = value
            }
            if let value = dict["ErRoutineQuota"] as? String {
                self.erRoutineQuota = value
            }
            if let value = dict["ErRoutineRouteSiteCountQuota"] as? String {
                self.erRoutineRouteSiteCountQuota = value
            }
            if let value = dict["PaymentMethod"] as? String {
                self.paymentMethod = value
            }
            if let value = dict["PlanName"] as? String {
                self.planName = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var planInfo: [ListEdgeRoutinePlansResponseBody.PlanInfo]?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.planInfo != nil {
            var tmp : [Any] = []
            for k in self.planInfo! {
                tmp.append(k.toMap())
            }
            map["PlanInfo"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PlanInfo"] as? [Any?] {
            var tmp : [ListEdgeRoutinePlansResponseBody.PlanInfo] = []
            for v in value {
                if v != nil {
                    var model = ListEdgeRoutinePlansResponseBody.PlanInfo()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.planInfo = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListEdgeRoutinePlansResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEdgeRoutinePlansResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEdgeRoutinePlansResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEdgeRoutineRecordsRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var recordMatchType: String?

    public var recordName: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.recordMatchType != nil {
            map["RecordMatchType"] = self.recordMatchType!
        }
        if self.recordName != nil {
            map["RecordName"] = self.recordName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RecordMatchType"] as? String {
            self.recordMatchType = value
        }
        if let value = dict["RecordName"] as? String {
            self.recordName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListEdgeRoutineRecordsResponseBody : Tea.TeaModel {
    public class Records : Tea.TeaModel {
        public var createTime: String?

        public var recordCname: String?

        public var recordName: String?

        public var siteId: Int64?

        public var siteName: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.recordCname != nil {
                map["RecordCname"] = self.recordCname!
            }
            if self.recordName != nil {
                map["RecordName"] = self.recordName!
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            if self.siteName != nil {
                map["SiteName"] = self.siteName!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["RecordCname"] as? String {
                self.recordCname = value
            }
            if let value = dict["RecordName"] as? String {
                self.recordName = value
            }
            if let value = dict["SiteId"] as? Int64 {
                self.siteId = value
            }
            if let value = dict["SiteName"] as? String {
                self.siteName = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var records: [ListEdgeRoutineRecordsResponseBody.Records]?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.records != nil {
            var tmp : [Any] = []
            for k in self.records! {
                tmp.append(k.toMap())
            }
            map["Records"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Records"] as? [Any?] {
            var tmp : [ListEdgeRoutineRecordsResponseBody.Records] = []
            for v in value {
                if v != nil {
                    var model = ListEdgeRoutineRecordsResponseBody.Records()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.records = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListEdgeRoutineRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEdgeRoutineRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEdgeRoutineRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListHttpRequestHeaderModificationRulesRequest : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var ruleName: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListHttpRequestHeaderModificationRulesResponseBody : Tea.TeaModel {
    public class Configs : Tea.TeaModel {
        public class RequestHeaderModification : Tea.TeaModel {
            public var name: String?

            public var operation: String?

            public var type: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.operation != nil {
                    map["Operation"] = self.operation!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Operation"] as? String {
                    self.operation = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var configId: Int64?

        public var configType: String?

        public var requestHeaderModification: [ListHttpRequestHeaderModificationRulesResponseBody.Configs.RequestHeaderModification]?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var siteVersion: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.configType != nil {
                map["ConfigType"] = self.configType!
            }
            if self.requestHeaderModification != nil {
                var tmp : [Any] = []
                for k in self.requestHeaderModification! {
                    tmp.append(k.toMap())
                }
                map["RequestHeaderModification"] = tmp
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.siteVersion != nil {
                map["SiteVersion"] = self.siteVersion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["ConfigType"] as? String {
                self.configType = value
            }
            if let value = dict["RequestHeaderModification"] as? [Any?] {
                var tmp : [ListHttpRequestHeaderModificationRulesResponseBody.Configs.RequestHeaderModification] = []
                for v in value {
                    if v != nil {
                        var model = ListHttpRequestHeaderModificationRulesResponseBody.Configs.RequestHeaderModification()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.requestHeaderModification = tmp
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["SiteVersion"] as? Int32 {
                self.siteVersion = value
            }
        }
    }
    public var configs: [ListHttpRequestHeaderModificationRulesResponseBody.Configs]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [ListHttpRequestHeaderModificationRulesResponseBody.Configs] = []
            for v in value {
                if v != nil {
                    var model = ListHttpRequestHeaderModificationRulesResponseBody.Configs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListHttpRequestHeaderModificationRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListHttpRequestHeaderModificationRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListHttpRequestHeaderModificationRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListHttpResponseHeaderModificationRulesRequest : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var ruleName: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListHttpResponseHeaderModificationRulesResponseBody : Tea.TeaModel {
    public class Configs : Tea.TeaModel {
        public class ResponseHeaderModification : Tea.TeaModel {
            public var name: String?

            public var operation: String?

            public var type: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.operation != nil {
                    map["Operation"] = self.operation!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Operation"] as? String {
                    self.operation = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var configId: Int64?

        public var configType: String?

        public var responseHeaderModification: [ListHttpResponseHeaderModificationRulesResponseBody.Configs.ResponseHeaderModification]?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var siteVersion: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.configType != nil {
                map["ConfigType"] = self.configType!
            }
            if self.responseHeaderModification != nil {
                var tmp : [Any] = []
                for k in self.responseHeaderModification! {
                    tmp.append(k.toMap())
                }
                map["ResponseHeaderModification"] = tmp
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.siteVersion != nil {
                map["SiteVersion"] = self.siteVersion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["ConfigType"] as? String {
                self.configType = value
            }
            if let value = dict["ResponseHeaderModification"] as? [Any?] {
                var tmp : [ListHttpResponseHeaderModificationRulesResponseBody.Configs.ResponseHeaderModification] = []
                for v in value {
                    if v != nil {
                        var model = ListHttpResponseHeaderModificationRulesResponseBody.Configs.ResponseHeaderModification()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.responseHeaderModification = tmp
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["SiteVersion"] as? Int32 {
                self.siteVersion = value
            }
        }
    }
    public var configs: [ListHttpResponseHeaderModificationRulesResponseBody.Configs]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [ListHttpResponseHeaderModificationRulesResponseBody.Configs] = []
            for v in value {
                if v != nil {
                    var model = ListHttpResponseHeaderModificationRulesResponseBody.Configs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListHttpResponseHeaderModificationRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListHttpResponseHeaderModificationRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListHttpResponseHeaderModificationRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListHttpsApplicationConfigurationsRequest : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var ruleName: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListHttpsApplicationConfigurationsResponseBody : Tea.TeaModel {
    public class Configs : Tea.TeaModel {
        public var altSvc: String?

        public var altSvcClear: String?

        public var altSvcMa: String?

        public var altSvcPersist: String?

        public var configId: Int64?

        public var configType: String?

        public var hsts: String?

        public var hstsIncludeSubdomains: String?

        public var hstsMaxAge: String?

        public var hstsPreload: String?

        public var httpsForce: String?

        public var httpsForceCode: String?

        public var httpsNoSniDeny: String?

        public var httpsSniVerify: String?

        public var httpsSniWhitelist: String?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var siteVersion: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.altSvc != nil {
                map["AltSvc"] = self.altSvc!
            }
            if self.altSvcClear != nil {
                map["AltSvcClear"] = self.altSvcClear!
            }
            if self.altSvcMa != nil {
                map["AltSvcMa"] = self.altSvcMa!
            }
            if self.altSvcPersist != nil {
                map["AltSvcPersist"] = self.altSvcPersist!
            }
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.configType != nil {
                map["ConfigType"] = self.configType!
            }
            if self.hsts != nil {
                map["Hsts"] = self.hsts!
            }
            if self.hstsIncludeSubdomains != nil {
                map["HstsIncludeSubdomains"] = self.hstsIncludeSubdomains!
            }
            if self.hstsMaxAge != nil {
                map["HstsMaxAge"] = self.hstsMaxAge!
            }
            if self.hstsPreload != nil {
                map["HstsPreload"] = self.hstsPreload!
            }
            if self.httpsForce != nil {
                map["HttpsForce"] = self.httpsForce!
            }
            if self.httpsForceCode != nil {
                map["HttpsForceCode"] = self.httpsForceCode!
            }
            if self.httpsNoSniDeny != nil {
                map["HttpsNoSniDeny"] = self.httpsNoSniDeny!
            }
            if self.httpsSniVerify != nil {
                map["HttpsSniVerify"] = self.httpsSniVerify!
            }
            if self.httpsSniWhitelist != nil {
                map["HttpsSniWhitelist"] = self.httpsSniWhitelist!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.siteVersion != nil {
                map["SiteVersion"] = self.siteVersion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AltSvc"] as? String {
                self.altSvc = value
            }
            if let value = dict["AltSvcClear"] as? String {
                self.altSvcClear = value
            }
            if let value = dict["AltSvcMa"] as? String {
                self.altSvcMa = value
            }
            if let value = dict["AltSvcPersist"] as? String {
                self.altSvcPersist = value
            }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["ConfigType"] as? String {
                self.configType = value
            }
            if let value = dict["Hsts"] as? String {
                self.hsts = value
            }
            if let value = dict["HstsIncludeSubdomains"] as? String {
                self.hstsIncludeSubdomains = value
            }
            if let value = dict["HstsMaxAge"] as? String {
                self.hstsMaxAge = value
            }
            if let value = dict["HstsPreload"] as? String {
                self.hstsPreload = value
            }
            if let value = dict["HttpsForce"] as? String {
                self.httpsForce = value
            }
            if let value = dict["HttpsForceCode"] as? String {
                self.httpsForceCode = value
            }
            if let value = dict["HttpsNoSniDeny"] as? String {
                self.httpsNoSniDeny = value
            }
            if let value = dict["HttpsSniVerify"] as? String {
                self.httpsSniVerify = value
            }
            if let value = dict["HttpsSniWhitelist"] as? String {
                self.httpsSniWhitelist = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["SiteVersion"] as? Int32 {
                self.siteVersion = value
            }
        }
    }
    public var configs: [ListHttpsApplicationConfigurationsResponseBody.Configs]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [ListHttpsApplicationConfigurationsResponseBody.Configs] = []
            for v in value {
                if v != nil {
                    var model = ListHttpsApplicationConfigurationsResponseBody.Configs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListHttpsApplicationConfigurationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListHttpsApplicationConfigurationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListHttpsApplicationConfigurationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListHttpsBasicConfigurationsRequest : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var ruleName: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListHttpsBasicConfigurationsResponseBody : Tea.TeaModel {
    public class Configs : Tea.TeaModel {
        public var ciphersuite: String?

        public var ciphersuiteGroup: String?

        public var configId: Int64?

        public var configType: String?

        public var http2: String?

        public var http3: String?

        public var https: String?

        public var ocspStapling: String?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var tls10: String?

        public var tls11: String?

        public var tls12: String?

        public var tls13: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ciphersuite != nil {
                map["Ciphersuite"] = self.ciphersuite!
            }
            if self.ciphersuiteGroup != nil {
                map["CiphersuiteGroup"] = self.ciphersuiteGroup!
            }
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.configType != nil {
                map["ConfigType"] = self.configType!
            }
            if self.http2 != nil {
                map["Http2"] = self.http2!
            }
            if self.http3 != nil {
                map["Http3"] = self.http3!
            }
            if self.https != nil {
                map["Https"] = self.https!
            }
            if self.ocspStapling != nil {
                map["OcspStapling"] = self.ocspStapling!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.tls10 != nil {
                map["Tls10"] = self.tls10!
            }
            if self.tls11 != nil {
                map["Tls11"] = self.tls11!
            }
            if self.tls12 != nil {
                map["Tls12"] = self.tls12!
            }
            if self.tls13 != nil {
                map["Tls13"] = self.tls13!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Ciphersuite"] as? String {
                self.ciphersuite = value
            }
            if let value = dict["CiphersuiteGroup"] as? String {
                self.ciphersuiteGroup = value
            }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["ConfigType"] as? String {
                self.configType = value
            }
            if let value = dict["Http2"] as? String {
                self.http2 = value
            }
            if let value = dict["Http3"] as? String {
                self.http3 = value
            }
            if let value = dict["Https"] as? String {
                self.https = value
            }
            if let value = dict["OcspStapling"] as? String {
                self.ocspStapling = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["Tls10"] as? String {
                self.tls10 = value
            }
            if let value = dict["Tls11"] as? String {
                self.tls11 = value
            }
            if let value = dict["Tls12"] as? String {
                self.tls12 = value
            }
            if let value = dict["Tls13"] as? String {
                self.tls13 = value
            }
        }
    }
    public var configs: [ListHttpsBasicConfigurationsResponseBody.Configs]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [ListHttpsBasicConfigurationsResponseBody.Configs] = []
            for v in value {
                if v != nil {
                    var model = ListHttpsBasicConfigurationsResponseBody.Configs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListHttpsBasicConfigurationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListHttpsBasicConfigurationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListHttpsBasicConfigurationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListImageTransformsRequest : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var ruleName: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListImageTransformsResponseBody : Tea.TeaModel {
    public class Configs : Tea.TeaModel {
        public var configId: Int64?

        public var configType: String?

        public var enable: String?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var siteVersion: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.configType != nil {
                map["ConfigType"] = self.configType!
            }
            if self.enable != nil {
                map["Enable"] = self.enable!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.siteVersion != nil {
                map["SiteVersion"] = self.siteVersion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["ConfigType"] as? String {
                self.configType = value
            }
            if let value = dict["Enable"] as? String {
                self.enable = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["SiteVersion"] as? Int32 {
                self.siteVersion = value
            }
        }
    }
    public var configs: [ListImageTransformsResponseBody.Configs]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [ListImageTransformsResponseBody.Configs] = []
            for v in value {
                if v != nil {
                    var model = ListImageTransformsResponseBody.Configs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListImageTransformsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListImageTransformsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListImageTransformsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListInstanceQuotasRequest : Tea.TeaModel {
    public var instanceId: String?

    public var quotaNames: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.quotaNames != nil {
            map["QuotaNames"] = self.quotaNames!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["QuotaNames"] as? String {
            self.quotaNames = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListInstanceQuotasResponseBody : Tea.TeaModel {
    public class Quotas : Tea.TeaModel {
        public var quotaName: String?

        public var quotaValue: String?

        public var quotaValueType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.quotaName != nil {
                map["QuotaName"] = self.quotaName!
            }
            if self.quotaValue != nil {
                map["QuotaValue"] = self.quotaValue!
            }
            if self.quotaValueType != nil {
                map["QuotaValueType"] = self.quotaValueType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["QuotaName"] as? String {
                self.quotaName = value
            }
            if let value = dict["QuotaValue"] as? String {
                self.quotaValue = value
            }
            if let value = dict["QuotaValueType"] as? String {
                self.quotaValueType = value
            }
        }
    }
    public var instanceId: String?

    public var quotas: [ListInstanceQuotasResponseBody.Quotas]?

    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.quotas != nil {
            var tmp : [Any] = []
            for k in self.quotas! {
                tmp.append(k.toMap())
            }
            map["Quotas"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Quotas"] as? [Any?] {
            var tmp : [ListInstanceQuotasResponseBody.Quotas] = []
            for v in value {
                if v != nil {
                    var model = ListInstanceQuotasResponseBody.Quotas()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.quotas = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class ListInstanceQuotasResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListInstanceQuotasResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListInstanceQuotasResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListInstanceQuotasWithUsageRequest : Tea.TeaModel {
    public var instanceId: String?

    public var quotaNames: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.quotaNames != nil {
            map["QuotaNames"] = self.quotaNames!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["QuotaNames"] as? String {
            self.quotaNames = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListInstanceQuotasWithUsageResponseBody : Tea.TeaModel {
    public class Quotas : Tea.TeaModel {
        public class SiteUsage : Tea.TeaModel {
            public var siteId: Int64?

            public var siteName: String?

            public var siteUsage: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.siteId != nil {
                    map["SiteId"] = self.siteId!
                }
                if self.siteName != nil {
                    map["SiteName"] = self.siteName!
                }
                if self.siteUsage != nil {
                    map["SiteUsage"] = self.siteUsage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SiteId"] as? Int64 {
                    self.siteId = value
                }
                if let value = dict["SiteName"] as? String {
                    self.siteName = value
                }
                if let value = dict["SiteUsage"] as? String {
                    self.siteUsage = value
                }
            }
        }
        public var quotaName: String?

        public var quotaValue: String?

        public var siteUsage: [ListInstanceQuotasWithUsageResponseBody.Quotas.SiteUsage]?

        public var usage: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.quotaName != nil {
                map["QuotaName"] = self.quotaName!
            }
            if self.quotaValue != nil {
                map["QuotaValue"] = self.quotaValue!
            }
            if self.siteUsage != nil {
                var tmp : [Any] = []
                for k in self.siteUsage! {
                    tmp.append(k.toMap())
                }
                map["SiteUsage"] = tmp
            }
            if self.usage != nil {
                map["Usage"] = self.usage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["QuotaName"] as? String {
                self.quotaName = value
            }
            if let value = dict["QuotaValue"] as? String {
                self.quotaValue = value
            }
            if let value = dict["SiteUsage"] as? [Any?] {
                var tmp : [ListInstanceQuotasWithUsageResponseBody.Quotas.SiteUsage] = []
                for v in value {
                    if v != nil {
                        var model = ListInstanceQuotasWithUsageResponseBody.Quotas.SiteUsage()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.siteUsage = tmp
            }
            if let value = dict["Usage"] as? String {
                self.usage = value
            }
        }
    }
    public var instanceId: String?

    public var quotas: [ListInstanceQuotasWithUsageResponseBody.Quotas]?

    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.quotas != nil {
            var tmp : [Any] = []
            for k in self.quotas! {
                tmp.append(k.toMap())
            }
            map["Quotas"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Quotas"] as? [Any?] {
            var tmp : [ListInstanceQuotasWithUsageResponseBody.Quotas] = []
            for v in value {
                if v != nil {
                    var model = ListInstanceQuotasWithUsageResponseBody.Quotas()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.quotas = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class ListInstanceQuotasWithUsageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListInstanceQuotasWithUsageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListInstanceQuotasWithUsageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListKvsRequest : Tea.TeaModel {
    public var namespace: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var prefix_: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.prefix_ != nil {
            map["Prefix"] = self.prefix_!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Prefix"] as? String {
            self.prefix_ = value
        }
    }
}

public class ListKvsResponseBody : Tea.TeaModel {
    public class Keys : Tea.TeaModel {
        public var name: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var keys: [ListKvsResponseBody.Keys]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.keys != nil {
            var tmp : [Any] = []
            for k in self.keys! {
                tmp.append(k.toMap())
            }
            map["Keys"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Keys"] as? [Any?] {
            var tmp : [ListKvsResponseBody.Keys] = []
            for v in value {
                if v != nil {
                    var model = ListKvsResponseBody.Keys()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.keys = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListKvsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListKvsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListKvsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListListsRequest : Tea.TeaModel {
    public class QueryArgs : Tea.TeaModel {
        public var desc: Bool?

        public var descriptionLike: String?

        public var idLike: String?

        public var itemLike: String?

        public var kind: String?

        public var nameItemLike: String?

        public var nameLike: String?

        public var orderBy: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.desc != nil {
                map["Desc"] = self.desc!
            }
            if self.descriptionLike != nil {
                map["DescriptionLike"] = self.descriptionLike!
            }
            if self.idLike != nil {
                map["IdLike"] = self.idLike!
            }
            if self.itemLike != nil {
                map["ItemLike"] = self.itemLike!
            }
            if self.kind != nil {
                map["Kind"] = self.kind!
            }
            if self.nameItemLike != nil {
                map["NameItemLike"] = self.nameItemLike!
            }
            if self.nameLike != nil {
                map["NameLike"] = self.nameLike!
            }
            if self.orderBy != nil {
                map["OrderBy"] = self.orderBy!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Desc"] as? Bool {
                self.desc = value
            }
            if let value = dict["DescriptionLike"] as? String {
                self.descriptionLike = value
            }
            if let value = dict["IdLike"] as? String {
                self.idLike = value
            }
            if let value = dict["ItemLike"] as? String {
                self.itemLike = value
            }
            if let value = dict["Kind"] as? String {
                self.kind = value
            }
            if let value = dict["NameItemLike"] as? String {
                self.nameItemLike = value
            }
            if let value = dict["NameLike"] as? String {
                self.nameLike = value
            }
            if let value = dict["OrderBy"] as? String {
                self.orderBy = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var queryArgs: ListListsRequest.QueryArgs?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.queryArgs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.queryArgs != nil {
            map["QueryArgs"] = self.queryArgs?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["QueryArgs"] as? [String: Any?] {
            var model = ListListsRequest.QueryArgs()
            model.fromMap(value)
            self.queryArgs = model
        }
    }
}

public class ListListsShrinkRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var queryArgsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.queryArgsShrink != nil {
            map["QueryArgs"] = self.queryArgsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["QueryArgs"] as? String {
            self.queryArgsShrink = value
        }
    }
}

public class ListListsResponseBody : Tea.TeaModel {
    public class Lists : Tea.TeaModel {
        public var description_: String?

        public var id: Int64?

        public var kind: String?

        public var length: Int64?

        public var name: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.kind != nil {
                map["Kind"] = self.kind!
            }
            if self.length != nil {
                map["Length"] = self.length!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Kind"] as? String {
                self.kind = value
            }
            if let value = dict["Length"] as? Int64 {
                self.length = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var lists: [ListListsResponseBody.Lists]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var usage: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.lists != nil {
            var tmp : [Any] = []
            for k in self.lists! {
                tmp.append(k.toMap())
            }
            map["Lists"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.usage != nil {
            map["Usage"] = self.usage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Lists"] as? [Any?] {
            var tmp : [ListListsResponseBody.Lists] = []
            for v in value {
                if v != nil {
                    var model = ListListsResponseBody.Lists()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.lists = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["Usage"] as? Int64 {
            self.usage = value
        }
    }
}

public class ListListsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListListsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListListsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListLoadBalancerOriginStatusRequest : Tea.TeaModel {
    public var loadBalancerIds: String?

    public var poolType: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.loadBalancerIds != nil {
            map["LoadBalancerIds"] = self.loadBalancerIds!
        }
        if self.poolType != nil {
            map["PoolType"] = self.poolType!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LoadBalancerIds"] as? String {
            self.loadBalancerIds = value
        }
        if let value = dict["PoolType"] as? String {
            self.poolType = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListLoadBalancerOriginStatusResponseBody : Tea.TeaModel {
    public class OriginStatus : Tea.TeaModel {
        public var loadBalancerId: Int64?

        public var originId: Int64?

        public var poolId: Int64?

        public var poolType: String?

        public var reason: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.loadBalancerId != nil {
                map["LoadBalancerId"] = self.loadBalancerId!
            }
            if self.originId != nil {
                map["OriginId"] = self.originId!
            }
            if self.poolId != nil {
                map["PoolId"] = self.poolId!
            }
            if self.poolType != nil {
                map["PoolType"] = self.poolType!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["LoadBalancerId"] as? Int64 {
                self.loadBalancerId = value
            }
            if let value = dict["OriginId"] as? Int64 {
                self.originId = value
            }
            if let value = dict["PoolId"] as? Int64 {
                self.poolId = value
            }
            if let value = dict["PoolType"] as? String {
                self.poolType = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var originStatus: [ListLoadBalancerOriginStatusResponseBody.OriginStatus]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.originStatus != nil {
            var tmp : [Any] = []
            for k in self.originStatus! {
                tmp.append(k.toMap())
            }
            map["OriginStatus"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OriginStatus"] as? [Any?] {
            var tmp : [ListLoadBalancerOriginStatusResponseBody.OriginStatus] = []
            for v in value {
                if v != nil {
                    var model = ListLoadBalancerOriginStatusResponseBody.OriginStatus()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.originStatus = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListLoadBalancerOriginStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListLoadBalancerOriginStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListLoadBalancerOriginStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListLoadBalancerRegionsRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
    }
}

public class ListLoadBalancerRegionsResponseBody : Tea.TeaModel {
    public class Regions : Tea.TeaModel {
        public class SubRegions : Tea.TeaModel {
            public var subRegionCnName: String?

            public var subRegionCode: String?

            public var subRegionEnName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.subRegionCnName != nil {
                    map["SubRegionCnName"] = self.subRegionCnName!
                }
                if self.subRegionCode != nil {
                    map["SubRegionCode"] = self.subRegionCode!
                }
                if self.subRegionEnName != nil {
                    map["SubRegionEnName"] = self.subRegionEnName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SubRegionCnName"] as? String {
                    self.subRegionCnName = value
                }
                if let value = dict["SubRegionCode"] as? String {
                    self.subRegionCode = value
                }
                if let value = dict["SubRegionEnName"] as? String {
                    self.subRegionEnName = value
                }
            }
        }
        public var regionCnName: String?

        public var regionCode: String?

        public var regionEnName: String?

        public var subRegions: [ListLoadBalancerRegionsResponseBody.Regions.SubRegions]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.regionCnName != nil {
                map["RegionCnName"] = self.regionCnName!
            }
            if self.regionCode != nil {
                map["RegionCode"] = self.regionCode!
            }
            if self.regionEnName != nil {
                map["RegionEnName"] = self.regionEnName!
            }
            if self.subRegions != nil {
                var tmp : [Any] = []
                for k in self.subRegions! {
                    tmp.append(k.toMap())
                }
                map["SubRegions"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RegionCnName"] as? String {
                self.regionCnName = value
            }
            if let value = dict["RegionCode"] as? String {
                self.regionCode = value
            }
            if let value = dict["RegionEnName"] as? String {
                self.regionEnName = value
            }
            if let value = dict["SubRegions"] as? [Any?] {
                var tmp : [ListLoadBalancerRegionsResponseBody.Regions.SubRegions] = []
                for v in value {
                    if v != nil {
                        var model = ListLoadBalancerRegionsResponseBody.Regions.SubRegions()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.subRegions = tmp
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var regions: [ListLoadBalancerRegionsResponseBody.Regions]?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.regions != nil {
            var tmp : [Any] = []
            for k in self.regions! {
                tmp.append(k.toMap())
            }
            map["Regions"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Regions"] as? [Any?] {
            var tmp : [ListLoadBalancerRegionsResponseBody.Regions] = []
            for v in value {
                if v != nil {
                    var model = ListLoadBalancerRegionsResponseBody.Regions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.regions = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListLoadBalancerRegionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListLoadBalancerRegionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListLoadBalancerRegionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListLoadBalancersRequest : Tea.TeaModel {
    public var matchType: String?

    public var name: String?

    public var orderBy: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.matchType != nil {
            map["MatchType"] = self.matchType!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MatchType"] as? String {
            self.matchType = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListLoadBalancersResponseBody : Tea.TeaModel {
    public class LoadBalancers : Tea.TeaModel {
        public class AdaptiveRouting : Tea.TeaModel {
            public var failoverAcrossPools: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.failoverAcrossPools != nil {
                    map["FailoverAcrossPools"] = self.failoverAcrossPools!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FailoverAcrossPools"] as? Bool {
                    self.failoverAcrossPools = value
                }
            }
        }
        public class Monitor : Tea.TeaModel {
            public var consecutiveDown: Int32?

            public var consecutiveUp: Int32?

            public var expectedCodes: String?

            public var followRedirects: Bool?

            public var header: Any?

            public var interval: Int32?

            public var method: String?

            public var path: String?

            public var port: Int32?

            public var timeout: Int32?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.consecutiveDown != nil {
                    map["ConsecutiveDown"] = self.consecutiveDown!
                }
                if self.consecutiveUp != nil {
                    map["ConsecutiveUp"] = self.consecutiveUp!
                }
                if self.expectedCodes != nil {
                    map["ExpectedCodes"] = self.expectedCodes!
                }
                if self.followRedirects != nil {
                    map["FollowRedirects"] = self.followRedirects!
                }
                if self.header != nil {
                    map["Header"] = self.header!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.timeout != nil {
                    map["Timeout"] = self.timeout!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConsecutiveDown"] as? Int32 {
                    self.consecutiveDown = value
                }
                if let value = dict["ConsecutiveUp"] as? Int32 {
                    self.consecutiveUp = value
                }
                if let value = dict["ExpectedCodes"] as? String {
                    self.expectedCodes = value
                }
                if let value = dict["FollowRedirects"] as? Bool {
                    self.followRedirects = value
                }
                if let value = dict["Header"] as? Any {
                    self.header = value
                }
                if let value = dict["Interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["Timeout"] as? Int32 {
                    self.timeout = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class RandomSteering : Tea.TeaModel {
            public var defaultWeight: Int32?

            public var poolWeights: [String: Int32]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.defaultWeight != nil {
                    map["DefaultWeight"] = self.defaultWeight!
                }
                if self.poolWeights != nil {
                    map["PoolWeights"] = self.poolWeights!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DefaultWeight"] as? Int32 {
                    self.defaultWeight = value
                }
                if let value = dict["PoolWeights"] as? [String: Int32] {
                    self.poolWeights = value
                }
            }
        }
        public class Rules : Tea.TeaModel {
            public class FixedResponse : Tea.TeaModel {
                public var contentType: String?

                public var location: String?

                public var messageBody: String?

                public var statusCode: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contentType != nil {
                        map["ContentType"] = self.contentType!
                    }
                    if self.location != nil {
                        map["Location"] = self.location!
                    }
                    if self.messageBody != nil {
                        map["MessageBody"] = self.messageBody!
                    }
                    if self.statusCode != nil {
                        map["StatusCode"] = self.statusCode!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ContentType"] as? String {
                        self.contentType = value
                    }
                    if let value = dict["Location"] as? String {
                        self.location = value
                    }
                    if let value = dict["MessageBody"] as? String {
                        self.messageBody = value
                    }
                    if let value = dict["StatusCode"] as? Int32 {
                        self.statusCode = value
                    }
                }
            }
            public var fixedResponse: ListLoadBalancersResponseBody.LoadBalancers.Rules.FixedResponse?

            public var overrides: Any?

            public var rule: String?

            public var ruleEnable: String?

            public var ruleName: String?

            public var sequence: Int32?

            public var terminates: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.fixedResponse?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fixedResponse != nil {
                    map["FixedResponse"] = self.fixedResponse?.toMap()
                }
                if self.overrides != nil {
                    map["Overrides"] = self.overrides!
                }
                if self.rule != nil {
                    map["Rule"] = self.rule!
                }
                if self.ruleEnable != nil {
                    map["RuleEnable"] = self.ruleEnable!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.sequence != nil {
                    map["Sequence"] = self.sequence!
                }
                if self.terminates != nil {
                    map["Terminates"] = self.terminates!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FixedResponse"] as? [String: Any?] {
                    var model = ListLoadBalancersResponseBody.LoadBalancers.Rules.FixedResponse()
                    model.fromMap(value)
                    self.fixedResponse = model
                }
                if let value = dict["Overrides"] as? Any {
                    self.overrides = value
                }
                if let value = dict["Rule"] as? String {
                    self.rule = value
                }
                if let value = dict["RuleEnable"] as? String {
                    self.ruleEnable = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["Sequence"] as? Int32 {
                    self.sequence = value
                }
                if let value = dict["Terminates"] as? Bool {
                    self.terminates = value
                }
            }
        }
        public var adaptiveRouting: ListLoadBalancersResponseBody.LoadBalancers.AdaptiveRouting?

        public var defaultPools: [Int64]?

        public var description_: String?

        public var enabled: Bool?

        public var fallbackPool: Int64?

        public var id: Int64?

        public var monitor: ListLoadBalancersResponseBody.LoadBalancers.Monitor?

        public var name: String?

        public var randomSteering: ListLoadBalancersResponseBody.LoadBalancers.RandomSteering?

        public var regionPools: Any?

        public var rules: [ListLoadBalancersResponseBody.LoadBalancers.Rules]?

        public var sessionAffinity: String?

        public var siteId: Int64?

        public var status: String?

        public var steeringPolicy: String?

        public var subRegionPools: Any?

        public var ttl: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.adaptiveRouting?.validate()
            try self.monitor?.validate()
            try self.randomSteering?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.adaptiveRouting != nil {
                map["AdaptiveRouting"] = self.adaptiveRouting?.toMap()
            }
            if self.defaultPools != nil {
                map["DefaultPools"] = self.defaultPools!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.enabled != nil {
                map["Enabled"] = self.enabled!
            }
            if self.fallbackPool != nil {
                map["FallbackPool"] = self.fallbackPool!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.monitor != nil {
                map["Monitor"] = self.monitor?.toMap()
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.randomSteering != nil {
                map["RandomSteering"] = self.randomSteering?.toMap()
            }
            if self.regionPools != nil {
                map["RegionPools"] = self.regionPools!
            }
            if self.rules != nil {
                var tmp : [Any] = []
                for k in self.rules! {
                    tmp.append(k.toMap())
                }
                map["Rules"] = tmp
            }
            if self.sessionAffinity != nil {
                map["SessionAffinity"] = self.sessionAffinity!
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.steeringPolicy != nil {
                map["SteeringPolicy"] = self.steeringPolicy!
            }
            if self.subRegionPools != nil {
                map["SubRegionPools"] = self.subRegionPools!
            }
            if self.ttl != nil {
                map["Ttl"] = self.ttl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AdaptiveRouting"] as? [String: Any?] {
                var model = ListLoadBalancersResponseBody.LoadBalancers.AdaptiveRouting()
                model.fromMap(value)
                self.adaptiveRouting = model
            }
            if let value = dict["DefaultPools"] as? [Int64] {
                self.defaultPools = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Enabled"] as? Bool {
                self.enabled = value
            }
            if let value = dict["FallbackPool"] as? Int64 {
                self.fallbackPool = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Monitor"] as? [String: Any?] {
                var model = ListLoadBalancersResponseBody.LoadBalancers.Monitor()
                model.fromMap(value)
                self.monitor = model
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["RandomSteering"] as? [String: Any?] {
                var model = ListLoadBalancersResponseBody.LoadBalancers.RandomSteering()
                model.fromMap(value)
                self.randomSteering = model
            }
            if let value = dict["RegionPools"] as? Any {
                self.regionPools = value
            }
            if let value = dict["Rules"] as? [Any?] {
                var tmp : [ListLoadBalancersResponseBody.LoadBalancers.Rules] = []
                for v in value {
                    if v != nil {
                        var model = ListLoadBalancersResponseBody.LoadBalancers.Rules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.rules = tmp
            }
            if let value = dict["SessionAffinity"] as? String {
                self.sessionAffinity = value
            }
            if let value = dict["SiteId"] as? Int64 {
                self.siteId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["SteeringPolicy"] as? String {
                self.steeringPolicy = value
            }
            if let value = dict["SubRegionPools"] as? Any {
                self.subRegionPools = value
            }
            if let value = dict["Ttl"] as? Int32 {
                self.ttl = value
            }
        }
    }
    public var loadBalancers: [ListLoadBalancersResponseBody.LoadBalancers]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.loadBalancers != nil {
            var tmp : [Any] = []
            for k in self.loadBalancers! {
                tmp.append(k.toMap())
            }
            map["LoadBalancers"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LoadBalancers"] as? [Any?] {
            var tmp : [ListLoadBalancersResponseBody.LoadBalancers] = []
            for v in value {
                if v != nil {
                    var model = ListLoadBalancersResponseBody.LoadBalancers()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.loadBalancers = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListLoadBalancersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListLoadBalancersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListLoadBalancersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListManagedRulesGroupsRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
    }
}

public class ListManagedRulesGroupsResponseBody : Tea.TeaModel {
    public class ManagedRulesGroups : Tea.TeaModel {
        public var name: String?

        public var ruleCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.ruleCount != nil {
                map["RuleCount"] = self.ruleCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["RuleCount"] as? Int64 {
                self.ruleCount = value
            }
        }
    }
    public var managedRulesGroups: [ListManagedRulesGroupsResponseBody.ManagedRulesGroups]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.managedRulesGroups != nil {
            var tmp : [Any] = []
            for k in self.managedRulesGroups! {
                tmp.append(k.toMap())
            }
            map["ManagedRulesGroups"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ManagedRulesGroups"] as? [Any?] {
            var tmp : [ListManagedRulesGroupsResponseBody.ManagedRulesGroups] = []
            for v in value {
                if v != nil {
                    var model = ListManagedRulesGroupsResponseBody.ManagedRulesGroups()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.managedRulesGroups = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListManagedRulesGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListManagedRulesGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListManagedRulesGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListNetworkOptimizationsRequest : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var ruleName: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListNetworkOptimizationsResponseBody : Tea.TeaModel {
    public class Configs : Tea.TeaModel {
        public var configId: Int64?

        public var configType: String?

        public var grpc: String?

        public var http2Origin: String?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var siteVersion: Int32?

        public var smartRouting: String?

        public var uploadMaxFilesize: String?

        public var websocket: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.configType != nil {
                map["ConfigType"] = self.configType!
            }
            if self.grpc != nil {
                map["Grpc"] = self.grpc!
            }
            if self.http2Origin != nil {
                map["Http2Origin"] = self.http2Origin!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.siteVersion != nil {
                map["SiteVersion"] = self.siteVersion!
            }
            if self.smartRouting != nil {
                map["SmartRouting"] = self.smartRouting!
            }
            if self.uploadMaxFilesize != nil {
                map["UploadMaxFilesize"] = self.uploadMaxFilesize!
            }
            if self.websocket != nil {
                map["Websocket"] = self.websocket!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["ConfigType"] as? String {
                self.configType = value
            }
            if let value = dict["Grpc"] as? String {
                self.grpc = value
            }
            if let value = dict["Http2Origin"] as? String {
                self.http2Origin = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["SiteVersion"] as? Int32 {
                self.siteVersion = value
            }
            if let value = dict["SmartRouting"] as? String {
                self.smartRouting = value
            }
            if let value = dict["UploadMaxFilesize"] as? String {
                self.uploadMaxFilesize = value
            }
            if let value = dict["Websocket"] as? String {
                self.websocket = value
            }
        }
    }
    public var configs: [ListNetworkOptimizationsResponseBody.Configs]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [ListNetworkOptimizationsResponseBody.Configs] = []
            for v in value {
                if v != nil {
                    var model = ListNetworkOptimizationsResponseBody.Configs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListNetworkOptimizationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListNetworkOptimizationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListNetworkOptimizationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListOriginCaCertificatesRequest : Tea.TeaModel {
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListOriginCaCertificatesResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var commonName: String?

        public var createTime: String?

        public var fingerprintSha256: String?

        public var id: String?

        public var issuer: String?

        public var name: String?

        public var notAfter: String?

        public var notBefore: String?

        public var pubkeyAlgorithm: String?

        public var SAN: String?

        public var serialNumber: String?

        public var signatureAlgorithm: String?

        public var status: String?

        public var type: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.fingerprintSha256 != nil {
                map["FingerprintSha256"] = self.fingerprintSha256!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.issuer != nil {
                map["Issuer"] = self.issuer!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.notAfter != nil {
                map["NotAfter"] = self.notAfter!
            }
            if self.notBefore != nil {
                map["NotBefore"] = self.notBefore!
            }
            if self.pubkeyAlgorithm != nil {
                map["PubkeyAlgorithm"] = self.pubkeyAlgorithm!
            }
            if self.SAN != nil {
                map["SAN"] = self.SAN!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.signatureAlgorithm != nil {
                map["SignatureAlgorithm"] = self.signatureAlgorithm!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["FingerprintSha256"] as? String {
                self.fingerprintSha256 = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Issuer"] as? String {
                self.issuer = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NotAfter"] as? String {
                self.notAfter = value
            }
            if let value = dict["NotBefore"] as? String {
                self.notBefore = value
            }
            if let value = dict["PubkeyAlgorithm"] as? String {
                self.pubkeyAlgorithm = value
            }
            if let value = dict["SAN"] as? String {
                self.SAN = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["SignatureAlgorithm"] as? String {
                self.signatureAlgorithm = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var requestId: String?

    public var result: [ListOriginCaCertificatesResponseBody.Result]?

    public var siteId: Int64?

    public var siteName: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["Result"] = tmp
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [Any?] {
            var tmp : [ListOriginCaCertificatesResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = ListOriginCaCertificatesResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class ListOriginCaCertificatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListOriginCaCertificatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListOriginCaCertificatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListOriginClientCertificatesRequest : Tea.TeaModel {
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListOriginClientCertificatesResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public var commonName: String?

        public var createTime: String?

        public var fingerprintSha256: String?

        public var hostnames: [String]?

        public var id: String?

        public var issuer: String?

        public var name: String?

        public var notAfter: String?

        public var notBefore: String?

        public var pubkeyAlgorithm: String?

        public var SAN: String?

        public var serialNumber: String?

        public var signatureAlgorithm: String?

        public var status: String?

        public var type: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.commonName != nil {
                map["CommonName"] = self.commonName!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.fingerprintSha256 != nil {
                map["FingerprintSha256"] = self.fingerprintSha256!
            }
            if self.hostnames != nil {
                map["Hostnames"] = self.hostnames!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.issuer != nil {
                map["Issuer"] = self.issuer!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.notAfter != nil {
                map["NotAfter"] = self.notAfter!
            }
            if self.notBefore != nil {
                map["NotBefore"] = self.notBefore!
            }
            if self.pubkeyAlgorithm != nil {
                map["PubkeyAlgorithm"] = self.pubkeyAlgorithm!
            }
            if self.SAN != nil {
                map["SAN"] = self.SAN!
            }
            if self.serialNumber != nil {
                map["SerialNumber"] = self.serialNumber!
            }
            if self.signatureAlgorithm != nil {
                map["SignatureAlgorithm"] = self.signatureAlgorithm!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CommonName"] as? String {
                self.commonName = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["FingerprintSha256"] as? String {
                self.fingerprintSha256 = value
            }
            if let value = dict["Hostnames"] as? [String] {
                self.hostnames = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Issuer"] as? String {
                self.issuer = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NotAfter"] as? String {
                self.notAfter = value
            }
            if let value = dict["NotBefore"] as? String {
                self.notBefore = value
            }
            if let value = dict["PubkeyAlgorithm"] as? String {
                self.pubkeyAlgorithm = value
            }
            if let value = dict["SAN"] as? String {
                self.SAN = value
            }
            if let value = dict["SerialNumber"] as? String {
                self.serialNumber = value
            }
            if let value = dict["SignatureAlgorithm"] as? String {
                self.signatureAlgorithm = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var requestId: String?

    public var result: [ListOriginClientCertificatesResponseBody.Result]?

    public var siteId: Int64?

    public var siteName: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            var tmp : [Any] = []
            for k in self.result! {
                tmp.append(k.toMap())
            }
            map["Result"] = tmp
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [Any?] {
            var tmp : [ListOriginClientCertificatesResponseBody.Result] = []
            for v in value {
                if v != nil {
                    var model = ListOriginClientCertificatesResponseBody.Result()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.result = tmp
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class ListOriginClientCertificatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListOriginClientCertificatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListOriginClientCertificatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListOriginPoolsRequest : Tea.TeaModel {
    public var matchType: String?

    public var name: String?

    public var orderBy: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.matchType != nil {
            map["MatchType"] = self.matchType!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MatchType"] as? String {
            self.matchType = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListOriginPoolsResponseBody : Tea.TeaModel {
    public class OriginPools : Tea.TeaModel {
        public class Origins : Tea.TeaModel {
            public class AuthConf : Tea.TeaModel {
                public var accessKey: String?

                public var authType: String?

                public var region: String?

                public var secretKey: String?

                public var version: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.accessKey != nil {
                        map["AccessKey"] = self.accessKey!
                    }
                    if self.authType != nil {
                        map["AuthType"] = self.authType!
                    }
                    if self.region != nil {
                        map["Region"] = self.region!
                    }
                    if self.secretKey != nil {
                        map["SecretKey"] = self.secretKey!
                    }
                    if self.version != nil {
                        map["Version"] = self.version!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AccessKey"] as? String {
                        self.accessKey = value
                    }
                    if let value = dict["AuthType"] as? String {
                        self.authType = value
                    }
                    if let value = dict["Region"] as? String {
                        self.region = value
                    }
                    if let value = dict["SecretKey"] as? String {
                        self.secretKey = value
                    }
                    if let value = dict["Version"] as? String {
                        self.version = value
                    }
                }
            }
            public var address: String?

            public var authConf: ListOriginPoolsResponseBody.OriginPools.Origins.AuthConf?

            public var enabled: Bool?

            public var header: Any?

            public var id: Int64?

            public var name: String?

            public var type: String?

            public var weight: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.authConf?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.address != nil {
                    map["Address"] = self.address!
                }
                if self.authConf != nil {
                    map["AuthConf"] = self.authConf?.toMap()
                }
                if self.enabled != nil {
                    map["Enabled"] = self.enabled!
                }
                if self.header != nil {
                    map["Header"] = self.header!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.weight != nil {
                    map["Weight"] = self.weight!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Address"] as? String {
                    self.address = value
                }
                if let value = dict["AuthConf"] as? [String: Any?] {
                    var model = ListOriginPoolsResponseBody.OriginPools.Origins.AuthConf()
                    model.fromMap(value)
                    self.authConf = model
                }
                if let value = dict["Enabled"] as? Bool {
                    self.enabled = value
                }
                if let value = dict["Header"] as? Any {
                    self.header = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Weight"] as? Int32 {
                    self.weight = value
                }
            }
        }
        public class References : Tea.TeaModel {
            public class DnsRecords : Tea.TeaModel {
                public var id: Int64?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public class IPARecords : Tea.TeaModel {
                public var id: Int64?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public class LoadBalancers : Tea.TeaModel {
                public var id: Int64?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var dnsRecords: [ListOriginPoolsResponseBody.OriginPools.References.DnsRecords]?

            public var IPARecords: [ListOriginPoolsResponseBody.OriginPools.References.IPARecords]?

            public var loadBalancers: [ListOriginPoolsResponseBody.OriginPools.References.LoadBalancers]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dnsRecords != nil {
                    var tmp : [Any] = []
                    for k in self.dnsRecords! {
                        tmp.append(k.toMap())
                    }
                    map["DnsRecords"] = tmp
                }
                if self.IPARecords != nil {
                    var tmp : [Any] = []
                    for k in self.IPARecords! {
                        tmp.append(k.toMap())
                    }
                    map["IPARecords"] = tmp
                }
                if self.loadBalancers != nil {
                    var tmp : [Any] = []
                    for k in self.loadBalancers! {
                        tmp.append(k.toMap())
                    }
                    map["LoadBalancers"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DnsRecords"] as? [Any?] {
                    var tmp : [ListOriginPoolsResponseBody.OriginPools.References.DnsRecords] = []
                    for v in value {
                        if v != nil {
                            var model = ListOriginPoolsResponseBody.OriginPools.References.DnsRecords()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.dnsRecords = tmp
                }
                if let value = dict["IPARecords"] as? [Any?] {
                    var tmp : [ListOriginPoolsResponseBody.OriginPools.References.IPARecords] = []
                    for v in value {
                        if v != nil {
                            var model = ListOriginPoolsResponseBody.OriginPools.References.IPARecords()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.IPARecords = tmp
                }
                if let value = dict["LoadBalancers"] as? [Any?] {
                    var tmp : [ListOriginPoolsResponseBody.OriginPools.References.LoadBalancers] = []
                    for v in value {
                        if v != nil {
                            var model = ListOriginPoolsResponseBody.OriginPools.References.LoadBalancers()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.loadBalancers = tmp
                }
            }
        }
        public var enabled: Bool?

        public var id: Int64?

        public var name: String?

        public var origins: [ListOriginPoolsResponseBody.OriginPools.Origins]?

        public var recordName: String?

        public var referenceLBCount: Int32?

        public var references: ListOriginPoolsResponseBody.OriginPools.References?

        public var siteId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.references?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.enabled != nil {
                map["Enabled"] = self.enabled!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.origins != nil {
                var tmp : [Any] = []
                for k in self.origins! {
                    tmp.append(k.toMap())
                }
                map["Origins"] = tmp
            }
            if self.recordName != nil {
                map["RecordName"] = self.recordName!
            }
            if self.referenceLBCount != nil {
                map["ReferenceLBCount"] = self.referenceLBCount!
            }
            if self.references != nil {
                map["References"] = self.references?.toMap()
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Enabled"] as? Bool {
                self.enabled = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Origins"] as? [Any?] {
                var tmp : [ListOriginPoolsResponseBody.OriginPools.Origins] = []
                for v in value {
                    if v != nil {
                        var model = ListOriginPoolsResponseBody.OriginPools.Origins()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.origins = tmp
            }
            if let value = dict["RecordName"] as? String {
                self.recordName = value
            }
            if let value = dict["ReferenceLBCount"] as? Int32 {
                self.referenceLBCount = value
            }
            if let value = dict["References"] as? [String: Any?] {
                var model = ListOriginPoolsResponseBody.OriginPools.References()
                model.fromMap(value)
                self.references = model
            }
            if let value = dict["SiteId"] as? Int64 {
                self.siteId = value
            }
        }
    }
    public var originPools: [ListOriginPoolsResponseBody.OriginPools]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.originPools != nil {
            var tmp : [Any] = []
            for k in self.originPools! {
                tmp.append(k.toMap())
            }
            map["OriginPools"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OriginPools"] as? [Any?] {
            var tmp : [ListOriginPoolsResponseBody.OriginPools] = []
            for v in value {
                if v != nil {
                    var model = ListOriginPoolsResponseBody.OriginPools()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.originPools = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListOriginPoolsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListOriginPoolsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListOriginPoolsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListOriginRulesRequest : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var ruleName: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListOriginRulesResponseBody : Tea.TeaModel {
    public class Configs : Tea.TeaModel {
        public var configId: Int64?

        public var configType: String?

        public var dnsRecord: String?

        public var follow302Enable: String?

        public var follow302MaxTries: String?

        public var follow302RetainArgs: String?

        public var follow302RetainHeader: String?

        public var follow302TargetHost: String?

        public var originHost: String?

        public var originHttpPort: String?

        public var originHttpsPort: String?

        public var originMtls: String?

        public var originReadTimeout: String?

        public var originScheme: String?

        public var originSni: String?

        public var originVerify: String?

        public var range: String?

        public var rangeChunkSize: String?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var siteVersion: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.configType != nil {
                map["ConfigType"] = self.configType!
            }
            if self.dnsRecord != nil {
                map["DnsRecord"] = self.dnsRecord!
            }
            if self.follow302Enable != nil {
                map["Follow302Enable"] = self.follow302Enable!
            }
            if self.follow302MaxTries != nil {
                map["Follow302MaxTries"] = self.follow302MaxTries!
            }
            if self.follow302RetainArgs != nil {
                map["Follow302RetainArgs"] = self.follow302RetainArgs!
            }
            if self.follow302RetainHeader != nil {
                map["Follow302RetainHeader"] = self.follow302RetainHeader!
            }
            if self.follow302TargetHost != nil {
                map["Follow302TargetHost"] = self.follow302TargetHost!
            }
            if self.originHost != nil {
                map["OriginHost"] = self.originHost!
            }
            if self.originHttpPort != nil {
                map["OriginHttpPort"] = self.originHttpPort!
            }
            if self.originHttpsPort != nil {
                map["OriginHttpsPort"] = self.originHttpsPort!
            }
            if self.originMtls != nil {
                map["OriginMtls"] = self.originMtls!
            }
            if self.originReadTimeout != nil {
                map["OriginReadTimeout"] = self.originReadTimeout!
            }
            if self.originScheme != nil {
                map["OriginScheme"] = self.originScheme!
            }
            if self.originSni != nil {
                map["OriginSni"] = self.originSni!
            }
            if self.originVerify != nil {
                map["OriginVerify"] = self.originVerify!
            }
            if self.range != nil {
                map["Range"] = self.range!
            }
            if self.rangeChunkSize != nil {
                map["RangeChunkSize"] = self.rangeChunkSize!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.siteVersion != nil {
                map["SiteVersion"] = self.siteVersion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["ConfigType"] as? String {
                self.configType = value
            }
            if let value = dict["DnsRecord"] as? String {
                self.dnsRecord = value
            }
            if let value = dict["Follow302Enable"] as? String {
                self.follow302Enable = value
            }
            if let value = dict["Follow302MaxTries"] as? String {
                self.follow302MaxTries = value
            }
            if let value = dict["Follow302RetainArgs"] as? String {
                self.follow302RetainArgs = value
            }
            if let value = dict["Follow302RetainHeader"] as? String {
                self.follow302RetainHeader = value
            }
            if let value = dict["Follow302TargetHost"] as? String {
                self.follow302TargetHost = value
            }
            if let value = dict["OriginHost"] as? String {
                self.originHost = value
            }
            if let value = dict["OriginHttpPort"] as? String {
                self.originHttpPort = value
            }
            if let value = dict["OriginHttpsPort"] as? String {
                self.originHttpsPort = value
            }
            if let value = dict["OriginMtls"] as? String {
                self.originMtls = value
            }
            if let value = dict["OriginReadTimeout"] as? String {
                self.originReadTimeout = value
            }
            if let value = dict["OriginScheme"] as? String {
                self.originScheme = value
            }
            if let value = dict["OriginSni"] as? String {
                self.originSni = value
            }
            if let value = dict["OriginVerify"] as? String {
                self.originVerify = value
            }
            if let value = dict["Range"] as? String {
                self.range = value
            }
            if let value = dict["RangeChunkSize"] as? String {
                self.rangeChunkSize = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["SiteVersion"] as? Int32 {
                self.siteVersion = value
            }
        }
    }
    public var configs: [ListOriginRulesResponseBody.Configs]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [ListOriginRulesResponseBody.Configs] = []
            for v in value {
                if v != nil {
                    var model = ListOriginRulesResponseBody.Configs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListOriginRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListOriginRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListOriginRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPagesRequest : Tea.TeaModel {
    public class QueryArgs : Tea.TeaModel {
        public var nameDescriptionLike: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nameDescriptionLike != nil {
                map["NameDescriptionLike"] = self.nameDescriptionLike!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NameDescriptionLike"] as? String {
                self.nameDescriptionLike = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var queryArgs: ListPagesRequest.QueryArgs?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.queryArgs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.queryArgs != nil {
            map["QueryArgs"] = self.queryArgs?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["QueryArgs"] as? [String: Any?] {
            var model = ListPagesRequest.QueryArgs()
            model.fromMap(value)
            self.queryArgs = model
        }
    }
}

public class ListPagesShrinkRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var queryArgsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.queryArgsShrink != nil {
            map["QueryArgs"] = self.queryArgsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["QueryArgs"] as? String {
            self.queryArgsShrink = value
        }
    }
}

public class ListPagesResponseBody : Tea.TeaModel {
    public class Pages : Tea.TeaModel {
        public var content: String?

        public var contentType: String?

        public var description_: String?

        public var id: Int64?

        public var kind: String?

        public var name: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.contentType != nil {
                map["ContentType"] = self.contentType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.kind != nil {
                map["Kind"] = self.kind!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["ContentType"] as? String {
                self.contentType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Kind"] as? String {
                self.kind = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var pages: [ListPagesResponseBody.Pages]?

    public var requestId: String?

    public var totalCount: Int32?

    public var usage: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.pages != nil {
            var tmp : [Any] = []
            for k in self.pages! {
                tmp.append(k.toMap())
            }
            map["Pages"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.usage != nil {
            map["Usage"] = self.usage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Pages"] as? [Any?] {
            var tmp : [ListPagesResponseBody.Pages] = []
            for v in value {
                if v != nil {
                    var model = ListPagesResponseBody.Pages()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.pages = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["Usage"] as? Int64 {
            self.usage = value
        }
    }
}

public class ListPagesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPagesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPagesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRecordsRequest : Tea.TeaModel {
    public var bizName: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var proxied: Bool?

    public var recordMatchType: String?

    public var recordName: String?

    public var siteId: Int64?

    public var sourceType: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizName != nil {
            map["BizName"] = self.bizName!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.proxied != nil {
            map["Proxied"] = self.proxied!
        }
        if self.recordMatchType != nil {
            map["RecordMatchType"] = self.recordMatchType!
        }
        if self.recordName != nil {
            map["RecordName"] = self.recordName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.sourceType != nil {
            map["SourceType"] = self.sourceType!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizName"] as? String {
            self.bizName = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Proxied"] as? Bool {
            self.proxied = value
        }
        if let value = dict["RecordMatchType"] as? String {
            self.recordMatchType = value
        }
        if let value = dict["RecordName"] as? String {
            self.recordName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SourceType"] as? String {
            self.sourceType = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class ListRecordsResponseBody : Tea.TeaModel {
    public class Records : Tea.TeaModel {
        public class AuthConf : Tea.TeaModel {
            public var accessKey: String?

            public var authType: String?

            public var region: String?

            public var secretKey: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accessKey != nil {
                    map["AccessKey"] = self.accessKey!
                }
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.secretKey != nil {
                    map["SecretKey"] = self.secretKey!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccessKey"] as? String {
                    self.accessKey = value
                }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["SecretKey"] as? String {
                    self.secretKey = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public class Data : Tea.TeaModel {
            public var algorithm: Int32?

            public var certificate: String?

            public var fingerprint: String?

            public var flag: Int32?

            public var keyTag: Int32?

            public var matchingType: Int32?

            public var port: Int32?

            public var priority: Int32?

            public var selector: Int32?

            public var tag: String?

            public var type: Int32?

            public var usage: Int32?

            public var value: String?

            public var weight: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.algorithm != nil {
                    map["Algorithm"] = self.algorithm!
                }
                if self.certificate != nil {
                    map["Certificate"] = self.certificate!
                }
                if self.fingerprint != nil {
                    map["Fingerprint"] = self.fingerprint!
                }
                if self.flag != nil {
                    map["Flag"] = self.flag!
                }
                if self.keyTag != nil {
                    map["KeyTag"] = self.keyTag!
                }
                if self.matchingType != nil {
                    map["MatchingType"] = self.matchingType!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.priority != nil {
                    map["Priority"] = self.priority!
                }
                if self.selector != nil {
                    map["Selector"] = self.selector!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                if self.weight != nil {
                    map["Weight"] = self.weight!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Algorithm"] as? Int32 {
                    self.algorithm = value
                }
                if let value = dict["Certificate"] as? String {
                    self.certificate = value
                }
                if let value = dict["Fingerprint"] as? String {
                    self.fingerprint = value
                }
                if let value = dict["Flag"] as? Int32 {
                    self.flag = value
                }
                if let value = dict["KeyTag"] as? Int32 {
                    self.keyTag = value
                }
                if let value = dict["MatchingType"] as? Int32 {
                    self.matchingType = value
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["Priority"] as? Int32 {
                    self.priority = value
                }
                if let value = dict["Selector"] as? Int32 {
                    self.selector = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Type"] as? Int32 {
                    self.type = value
                }
                if let value = dict["Usage"] as? Int32 {
                    self.usage = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
                if let value = dict["Weight"] as? Int32 {
                    self.weight = value
                }
            }
        }
        public var authConf: ListRecordsResponseBody.Records.AuthConf?

        public var bizName: String?

        public var comment: String?

        public var createTime: String?

        public var data: ListRecordsResponseBody.Records.Data?

        public var hostPolicy: String?

        public var proxied: Bool?

        public var recordCname: String?

        public var recordId: Int64?

        public var recordName: String?

        public var recordSourceType: String?

        public var recordType: String?

        public var siteId: Int64?

        public var siteName: String?

        public var ttl: Int64?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.authConf?.validate()
            try self.data?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authConf != nil {
                map["AuthConf"] = self.authConf?.toMap()
            }
            if self.bizName != nil {
                map["BizName"] = self.bizName!
            }
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.data != nil {
                map["Data"] = self.data?.toMap()
            }
            if self.hostPolicy != nil {
                map["HostPolicy"] = self.hostPolicy!
            }
            if self.proxied != nil {
                map["Proxied"] = self.proxied!
            }
            if self.recordCname != nil {
                map["RecordCname"] = self.recordCname!
            }
            if self.recordId != nil {
                map["RecordId"] = self.recordId!
            }
            if self.recordName != nil {
                map["RecordName"] = self.recordName!
            }
            if self.recordSourceType != nil {
                map["RecordSourceType"] = self.recordSourceType!
            }
            if self.recordType != nil {
                map["RecordType"] = self.recordType!
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            if self.siteName != nil {
                map["SiteName"] = self.siteName!
            }
            if self.ttl != nil {
                map["Ttl"] = self.ttl!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuthConf"] as? [String: Any?] {
                var model = ListRecordsResponseBody.Records.AuthConf()
                model.fromMap(value)
                self.authConf = model
            }
            if let value = dict["BizName"] as? String {
                self.bizName = value
            }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Data"] as? [String: Any?] {
                var model = ListRecordsResponseBody.Records.Data()
                model.fromMap(value)
                self.data = model
            }
            if let value = dict["HostPolicy"] as? String {
                self.hostPolicy = value
            }
            if let value = dict["Proxied"] as? Bool {
                self.proxied = value
            }
            if let value = dict["RecordCname"] as? String {
                self.recordCname = value
            }
            if let value = dict["RecordId"] as? Int64 {
                self.recordId = value
            }
            if let value = dict["RecordName"] as? String {
                self.recordName = value
            }
            if let value = dict["RecordSourceType"] as? String {
                self.recordSourceType = value
            }
            if let value = dict["RecordType"] as? String {
                self.recordType = value
            }
            if let value = dict["SiteId"] as? Int64 {
                self.siteId = value
            }
            if let value = dict["SiteName"] as? String {
                self.siteName = value
            }
            if let value = dict["Ttl"] as? Int64 {
                self.ttl = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var records: [ListRecordsResponseBody.Records]?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.records != nil {
            var tmp : [Any] = []
            for k in self.records! {
                tmp.append(k.toMap())
            }
            map["Records"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Records"] as? [Any?] {
            var tmp : [ListRecordsResponseBody.Records] = []
            for v in value {
                if v != nil {
                    var model = ListRecordsResponseBody.Records()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.records = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRedirectRulesRequest : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var ruleName: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListRedirectRulesResponseBody : Tea.TeaModel {
    public class Configs : Tea.TeaModel {
        public var configId: Int64?

        public var configType: String?

        public var reserveQueryString: String?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var siteVersion: Int32?

        public var statusCode: String?

        public var targetUrl: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.configType != nil {
                map["ConfigType"] = self.configType!
            }
            if self.reserveQueryString != nil {
                map["ReserveQueryString"] = self.reserveQueryString!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.siteVersion != nil {
                map["SiteVersion"] = self.siteVersion!
            }
            if self.statusCode != nil {
                map["StatusCode"] = self.statusCode!
            }
            if self.targetUrl != nil {
                map["TargetUrl"] = self.targetUrl!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["ConfigType"] as? String {
                self.configType = value
            }
            if let value = dict["ReserveQueryString"] as? String {
                self.reserveQueryString = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["SiteVersion"] as? Int32 {
                self.siteVersion = value
            }
            if let value = dict["StatusCode"] as? String {
                self.statusCode = value
            }
            if let value = dict["TargetUrl"] as? String {
                self.targetUrl = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var configs: [ListRedirectRulesResponseBody.Configs]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [ListRedirectRulesResponseBody.Configs] = []
            for v in value {
                if v != nil {
                    var model = ListRedirectRulesResponseBody.Configs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListRedirectRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRedirectRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRedirectRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRewriteUrlRulesRequest : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var ruleName: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListRewriteUrlRulesResponseBody : Tea.TeaModel {
    public class Configs : Tea.TeaModel {
        public var configId: Int64?

        public var configType: String?

        public var queryString: String?

        public var rewriteQueryStringType: String?

        public var rewriteUriType: String?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var siteVersion: Int32?

        public var uri: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.configType != nil {
                map["ConfigType"] = self.configType!
            }
            if self.queryString != nil {
                map["QueryString"] = self.queryString!
            }
            if self.rewriteQueryStringType != nil {
                map["RewriteQueryStringType"] = self.rewriteQueryStringType!
            }
            if self.rewriteUriType != nil {
                map["RewriteUriType"] = self.rewriteUriType!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.siteVersion != nil {
                map["SiteVersion"] = self.siteVersion!
            }
            if self.uri != nil {
                map["Uri"] = self.uri!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["ConfigType"] as? String {
                self.configType = value
            }
            if let value = dict["QueryString"] as? String {
                self.queryString = value
            }
            if let value = dict["RewriteQueryStringType"] as? String {
                self.rewriteQueryStringType = value
            }
            if let value = dict["RewriteUriType"] as? String {
                self.rewriteUriType = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["SiteVersion"] as? Int32 {
                self.siteVersion = value
            }
            if let value = dict["Uri"] as? String {
                self.uri = value
            }
        }
    }
    public var configs: [ListRewriteUrlRulesResponseBody.Configs]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [ListRewriteUrlRulesResponseBody.Configs] = []
            for v in value {
                if v != nil {
                    var model = ListRewriteUrlRulesResponseBody.Configs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListRewriteUrlRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRewriteUrlRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRewriteUrlRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRoutineCanaryAreasResponseBody : Tea.TeaModel {
    public var canaryAreas: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.canaryAreas != nil {
            map["CanaryAreas"] = self.canaryAreas!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CanaryAreas"] as? [String] {
            self.canaryAreas = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListRoutineCanaryAreasResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRoutineCanaryAreasResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRoutineCanaryAreasResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRoutineCodeVersionsRequest : Tea.TeaModel {
    public var name: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var searchKeyWord: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchKeyWord != nil {
            map["SearchKeyWord"] = self.searchKeyWord!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SearchKeyWord"] as? String {
            self.searchKeyWord = value
        }
    }
}

public class ListRoutineCodeVersionsResponseBody : Tea.TeaModel {
    public class CodeVersions : Tea.TeaModel {
        public var codeDescription: String?

        public var codeVersion: String?

        public var createTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.codeDescription != nil {
                map["CodeDescription"] = self.codeDescription!
            }
            if self.codeVersion != nil {
                map["CodeVersion"] = self.codeVersion!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CodeDescription"] as? String {
                self.codeDescription = value
            }
            if let value = dict["CodeVersion"] as? String {
                self.codeVersion = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
        }
    }
    public var codeVersions: [ListRoutineCodeVersionsResponseBody.CodeVersions]?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.codeVersions != nil {
            var tmp : [Any] = []
            for k in self.codeVersions! {
                tmp.append(k.toMap())
            }
            map["CodeVersions"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CodeVersions"] as? [Any?] {
            var tmp : [ListRoutineCodeVersionsResponseBody.CodeVersions] = []
            for v in value {
                if v != nil {
                    var model = ListRoutineCodeVersionsResponseBody.CodeVersions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.codeVersions = tmp
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class ListRoutineCodeVersionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRoutineCodeVersionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRoutineCodeVersionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRoutineRelatedRecordsRequest : Tea.TeaModel {
    public var name: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var searchKeyWord: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchKeyWord != nil {
            map["SearchKeyWord"] = self.searchKeyWord!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SearchKeyWord"] as? String {
            self.searchKeyWord = value
        }
    }
}

public class ListRoutineRelatedRecordsResponseBody : Tea.TeaModel {
    public class RelatedRecords : Tea.TeaModel {
        public var recordId: Int64?

        public var recordName: String?

        public var siteId: Int64?

        public var siteName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.recordId != nil {
                map["RecordId"] = self.recordId!
            }
            if self.recordName != nil {
                map["RecordName"] = self.recordName!
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            if self.siteName != nil {
                map["SiteName"] = self.siteName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RecordId"] as? Int64 {
                self.recordId = value
            }
            if let value = dict["RecordName"] as? String {
                self.recordName = value
            }
            if let value = dict["SiteId"] as? Int64 {
                self.siteId = value
            }
            if let value = dict["SiteName"] as? String {
                self.siteName = value
            }
        }
    }
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var relatedRecords: [ListRoutineRelatedRecordsResponseBody.RelatedRecords]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.relatedRecords != nil {
            var tmp : [Any] = []
            for k in self.relatedRecords! {
                tmp.append(k.toMap())
            }
            map["RelatedRecords"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RelatedRecords"] as? [Any?] {
            var tmp : [ListRoutineRelatedRecordsResponseBody.RelatedRecords] = []
            for v in value {
                if v != nil {
                    var model = ListRoutineRelatedRecordsResponseBody.RelatedRecords()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.relatedRecords = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class ListRoutineRelatedRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRoutineRelatedRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRoutineRelatedRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRoutineRoutesRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var routineName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.routineName != nil {
            map["RoutineName"] = self.routineName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RoutineName"] as? String {
            self.routineName = value
        }
    }
}

public class ListRoutineRoutesResponseBody : Tea.TeaModel {
    public class Configs : Tea.TeaModel {
        public var bypass: String?

        public var configId: Int64?

        public var configType: String?

        public var mode: String?

        public var routeEnable: String?

        public var routeName: String?

        public var routineName: String?

        public var rule: String?

        public var sequence: Int32?

        public var siteId: Int64?

        public var siteName: String?

        public var siteVersion: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bypass != nil {
                map["Bypass"] = self.bypass!
            }
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.configType != nil {
                map["ConfigType"] = self.configType!
            }
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            if self.routeEnable != nil {
                map["RouteEnable"] = self.routeEnable!
            }
            if self.routeName != nil {
                map["RouteName"] = self.routeName!
            }
            if self.routineName != nil {
                map["RoutineName"] = self.routineName!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            if self.siteName != nil {
                map["SiteName"] = self.siteName!
            }
            if self.siteVersion != nil {
                map["SiteVersion"] = self.siteVersion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Bypass"] as? String {
                self.bypass = value
            }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["ConfigType"] as? String {
                self.configType = value
            }
            if let value = dict["Mode"] as? String {
                self.mode = value
            }
            if let value = dict["RouteEnable"] as? String {
                self.routeEnable = value
            }
            if let value = dict["RouteName"] as? String {
                self.routeName = value
            }
            if let value = dict["RoutineName"] as? String {
                self.routineName = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["SiteId"] as? Int64 {
                self.siteId = value
            }
            if let value = dict["SiteName"] as? String {
                self.siteName = value
            }
            if let value = dict["SiteVersion"] as? Int32 {
                self.siteVersion = value
            }
        }
    }
    public var configs: [ListRoutineRoutesResponseBody.Configs]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [ListRoutineRoutesResponseBody.Configs] = []
            for v in value {
                if v != nil {
                    var model = ListRoutineRoutesResponseBody.Configs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListRoutineRoutesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRoutineRoutesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRoutineRoutesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListScheduledPreloadExecutionsRequest : Tea.TeaModel {
    public var id: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
    }
}

public class ListScheduledPreloadExecutionsResponseBody : Tea.TeaModel {
    public class Executions : Tea.TeaModel {
        public var aliUid: String?

        public var endTime: String?

        public var id: String?

        public var interval: Int32?

        public var jobId: String?

        public var sliceLen: Int32?

        public var startTime: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliUid != nil {
                map["AliUid"] = self.aliUid!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.sliceLen != nil {
                map["SliceLen"] = self.sliceLen!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AliUid"] as? String {
                self.aliUid = value
            }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["SliceLen"] as? Int32 {
                self.sliceLen = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var executions: [ListScheduledPreloadExecutionsResponseBody.Executions]?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.executions != nil {
            var tmp : [Any] = []
            for k in self.executions! {
                tmp.append(k.toMap())
            }
            map["Executions"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Executions"] as? [Any?] {
            var tmp : [ListScheduledPreloadExecutionsResponseBody.Executions] = []
            for v in value {
                if v != nil {
                    var model = ListScheduledPreloadExecutionsResponseBody.Executions()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.executions = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListScheduledPreloadExecutionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListScheduledPreloadExecutionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListScheduledPreloadExecutionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListScheduledPreloadJobsRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var siteId: Int64?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class ListScheduledPreloadJobsResponseBody : Tea.TeaModel {
    public class Jobs : Tea.TeaModel {
        public var aliUid: String?

        public var createdAt: String?

        public var domains: String?

        public var errorInfo: String?

        public var executionCount: Int32?

        public var failedFileOss: String?

        public var fileId: String?

        public var id: String?

        public var insertWay: String?

        public var name: String?

        public var siteId: Int64?

        public var taskSubmitted: Int32?

        public var taskType: String?

        public var urlCount: Int32?

        public var urlSubmitted: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aliUid != nil {
                map["AliUid"] = self.aliUid!
            }
            if self.createdAt != nil {
                map["CreatedAt"] = self.createdAt!
            }
            if self.domains != nil {
                map["Domains"] = self.domains!
            }
            if self.errorInfo != nil {
                map["ErrorInfo"] = self.errorInfo!
            }
            if self.executionCount != nil {
                map["ExecutionCount"] = self.executionCount!
            }
            if self.failedFileOss != nil {
                map["FailedFileOss"] = self.failedFileOss!
            }
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.insertWay != nil {
                map["InsertWay"] = self.insertWay!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            if self.taskSubmitted != nil {
                map["TaskSubmitted"] = self.taskSubmitted!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            if self.urlCount != nil {
                map["UrlCount"] = self.urlCount!
            }
            if self.urlSubmitted != nil {
                map["UrlSubmitted"] = self.urlSubmitted!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AliUid"] as? String {
                self.aliUid = value
            }
            if let value = dict["CreatedAt"] as? String {
                self.createdAt = value
            }
            if let value = dict["Domains"] as? String {
                self.domains = value
            }
            if let value = dict["ErrorInfo"] as? String {
                self.errorInfo = value
            }
            if let value = dict["ExecutionCount"] as? Int32 {
                self.executionCount = value
            }
            if let value = dict["FailedFileOss"] as? String {
                self.failedFileOss = value
            }
            if let value = dict["FileId"] as? String {
                self.fileId = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["InsertWay"] as? String {
                self.insertWay = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["SiteId"] as? Int64 {
                self.siteId = value
            }
            if let value = dict["TaskSubmitted"] as? Int32 {
                self.taskSubmitted = value
            }
            if let value = dict["TaskType"] as? String {
                self.taskType = value
            }
            if let value = dict["UrlCount"] as? Int32 {
                self.urlCount = value
            }
            if let value = dict["UrlSubmitted"] as? Int32 {
                self.urlSubmitted = value
            }
        }
    }
    public var jobs: [ListScheduledPreloadJobsResponseBody.Jobs]?

    public var requestId: String?

    public var totalCount: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobs != nil {
            var tmp : [Any] = []
            for k in self.jobs! {
                tmp.append(k.toMap())
            }
            map["Jobs"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Jobs"] as? [Any?] {
            var tmp : [ListScheduledPreloadJobsResponseBody.Jobs] = []
            for v in value {
                if v != nil {
                    var model = ListScheduledPreloadJobsResponseBody.Jobs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.jobs = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? String {
            self.totalCount = value
        }
    }
}

public class ListScheduledPreloadJobsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListScheduledPreloadJobsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListScheduledPreloadJobsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSiteDeliveryTasksRequest : Tea.TeaModel {
    public var businessType: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListSiteDeliveryTasksResponseBody : Tea.TeaModel {
    public class Tasks : Tea.TeaModel {
        public var businessType: String?

        public var dataCenter: String?

        public var deliveryType: String?

        public var status: String?

        public var taskName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.businessType != nil {
                map["BusinessType"] = self.businessType!
            }
            if self.dataCenter != nil {
                map["DataCenter"] = self.dataCenter!
            }
            if self.deliveryType != nil {
                map["DeliveryType"] = self.deliveryType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BusinessType"] as? String {
                self.businessType = value
            }
            if let value = dict["DataCenter"] as? String {
                self.dataCenter = value
            }
            if let value = dict["DeliveryType"] as? String {
                self.deliveryType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var tasks: [ListSiteDeliveryTasksResponseBody.Tasks]?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tasks != nil {
            var tmp : [Any] = []
            for k in self.tasks! {
                tmp.append(k.toMap())
            }
            map["Tasks"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Tasks"] as? [Any?] {
            var tmp : [ListSiteDeliveryTasksResponseBody.Tasks] = []
            for v in value {
                if v != nil {
                    var model = ListSiteDeliveryTasksResponseBody.Tasks()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tasks = tmp
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListSiteDeliveryTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSiteDeliveryTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSiteDeliveryTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSiteRoutesRequest : Tea.TeaModel {
    public var configId: Int64?

    public var configType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var routeName: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.configType != nil {
            map["ConfigType"] = self.configType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.routeName != nil {
            map["RouteName"] = self.routeName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ConfigType"] as? String {
            self.configType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RouteName"] as? String {
            self.routeName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListSiteRoutesResponseBody : Tea.TeaModel {
    public class Configs : Tea.TeaModel {
        public var bypass: String?

        public var configId: Int64?

        public var configType: String?

        public var mode: String?

        public var routeEnable: String?

        public var routeName: String?

        public var routineName: String?

        public var rule: String?

        public var sequence: Int32?

        public var siteVersion: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bypass != nil {
                map["Bypass"] = self.bypass!
            }
            if self.configId != nil {
                map["ConfigId"] = self.configId!
            }
            if self.configType != nil {
                map["ConfigType"] = self.configType!
            }
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            if self.routeEnable != nil {
                map["RouteEnable"] = self.routeEnable!
            }
            if self.routeName != nil {
                map["RouteName"] = self.routeName!
            }
            if self.routineName != nil {
                map["RoutineName"] = self.routineName!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.siteVersion != nil {
                map["SiteVersion"] = self.siteVersion!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Bypass"] as? String {
                self.bypass = value
            }
            if let value = dict["ConfigId"] as? Int64 {
                self.configId = value
            }
            if let value = dict["ConfigType"] as? String {
                self.configType = value
            }
            if let value = dict["Mode"] as? String {
                self.mode = value
            }
            if let value = dict["RouteEnable"] as? String {
                self.routeEnable = value
            }
            if let value = dict["RouteName"] as? String {
                self.routeName = value
            }
            if let value = dict["RoutineName"] as? String {
                self.routineName = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["SiteVersion"] as? Int32 {
                self.siteVersion = value
            }
        }
    }
    public var configs: [ListSiteRoutesResponseBody.Configs]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configs != nil {
            var tmp : [Any] = []
            for k in self.configs! {
                tmp.append(k.toMap())
            }
            map["Configs"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Configs"] as? [Any?] {
            var tmp : [ListSiteRoutesResponseBody.Configs] = []
            for v in value {
                if v != nil {
                    var model = ListSiteRoutesResponseBody.Configs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.configs = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListSiteRoutesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSiteRoutesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSiteRoutesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSitesRequest : Tea.TeaModel {
    public class TagFilter : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var accessType: String?

    public var coverage: String?

    public var onlyEnterprise: Bool?

    public var orderBy: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var planSubscribeType: String?

    public var resourceGroupId: String?

    public var siteName: String?

    public var siteSearchType: String?

    public var status: String?

    public var tagFilter: [ListSitesRequest.TagFilter]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessType != nil {
            map["AccessType"] = self.accessType!
        }
        if self.coverage != nil {
            map["Coverage"] = self.coverage!
        }
        if self.onlyEnterprise != nil {
            map["OnlyEnterprise"] = self.onlyEnterprise!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.planSubscribeType != nil {
            map["PlanSubscribeType"] = self.planSubscribeType!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.siteSearchType != nil {
            map["SiteSearchType"] = self.siteSearchType!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tagFilter != nil {
            var tmp : [Any] = []
            for k in self.tagFilter! {
                tmp.append(k.toMap())
            }
            map["TagFilter"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessType"] as? String {
            self.accessType = value
        }
        if let value = dict["Coverage"] as? String {
            self.coverage = value
        }
        if let value = dict["OnlyEnterprise"] as? Bool {
            self.onlyEnterprise = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PlanSubscribeType"] as? String {
            self.planSubscribeType = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["SiteSearchType"] as? String {
            self.siteSearchType = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TagFilter"] as? [Any?] {
            var tmp : [ListSitesRequest.TagFilter] = []
            for v in value {
                if v != nil {
                    var model = ListSitesRequest.TagFilter()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tagFilter = tmp
        }
    }
}

public class ListSitesShrinkRequest : Tea.TeaModel {
    public var accessType: String?

    public var coverage: String?

    public var onlyEnterprise: Bool?

    public var orderBy: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var planSubscribeType: String?

    public var resourceGroupId: String?

    public var siteName: String?

    public var siteSearchType: String?

    public var status: String?

    public var tagFilterShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessType != nil {
            map["AccessType"] = self.accessType!
        }
        if self.coverage != nil {
            map["Coverage"] = self.coverage!
        }
        if self.onlyEnterprise != nil {
            map["OnlyEnterprise"] = self.onlyEnterprise!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.planSubscribeType != nil {
            map["PlanSubscribeType"] = self.planSubscribeType!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.siteSearchType != nil {
            map["SiteSearchType"] = self.siteSearchType!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.tagFilterShrink != nil {
            map["TagFilter"] = self.tagFilterShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessType"] as? String {
            self.accessType = value
        }
        if let value = dict["Coverage"] as? String {
            self.coverage = value
        }
        if let value = dict["OnlyEnterprise"] as? Bool {
            self.onlyEnterprise = value
        }
        if let value = dict["OrderBy"] as? String {
            self.orderBy = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PlanSubscribeType"] as? String {
            self.planSubscribeType = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["SiteSearchType"] as? String {
            self.siteSearchType = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TagFilter"] as? String {
            self.tagFilterShrink = value
        }
    }
}

public class ListSitesResponseBody : Tea.TeaModel {
    public class Sites : Tea.TeaModel {
        public var accessType: String?

        public var cnameZone: String?

        public var coverage: String?

        public var createTime: String?

        public var instanceId: String?

        public var nameServerList: String?

        public var offlineReason: String?

        public var planName: String?

        public var planSpecName: String?

        public var resourceGroupId: String?

        public var siteId: Int64?

        public var siteName: String?

        public var status: String?

        public var tags: [String: Any]?

        public var updateTime: String?

        public var verifyCode: String?

        public var visitTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessType != nil {
                map["AccessType"] = self.accessType!
            }
            if self.cnameZone != nil {
                map["CnameZone"] = self.cnameZone!
            }
            if self.coverage != nil {
                map["Coverage"] = self.coverage!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.nameServerList != nil {
                map["NameServerList"] = self.nameServerList!
            }
            if self.offlineReason != nil {
                map["OfflineReason"] = self.offlineReason!
            }
            if self.planName != nil {
                map["PlanName"] = self.planName!
            }
            if self.planSpecName != nil {
                map["PlanSpecName"] = self.planSpecName!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.siteId != nil {
                map["SiteId"] = self.siteId!
            }
            if self.siteName != nil {
                map["SiteName"] = self.siteName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tags != nil {
                map["Tags"] = self.tags!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            if self.verifyCode != nil {
                map["VerifyCode"] = self.verifyCode!
            }
            if self.visitTime != nil {
                map["VisitTime"] = self.visitTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessType"] as? String {
                self.accessType = value
            }
            if let value = dict["CnameZone"] as? String {
                self.cnameZone = value
            }
            if let value = dict["Coverage"] as? String {
                self.coverage = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["NameServerList"] as? String {
                self.nameServerList = value
            }
            if let value = dict["OfflineReason"] as? String {
                self.offlineReason = value
            }
            if let value = dict["PlanName"] as? String {
                self.planName = value
            }
            if let value = dict["PlanSpecName"] as? String {
                self.planSpecName = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["SiteId"] as? Int64 {
                self.siteId = value
            }
            if let value = dict["SiteName"] as? String {
                self.siteName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Tags"] as? [String: Any] {
                self.tags = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
            if let value = dict["VerifyCode"] as? String {
                self.verifyCode = value
            }
            if let value = dict["VisitTime"] as? String {
                self.visitTime = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var sites: [ListSitesResponseBody.Sites]?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sites != nil {
            var tmp : [Any] = []
            for k in self.sites! {
                tmp.append(k.toMap())
            }
            map["Sites"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Sites"] as? [Any?] {
            var tmp : [ListSitesResponseBody.Sites] = []
            for v in value {
                if v != nil {
                    var model = ListSitesResponseBody.Sites()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.sites = tmp
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListSitesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSitesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSitesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTagResourcesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var maxItem: Int32?

    public var nextToken: String?

    public var ownerId: Int64?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceType: String?

    public var securityToken: String?

    public var tag: [ListTagResourcesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.maxItem != nil {
            map["MaxItem"] = self.maxItem!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaxItem"] as? Int32 {
            self.maxItem = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [ListTagResourcesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = ListTagResourcesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class ListTagResourcesResponseBody : Tea.TeaModel {
    public class TagResources : Tea.TeaModel {
        public var resourceId: String?

        public var resourceType: String?

        public var tagKey: String?

        public var tagValue: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.tagKey != nil {
                map["TagKey"] = self.tagKey!
            }
            if self.tagValue != nil {
                map["TagValue"] = self.tagValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["TagKey"] as? String {
                self.tagKey = value
            }
            if let value = dict["TagValue"] as? String {
                self.tagValue = value
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var tagResources: [ListTagResourcesResponseBody.TagResources]?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tagResources != nil {
            var tmp : [Any] = []
            for k in self.tagResources! {
                tmp.append(k.toMap())
            }
            map["TagResources"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TagResources"] as? [Any?] {
            var tmp : [ListTagResourcesResponseBody.TagResources] = []
            for v in value {
                if v != nil {
                    var model = ListTagResourcesResponseBody.TagResources()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tagResources = tmp
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListTagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUploadTasksRequest : Tea.TeaModel {
    public var endTime: String?

    public var siteId: Int64?

    public var startTime: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class ListUploadTasksResponseBody : Tea.TeaModel {
    public class Tasks : Tea.TeaModel {
        public var createTime: String?

        public var description_: String?

        public var errorCode: String?

        public var status: String?

        public var type: String?

        public var uploadId: String?

        public var uploadTaskName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.uploadId != nil {
                map["UploadId"] = self.uploadId!
            }
            if self.uploadTaskName != nil {
                map["UploadTaskName"] = self.uploadTaskName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UploadId"] as? String {
                self.uploadId = value
            }
            if let value = dict["UploadTaskName"] as? String {
                self.uploadTaskName = value
            }
        }
    }
    public var requestId: String?

    public var tasks: [ListUploadTasksResponseBody.Tasks]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tasks != nil {
            var tmp : [Any] = []
            for k in self.tasks! {
                tmp.append(k.toMap())
            }
            map["Tasks"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Tasks"] as? [Any?] {
            var tmp : [ListUploadTasksResponseBody.Tasks] = []
            for v in value {
                if v != nil {
                    var model = ListUploadTasksResponseBody.Tasks()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tasks = tmp
        }
    }
}

public class ListUploadTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUploadTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUploadTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserDeliveryTasksRequest : Tea.TeaModel {
    public var businessType: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
    }
}

public class ListUserDeliveryTasksResponseBody : Tea.TeaModel {
    public class Tasks : Tea.TeaModel {
        public var businessType: String?

        public var dataCenter: String?

        public var deliveryType: String?

        public var status: String?

        public var taskName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.businessType != nil {
                map["BusinessType"] = self.businessType!
            }
            if self.dataCenter != nil {
                map["DataCenter"] = self.dataCenter!
            }
            if self.deliveryType != nil {
                map["DeliveryType"] = self.deliveryType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskName != nil {
                map["TaskName"] = self.taskName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BusinessType"] as? String {
                self.businessType = value
            }
            if let value = dict["DataCenter"] as? String {
                self.dataCenter = value
            }
            if let value = dict["DeliveryType"] as? String {
                self.deliveryType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskName"] as? String {
                self.taskName = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var tasks: [ListUserDeliveryTasksResponseBody.Tasks]?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tasks != nil {
            var tmp : [Any] = []
            for k in self.tasks! {
                tmp.append(k.toMap())
            }
            map["Tasks"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Tasks"] as? [Any?] {
            var tmp : [ListUserDeliveryTasksResponseBody.Tasks] = []
            for v in value {
                if v != nil {
                    var model = ListUserDeliveryTasksResponseBody.Tasks()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tasks = tmp
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListUserDeliveryTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserDeliveryTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserDeliveryTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserRatePlanInstancesRequest : Tea.TeaModel {
    public var checkRemainingSiteQuota: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var remainingExpireDays: Int32?

    public var sortBy: String?

    public var sortOrder: String?

    public var status: String?

    public var subscribeType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.checkRemainingSiteQuota != nil {
            map["CheckRemainingSiteQuota"] = self.checkRemainingSiteQuota!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.remainingExpireDays != nil {
            map["RemainingExpireDays"] = self.remainingExpireDays!
        }
        if self.sortBy != nil {
            map["SortBy"] = self.sortBy!
        }
        if self.sortOrder != nil {
            map["SortOrder"] = self.sortOrder!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.subscribeType != nil {
            map["SubscribeType"] = self.subscribeType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CheckRemainingSiteQuota"] as? String {
            self.checkRemainingSiteQuota = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RemainingExpireDays"] as? Int32 {
            self.remainingExpireDays = value
        }
        if let value = dict["SortBy"] as? String {
            self.sortBy = value
        }
        if let value = dict["SortOrder"] as? String {
            self.sortOrder = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["SubscribeType"] as? String {
            self.subscribeType = value
        }
    }
}

public class ListUserRatePlanInstancesResponseBody : Tea.TeaModel {
    public class InstanceInfo : Tea.TeaModel {
        public class Sites : Tea.TeaModel {
            public var siteId: Int64?

            public var siteName: String?

            public var siteStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.siteId != nil {
                    map["SiteId"] = self.siteId!
                }
                if self.siteName != nil {
                    map["SiteName"] = self.siteName!
                }
                if self.siteStatus != nil {
                    map["SiteStatus"] = self.siteStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SiteId"] as? Int64 {
                    self.siteId = value
                }
                if let value = dict["SiteName"] as? String {
                    self.siteName = value
                }
                if let value = dict["SiteStatus"] as? String {
                    self.siteStatus = value
                }
            }
        }
        public var billingMode: String?

        public var botInstanceLevel: String?

        public var botRequest: String?

        public var coverages: String?

        public var createTime: String?

        public var crossborderTraffic: String?

        public var ddosBurstableDomesticProtection: String?

        public var ddosBurstableOverseasProtection: String?

        public var ddosInstanceLevel: String?

        public var duration: Int32?

        public var edgeRoutineRquest: String?

        public var edgeWafRequest: String?

        public var expireTime: String?

        public var instanceId: String?

        public var layer4Traffic: String?

        public var layer4TrafficIntl: String?

        public var planName: String?

        public var planTraffic: String?

        public var planType: String?

        public var siteQuota: String?

        public var sites: [ListUserRatePlanInstancesResponseBody.InstanceInfo.Sites]?

        public var smartRoutingRequest: String?

        public var staticRequest: String?

        public var status: String?

        public var subscribeType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.billingMode != nil {
                map["BillingMode"] = self.billingMode!
            }
            if self.botInstanceLevel != nil {
                map["BotInstanceLevel"] = self.botInstanceLevel!
            }
            if self.botRequest != nil {
                map["BotRequest"] = self.botRequest!
            }
            if self.coverages != nil {
                map["Coverages"] = self.coverages!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.crossborderTraffic != nil {
                map["CrossborderTraffic"] = self.crossborderTraffic!
            }
            if self.ddosBurstableDomesticProtection != nil {
                map["DdosBurstableDomesticProtection"] = self.ddosBurstableDomesticProtection!
            }
            if self.ddosBurstableOverseasProtection != nil {
                map["DdosBurstableOverseasProtection"] = self.ddosBurstableOverseasProtection!
            }
            if self.ddosInstanceLevel != nil {
                map["DdosInstanceLevel"] = self.ddosInstanceLevel!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.edgeRoutineRquest != nil {
                map["EdgeRoutineRquest"] = self.edgeRoutineRquest!
            }
            if self.edgeWafRequest != nil {
                map["EdgeWafRequest"] = self.edgeWafRequest!
            }
            if self.expireTime != nil {
                map["ExpireTime"] = self.expireTime!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.layer4Traffic != nil {
                map["Layer4Traffic"] = self.layer4Traffic!
            }
            if self.layer4TrafficIntl != nil {
                map["Layer4TrafficIntl"] = self.layer4TrafficIntl!
            }
            if self.planName != nil {
                map["PlanName"] = self.planName!
            }
            if self.planTraffic != nil {
                map["PlanTraffic"] = self.planTraffic!
            }
            if self.planType != nil {
                map["PlanType"] = self.planType!
            }
            if self.siteQuota != nil {
                map["SiteQuota"] = self.siteQuota!
            }
            if self.sites != nil {
                var tmp : [Any] = []
                for k in self.sites! {
                    tmp.append(k.toMap())
                }
                map["Sites"] = tmp
            }
            if self.smartRoutingRequest != nil {
                map["SmartRoutingRequest"] = self.smartRoutingRequest!
            }
            if self.staticRequest != nil {
                map["StaticRequest"] = self.staticRequest!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.subscribeType != nil {
                map["SubscribeType"] = self.subscribeType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BillingMode"] as? String {
                self.billingMode = value
            }
            if let value = dict["BotInstanceLevel"] as? String {
                self.botInstanceLevel = value
            }
            if let value = dict["BotRequest"] as? String {
                self.botRequest = value
            }
            if let value = dict["Coverages"] as? String {
                self.coverages = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CrossborderTraffic"] as? String {
                self.crossborderTraffic = value
            }
            if let value = dict["DdosBurstableDomesticProtection"] as? String {
                self.ddosBurstableDomesticProtection = value
            }
            if let value = dict["DdosBurstableOverseasProtection"] as? String {
                self.ddosBurstableOverseasProtection = value
            }
            if let value = dict["DdosInstanceLevel"] as? String {
                self.ddosInstanceLevel = value
            }
            if let value = dict["Duration"] as? Int32 {
                self.duration = value
            }
            if let value = dict["EdgeRoutineRquest"] as? String {
                self.edgeRoutineRquest = value
            }
            if let value = dict["EdgeWafRequest"] as? String {
                self.edgeWafRequest = value
            }
            if let value = dict["ExpireTime"] as? String {
                self.expireTime = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["Layer4Traffic"] as? String {
                self.layer4Traffic = value
            }
            if let value = dict["Layer4TrafficIntl"] as? String {
                self.layer4TrafficIntl = value
            }
            if let value = dict["PlanName"] as? String {
                self.planName = value
            }
            if let value = dict["PlanTraffic"] as? String {
                self.planTraffic = value
            }
            if let value = dict["PlanType"] as? String {
                self.planType = value
            }
            if let value = dict["SiteQuota"] as? String {
                self.siteQuota = value
            }
            if let value = dict["Sites"] as? [Any?] {
                var tmp : [ListUserRatePlanInstancesResponseBody.InstanceInfo.Sites] = []
                for v in value {
                    if v != nil {
                        var model = ListUserRatePlanInstancesResponseBody.InstanceInfo.Sites()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.sites = tmp
            }
            if let value = dict["SmartRoutingRequest"] as? String {
                self.smartRoutingRequest = value
            }
            if let value = dict["StaticRequest"] as? String {
                self.staticRequest = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["SubscribeType"] as? String {
                self.subscribeType = value
            }
        }
    }
    public var instanceInfo: [ListUserRatePlanInstancesResponseBody.InstanceInfo]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var totalPage: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceInfo != nil {
            var tmp : [Any] = []
            for k in self.instanceInfo! {
                tmp.append(k.toMap())
            }
            map["InstanceInfo"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.totalPage != nil {
            map["TotalPage"] = self.totalPage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceInfo"] as? [Any?] {
            var tmp : [ListUserRatePlanInstancesResponseBody.InstanceInfo] = []
            for v in value {
                if v != nil {
                    var model = ListUserRatePlanInstancesResponseBody.InstanceInfo()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.instanceInfo = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TotalPage"] as? Int32 {
            self.totalPage = value
        }
    }
}

public class ListUserRatePlanInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserRatePlanInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserRatePlanInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserRoutinesRequest : Tea.TeaModel {
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var searchKeyWord: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchKeyWord != nil {
            map["SearchKeyWord"] = self.searchKeyWord!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SearchKeyWord"] as? String {
            self.searchKeyWord = value
        }
    }
}

public class ListUserRoutinesResponseBody : Tea.TeaModel {
    public class Routines : Tea.TeaModel {
        public var createTime: String?

        public var description_: String?

        public var routineName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.routineName != nil {
                map["RoutineName"] = self.routineName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["RoutineName"] as? String {
                self.routineName = value
            }
        }
    }
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var quotaRoutineNumber: Int64?

    public var requestId: String?

    public var routines: [ListUserRoutinesResponseBody.Routines]?

    public var totalCount: Int64?

    public var usedRoutineNumber: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.quotaRoutineNumber != nil {
            map["QuotaRoutineNumber"] = self.quotaRoutineNumber!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.routines != nil {
            var tmp : [Any] = []
            for k in self.routines! {
                tmp.append(k.toMap())
            }
            map["Routines"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.usedRoutineNumber != nil {
            map["UsedRoutineNumber"] = self.usedRoutineNumber!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["QuotaRoutineNumber"] as? Int64 {
            self.quotaRoutineNumber = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Routines"] as? [Any?] {
            var tmp : [ListUserRoutinesResponseBody.Routines] = []
            for v in value {
                if v != nil {
                    var model = ListUserRoutinesResponseBody.Routines()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.routines = tmp
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
        if let value = dict["UsedRoutineNumber"] as? Int64 {
            self.usedRoutineNumber = value
        }
    }
}

public class ListUserRoutinesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserRoutinesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserRoutinesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWafManagedRulesRequest : Tea.TeaModel {
    public class QueryArgs : Tea.TeaModel {
        public var action: String?

        public var idNameLike: String?

        public var protectionLevels: [Int32]?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.action != nil {
                map["Action"] = self.action!
            }
            if self.idNameLike != nil {
                map["IdNameLike"] = self.idNameLike!
            }
            if self.protectionLevels != nil {
                map["ProtectionLevels"] = self.protectionLevels!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Action"] as? String {
                self.action = value
            }
            if let value = dict["IdNameLike"] as? String {
                self.idNameLike = value
            }
            if let value = dict["ProtectionLevels"] as? [Int32] {
                self.protectionLevels = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var attackType: Int32?

    public var id: Int64?

    public var language: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var protectionLevel: Int32?

    public var queryArgs: ListWafManagedRulesRequest.QueryArgs?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.queryArgs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attackType != nil {
            map["AttackType"] = self.attackType!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.protectionLevel != nil {
            map["ProtectionLevel"] = self.protectionLevel!
        }
        if self.queryArgs != nil {
            map["QueryArgs"] = self.queryArgs?.toMap()
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AttackType"] as? Int32 {
            self.attackType = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProtectionLevel"] as? Int32 {
            self.protectionLevel = value
        }
        if let value = dict["QueryArgs"] as? [String: Any?] {
            var model = ListWafManagedRulesRequest.QueryArgs()
            model.fromMap(value)
            self.queryArgs = model
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListWafManagedRulesShrinkRequest : Tea.TeaModel {
    public var attackType: Int32?

    public var id: Int64?

    public var language: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var protectionLevel: Int32?

    public var queryArgsShrink: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attackType != nil {
            map["AttackType"] = self.attackType!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.protectionLevel != nil {
            map["ProtectionLevel"] = self.protectionLevel!
        }
        if self.queryArgsShrink != nil {
            map["QueryArgs"] = self.queryArgsShrink!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AttackType"] as? Int32 {
            self.attackType = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ProtectionLevel"] as? Int32 {
            self.protectionLevel = value
        }
        if let value = dict["QueryArgs"] as? String {
            self.queryArgsShrink = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListWafManagedRulesResponseBody : Tea.TeaModel {
    public class Rules : Tea.TeaModel {
        public var action: String?

        public var id: Int64?

        public var name: String?

        public var protectionLevel: Int32?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.action != nil {
                map["Action"] = self.action!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.protectionLevel != nil {
                map["ProtectionLevel"] = self.protectionLevel!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Action"] as? String {
                self.action = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProtectionLevel"] as? Int32 {
                self.protectionLevel = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var rules: [ListWafManagedRulesResponseBody.Rules]?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rules != nil {
            var tmp : [Any] = []
            for k in self.rules! {
                tmp.append(k.toMap())
            }
            map["Rules"] = tmp
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rules"] as? [Any?] {
            var tmp : [ListWafManagedRulesResponseBody.Rules] = []
            for v in value {
                if v != nil {
                    var model = ListWafManagedRulesResponseBody.Rules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rules = tmp
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class ListWafManagedRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWafManagedRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWafManagedRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWafPhasesRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListWafPhasesResponseBody : Tea.TeaModel {
    public class Phases : Tea.TeaModel {
        public class Rulesets : Tea.TeaModel {
            public var id: Int64?

            public var name: String?

            public var rules: [WafRuleConfig]?

            public var shared: WafBatchRuleShared?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.shared?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.rules != nil {
                    var tmp : [Any] = []
                    for k in self.rules! {
                        tmp.append(k.toMap())
                    }
                    map["Rules"] = tmp
                }
                if self.shared != nil {
                    map["Shared"] = self.shared?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Rules"] as? [Any?] {
                    var tmp : [WafRuleConfig] = []
                    for v in value {
                        if v != nil {
                            var model = WafRuleConfig()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.rules = tmp
                }
                if let value = dict["Shared"] as? [String: Any?] {
                    var model = WafBatchRuleShared()
                    model.fromMap(value)
                    self.shared = model
                }
            }
        }
        public var phase: String?

        public var rulesets: [ListWafPhasesResponseBody.Phases.Rulesets]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.phase != nil {
                map["Phase"] = self.phase!
            }
            if self.rulesets != nil {
                var tmp : [Any] = []
                for k in self.rulesets! {
                    tmp.append(k.toMap())
                }
                map["Rulesets"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Phase"] as? String {
                self.phase = value
            }
            if let value = dict["Rulesets"] as? [Any?] {
                var tmp : [ListWafPhasesResponseBody.Phases.Rulesets] = []
                for v in value {
                    if v != nil {
                        var model = ListWafPhasesResponseBody.Phases.Rulesets()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.rulesets = tmp
            }
        }
    }
    public var phases: [ListWafPhasesResponseBody.Phases]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.phases != nil {
            var tmp : [Any] = []
            for k in self.phases! {
                tmp.append(k.toMap())
            }
            map["Phases"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Phases"] as? [Any?] {
            var tmp : [ListWafPhasesResponseBody.Phases] = []
            for v in value {
                if v != nil {
                    var model = ListWafPhasesResponseBody.Phases()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.phases = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListWafPhasesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWafPhasesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWafPhasesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWafRulesRequest : Tea.TeaModel {
    public class QueryArgs : Tea.TeaModel {
        public var configValueLike: String?

        public var desc: Bool?

        public var id: Int64?

        public var idNameLike: String?

        public var nameLike: String?

        public var orderBy: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configValueLike != nil {
                map["ConfigValueLike"] = self.configValueLike!
            }
            if self.desc != nil {
                map["Desc"] = self.desc!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.idNameLike != nil {
                map["IdNameLike"] = self.idNameLike!
            }
            if self.nameLike != nil {
                map["NameLike"] = self.nameLike!
            }
            if self.orderBy != nil {
                map["OrderBy"] = self.orderBy!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigValueLike"] as? String {
                self.configValueLike = value
            }
            if let value = dict["Desc"] as? Bool {
                self.desc = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["IdNameLike"] as? String {
                self.idNameLike = value
            }
            if let value = dict["NameLike"] as? String {
                self.nameLike = value
            }
            if let value = dict["OrderBy"] as? String {
                self.orderBy = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var phase: String?

    public var queryArgs: ListWafRulesRequest.QueryArgs?

    public var rulesetId: Int64?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.queryArgs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.queryArgs != nil {
            map["QueryArgs"] = self.queryArgs?.toMap()
        }
        if self.rulesetId != nil {
            map["RulesetId"] = self.rulesetId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["QueryArgs"] as? [String: Any?] {
            var model = ListWafRulesRequest.QueryArgs()
            model.fromMap(value)
            self.queryArgs = model
        }
        if let value = dict["RulesetId"] as? Int64 {
            self.rulesetId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListWafRulesShrinkRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var phase: String?

    public var queryArgsShrink: String?

    public var rulesetId: Int64?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.queryArgsShrink != nil {
            map["QueryArgs"] = self.queryArgsShrink!
        }
        if self.rulesetId != nil {
            map["RulesetId"] = self.rulesetId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["QueryArgs"] as? String {
            self.queryArgsShrink = value
        }
        if let value = dict["RulesetId"] as? Int64 {
            self.rulesetId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListWafRulesResponseBody : Tea.TeaModel {
    public class Rules : Tea.TeaModel {
        public var action: String?

        public var characteristicsFields: [String]?

        public var config: WafRuleConfig?

        public var fields: [String]?

        public var id: Int64?

        public var name: String?

        public var phase: String?

        public var position: Int64?

        public var rulesetId: Int64?

        public var skip: String?

        public var status: String?

        public var tags: [String]?

        public var timer: WafTimer?

        public var type: String?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.config?.validate()
            try self.timer?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.action != nil {
                map["Action"] = self.action!
            }
            if self.characteristicsFields != nil {
                map["CharacteristicsFields"] = self.characteristicsFields!
            }
            if self.config != nil {
                map["Config"] = self.config?.toMap()
            }
            if self.fields != nil {
                map["Fields"] = self.fields!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.phase != nil {
                map["Phase"] = self.phase!
            }
            if self.position != nil {
                map["Position"] = self.position!
            }
            if self.rulesetId != nil {
                map["RulesetId"] = self.rulesetId!
            }
            if self.skip != nil {
                map["Skip"] = self.skip!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tags != nil {
                map["Tags"] = self.tags!
            }
            if self.timer != nil {
                map["Timer"] = self.timer?.toMap()
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Action"] as? String {
                self.action = value
            }
            if let value = dict["CharacteristicsFields"] as? [String] {
                self.characteristicsFields = value
            }
            if let value = dict["Config"] as? [String: Any?] {
                var model = WafRuleConfig()
                model.fromMap(value)
                self.config = model
            }
            if let value = dict["Fields"] as? [String] {
                self.fields = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Phase"] as? String {
                self.phase = value
            }
            if let value = dict["Position"] as? Int64 {
                self.position = value
            }
            if let value = dict["RulesetId"] as? Int64 {
                self.rulesetId = value
            }
            if let value = dict["Skip"] as? String {
                self.skip = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Tags"] as? [String] {
                self.tags = value
            }
            if let value = dict["Timer"] as? [String: Any?] {
                var model = WafTimer()
                model.fromMap(value)
                self.timer = model
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var instanceUsage: Int64?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var rules: [ListWafRulesResponseBody.Rules]?

    public var siteUsage: Int64?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceUsage != nil {
            map["InstanceUsage"] = self.instanceUsage!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rules != nil {
            var tmp : [Any] = []
            for k in self.rules! {
                tmp.append(k.toMap())
            }
            map["Rules"] = tmp
        }
        if self.siteUsage != nil {
            map["SiteUsage"] = self.siteUsage!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceUsage"] as? Int64 {
            self.instanceUsage = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rules"] as? [Any?] {
            var tmp : [ListWafRulesResponseBody.Rules] = []
            for v in value {
                if v != nil {
                    var model = ListWafRulesResponseBody.Rules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rules = tmp
        }
        if let value = dict["SiteUsage"] as? Int64 {
            self.siteUsage = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class ListWafRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWafRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWafRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWafRulesetsRequest : Tea.TeaModel {
    public class QueryArgs : Tea.TeaModel {
        public var anyLike: String?

        public var desc: Bool?

        public var nameLike: String?

        public var orderBy: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.anyLike != nil {
                map["AnyLike"] = self.anyLike!
            }
            if self.desc != nil {
                map["Desc"] = self.desc!
            }
            if self.nameLike != nil {
                map["NameLike"] = self.nameLike!
            }
            if self.orderBy != nil {
                map["OrderBy"] = self.orderBy!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AnyLike"] as? String {
                self.anyLike = value
            }
            if let value = dict["Desc"] as? Bool {
                self.desc = value
            }
            if let value = dict["NameLike"] as? String {
                self.nameLike = value
            }
            if let value = dict["OrderBy"] as? String {
                self.orderBy = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var phase: String?

    public var queryArgs: ListWafRulesetsRequest.QueryArgs?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.queryArgs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.queryArgs != nil {
            map["QueryArgs"] = self.queryArgs?.toMap()
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["QueryArgs"] as? [String: Any?] {
            var model = ListWafRulesetsRequest.QueryArgs()
            model.fromMap(value)
            self.queryArgs = model
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListWafRulesetsShrinkRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var phase: String?

    public var queryArgsShrink: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.queryArgsShrink != nil {
            map["QueryArgs"] = self.queryArgsShrink!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["QueryArgs"] as? String {
            self.queryArgsShrink = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class ListWafRulesetsResponseBody : Tea.TeaModel {
    public class Rulesets : Tea.TeaModel {
        public var fields: [String]?

        public var id: Int64?

        public var name: String?

        public var phase: String?

        public var status: String?

        public var target: String?

        public var types: [String]?

        public var updateTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fields != nil {
                map["Fields"] = self.fields!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.phase != nil {
                map["Phase"] = self.phase!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.target != nil {
                map["Target"] = self.target!
            }
            if self.types != nil {
                map["Types"] = self.types!
            }
            if self.updateTime != nil {
                map["UpdateTime"] = self.updateTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Fields"] as? [String] {
                self.fields = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Phase"] as? String {
                self.phase = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Target"] as? String {
                self.target = value
            }
            if let value = dict["Types"] as? [String] {
                self.types = value
            }
            if let value = dict["UpdateTime"] as? String {
                self.updateTime = value
            }
        }
    }
    public var instanceUsage: Int64?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var rulesets: [ListWafRulesetsResponseBody.Rulesets]?

    public var siteUsage: Int64?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceUsage != nil {
            map["InstanceUsage"] = self.instanceUsage!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rulesets != nil {
            var tmp : [Any] = []
            for k in self.rulesets! {
                tmp.append(k.toMap())
            }
            map["Rulesets"] = tmp
        }
        if self.siteUsage != nil {
            map["SiteUsage"] = self.siteUsage!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceUsage"] as? Int64 {
            self.instanceUsage = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rulesets"] as? [Any?] {
            var tmp : [ListWafRulesetsResponseBody.Rulesets] = []
            for v in value {
                if v != nil {
                    var model = ListWafRulesetsResponseBody.Rulesets()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rulesets = tmp
        }
        if let value = dict["SiteUsage"] as? Int64 {
            self.siteUsage = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class ListWafRulesetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWafRulesetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWafRulesetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWafTemplateRulesRequest : Tea.TeaModel {
    public class QueryArgs : Tea.TeaModel {
        public var kinds: [String]?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.kinds != nil {
                map["Kinds"] = self.kinds!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Kinds"] as? [String] {
                self.kinds = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var phase: String?

    public var queryArgs: ListWafTemplateRulesRequest.QueryArgs?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.queryArgs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.queryArgs != nil {
            map["QueryArgs"] = self.queryArgs?.toMap()
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["QueryArgs"] as? [String: Any?] {
            var model = ListWafTemplateRulesRequest.QueryArgs()
            model.fromMap(value)
            self.queryArgs = model
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListWafTemplateRulesShrinkRequest : Tea.TeaModel {
    public var phase: String?

    public var queryArgsShrink: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.queryArgsShrink != nil {
            map["QueryArgs"] = self.queryArgsShrink!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["QueryArgs"] as? String {
            self.queryArgsShrink = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListWafTemplateRulesResponseBody : Tea.TeaModel {
    public class Rules : Tea.TeaModel {
        public var config: WafRuleConfig?

        public var name: String?

        public var phase: String?

        public var status: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.config?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.config != nil {
                map["Config"] = self.config?.toMap()
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.phase != nil {
                map["Phase"] = self.phase!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Config"] as? [String: Any?] {
                var model = WafRuleConfig()
                model.fromMap(value)
                self.config = model
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Phase"] as? String {
                self.phase = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var requestId: String?

    public var rules: [ListWafTemplateRulesResponseBody.Rules]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rules != nil {
            var tmp : [Any] = []
            for k in self.rules! {
                tmp.append(k.toMap())
            }
            map["Rules"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Rules"] as? [Any?] {
            var tmp : [ListWafTemplateRulesResponseBody.Rules] = []
            for v in value {
                if v != nil {
                    var model = ListWafTemplateRulesResponseBody.Rules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rules = tmp
        }
    }
}

public class ListWafTemplateRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWafTemplateRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWafTemplateRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWafUsageOfRulesRequest : Tea.TeaModel {
    public var phase: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.phase != nil {
            map["Phase"] = self.phase!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Phase"] as? String {
            self.phase = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class ListWafUsageOfRulesResponseBody : Tea.TeaModel {
    public class Sites : Tea.TeaModel {
        public var id: Int64?

        public var name: String?

        public var usage: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.usage != nil {
                map["Usage"] = self.usage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Usage"] as? Int64 {
                self.usage = value
            }
        }
    }
    public var requestId: String?

    public var sites: [ListWafUsageOfRulesResponseBody.Sites]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sites != nil {
            var tmp : [Any] = []
            for k in self.sites! {
                tmp.append(k.toMap())
            }
            map["Sites"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Sites"] as? [Any?] {
            var tmp : [ListWafUsageOfRulesResponseBody.Sites] = []
            for v in value {
                if v != nil {
                    var model = ListWafUsageOfRulesResponseBody.Sites()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.sites = tmp
        }
    }
}

public class ListWafUsageOfRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWafUsageOfRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWafUsageOfRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWaitingRoomEventsRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var waitingRoomEventId: Int64?

    public var waitingRoomId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.waitingRoomEventId != nil {
            map["WaitingRoomEventId"] = self.waitingRoomEventId!
        }
        if self.waitingRoomId != nil {
            map["WaitingRoomId"] = self.waitingRoomId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["WaitingRoomEventId"] as? Int64 {
            self.waitingRoomEventId = value
        }
        if let value = dict["WaitingRoomId"] as? String {
            self.waitingRoomId = value
        }
    }
}

public class ListWaitingRoomEventsResponseBody : Tea.TeaModel {
    public class WaitingRoomEvents : Tea.TeaModel {
        public var customPageHtml: String?

        public var description_: String?

        public var disableSessionRenewalEnable: String?

        public var enable: String?

        public var endTime: String?

        public var jsonResponseEnable: String?

        public var language: String?

        public var name: String?

        public var newUsersPerMinute: String?

        public var preQueueEnable: String?

        public var preQueueStartTime: String?

        public var queuingMethod: String?

        public var queuingStatusCode: String?

        public var randomPreQueueEnable: String?

        public var sessionDuration: String?

        public var startTime: String?

        public var totalActiveUsers: String?

        public var waitingRoomEventId: Int64?

        public var waitingRoomId: String?

        public var waitingRoomType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customPageHtml != nil {
                map["CustomPageHtml"] = self.customPageHtml!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.disableSessionRenewalEnable != nil {
                map["DisableSessionRenewalEnable"] = self.disableSessionRenewalEnable!
            }
            if self.enable != nil {
                map["Enable"] = self.enable!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.jsonResponseEnable != nil {
                map["JsonResponseEnable"] = self.jsonResponseEnable!
            }
            if self.language != nil {
                map["Language"] = self.language!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.newUsersPerMinute != nil {
                map["NewUsersPerMinute"] = self.newUsersPerMinute!
            }
            if self.preQueueEnable != nil {
                map["PreQueueEnable"] = self.preQueueEnable!
            }
            if self.preQueueStartTime != nil {
                map["PreQueueStartTime"] = self.preQueueStartTime!
            }
            if self.queuingMethod != nil {
                map["QueuingMethod"] = self.queuingMethod!
            }
            if self.queuingStatusCode != nil {
                map["QueuingStatusCode"] = self.queuingStatusCode!
            }
            if self.randomPreQueueEnable != nil {
                map["RandomPreQueueEnable"] = self.randomPreQueueEnable!
            }
            if self.sessionDuration != nil {
                map["SessionDuration"] = self.sessionDuration!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.totalActiveUsers != nil {
                map["TotalActiveUsers"] = self.totalActiveUsers!
            }
            if self.waitingRoomEventId != nil {
                map["WaitingRoomEventId"] = self.waitingRoomEventId!
            }
            if self.waitingRoomId != nil {
                map["WaitingRoomId"] = self.waitingRoomId!
            }
            if self.waitingRoomType != nil {
                map["WaitingRoomType"] = self.waitingRoomType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomPageHtml"] as? String {
                self.customPageHtml = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DisableSessionRenewalEnable"] as? String {
                self.disableSessionRenewalEnable = value
            }
            if let value = dict["Enable"] as? String {
                self.enable = value
            }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["JsonResponseEnable"] as? String {
                self.jsonResponseEnable = value
            }
            if let value = dict["Language"] as? String {
                self.language = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NewUsersPerMinute"] as? String {
                self.newUsersPerMinute = value
            }
            if let value = dict["PreQueueEnable"] as? String {
                self.preQueueEnable = value
            }
            if let value = dict["PreQueueStartTime"] as? String {
                self.preQueueStartTime = value
            }
            if let value = dict["QueuingMethod"] as? String {
                self.queuingMethod = value
            }
            if let value = dict["QueuingStatusCode"] as? String {
                self.queuingStatusCode = value
            }
            if let value = dict["RandomPreQueueEnable"] as? String {
                self.randomPreQueueEnable = value
            }
            if let value = dict["SessionDuration"] as? String {
                self.sessionDuration = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
            if let value = dict["TotalActiveUsers"] as? String {
                self.totalActiveUsers = value
            }
            if let value = dict["WaitingRoomEventId"] as? Int64 {
                self.waitingRoomEventId = value
            }
            if let value = dict["WaitingRoomId"] as? String {
                self.waitingRoomId = value
            }
            if let value = dict["WaitingRoomType"] as? String {
                self.waitingRoomType = value
            }
        }
    }
    public var requestId: String?

    public var waitingRoomEvents: [ListWaitingRoomEventsResponseBody.WaitingRoomEvents]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.waitingRoomEvents != nil {
            var tmp : [Any] = []
            for k in self.waitingRoomEvents! {
                tmp.append(k.toMap())
            }
            map["WaitingRoomEvents"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["WaitingRoomEvents"] as? [Any?] {
            var tmp : [ListWaitingRoomEventsResponseBody.WaitingRoomEvents] = []
            for v in value {
                if v != nil {
                    var model = ListWaitingRoomEventsResponseBody.WaitingRoomEvents()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.waitingRoomEvents = tmp
        }
    }
}

public class ListWaitingRoomEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWaitingRoomEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWaitingRoomEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWaitingRoomRulesRequest : Tea.TeaModel {
    public var ruleName: String?

    public var siteId: Int64?

    public var waitingRoomId: String?

    public var waitingRoomRuleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.waitingRoomId != nil {
            map["WaitingRoomId"] = self.waitingRoomId!
        }
        if self.waitingRoomRuleId != nil {
            map["WaitingRoomRuleId"] = self.waitingRoomRuleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["WaitingRoomId"] as? String {
            self.waitingRoomId = value
        }
        if let value = dict["WaitingRoomRuleId"] as? Int64 {
            self.waitingRoomRuleId = value
        }
    }
}

public class ListWaitingRoomRulesResponseBody : Tea.TeaModel {
    public class WaitingRoomRules : Tea.TeaModel {
        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var waitingRoomRuleId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.waitingRoomRuleId != nil {
                map["WaitingRoomRuleId"] = self.waitingRoomRuleId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["WaitingRoomRuleId"] as? Int64 {
                self.waitingRoomRuleId = value
            }
        }
    }
    public var requestId: String?

    public var waitingRoomRules: [ListWaitingRoomRulesResponseBody.WaitingRoomRules]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.waitingRoomRules != nil {
            var tmp : [Any] = []
            for k in self.waitingRoomRules! {
                tmp.append(k.toMap())
            }
            map["WaitingRoomRules"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["WaitingRoomRules"] as? [Any?] {
            var tmp : [ListWaitingRoomRulesResponseBody.WaitingRoomRules] = []
            for v in value {
                if v != nil {
                    var model = ListWaitingRoomRulesResponseBody.WaitingRoomRules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.waitingRoomRules = tmp
        }
    }
}

public class ListWaitingRoomRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWaitingRoomRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWaitingRoomRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWaitingRoomsRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var waitingRoomId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.waitingRoomId != nil {
            map["WaitingRoomId"] = self.waitingRoomId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["WaitingRoomId"] as? String {
            self.waitingRoomId = value
        }
    }
}

public class ListWaitingRoomsResponseBody : Tea.TeaModel {
    public class WaitingRooms : Tea.TeaModel {
        public class HostNameAndPath : Tea.TeaModel {
            public var domain: String?

            public var path: String?

            public var subdomain: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.domain != nil {
                    map["Domain"] = self.domain!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.subdomain != nil {
                    map["Subdomain"] = self.subdomain!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Domain"] as? String {
                    self.domain = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["Subdomain"] as? String {
                    self.subdomain = value
                }
            }
        }
        public var cookieName: String?

        public var customPageHtml: String?

        public var description_: String?

        public var disableSessionRenewalEnable: String?

        public var enable: String?

        public var hostNameAndPath: [ListWaitingRoomsResponseBody.WaitingRooms.HostNameAndPath]?

        public var jsonResponseEnable: String?

        public var language: String?

        public var name: String?

        public var newUsersPerMinute: String?

        public var queueAllEnable: String?

        public var queuingMethod: String?

        public var queuingStatusCode: String?

        public var sessionDuration: String?

        public var totalActiveUsers: String?

        public var waitingRoomId: String?

        public var waitingRoomType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cookieName != nil {
                map["CookieName"] = self.cookieName!
            }
            if self.customPageHtml != nil {
                map["CustomPageHtml"] = self.customPageHtml!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.disableSessionRenewalEnable != nil {
                map["DisableSessionRenewalEnable"] = self.disableSessionRenewalEnable!
            }
            if self.enable != nil {
                map["Enable"] = self.enable!
            }
            if self.hostNameAndPath != nil {
                var tmp : [Any] = []
                for k in self.hostNameAndPath! {
                    tmp.append(k.toMap())
                }
                map["HostNameAndPath"] = tmp
            }
            if self.jsonResponseEnable != nil {
                map["JsonResponseEnable"] = self.jsonResponseEnable!
            }
            if self.language != nil {
                map["Language"] = self.language!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.newUsersPerMinute != nil {
                map["NewUsersPerMinute"] = self.newUsersPerMinute!
            }
            if self.queueAllEnable != nil {
                map["QueueAllEnable"] = self.queueAllEnable!
            }
            if self.queuingMethod != nil {
                map["QueuingMethod"] = self.queuingMethod!
            }
            if self.queuingStatusCode != nil {
                map["QueuingStatusCode"] = self.queuingStatusCode!
            }
            if self.sessionDuration != nil {
                map["SessionDuration"] = self.sessionDuration!
            }
            if self.totalActiveUsers != nil {
                map["TotalActiveUsers"] = self.totalActiveUsers!
            }
            if self.waitingRoomId != nil {
                map["WaitingRoomId"] = self.waitingRoomId!
            }
            if self.waitingRoomType != nil {
                map["WaitingRoomType"] = self.waitingRoomType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CookieName"] as? String {
                self.cookieName = value
            }
            if let value = dict["CustomPageHtml"] as? String {
                self.customPageHtml = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DisableSessionRenewalEnable"] as? String {
                self.disableSessionRenewalEnable = value
            }
            if let value = dict["Enable"] as? String {
                self.enable = value
            }
            if let value = dict["HostNameAndPath"] as? [Any?] {
                var tmp : [ListWaitingRoomsResponseBody.WaitingRooms.HostNameAndPath] = []
                for v in value {
                    if v != nil {
                        var model = ListWaitingRoomsResponseBody.WaitingRooms.HostNameAndPath()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.hostNameAndPath = tmp
            }
            if let value = dict["JsonResponseEnable"] as? String {
                self.jsonResponseEnable = value
            }
            if let value = dict["Language"] as? String {
                self.language = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NewUsersPerMinute"] as? String {
                self.newUsersPerMinute = value
            }
            if let value = dict["QueueAllEnable"] as? String {
                self.queueAllEnable = value
            }
            if let value = dict["QueuingMethod"] as? String {
                self.queuingMethod = value
            }
            if let value = dict["QueuingStatusCode"] as? String {
                self.queuingStatusCode = value
            }
            if let value = dict["SessionDuration"] as? String {
                self.sessionDuration = value
            }
            if let value = dict["TotalActiveUsers"] as? String {
                self.totalActiveUsers = value
            }
            if let value = dict["WaitingRoomId"] as? String {
                self.waitingRoomId = value
            }
            if let value = dict["WaitingRoomType"] as? String {
                self.waitingRoomType = value
            }
        }
    }
    public var requestId: String?

    public var waitingRooms: [ListWaitingRoomsResponseBody.WaitingRooms]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.waitingRooms != nil {
            var tmp : [Any] = []
            for k in self.waitingRooms! {
                tmp.append(k.toMap())
            }
            map["WaitingRooms"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["WaitingRooms"] as? [Any?] {
            var tmp : [ListWaitingRoomsResponseBody.WaitingRooms] = []
            for v in value {
                if v != nil {
                    var model = ListWaitingRoomsResponseBody.WaitingRooms()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.waitingRooms = tmp
        }
    }
}

public class ListWaitingRoomsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWaitingRoomsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWaitingRoomsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OpenErServiceRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class OpenErServiceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class OpenErServiceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OpenErServiceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OpenErServiceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PreloadCachesRequest : Tea.TeaModel {
    public var content: [String]?

    public var headers: [String: String]?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.headers != nil {
            map["Headers"] = self.headers!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? [String] {
            self.content = value
        }
        if let value = dict["Headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class PreloadCachesShrinkRequest : Tea.TeaModel {
    public var contentShrink: String?

    public var headersShrink: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contentShrink != nil {
            map["Content"] = self.contentShrink!
        }
        if self.headersShrink != nil {
            map["Headers"] = self.headersShrink!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.contentShrink = value
        }
        if let value = dict["Headers"] as? String {
            self.headersShrink = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class PreloadCachesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class PreloadCachesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PreloadCachesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PreloadCachesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PublishEdgeContainerAppVersionRequest : Tea.TeaModel {
    public var appId: String?

    public var fullRelease: Bool?

    public var percentage: Int32?

    public var publishEnv: String?

    public var publishType: String?

    public var regions: [String]?

    public var remarks: String?

    public var startTime: String?

    public var versionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.fullRelease != nil {
            map["FullRelease"] = self.fullRelease!
        }
        if self.percentage != nil {
            map["Percentage"] = self.percentage!
        }
        if self.publishEnv != nil {
            map["PublishEnv"] = self.publishEnv!
        }
        if self.publishType != nil {
            map["PublishType"] = self.publishType!
        }
        if self.regions != nil {
            map["Regions"] = self.regions!
        }
        if self.remarks != nil {
            map["Remarks"] = self.remarks!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["FullRelease"] as? Bool {
            self.fullRelease = value
        }
        if let value = dict["Percentage"] as? Int32 {
            self.percentage = value
        }
        if let value = dict["PublishEnv"] as? String {
            self.publishEnv = value
        }
        if let value = dict["PublishType"] as? String {
            self.publishType = value
        }
        if let value = dict["Regions"] as? [String] {
            self.regions = value
        }
        if let value = dict["Remarks"] as? String {
            self.remarks = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["VersionId"] as? String {
            self.versionId = value
        }
    }
}

public class PublishEdgeContainerAppVersionShrinkRequest : Tea.TeaModel {
    public var appId: String?

    public var fullRelease: Bool?

    public var percentage: Int32?

    public var publishEnv: String?

    public var publishType: String?

    public var regionsShrink: String?

    public var remarks: String?

    public var startTime: String?

    public var versionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.fullRelease != nil {
            map["FullRelease"] = self.fullRelease!
        }
        if self.percentage != nil {
            map["Percentage"] = self.percentage!
        }
        if self.publishEnv != nil {
            map["PublishEnv"] = self.publishEnv!
        }
        if self.publishType != nil {
            map["PublishType"] = self.publishType!
        }
        if self.regionsShrink != nil {
            map["Regions"] = self.regionsShrink!
        }
        if self.remarks != nil {
            map["Remarks"] = self.remarks!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["FullRelease"] as? Bool {
            self.fullRelease = value
        }
        if let value = dict["Percentage"] as? Int32 {
            self.percentage = value
        }
        if let value = dict["PublishEnv"] as? String {
            self.publishEnv = value
        }
        if let value = dict["PublishType"] as? String {
            self.publishType = value
        }
        if let value = dict["Regions"] as? String {
            self.regionsShrink = value
        }
        if let value = dict["Remarks"] as? String {
            self.remarks = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["VersionId"] as? String {
            self.versionId = value
        }
    }
}

public class PublishEdgeContainerAppVersionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class PublishEdgeContainerAppVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PublishEdgeContainerAppVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PublishEdgeContainerAppVersionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PublishRoutineCodeVersionRequest : Tea.TeaModel {
    public var codeVersion: String?

    public var env: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.codeVersion != nil {
            map["CodeVersion"] = self.codeVersion!
        }
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CodeVersion"] as? String {
            self.codeVersion = value
        }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class PublishRoutineCodeVersionResponseBody : Tea.TeaModel {
    public var codeVersion: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.codeVersion != nil {
            map["CodeVersion"] = self.codeVersion!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CodeVersion"] as? String {
            self.codeVersion = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class PublishRoutineCodeVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PublishRoutineCodeVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PublishRoutineCodeVersionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PurchaseCacheReserveRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var autoRenew: Bool?

    public var chargeType: String?

    public var crRegion: String?

    public var period: Int32?

    public var quotaGb: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.crRegion != nil {
            map["CrRegion"] = self.crRegion!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.quotaGb != nil {
            map["QuotaGb"] = self.quotaGb!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["AutoRenew"] as? Bool {
            self.autoRenew = value
        }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["CrRegion"] as? String {
            self.crRegion = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["QuotaGb"] as? Int64 {
            self.quotaGb = value
        }
    }
}

public class PurchaseCacheReserveResponseBody : Tea.TeaModel {
    public var instanceId: String?

    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class PurchaseCacheReserveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PurchaseCacheReserveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PurchaseCacheReserveResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PurchaseRatePlanRequest : Tea.TeaModel {
    public var amount: Int32?

    public var autoPay: Bool?

    public var autoRenew: Bool?

    public var chargeType: String?

    public var coverage: String?

    public var period: Int32?

    public var planCode: String?

    public var planName: String?

    public var siteName: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.amount != nil {
            map["Amount"] = self.amount!
        }
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.autoRenew != nil {
            map["AutoRenew"] = self.autoRenew!
        }
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.coverage != nil {
            map["Coverage"] = self.coverage!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.planCode != nil {
            map["PlanCode"] = self.planCode!
        }
        if self.planName != nil {
            map["PlanName"] = self.planName!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Amount"] as? Int32 {
            self.amount = value
        }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["AutoRenew"] as? Bool {
            self.autoRenew = value
        }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["Coverage"] as? String {
            self.coverage = value
        }
        if let value = dict["Period"] as? Int32 {
            self.period = value
        }
        if let value = dict["PlanCode"] as? String {
            self.planCode = value
        }
        if let value = dict["PlanName"] as? String {
            self.planName = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class PurchaseRatePlanResponseBody : Tea.TeaModel {
    public var instanceId: String?

    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class PurchaseRatePlanResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PurchaseRatePlanResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PurchaseRatePlanResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PurgeCachesRequest : Tea.TeaModel {
    public class Content : Tea.TeaModel {
        public class CacheKeys : Tea.TeaModel {
            public var headers: [String: String]?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.headers != nil {
                    map["Headers"] = self.headers!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Headers"] as? [String: String] {
                    self.headers = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var cacheKeys: [PurgeCachesRequest.Content.CacheKeys]?

        public var cacheTags: [String]?

        public var directories: [String]?

        public var files: [Any]?

        public var hostnames: [String]?

        public var ignoreParams: [String]?

        public var purgeAll: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cacheKeys != nil {
                var tmp : [Any] = []
                for k in self.cacheKeys! {
                    tmp.append(k.toMap())
                }
                map["CacheKeys"] = tmp
            }
            if self.cacheTags != nil {
                map["CacheTags"] = self.cacheTags!
            }
            if self.directories != nil {
                map["Directories"] = self.directories!
            }
            if self.files != nil {
                map["Files"] = self.files!
            }
            if self.hostnames != nil {
                map["Hostnames"] = self.hostnames!
            }
            if self.ignoreParams != nil {
                map["IgnoreParams"] = self.ignoreParams!
            }
            if self.purgeAll != nil {
                map["PurgeAll"] = self.purgeAll!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CacheKeys"] as? [Any?] {
                var tmp : [PurgeCachesRequest.Content.CacheKeys] = []
                for v in value {
                    if v != nil {
                        var model = PurgeCachesRequest.Content.CacheKeys()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.cacheKeys = tmp
            }
            if let value = dict["CacheTags"] as? [String] {
                self.cacheTags = value
            }
            if let value = dict["Directories"] as? [String] {
                self.directories = value
            }
            if let value = dict["Files"] as? [Any] {
                self.files = value
            }
            if let value = dict["Hostnames"] as? [String] {
                self.hostnames = value
            }
            if let value = dict["IgnoreParams"] as? [String] {
                self.ignoreParams = value
            }
            if let value = dict["PurgeAll"] as? Bool {
                self.purgeAll = value
            }
        }
    }
    public var content: PurgeCachesRequest.Content?

    public var edgeComputePurge: Bool?

    public var force: Bool?

    public var siteId: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.content?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content?.toMap()
        }
        if self.edgeComputePurge != nil {
            map["EdgeComputePurge"] = self.edgeComputePurge!
        }
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? [String: Any?] {
            var model = PurgeCachesRequest.Content()
            model.fromMap(value)
            self.content = model
        }
        if let value = dict["EdgeComputePurge"] as? Bool {
            self.edgeComputePurge = value
        }
        if let value = dict["Force"] as? Bool {
            self.force = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class PurgeCachesShrinkRequest : Tea.TeaModel {
    public var contentShrink: String?

    public var edgeComputePurge: Bool?

    public var force: Bool?

    public var siteId: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contentShrink != nil {
            map["Content"] = self.contentShrink!
        }
        if self.edgeComputePurge != nil {
            map["EdgeComputePurge"] = self.edgeComputePurge!
        }
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.contentShrink = value
        }
        if let value = dict["EdgeComputePurge"] as? Bool {
            self.edgeComputePurge = value
        }
        if let value = dict["Force"] as? Bool {
            self.force = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class PurgeCachesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class PurgeCachesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PurgeCachesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PurgeCachesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutKvRequest : Tea.TeaModel {
    public var base64: Bool?

    public var expiration: Int64?

    public var expirationTtl: Int64?

    public var key: String?

    public var namespace: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.base64 != nil {
            map["Base64"] = self.base64!
        }
        if self.expiration != nil {
            map["Expiration"] = self.expiration!
        }
        if self.expirationTtl != nil {
            map["ExpirationTtl"] = self.expirationTtl!
        }
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Base64"] as? Bool {
            self.base64 = value
        }
        if let value = dict["Expiration"] as? Int64 {
            self.expiration = value
        }
        if let value = dict["ExpirationTtl"] as? Int64 {
            self.expirationTtl = value
        }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
    }
}

public class PutKvResponseBody : Tea.TeaModel {
    public var length: String?

    public var requestId: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Length"] as? String {
            self.length = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
    }
}

public class PutKvResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutKvResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutKvResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutKvWithHighCapacityRequest : Tea.TeaModel {
    public var key: String?

    public var namespace: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class PutKvWithHighCapacityAdvanceRequest : Tea.TeaModel {
    public var key: String?

    public var namespace: String?

    public var urlObject: InputStream?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.key != nil {
            map["Key"] = self.key!
        }
        if self.namespace != nil {
            map["Namespace"] = self.namespace!
        }
        if self.urlObject != nil {
            map["Url"] = self.urlObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Key"] as? String {
            self.key = value
        }
        if let value = dict["Namespace"] as? String {
            self.namespace = value
        }
        if let value = dict["Url"] as? InputStream {
            self.urlObject = value
        }
    }
}

public class PutKvWithHighCapacityResponseBody : Tea.TeaModel {
    public var length: String?

    public var requestId: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.length != nil {
            map["Length"] = self.length!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Length"] as? String {
            self.length = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
    }
}

public class PutKvWithHighCapacityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutKvWithHighCapacityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutKvWithHighCapacityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RebuildEdgeContainerAppStagingEnvRequest : Tea.TeaModel {
    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class RebuildEdgeContainerAppStagingEnvResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RebuildEdgeContainerAppStagingEnvResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RebuildEdgeContainerAppStagingEnvResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RebuildEdgeContainerAppStagingEnvResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ResetScheduledPreloadJobRequest : Tea.TeaModel {
    public var id: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
    }
}

public class ResetScheduledPreloadJobResponseBody : Tea.TeaModel {
    public var aliUid: String?

    public var createdAt: String?

    public var domains: String?

    public var errorInfo: String?

    public var failedFileOss: String?

    public var fileId: String?

    public var id: String?

    public var insertWay: String?

    public var name: String?

    public var requestId: String?

    public var siteId: Int64?

    public var taskSubmitted: Int32?

    public var taskType: String?

    public var urlCount: Int32?

    public var urlSubmitted: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliUid != nil {
            map["AliUid"] = self.aliUid!
        }
        if self.createdAt != nil {
            map["CreatedAt"] = self.createdAt!
        }
        if self.domains != nil {
            map["Domains"] = self.domains!
        }
        if self.errorInfo != nil {
            map["ErrorInfo"] = self.errorInfo!
        }
        if self.failedFileOss != nil {
            map["FailedFileOss"] = self.failedFileOss!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.insertWay != nil {
            map["InsertWay"] = self.insertWay!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.taskSubmitted != nil {
            map["TaskSubmitted"] = self.taskSubmitted!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.urlCount != nil {
            map["UrlCount"] = self.urlCount!
        }
        if self.urlSubmitted != nil {
            map["UrlSubmitted"] = self.urlSubmitted!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliUid"] as? String {
            self.aliUid = value
        }
        if let value = dict["CreatedAt"] as? String {
            self.createdAt = value
        }
        if let value = dict["Domains"] as? String {
            self.domains = value
        }
        if let value = dict["ErrorInfo"] as? String {
            self.errorInfo = value
        }
        if let value = dict["FailedFileOss"] as? String {
            self.failedFileOss = value
        }
        if let value = dict["FileId"] as? String {
            self.fileId = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["InsertWay"] as? String {
            self.insertWay = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["TaskSubmitted"] as? Int32 {
            self.taskSubmitted = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
        if let value = dict["UrlCount"] as? Int32 {
            self.urlCount = value
        }
        if let value = dict["UrlSubmitted"] as? Int32 {
            self.urlSubmitted = value
        }
    }
}

public class ResetScheduledPreloadJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ResetScheduledPreloadJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ResetScheduledPreloadJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RevokeClientCertificateRequest : Tea.TeaModel {
    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class RevokeClientCertificateResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public var siteId: Int64?

    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class RevokeClientCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RevokeClientCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RevokeClientCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RollbackEdgeContainerAppVersionRequest : Tea.TeaModel {
    public var appId: String?

    public var percentage: Int32?

    public var remarks: String?

    public var usedPercent: Bool?

    public var versionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.percentage != nil {
            map["Percentage"] = self.percentage!
        }
        if self.remarks != nil {
            map["Remarks"] = self.remarks!
        }
        if self.usedPercent != nil {
            map["UsedPercent"] = self.usedPercent!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["Percentage"] as? Int32 {
            self.percentage = value
        }
        if let value = dict["Remarks"] as? String {
            self.remarks = value
        }
        if let value = dict["UsedPercent"] as? Bool {
            self.usedPercent = value
        }
        if let value = dict["VersionId"] as? String {
            self.versionId = value
        }
    }
}

public class RollbackEdgeContainerAppVersionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RollbackEdgeContainerAppVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RollbackEdgeContainerAppVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RollbackEdgeContainerAppVersionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetCertificateRequest : Tea.TeaModel {
    public var casId: Int64?

    public var certificate: String?

    public var id: String?

    public var name: String?

    public var ownerId: Int64?

    public var privateKey: String?

    public var region: String?

    public var securityToken: String?

    public var siteId: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.casId != nil {
            map["CasId"] = self.casId!
        }
        if self.certificate != nil {
            map["Certificate"] = self.certificate!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.privateKey != nil {
            map["PrivateKey"] = self.privateKey!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CasId"] as? Int64 {
            self.casId = value
        }
        if let value = dict["Certificate"] as? String {
            self.certificate = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PrivateKey"] as? String {
            self.privateKey = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class SetCertificateResponseBody : Tea.TeaModel {
    public var id: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetClientCertificateHostnamesRequest : Tea.TeaModel {
    public var hostnames: [String]?

    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hostnames != nil {
            map["Hostnames"] = self.hostnames!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Hostnames"] as? [String] {
            self.hostnames = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class SetClientCertificateHostnamesShrinkRequest : Tea.TeaModel {
    public var hostnamesShrink: String?

    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hostnamesShrink != nil {
            map["Hostnames"] = self.hostnamesShrink!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Hostnames"] as? String {
            self.hostnamesShrink = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class SetClientCertificateHostnamesResponseBody : Tea.TeaModel {
    public var hostnames: [String]?

    public var id: String?

    public var requestId: String?

    public var siteId: Int64?

    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hostnames != nil {
            map["Hostnames"] = self.hostnames!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Hostnames"] as? [String] {
            self.hostnames = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class SetClientCertificateHostnamesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetClientCertificateHostnamesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetClientCertificateHostnamesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetHttpDDoSAttackIntelligentProtectionRequest : Tea.TeaModel {
    public var aiMode: String?

    public var aiTemplate: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aiMode != nil {
            map["AiMode"] = self.aiMode!
        }
        if self.aiTemplate != nil {
            map["AiTemplate"] = self.aiTemplate!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AiMode"] as? String {
            self.aiMode = value
        }
        if let value = dict["AiTemplate"] as? String {
            self.aiTemplate = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class SetHttpDDoSAttackIntelligentProtectionResponseBody : Tea.TeaModel {
    public var aiMode: String?

    public var aiTemplate: String?

    public var requestId: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aiMode != nil {
            map["AiMode"] = self.aiMode!
        }
        if self.aiTemplate != nil {
            map["AiTemplate"] = self.aiTemplate!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AiMode"] as? String {
            self.aiMode = value
        }
        if let value = dict["AiTemplate"] as? String {
            self.aiTemplate = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class SetHttpDDoSAttackIntelligentProtectionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetHttpDDoSAttackIntelligentProtectionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetHttpDDoSAttackIntelligentProtectionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetHttpDDoSAttackProtectionRequest : Tea.TeaModel {
    public var globalMode: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.globalMode != nil {
            map["GlobalMode"] = self.globalMode!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GlobalMode"] as? String {
            self.globalMode = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class SetHttpDDoSAttackProtectionResponseBody : Tea.TeaModel {
    public var globalMode: String?

    public var requestId: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.globalMode != nil {
            map["GlobalMode"] = self.globalMode!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GlobalMode"] as? String {
            self.globalMode = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class SetHttpDDoSAttackProtectionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetHttpDDoSAttackProtectionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetHttpDDoSAttackProtectionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetOriginClientCertificateHostnamesRequest : Tea.TeaModel {
    public var hostnames: [String]?

    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hostnames != nil {
            map["Hostnames"] = self.hostnames!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Hostnames"] as? [String] {
            self.hostnames = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class SetOriginClientCertificateHostnamesShrinkRequest : Tea.TeaModel {
    public var hostnamesShrink: String?

    public var id: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hostnamesShrink != nil {
            map["Hostnames"] = self.hostnamesShrink!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Hostnames"] as? String {
            self.hostnamesShrink = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class SetOriginClientCertificateHostnamesResponseBody : Tea.TeaModel {
    public var hostnames: [String]?

    public var id: String?

    public var requestId: String?

    public var siteId: Int64?

    public var siteName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.hostnames != nil {
            map["Hostnames"] = self.hostnames!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteName != nil {
            map["SiteName"] = self.siteName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Hostnames"] as? [String] {
            self.hostnames = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteName"] as? String {
            self.siteName = value
        }
    }
}

public class SetOriginClientCertificateHostnamesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetOriginClientCertificateHostnamesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetOriginClientCertificateHostnamesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartScheduledPreloadExecutionRequest : Tea.TeaModel {
    public var id: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
    }
}

public class StartScheduledPreloadExecutionResponseBody : Tea.TeaModel {
    public var aliUid: String?

    public var endTime: String?

    public var id: String?

    public var interval: Int32?

    public var jobId: String?

    public var requestId: String?

    public var sliceLen: Int32?

    public var startTime: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliUid != nil {
            map["AliUid"] = self.aliUid!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sliceLen != nil {
            map["SliceLen"] = self.sliceLen!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliUid"] as? String {
            self.aliUid = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Interval"] as? Int32 {
            self.interval = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SliceLen"] as? Int32 {
            self.sliceLen = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class StartScheduledPreloadExecutionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartScheduledPreloadExecutionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartScheduledPreloadExecutionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StopScheduledPreloadExecutionRequest : Tea.TeaModel {
    public var id: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? String {
            self.id = value
        }
    }
}

public class StopScheduledPreloadExecutionResponseBody : Tea.TeaModel {
    public var aliUid: String?

    public var endTime: String?

    public var id: String?

    public var interval: Int32?

    public var jobId: String?

    public var requestId: String?

    public var sliceLen: Int32?

    public var startTime: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliUid != nil {
            map["AliUid"] = self.aliUid!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sliceLen != nil {
            map["SliceLen"] = self.sliceLen!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliUid"] as? String {
            self.aliUid = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Interval"] as? Int32 {
            self.interval = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SliceLen"] as? Int32 {
            self.sliceLen = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class StopScheduledPreloadExecutionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StopScheduledPreloadExecutionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StopScheduledPreloadExecutionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UntagResourcesRequest : Tea.TeaModel {
    public var all: Bool?

    public var ownerId: Int64?

    public var regionId: String?

    public var resourceId: [String]?

    public var resourceType: String?

    public var securityToken: String?

    public var tagKey: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.all != nil {
            map["All"] = self.all!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tagKey != nil {
            map["TagKey"] = self.tagKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["All"] as? Bool {
            self.all = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["TagKey"] as? [String] {
            self.tagKey = value
        }
    }
}

public class UntagResourcesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UntagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UntagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UntagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateCacheReserveSpecRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var chargeType: String?

    public var instanceId: String?

    public var targetQuotaGb: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.targetQuotaGb != nil {
            map["TargetQuotaGb"] = self.targetQuotaGb!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["TargetQuotaGb"] as? Int64 {
            self.targetQuotaGb = value
        }
    }
}

public class UpdateCacheReserveSpecResponseBody : Tea.TeaModel {
    public var instanceId: String?

    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateCacheReserveSpecResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateCacheReserveSpecResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateCacheReserveSpecResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateCacheRuleRequest : Tea.TeaModel {
    public var additionalCacheablePorts: String?

    public var browserCacheMode: String?

    public var browserCacheTtl: String?

    public var bypassCache: String?

    public var cacheDeceptionArmor: String?

    public var cacheReserveEligibility: String?

    public var checkPresenceCookie: String?

    public var checkPresenceHeader: String?

    public var configId: Int64?

    public var edgeCacheMode: String?

    public var edgeCacheTtl: String?

    public var edgeStatusCodeCacheTtl: String?

    public var includeCookie: String?

    public var includeHeader: String?

    public var queryString: String?

    public var queryStringMode: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var serveStale: String?

    public var siteId: Int64?

    public var sortQueryStringForCache: String?

    public var userDeviceType: String?

    public var userGeo: String?

    public var userLanguage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.additionalCacheablePorts != nil {
            map["AdditionalCacheablePorts"] = self.additionalCacheablePorts!
        }
        if self.browserCacheMode != nil {
            map["BrowserCacheMode"] = self.browserCacheMode!
        }
        if self.browserCacheTtl != nil {
            map["BrowserCacheTtl"] = self.browserCacheTtl!
        }
        if self.bypassCache != nil {
            map["BypassCache"] = self.bypassCache!
        }
        if self.cacheDeceptionArmor != nil {
            map["CacheDeceptionArmor"] = self.cacheDeceptionArmor!
        }
        if self.cacheReserveEligibility != nil {
            map["CacheReserveEligibility"] = self.cacheReserveEligibility!
        }
        if self.checkPresenceCookie != nil {
            map["CheckPresenceCookie"] = self.checkPresenceCookie!
        }
        if self.checkPresenceHeader != nil {
            map["CheckPresenceHeader"] = self.checkPresenceHeader!
        }
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.edgeCacheMode != nil {
            map["EdgeCacheMode"] = self.edgeCacheMode!
        }
        if self.edgeCacheTtl != nil {
            map["EdgeCacheTtl"] = self.edgeCacheTtl!
        }
        if self.edgeStatusCodeCacheTtl != nil {
            map["EdgeStatusCodeCacheTtl"] = self.edgeStatusCodeCacheTtl!
        }
        if self.includeCookie != nil {
            map["IncludeCookie"] = self.includeCookie!
        }
        if self.includeHeader != nil {
            map["IncludeHeader"] = self.includeHeader!
        }
        if self.queryString != nil {
            map["QueryString"] = self.queryString!
        }
        if self.queryStringMode != nil {
            map["QueryStringMode"] = self.queryStringMode!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.serveStale != nil {
            map["ServeStale"] = self.serveStale!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.sortQueryStringForCache != nil {
            map["SortQueryStringForCache"] = self.sortQueryStringForCache!
        }
        if self.userDeviceType != nil {
            map["UserDeviceType"] = self.userDeviceType!
        }
        if self.userGeo != nil {
            map["UserGeo"] = self.userGeo!
        }
        if self.userLanguage != nil {
            map["UserLanguage"] = self.userLanguage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdditionalCacheablePorts"] as? String {
            self.additionalCacheablePorts = value
        }
        if let value = dict["BrowserCacheMode"] as? String {
            self.browserCacheMode = value
        }
        if let value = dict["BrowserCacheTtl"] as? String {
            self.browserCacheTtl = value
        }
        if let value = dict["BypassCache"] as? String {
            self.bypassCache = value
        }
        if let value = dict["CacheDeceptionArmor"] as? String {
            self.cacheDeceptionArmor = value
        }
        if let value = dict["CacheReserveEligibility"] as? String {
            self.cacheReserveEligibility = value
        }
        if let value = dict["CheckPresenceCookie"] as? String {
            self.checkPresenceCookie = value
        }
        if let value = dict["CheckPresenceHeader"] as? String {
            self.checkPresenceHeader = value
        }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["EdgeCacheMode"] as? String {
            self.edgeCacheMode = value
        }
        if let value = dict["EdgeCacheTtl"] as? String {
            self.edgeCacheTtl = value
        }
        if let value = dict["EdgeStatusCodeCacheTtl"] as? String {
            self.edgeStatusCodeCacheTtl = value
        }
        if let value = dict["IncludeCookie"] as? String {
            self.includeCookie = value
        }
        if let value = dict["IncludeHeader"] as? String {
            self.includeHeader = value
        }
        if let value = dict["QueryString"] as? String {
            self.queryString = value
        }
        if let value = dict["QueryStringMode"] as? String {
            self.queryStringMode = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["ServeStale"] as? String {
            self.serveStale = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SortQueryStringForCache"] as? String {
            self.sortQueryStringForCache = value
        }
        if let value = dict["UserDeviceType"] as? String {
            self.userDeviceType = value
        }
        if let value = dict["UserGeo"] as? String {
            self.userGeo = value
        }
        if let value = dict["UserLanguage"] as? String {
            self.userLanguage = value
        }
    }
}

public class UpdateCacheRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateCacheRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateCacheRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateCacheRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateCacheTagRequest : Tea.TeaModel {
    public var caseInsensitive: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public var tagName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.caseInsensitive != nil {
            map["CaseInsensitive"] = self.caseInsensitive!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.tagName != nil {
            map["TagName"] = self.tagName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CaseInsensitive"] as? String {
            self.caseInsensitive = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["TagName"] as? String {
            self.tagName = value
        }
    }
}

public class UpdateCacheTagResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateCacheTagResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateCacheTagResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateCacheTagResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateCnameFlatteningRequest : Tea.TeaModel {
    public var flattenMode: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.flattenMode != nil {
            map["FlattenMode"] = self.flattenMode!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FlattenMode"] as? String {
            self.flattenMode = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateCnameFlatteningResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateCnameFlatteningResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateCnameFlatteningResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateCnameFlatteningResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateCompressionRuleRequest : Tea.TeaModel {
    public var brotli: String?

    public var configId: Int64?

    public var gzip: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var zstd: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.brotli != nil {
            map["Brotli"] = self.brotli!
        }
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.gzip != nil {
            map["Gzip"] = self.gzip!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.zstd != nil {
            map["Zstd"] = self.zstd!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Brotli"] as? String {
            self.brotli = value
        }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["Gzip"] as? String {
            self.gzip = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Zstd"] as? String {
            self.zstd = value
        }
    }
}

public class UpdateCompressionRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateCompressionRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateCompressionRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateCompressionRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateCrossBorderOptimizationRequest : Tea.TeaModel {
    public var enable: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateCrossBorderOptimizationResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateCrossBorderOptimizationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateCrossBorderOptimizationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateCrossBorderOptimizationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateCustomScenePolicyRequest : Tea.TeaModel {
    public var endTime: String?

    public var name: String?

    public var objects: String?

    public var policyId: Int64?

    public var siteIds: String?

    public var startTime: String?

    public var template: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.objects != nil {
            map["Objects"] = self.objects!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.siteIds != nil {
            map["SiteIds"] = self.siteIds!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.template != nil {
            map["Template"] = self.template!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Objects"] as? String {
            self.objects = value
        }
        if let value = dict["PolicyId"] as? Int64 {
            self.policyId = value
        }
        if let value = dict["SiteIds"] as? String {
            self.siteIds = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Template"] as? String {
            self.template = value
        }
    }
}

public class UpdateCustomScenePolicyResponseBody : Tea.TeaModel {
    public var endTime: String?

    public var name: String?

    public var objects: [String]?

    public var policyId: Int64?

    public var requestId: String?

    public var siteIds: String?

    public var startTime: String?

    public var template: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.objects != nil {
            map["Objects"] = self.objects!
        }
        if self.policyId != nil {
            map["PolicyId"] = self.policyId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.siteIds != nil {
            map["SiteIds"] = self.siteIds!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.template != nil {
            map["Template"] = self.template!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Objects"] as? [String] {
            self.objects = value
        }
        if let value = dict["PolicyId"] as? Int64 {
            self.policyId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SiteIds"] as? String {
            self.siteIds = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Template"] as? String {
            self.template = value
        }
    }
}

public class UpdateCustomScenePolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateCustomScenePolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateCustomScenePolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateDevelopmentModeRequest : Tea.TeaModel {
    public var enable: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateDevelopmentModeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateDevelopmentModeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateDevelopmentModeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateDevelopmentModeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateEdgeContainerAppLogRiverRequest : Tea.TeaModel {
    public var appId: String?

    public var path: String?

    public var stdout: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.path != nil {
            map["Path"] = self.path!
        }
        if self.stdout != nil {
            map["Stdout"] = self.stdout!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["Path"] as? String {
            self.path = value
        }
        if let value = dict["Stdout"] as? Bool {
            self.stdout = value
        }
    }
}

public class UpdateEdgeContainerAppLogRiverResponseBody : Tea.TeaModel {
    public var path: String?

    public var requestId: String?

    public var stdout: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.path != nil {
            map["Path"] = self.path!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.stdout != nil {
            map["Stdout"] = self.stdout!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Path"] as? String {
            self.path = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Stdout"] as? Bool {
            self.stdout = value
        }
    }
}

public class UpdateEdgeContainerAppLogRiverResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateEdgeContainerAppLogRiverResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateEdgeContainerAppLogRiverResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateEdgeContainerAppResourceReserveRequest : Tea.TeaModel {
    public class ReserveSet : Tea.TeaModel {
        public var isp: String?

        public var region: String?

        public var replicas: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.isp != nil {
                map["Isp"] = self.isp!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.replicas != nil {
                map["Replicas"] = self.replicas!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Isp"] as? String {
                self.isp = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["Replicas"] as? Int32 {
                self.replicas = value
            }
        }
    }
    public var appId: String?

    public var durationTime: String?

    public var enable: Bool?

    public var forever: Bool?

    public var reserveSet: [UpdateEdgeContainerAppResourceReserveRequest.ReserveSet]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.durationTime != nil {
            map["DurationTime"] = self.durationTime!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.forever != nil {
            map["Forever"] = self.forever!
        }
        if self.reserveSet != nil {
            var tmp : [Any] = []
            for k in self.reserveSet! {
                tmp.append(k.toMap())
            }
            map["ReserveSet"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["DurationTime"] as? String {
            self.durationTime = value
        }
        if let value = dict["Enable"] as? Bool {
            self.enable = value
        }
        if let value = dict["Forever"] as? Bool {
            self.forever = value
        }
        if let value = dict["ReserveSet"] as? [Any?] {
            var tmp : [UpdateEdgeContainerAppResourceReserveRequest.ReserveSet] = []
            for v in value {
                if v != nil {
                    var model = UpdateEdgeContainerAppResourceReserveRequest.ReserveSet()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.reserveSet = tmp
        }
    }
}

public class UpdateEdgeContainerAppResourceReserveShrinkRequest : Tea.TeaModel {
    public var appId: String?

    public var durationTime: String?

    public var enable: Bool?

    public var forever: Bool?

    public var reserveSetShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.durationTime != nil {
            map["DurationTime"] = self.durationTime!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.forever != nil {
            map["Forever"] = self.forever!
        }
        if self.reserveSetShrink != nil {
            map["ReserveSet"] = self.reserveSetShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["DurationTime"] as? String {
            self.durationTime = value
        }
        if let value = dict["Enable"] as? Bool {
            self.enable = value
        }
        if let value = dict["Forever"] as? Bool {
            self.forever = value
        }
        if let value = dict["ReserveSet"] as? String {
            self.reserveSetShrink = value
        }
    }
}

public class UpdateEdgeContainerAppResourceReserveResponseBody : Tea.TeaModel {
    public class ReserveSet : Tea.TeaModel {
        public var isp: String?

        public var region: String?

        public var replicas: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.isp != nil {
                map["Isp"] = self.isp!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.replicas != nil {
                map["Replicas"] = self.replicas!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Isp"] as? String {
                self.isp = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["Replicas"] as? Int32 {
                self.replicas = value
            }
        }
    }
    public var durationTime: String?

    public var enable: Bool?

    public var forever: Bool?

    public var requestId: String?

    public var reserveSet: [UpdateEdgeContainerAppResourceReserveResponseBody.ReserveSet]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.durationTime != nil {
            map["DurationTime"] = self.durationTime!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.forever != nil {
            map["Forever"] = self.forever!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.reserveSet != nil {
            var tmp : [Any] = []
            for k in self.reserveSet! {
                tmp.append(k.toMap())
            }
            map["ReserveSet"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DurationTime"] as? String {
            self.durationTime = value
        }
        if let value = dict["Enable"] as? Bool {
            self.enable = value
        }
        if let value = dict["Forever"] as? Bool {
            self.forever = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ReserveSet"] as? [Any?] {
            var tmp : [UpdateEdgeContainerAppResourceReserveResponseBody.ReserveSet] = []
            for v in value {
                if v != nil {
                    var model = UpdateEdgeContainerAppResourceReserveResponseBody.ReserveSet()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.reserveSet = tmp
        }
    }
}

public class UpdateEdgeContainerAppResourceReserveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateEdgeContainerAppResourceReserveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateEdgeContainerAppResourceReserveResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateHttpRequestHeaderModificationRuleRequest : Tea.TeaModel {
    public class RequestHeaderModification : Tea.TeaModel {
        public var name: String?

        public var operation: String?

        public var type: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.operation != nil {
                map["Operation"] = self.operation!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Operation"] as? String {
                self.operation = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var configId: Int64?

    public var requestHeaderModification: [UpdateHttpRequestHeaderModificationRuleRequest.RequestHeaderModification]?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestHeaderModification != nil {
            var tmp : [Any] = []
            for k in self.requestHeaderModification! {
                tmp.append(k.toMap())
            }
            map["RequestHeaderModification"] = tmp
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestHeaderModification"] as? [Any?] {
            var tmp : [UpdateHttpRequestHeaderModificationRuleRequest.RequestHeaderModification] = []
            for v in value {
                if v != nil {
                    var model = UpdateHttpRequestHeaderModificationRuleRequest.RequestHeaderModification()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.requestHeaderModification = tmp
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateHttpRequestHeaderModificationRuleShrinkRequest : Tea.TeaModel {
    public var configId: Int64?

    public var requestHeaderModificationShrink: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.requestHeaderModificationShrink != nil {
            map["RequestHeaderModification"] = self.requestHeaderModificationShrink!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RequestHeaderModification"] as? String {
            self.requestHeaderModificationShrink = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateHttpRequestHeaderModificationRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateHttpRequestHeaderModificationRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateHttpRequestHeaderModificationRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateHttpRequestHeaderModificationRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateHttpResponseHeaderModificationRuleRequest : Tea.TeaModel {
    public class ResponseHeaderModification : Tea.TeaModel {
        public var name: String?

        public var operation: String?

        public var type: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.operation != nil {
                map["Operation"] = self.operation!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Operation"] as? String {
                self.operation = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var configId: Int64?

    public var responseHeaderModification: [UpdateHttpResponseHeaderModificationRuleRequest.ResponseHeaderModification]?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.responseHeaderModification != nil {
            var tmp : [Any] = []
            for k in self.responseHeaderModification! {
                tmp.append(k.toMap())
            }
            map["ResponseHeaderModification"] = tmp
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ResponseHeaderModification"] as? [Any?] {
            var tmp : [UpdateHttpResponseHeaderModificationRuleRequest.ResponseHeaderModification] = []
            for v in value {
                if v != nil {
                    var model = UpdateHttpResponseHeaderModificationRuleRequest.ResponseHeaderModification()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.responseHeaderModification = tmp
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateHttpResponseHeaderModificationRuleShrinkRequest : Tea.TeaModel {
    public var configId: Int64?

    public var responseHeaderModificationShrink: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.responseHeaderModificationShrink != nil {
            map["ResponseHeaderModification"] = self.responseHeaderModificationShrink!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ResponseHeaderModification"] as? String {
            self.responseHeaderModificationShrink = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateHttpResponseHeaderModificationRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateHttpResponseHeaderModificationRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateHttpResponseHeaderModificationRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateHttpResponseHeaderModificationRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateHttpsApplicationConfigurationRequest : Tea.TeaModel {
    public var altSvc: String?

    public var altSvcClear: String?

    public var altSvcMa: String?

    public var altSvcPersist: String?

    public var configId: Int64?

    public var hsts: String?

    public var hstsIncludeSubdomains: String?

    public var hstsMaxAge: String?

    public var hstsPreload: String?

    public var httpsForce: String?

    public var httpsForceCode: String?

    public var httpsNoSniDeny: String?

    public var httpsSniVerify: String?

    public var httpsSniWhitelist: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.altSvc != nil {
            map["AltSvc"] = self.altSvc!
        }
        if self.altSvcClear != nil {
            map["AltSvcClear"] = self.altSvcClear!
        }
        if self.altSvcMa != nil {
            map["AltSvcMa"] = self.altSvcMa!
        }
        if self.altSvcPersist != nil {
            map["AltSvcPersist"] = self.altSvcPersist!
        }
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.hsts != nil {
            map["Hsts"] = self.hsts!
        }
        if self.hstsIncludeSubdomains != nil {
            map["HstsIncludeSubdomains"] = self.hstsIncludeSubdomains!
        }
        if self.hstsMaxAge != nil {
            map["HstsMaxAge"] = self.hstsMaxAge!
        }
        if self.hstsPreload != nil {
            map["HstsPreload"] = self.hstsPreload!
        }
        if self.httpsForce != nil {
            map["HttpsForce"] = self.httpsForce!
        }
        if self.httpsForceCode != nil {
            map["HttpsForceCode"] = self.httpsForceCode!
        }
        if self.httpsNoSniDeny != nil {
            map["HttpsNoSniDeny"] = self.httpsNoSniDeny!
        }
        if self.httpsSniVerify != nil {
            map["HttpsSniVerify"] = self.httpsSniVerify!
        }
        if self.httpsSniWhitelist != nil {
            map["HttpsSniWhitelist"] = self.httpsSniWhitelist!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AltSvc"] as? String {
            self.altSvc = value
        }
        if let value = dict["AltSvcClear"] as? String {
            self.altSvcClear = value
        }
        if let value = dict["AltSvcMa"] as? String {
            self.altSvcMa = value
        }
        if let value = dict["AltSvcPersist"] as? String {
            self.altSvcPersist = value
        }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["Hsts"] as? String {
            self.hsts = value
        }
        if let value = dict["HstsIncludeSubdomains"] as? String {
            self.hstsIncludeSubdomains = value
        }
        if let value = dict["HstsMaxAge"] as? String {
            self.hstsMaxAge = value
        }
        if let value = dict["HstsPreload"] as? String {
            self.hstsPreload = value
        }
        if let value = dict["HttpsForce"] as? String {
            self.httpsForce = value
        }
        if let value = dict["HttpsForceCode"] as? String {
            self.httpsForceCode = value
        }
        if let value = dict["HttpsNoSniDeny"] as? String {
            self.httpsNoSniDeny = value
        }
        if let value = dict["HttpsSniVerify"] as? String {
            self.httpsSniVerify = value
        }
        if let value = dict["HttpsSniWhitelist"] as? String {
            self.httpsSniWhitelist = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateHttpsApplicationConfigurationResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateHttpsApplicationConfigurationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateHttpsApplicationConfigurationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateHttpsApplicationConfigurationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateHttpsBasicConfigurationRequest : Tea.TeaModel {
    public var ciphersuite: String?

    public var ciphersuiteGroup: String?

    public var configId: Int64?

    public var http2: String?

    public var http3: String?

    public var https: String?

    public var ocspStapling: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var tls10: String?

    public var tls11: String?

    public var tls12: String?

    public var tls13: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ciphersuite != nil {
            map["Ciphersuite"] = self.ciphersuite!
        }
        if self.ciphersuiteGroup != nil {
            map["CiphersuiteGroup"] = self.ciphersuiteGroup!
        }
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.http2 != nil {
            map["Http2"] = self.http2!
        }
        if self.http3 != nil {
            map["Http3"] = self.http3!
        }
        if self.https != nil {
            map["Https"] = self.https!
        }
        if self.ocspStapling != nil {
            map["OcspStapling"] = self.ocspStapling!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.tls10 != nil {
            map["Tls10"] = self.tls10!
        }
        if self.tls11 != nil {
            map["Tls11"] = self.tls11!
        }
        if self.tls12 != nil {
            map["Tls12"] = self.tls12!
        }
        if self.tls13 != nil {
            map["Tls13"] = self.tls13!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ciphersuite"] as? String {
            self.ciphersuite = value
        }
        if let value = dict["CiphersuiteGroup"] as? String {
            self.ciphersuiteGroup = value
        }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["Http2"] as? String {
            self.http2 = value
        }
        if let value = dict["Http3"] as? String {
            self.http3 = value
        }
        if let value = dict["Https"] as? String {
            self.https = value
        }
        if let value = dict["OcspStapling"] as? String {
            self.ocspStapling = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Tls10"] as? String {
            self.tls10 = value
        }
        if let value = dict["Tls11"] as? String {
            self.tls11 = value
        }
        if let value = dict["Tls12"] as? String {
            self.tls12 = value
        }
        if let value = dict["Tls13"] as? String {
            self.tls13 = value
        }
    }
}

public class UpdateHttpsBasicConfigurationResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateHttpsBasicConfigurationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateHttpsBasicConfigurationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateHttpsBasicConfigurationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateIPv6Request : Tea.TeaModel {
    public var enable: String?

    public var region: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateIPv6ResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateIPv6Response : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateIPv6ResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateIPv6ResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateImageTransformRequest : Tea.TeaModel {
    public var configId: Int64?

    public var enable: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateImageTransformResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateImageTransformResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateImageTransformResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateImageTransformResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateListRequest : Tea.TeaModel {
    public var description_: String?

    public var id: Int64?

    public var items: [String]?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.items != nil {
            map["Items"] = self.items!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Items"] as? [String] {
            self.items = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class UpdateListShrinkRequest : Tea.TeaModel {
    public var description_: String?

    public var id: Int64?

    public var itemsShrink: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.itemsShrink != nil {
            map["Items"] = self.itemsShrink!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Items"] as? String {
            self.itemsShrink = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class UpdateListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateLoadBalancerRequest : Tea.TeaModel {
    public class AdaptiveRouting : Tea.TeaModel {
        public var failoverAcrossPools: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.failoverAcrossPools != nil {
                map["FailoverAcrossPools"] = self.failoverAcrossPools!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FailoverAcrossPools"] as? Bool {
                self.failoverAcrossPools = value
            }
        }
    }
    public class Monitor : Tea.TeaModel {
        public var consecutiveDown: Int32?

        public var consecutiveUp: Int32?

        public var expectedCodes: String?

        public var followRedirects: Bool?

        public var header: Any?

        public var interval: Int32?

        public var method: String?

        public var path: String?

        public var port: Int32?

        public var timeout: Int32?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.consecutiveDown != nil {
                map["ConsecutiveDown"] = self.consecutiveDown!
            }
            if self.consecutiveUp != nil {
                map["ConsecutiveUp"] = self.consecutiveUp!
            }
            if self.expectedCodes != nil {
                map["ExpectedCodes"] = self.expectedCodes!
            }
            if self.followRedirects != nil {
                map["FollowRedirects"] = self.followRedirects!
            }
            if self.header != nil {
                map["Header"] = self.header!
            }
            if self.interval != nil {
                map["Interval"] = self.interval!
            }
            if self.method != nil {
                map["Method"] = self.method!
            }
            if self.path != nil {
                map["Path"] = self.path!
            }
            if self.port != nil {
                map["Port"] = self.port!
            }
            if self.timeout != nil {
                map["Timeout"] = self.timeout!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConsecutiveDown"] as? Int32 {
                self.consecutiveDown = value
            }
            if let value = dict["ConsecutiveUp"] as? Int32 {
                self.consecutiveUp = value
            }
            if let value = dict["ExpectedCodes"] as? String {
                self.expectedCodes = value
            }
            if let value = dict["FollowRedirects"] as? Bool {
                self.followRedirects = value
            }
            if let value = dict["Header"] as? Any {
                self.header = value
            }
            if let value = dict["Interval"] as? Int32 {
                self.interval = value
            }
            if let value = dict["Method"] as? String {
                self.method = value
            }
            if let value = dict["Path"] as? String {
                self.path = value
            }
            if let value = dict["Port"] as? Int32 {
                self.port = value
            }
            if let value = dict["Timeout"] as? Int32 {
                self.timeout = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class RandomSteering : Tea.TeaModel {
        public var defaultWeight: Int32?

        public var poolWeights: [String: Int32]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.defaultWeight != nil {
                map["DefaultWeight"] = self.defaultWeight!
            }
            if self.poolWeights != nil {
                map["PoolWeights"] = self.poolWeights!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DefaultWeight"] as? Int32 {
                self.defaultWeight = value
            }
            if let value = dict["PoolWeights"] as? [String: Int32] {
                self.poolWeights = value
            }
        }
    }
    public class Rules : Tea.TeaModel {
        public class FixedResponse : Tea.TeaModel {
            public var contentType: String?

            public var location: String?

            public var messageBody: String?

            public var statusCode: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contentType != nil {
                    map["ContentType"] = self.contentType!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.messageBody != nil {
                    map["MessageBody"] = self.messageBody!
                }
                if self.statusCode != nil {
                    map["StatusCode"] = self.statusCode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContentType"] as? String {
                    self.contentType = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["MessageBody"] as? String {
                    self.messageBody = value
                }
                if let value = dict["StatusCode"] as? Int32 {
                    self.statusCode = value
                }
            }
        }
        public var fixedResponse: UpdateLoadBalancerRequest.Rules.FixedResponse?

        public var overrides: Any?

        public var rule: String?

        public var ruleEnable: String?

        public var ruleName: String?

        public var sequence: Int32?

        public var terminates: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.fixedResponse?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fixedResponse != nil {
                map["FixedResponse"] = self.fixedResponse?.toMap()
            }
            if self.overrides != nil {
                map["Overrides"] = self.overrides!
            }
            if self.rule != nil {
                map["Rule"] = self.rule!
            }
            if self.ruleEnable != nil {
                map["RuleEnable"] = self.ruleEnable!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.sequence != nil {
                map["Sequence"] = self.sequence!
            }
            if self.terminates != nil {
                map["Terminates"] = self.terminates!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FixedResponse"] as? [String: Any?] {
                var model = UpdateLoadBalancerRequest.Rules.FixedResponse()
                model.fromMap(value)
                self.fixedResponse = model
            }
            if let value = dict["Overrides"] as? Any {
                self.overrides = value
            }
            if let value = dict["Rule"] as? String {
                self.rule = value
            }
            if let value = dict["RuleEnable"] as? String {
                self.ruleEnable = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Sequence"] as? Int32 {
                self.sequence = value
            }
            if let value = dict["Terminates"] as? Bool {
                self.terminates = value
            }
        }
    }
    public var adaptiveRouting: UpdateLoadBalancerRequest.AdaptiveRouting?

    public var defaultPools: [Int64]?

    public var description_: String?

    public var enabled: Bool?

    public var fallbackPool: Int64?

    public var id: Int64?

    public var monitor: UpdateLoadBalancerRequest.Monitor?

    public var randomSteering: UpdateLoadBalancerRequest.RandomSteering?

    public var regionPools: Any?

    public var rules: [UpdateLoadBalancerRequest.Rules]?

    public var sessionAffinity: String?

    public var siteId: Int64?

    public var steeringPolicy: String?

    public var subRegionPools: Any?

    public var ttl: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.adaptiveRouting?.validate()
        try self.monitor?.validate()
        try self.randomSteering?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adaptiveRouting != nil {
            map["AdaptiveRouting"] = self.adaptiveRouting?.toMap()
        }
        if self.defaultPools != nil {
            map["DefaultPools"] = self.defaultPools!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.fallbackPool != nil {
            map["FallbackPool"] = self.fallbackPool!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.monitor != nil {
            map["Monitor"] = self.monitor?.toMap()
        }
        if self.randomSteering != nil {
            map["RandomSteering"] = self.randomSteering?.toMap()
        }
        if self.regionPools != nil {
            map["RegionPools"] = self.regionPools!
        }
        if self.rules != nil {
            var tmp : [Any] = []
            for k in self.rules! {
                tmp.append(k.toMap())
            }
            map["Rules"] = tmp
        }
        if self.sessionAffinity != nil {
            map["SessionAffinity"] = self.sessionAffinity!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.steeringPolicy != nil {
            map["SteeringPolicy"] = self.steeringPolicy!
        }
        if self.subRegionPools != nil {
            map["SubRegionPools"] = self.subRegionPools!
        }
        if self.ttl != nil {
            map["Ttl"] = self.ttl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdaptiveRouting"] as? [String: Any?] {
            var model = UpdateLoadBalancerRequest.AdaptiveRouting()
            model.fromMap(value)
            self.adaptiveRouting = model
        }
        if let value = dict["DefaultPools"] as? [Int64] {
            self.defaultPools = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["FallbackPool"] as? Int64 {
            self.fallbackPool = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Monitor"] as? [String: Any?] {
            var model = UpdateLoadBalancerRequest.Monitor()
            model.fromMap(value)
            self.monitor = model
        }
        if let value = dict["RandomSteering"] as? [String: Any?] {
            var model = UpdateLoadBalancerRequest.RandomSteering()
            model.fromMap(value)
            self.randomSteering = model
        }
        if let value = dict["RegionPools"] as? Any {
            self.regionPools = value
        }
        if let value = dict["Rules"] as? [Any?] {
            var tmp : [UpdateLoadBalancerRequest.Rules] = []
            for v in value {
                if v != nil {
                    var model = UpdateLoadBalancerRequest.Rules()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.rules = tmp
        }
        if let value = dict["SessionAffinity"] as? String {
            self.sessionAffinity = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SteeringPolicy"] as? String {
            self.steeringPolicy = value
        }
        if let value = dict["SubRegionPools"] as? Any {
            self.subRegionPools = value
        }
        if let value = dict["Ttl"] as? Int32 {
            self.ttl = value
        }
    }
}

public class UpdateLoadBalancerShrinkRequest : Tea.TeaModel {
    public var adaptiveRoutingShrink: String?

    public var defaultPoolsShrink: String?

    public var description_: String?

    public var enabled: Bool?

    public var fallbackPool: Int64?

    public var id: Int64?

    public var monitorShrink: String?

    public var randomSteeringShrink: String?

    public var regionPools: Any?

    public var rulesShrink: String?

    public var sessionAffinity: String?

    public var siteId: Int64?

    public var steeringPolicy: String?

    public var subRegionPools: Any?

    public var ttl: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adaptiveRoutingShrink != nil {
            map["AdaptiveRouting"] = self.adaptiveRoutingShrink!
        }
        if self.defaultPoolsShrink != nil {
            map["DefaultPools"] = self.defaultPoolsShrink!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.fallbackPool != nil {
            map["FallbackPool"] = self.fallbackPool!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.monitorShrink != nil {
            map["Monitor"] = self.monitorShrink!
        }
        if self.randomSteeringShrink != nil {
            map["RandomSteering"] = self.randomSteeringShrink!
        }
        if self.regionPools != nil {
            map["RegionPools"] = self.regionPools!
        }
        if self.rulesShrink != nil {
            map["Rules"] = self.rulesShrink!
        }
        if self.sessionAffinity != nil {
            map["SessionAffinity"] = self.sessionAffinity!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.steeringPolicy != nil {
            map["SteeringPolicy"] = self.steeringPolicy!
        }
        if self.subRegionPools != nil {
            map["SubRegionPools"] = self.subRegionPools!
        }
        if self.ttl != nil {
            map["Ttl"] = self.ttl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdaptiveRouting"] as? String {
            self.adaptiveRoutingShrink = value
        }
        if let value = dict["DefaultPools"] as? String {
            self.defaultPoolsShrink = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["FallbackPool"] as? Int64 {
            self.fallbackPool = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Monitor"] as? String {
            self.monitorShrink = value
        }
        if let value = dict["RandomSteering"] as? String {
            self.randomSteeringShrink = value
        }
        if let value = dict["RegionPools"] as? Any {
            self.regionPools = value
        }
        if let value = dict["Rules"] as? String {
            self.rulesShrink = value
        }
        if let value = dict["SessionAffinity"] as? String {
            self.sessionAffinity = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SteeringPolicy"] as? String {
            self.steeringPolicy = value
        }
        if let value = dict["SubRegionPools"] as? Any {
            self.subRegionPools = value
        }
        if let value = dict["Ttl"] as? Int32 {
            self.ttl = value
        }
    }
}

public class UpdateLoadBalancerResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateLoadBalancerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateLoadBalancerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateLoadBalancerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateManagedTransformRequest : Tea.TeaModel {
    public var addClientGeolocationHeader: String?

    public var addRealClientIpHeader: String?

    public var realClientIpHeaderName: String?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addClientGeolocationHeader != nil {
            map["AddClientGeolocationHeader"] = self.addClientGeolocationHeader!
        }
        if self.addRealClientIpHeader != nil {
            map["AddRealClientIpHeader"] = self.addRealClientIpHeader!
        }
        if self.realClientIpHeaderName != nil {
            map["RealClientIpHeaderName"] = self.realClientIpHeaderName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddClientGeolocationHeader"] as? String {
            self.addClientGeolocationHeader = value
        }
        if let value = dict["AddRealClientIpHeader"] as? String {
            self.addRealClientIpHeader = value
        }
        if let value = dict["RealClientIpHeaderName"] as? String {
            self.realClientIpHeaderName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
    }
}

public class UpdateManagedTransformResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateManagedTransformResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateManagedTransformResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateManagedTransformResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateNetworkOptimizationRequest : Tea.TeaModel {
    public var configId: Int64?

    public var grpc: String?

    public var http2Origin: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var smartRouting: String?

    public var uploadMaxFilesize: String?

    public var websocket: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.grpc != nil {
            map["Grpc"] = self.grpc!
        }
        if self.http2Origin != nil {
            map["Http2Origin"] = self.http2Origin!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.smartRouting != nil {
            map["SmartRouting"] = self.smartRouting!
        }
        if self.uploadMaxFilesize != nil {
            map["UploadMaxFilesize"] = self.uploadMaxFilesize!
        }
        if self.websocket != nil {
            map["Websocket"] = self.websocket!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["Grpc"] as? String {
            self.grpc = value
        }
        if let value = dict["Http2Origin"] as? String {
            self.http2Origin = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SmartRouting"] as? String {
            self.smartRouting = value
        }
        if let value = dict["UploadMaxFilesize"] as? String {
            self.uploadMaxFilesize = value
        }
        if let value = dict["Websocket"] as? String {
            self.websocket = value
        }
    }
}

public class UpdateNetworkOptimizationResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateNetworkOptimizationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateNetworkOptimizationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateNetworkOptimizationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateOriginPoolRequest : Tea.TeaModel {
    public class Origins : Tea.TeaModel {
        public class AuthConf : Tea.TeaModel {
            public var accessKey: String?

            public var authType: String?

            public var region: String?

            public var secretKey: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accessKey != nil {
                    map["AccessKey"] = self.accessKey!
                }
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.secretKey != nil {
                    map["SecretKey"] = self.secretKey!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccessKey"] as? String {
                    self.accessKey = value
                }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["SecretKey"] as? String {
                    self.secretKey = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public var address: String?

        public var authConf: UpdateOriginPoolRequest.Origins.AuthConf?

        public var enabled: Bool?

        public var header: Any?

        public var name: String?

        public var type: String?

        public var weight: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.authConf?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.address != nil {
                map["Address"] = self.address!
            }
            if self.authConf != nil {
                map["AuthConf"] = self.authConf?.toMap()
            }
            if self.enabled != nil {
                map["Enabled"] = self.enabled!
            }
            if self.header != nil {
                map["Header"] = self.header!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.weight != nil {
                map["Weight"] = self.weight!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Address"] as? String {
                self.address = value
            }
            if let value = dict["AuthConf"] as? [String: Any?] {
                var model = UpdateOriginPoolRequest.Origins.AuthConf()
                model.fromMap(value)
                self.authConf = model
            }
            if let value = dict["Enabled"] as? Bool {
                self.enabled = value
            }
            if let value = dict["Header"] as? Any {
                self.header = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Weight"] as? Int32 {
                self.weight = value
            }
        }
    }
    public var enabled: Bool?

    public var id: Int64?

    public var origins: [UpdateOriginPoolRequest.Origins]?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.origins != nil {
            var tmp : [Any] = []
            for k in self.origins! {
                tmp.append(k.toMap())
            }
            map["Origins"] = tmp
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Origins"] as? [Any?] {
            var tmp : [UpdateOriginPoolRequest.Origins] = []
            for v in value {
                if v != nil {
                    var model = UpdateOriginPoolRequest.Origins()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.origins = tmp
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateOriginPoolShrinkRequest : Tea.TeaModel {
    public var enabled: Bool?

    public var id: Int64?

    public var originsShrink: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enabled != nil {
            map["Enabled"] = self.enabled!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.originsShrink != nil {
            map["Origins"] = self.originsShrink!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enabled"] as? Bool {
            self.enabled = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Origins"] as? String {
            self.originsShrink = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateOriginPoolResponseBody : Tea.TeaModel {
    public var id: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateOriginPoolResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateOriginPoolResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateOriginPoolResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateOriginProtectionRequest : Tea.TeaModel {
    public var originConverge: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.originConverge != nil {
            map["OriginConverge"] = self.originConverge!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OriginConverge"] as? String {
            self.originConverge = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateOriginProtectionResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateOriginProtectionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateOriginProtectionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateOriginProtectionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateOriginProtectionIpWhiteListRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateOriginProtectionIpWhiteListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateOriginProtectionIpWhiteListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateOriginProtectionIpWhiteListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateOriginProtectionIpWhiteListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateOriginRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var dnsRecord: String?

    public var follow302Enable: String?

    public var follow302MaxTries: String?

    public var follow302RetainArgs: String?

    public var follow302RetainHeader: String?

    public var follow302TargetHost: String?

    public var originHost: String?

    public var originHttpPort: String?

    public var originHttpsPort: String?

    public var originMtls: String?

    public var originReadTimeout: String?

    public var originScheme: String?

    public var originSni: String?

    public var originVerify: String?

    public var range: String?

    public var rangeChunkSize: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.dnsRecord != nil {
            map["DnsRecord"] = self.dnsRecord!
        }
        if self.follow302Enable != nil {
            map["Follow302Enable"] = self.follow302Enable!
        }
        if self.follow302MaxTries != nil {
            map["Follow302MaxTries"] = self.follow302MaxTries!
        }
        if self.follow302RetainArgs != nil {
            map["Follow302RetainArgs"] = self.follow302RetainArgs!
        }
        if self.follow302RetainHeader != nil {
            map["Follow302RetainHeader"] = self.follow302RetainHeader!
        }
        if self.follow302TargetHost != nil {
            map["Follow302TargetHost"] = self.follow302TargetHost!
        }
        if self.originHost != nil {
            map["OriginHost"] = self.originHost!
        }
        if self.originHttpPort != nil {
            map["OriginHttpPort"] = self.originHttpPort!
        }
        if self.originHttpsPort != nil {
            map["OriginHttpsPort"] = self.originHttpsPort!
        }
        if self.originMtls != nil {
            map["OriginMtls"] = self.originMtls!
        }
        if self.originReadTimeout != nil {
            map["OriginReadTimeout"] = self.originReadTimeout!
        }
        if self.originScheme != nil {
            map["OriginScheme"] = self.originScheme!
        }
        if self.originSni != nil {
            map["OriginSni"] = self.originSni!
        }
        if self.originVerify != nil {
            map["OriginVerify"] = self.originVerify!
        }
        if self.range != nil {
            map["Range"] = self.range!
        }
        if self.rangeChunkSize != nil {
            map["RangeChunkSize"] = self.rangeChunkSize!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["DnsRecord"] as? String {
            self.dnsRecord = value
        }
        if let value = dict["Follow302Enable"] as? String {
            self.follow302Enable = value
        }
        if let value = dict["Follow302MaxTries"] as? String {
            self.follow302MaxTries = value
        }
        if let value = dict["Follow302RetainArgs"] as? String {
            self.follow302RetainArgs = value
        }
        if let value = dict["Follow302RetainHeader"] as? String {
            self.follow302RetainHeader = value
        }
        if let value = dict["Follow302TargetHost"] as? String {
            self.follow302TargetHost = value
        }
        if let value = dict["OriginHost"] as? String {
            self.originHost = value
        }
        if let value = dict["OriginHttpPort"] as? String {
            self.originHttpPort = value
        }
        if let value = dict["OriginHttpsPort"] as? String {
            self.originHttpsPort = value
        }
        if let value = dict["OriginMtls"] as? String {
            self.originMtls = value
        }
        if let value = dict["OriginReadTimeout"] as? String {
            self.originReadTimeout = value
        }
        if let value = dict["OriginScheme"] as? String {
            self.originScheme = value
        }
        if let value = dict["OriginSni"] as? String {
            self.originSni = value
        }
        if let value = dict["OriginVerify"] as? String {
            self.originVerify = value
        }
        if let value = dict["Range"] as? String {
            self.range = value
        }
        if let value = dict["RangeChunkSize"] as? String {
            self.rangeChunkSize = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateOriginRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateOriginRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateOriginRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateOriginRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdatePageRequest : Tea.TeaModel {
    public var content: String?

    public var contentType: String?

    public var description_: String?

    public var id: Int64?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.contentType != nil {
            map["ContentType"] = self.contentType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["ContentType"] as? String {
            self.contentType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
    }
}

public class UpdatePageResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdatePageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdatePageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdatePageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRatePlanSpecRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var chargeType: String?

    public var instanceId: String?

    public var orderType: String?

    public var targetPlanCode: String?

    public var targetPlanName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.orderType != nil {
            map["OrderType"] = self.orderType!
        }
        if self.targetPlanCode != nil {
            map["TargetPlanCode"] = self.targetPlanCode!
        }
        if self.targetPlanName != nil {
            map["TargetPlanName"] = self.targetPlanName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OrderType"] as? String {
            self.orderType = value
        }
        if let value = dict["TargetPlanCode"] as? String {
            self.targetPlanCode = value
        }
        if let value = dict["TargetPlanName"] as? String {
            self.targetPlanName = value
        }
    }
}

public class UpdateRatePlanSpecResponseBody : Tea.TeaModel {
    public var instanceId: String?

    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateRatePlanSpecResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRatePlanSpecResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRatePlanSpecResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRecordRequest : Tea.TeaModel {
    public class AuthConf : Tea.TeaModel {
        public var accessKey: String?

        public var authType: String?

        public var region: String?

        public var secretKey: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessKey != nil {
                map["AccessKey"] = self.accessKey!
            }
            if self.authType != nil {
                map["AuthType"] = self.authType!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.secretKey != nil {
                map["SecretKey"] = self.secretKey!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessKey"] as? String {
                self.accessKey = value
            }
            if let value = dict["AuthType"] as? String {
                self.authType = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["SecretKey"] as? String {
                self.secretKey = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public class Data : Tea.TeaModel {
        public var algorithm: Int32?

        public var certificate: String?

        public var fingerprint: String?

        public var flag: Int32?

        public var keyTag: Int32?

        public var matchingType: Int32?

        public var port: Int32?

        public var priority: Int32?

        public var selector: Int32?

        public var tag: String?

        public var type: Int32?

        public var usage: Int32?

        public var value: String?

        public var weight: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.algorithm != nil {
                map["Algorithm"] = self.algorithm!
            }
            if self.certificate != nil {
                map["Certificate"] = self.certificate!
            }
            if self.fingerprint != nil {
                map["Fingerprint"] = self.fingerprint!
            }
            if self.flag != nil {
                map["Flag"] = self.flag!
            }
            if self.keyTag != nil {
                map["KeyTag"] = self.keyTag!
            }
            if self.matchingType != nil {
                map["MatchingType"] = self.matchingType!
            }
            if self.port != nil {
                map["Port"] = self.port!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.selector != nil {
                map["Selector"] = self.selector!
            }
            if self.tag != nil {
                map["Tag"] = self.tag!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.usage != nil {
                map["Usage"] = self.usage!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            if self.weight != nil {
                map["Weight"] = self.weight!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Algorithm"] as? Int32 {
                self.algorithm = value
            }
            if let value = dict["Certificate"] as? String {
                self.certificate = value
            }
            if let value = dict["Fingerprint"] as? String {
                self.fingerprint = value
            }
            if let value = dict["Flag"] as? Int32 {
                self.flag = value
            }
            if let value = dict["KeyTag"] as? Int32 {
                self.keyTag = value
            }
            if let value = dict["MatchingType"] as? Int32 {
                self.matchingType = value
            }
            if let value = dict["Port"] as? Int32 {
                self.port = value
            }
            if let value = dict["Priority"] as? Int32 {
                self.priority = value
            }
            if let value = dict["Selector"] as? Int32 {
                self.selector = value
            }
            if let value = dict["Tag"] as? String {
                self.tag = value
            }
            if let value = dict["Type"] as? Int32 {
                self.type = value
            }
            if let value = dict["Usage"] as? Int32 {
                self.usage = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
            if let value = dict["Weight"] as? Int32 {
                self.weight = value
            }
        }
    }
    public var authConf: UpdateRecordRequest.AuthConf?

    public var bizName: String?

    public var comment: String?

    public var data: UpdateRecordRequest.Data?

    public var hostPolicy: String?

    public var proxied: Bool?

    public var recordId: Int64?

    public var sourceType: String?

    public var ttl: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.authConf?.validate()
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authConf != nil {
            map["AuthConf"] = self.authConf?.toMap()
        }
        if self.bizName != nil {
            map["BizName"] = self.bizName!
        }
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.hostPolicy != nil {
            map["HostPolicy"] = self.hostPolicy!
        }
        if self.proxied != nil {
            map["Proxied"] = self.proxied!
        }
        if self.recordId != nil {
            map["RecordId"] = self.recordId!
        }
        if self.sourceType != nil {
            map["SourceType"] = self.sourceType!
        }
        if self.ttl != nil {
            map["Ttl"] = self.ttl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthConf"] as? [String: Any?] {
            var model = UpdateRecordRequest.AuthConf()
            model.fromMap(value)
            self.authConf = model
        }
        if let value = dict["BizName"] as? String {
            self.bizName = value
        }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = UpdateRecordRequest.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HostPolicy"] as? String {
            self.hostPolicy = value
        }
        if let value = dict["Proxied"] as? Bool {
            self.proxied = value
        }
        if let value = dict["RecordId"] as? Int64 {
            self.recordId = value
        }
        if let value = dict["SourceType"] as? String {
            self.sourceType = value
        }
        if let value = dict["Ttl"] as? Int32 {
            self.ttl = value
        }
    }
}

public class UpdateRecordShrinkRequest : Tea.TeaModel {
    public var authConfShrink: String?

    public var bizName: String?

    public var comment: String?

    public var dataShrink: String?

    public var hostPolicy: String?

    public var proxied: Bool?

    public var recordId: Int64?

    public var sourceType: String?

    public var ttl: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authConfShrink != nil {
            map["AuthConf"] = self.authConfShrink!
        }
        if self.bizName != nil {
            map["BizName"] = self.bizName!
        }
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.dataShrink != nil {
            map["Data"] = self.dataShrink!
        }
        if self.hostPolicy != nil {
            map["HostPolicy"] = self.hostPolicy!
        }
        if self.proxied != nil {
            map["Proxied"] = self.proxied!
        }
        if self.recordId != nil {
            map["RecordId"] = self.recordId!
        }
        if self.sourceType != nil {
            map["SourceType"] = self.sourceType!
        }
        if self.ttl != nil {
            map["Ttl"] = self.ttl!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthConf"] as? String {
            self.authConfShrink = value
        }
        if let value = dict["BizName"] as? String {
            self.bizName = value
        }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["Data"] as? String {
            self.dataShrink = value
        }
        if let value = dict["HostPolicy"] as? String {
            self.hostPolicy = value
        }
        if let value = dict["Proxied"] as? Bool {
            self.proxied = value
        }
        if let value = dict["RecordId"] as? Int64 {
            self.recordId = value
        }
        if let value = dict["SourceType"] as? String {
            self.sourceType = value
        }
        if let value = dict["Ttl"] as? Int32 {
            self.ttl = value
        }
    }
}

public class UpdateRecordResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateRecordResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRecordResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRecordResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRedirectRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var reserveQueryString: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var statusCode: String?

    public var targetUrl: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.reserveQueryString != nil {
            map["ReserveQueryString"] = self.reserveQueryString!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.statusCode != nil {
            map["StatusCode"] = self.statusCode!
        }
        if self.targetUrl != nil {
            map["TargetUrl"] = self.targetUrl!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["ReserveQueryString"] as? String {
            self.reserveQueryString = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["StatusCode"] as? String {
            self.statusCode = value
        }
        if let value = dict["TargetUrl"] as? String {
            self.targetUrl = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class UpdateRedirectRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateRedirectRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRedirectRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRedirectRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRewriteUrlRuleRequest : Tea.TeaModel {
    public var configId: Int64?

    public var queryString: String?

    public var rewriteQueryStringType: String?

    public var rewriteUriType: String?

    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public var uri: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.queryString != nil {
            map["QueryString"] = self.queryString!
        }
        if self.rewriteQueryStringType != nil {
            map["RewriteQueryStringType"] = self.rewriteQueryStringType!
        }
        if self.rewriteUriType != nil {
            map["RewriteUriType"] = self.rewriteUriType!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.uri != nil {
            map["Uri"] = self.uri!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["QueryString"] as? String {
            self.queryString = value
        }
        if let value = dict["RewriteQueryStringType"] as? String {
            self.rewriteQueryStringType = value
        }
        if let value = dict["RewriteUriType"] as? String {
            self.rewriteUriType = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Uri"] as? String {
            self.uri = value
        }
    }
}

public class UpdateRewriteUrlRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateRewriteUrlRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRewriteUrlRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRewriteUrlRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRoutineRouteRequest : Tea.TeaModel {
    public var bypass: String?

    public var configId: Int64?

    public var routeEnable: String?

    public var routeName: String?

    public var routineName: String?

    public var rule: String?

    public var sequence: Int32?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bypass != nil {
            map["Bypass"] = self.bypass!
        }
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.routeEnable != nil {
            map["RouteEnable"] = self.routeEnable!
        }
        if self.routeName != nil {
            map["RouteName"] = self.routeName!
        }
        if self.routineName != nil {
            map["RoutineName"] = self.routineName!
        }
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.sequence != nil {
            map["Sequence"] = self.sequence!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Bypass"] as? String {
            self.bypass = value
        }
        if let value = dict["ConfigId"] as? Int64 {
            self.configId = value
        }
        if let value = dict["RouteEnable"] as? String {
            self.routeEnable = value
        }
        if let value = dict["RouteName"] as? String {
            self.routeName = value
        }
        if let value = dict["RoutineName"] as? String {
            self.routineName = value
        }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["Sequence"] as? Int32 {
            self.sequence = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateRoutineRouteResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateRoutineRouteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRoutineRouteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRoutineRouteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateScheduledPreloadExecutionRequest : Tea.TeaModel {
    public var endTime: String?

    public var id: String?

    public var interval: Int32?

    public var sliceLen: Int32?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.sliceLen != nil {
            map["SliceLen"] = self.sliceLen!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Interval"] as? Int32 {
            self.interval = value
        }
        if let value = dict["SliceLen"] as? Int32 {
            self.sliceLen = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class UpdateScheduledPreloadExecutionResponseBody : Tea.TeaModel {
    public var aliUid: String?

    public var endTime: String?

    public var id: String?

    public var interval: Int32?

    public var jobId: String?

    public var requestId: String?

    public var sliceLen: Int32?

    public var startTime: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aliUid != nil {
            map["AliUid"] = self.aliUid!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sliceLen != nil {
            map["SliceLen"] = self.sliceLen!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AliUid"] as? String {
            self.aliUid = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Interval"] as? Int32 {
            self.interval = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SliceLen"] as? Int32 {
            self.sliceLen = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateScheduledPreloadExecutionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateScheduledPreloadExecutionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateScheduledPreloadExecutionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSeoBypassRequest : Tea.TeaModel {
    public var enable: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateSeoBypassResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateSeoBypassResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSeoBypassResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSeoBypassResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSiteAccessTypeRequest : Tea.TeaModel {
    public var accessType: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accessType != nil {
            map["AccessType"] = self.accessType!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccessType"] as? String {
            self.accessType = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateSiteAccessTypeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateSiteAccessTypeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSiteAccessTypeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSiteAccessTypeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSiteCoverageRequest : Tea.TeaModel {
    public var coverage: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coverage != nil {
            map["Coverage"] = self.coverage!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Coverage"] as? String {
            self.coverage = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateSiteCoverageResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateSiteCoverageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSiteCoverageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSiteCoverageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSiteCustomLogRequest : Tea.TeaModel {
    public var cookies: [String]?

    public var requestHeaders: [String]?

    public var responseHeaders: [String]?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cookies != nil {
            map["Cookies"] = self.cookies!
        }
        if self.requestHeaders != nil {
            map["RequestHeaders"] = self.requestHeaders!
        }
        if self.responseHeaders != nil {
            map["ResponseHeaders"] = self.responseHeaders!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Cookies"] as? [String] {
            self.cookies = value
        }
        if let value = dict["RequestHeaders"] as? [String] {
            self.requestHeaders = value
        }
        if let value = dict["ResponseHeaders"] as? [String] {
            self.responseHeaders = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateSiteCustomLogShrinkRequest : Tea.TeaModel {
    public var cookiesShrink: String?

    public var requestHeadersShrink: String?

    public var responseHeadersShrink: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cookiesShrink != nil {
            map["Cookies"] = self.cookiesShrink!
        }
        if self.requestHeadersShrink != nil {
            map["RequestHeaders"] = self.requestHeadersShrink!
        }
        if self.responseHeadersShrink != nil {
            map["ResponseHeaders"] = self.responseHeadersShrink!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Cookies"] as? String {
            self.cookiesShrink = value
        }
        if let value = dict["RequestHeaders"] as? String {
            self.requestHeadersShrink = value
        }
        if let value = dict["ResponseHeaders"] as? String {
            self.responseHeadersShrink = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateSiteCustomLogResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateSiteCustomLogResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSiteCustomLogResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSiteCustomLogResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSiteDeliveryTaskRequest : Tea.TeaModel {
    public var businessType: String?

    public var discardRate: Double?

    public var fieldName: String?

    public var siteId: Int64?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.discardRate != nil {
            map["DiscardRate"] = self.discardRate!
        }
        if self.fieldName != nil {
            map["FieldName"] = self.fieldName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["DiscardRate"] as? Double {
            self.discardRate = value
        }
        if let value = dict["FieldName"] as? String {
            self.fieldName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class UpdateSiteDeliveryTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateSiteDeliveryTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSiteDeliveryTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSiteDeliveryTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSiteDeliveryTaskStatusRequest : Tea.TeaModel {
    public var method: String?

    public var siteId: Int64?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.method != nil {
            map["Method"] = self.method!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Method"] as? String {
            self.method = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class UpdateSiteDeliveryTaskStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var status: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class UpdateSiteDeliveryTaskStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSiteDeliveryTaskStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSiteDeliveryTaskStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSiteNameExclusiveRequest : Tea.TeaModel {
    public var enable: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateSiteNameExclusiveResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateSiteNameExclusiveResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSiteNameExclusiveResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSiteNameExclusiveResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSitePauseRequest : Tea.TeaModel {
    public var paused: Bool?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.paused != nil {
            map["Paused"] = self.paused!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Paused"] as? Bool {
            self.paused = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateSitePauseResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateSitePauseResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSitePauseResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSitePauseResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateSiteVanityNSRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var vanityNSList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.vanityNSList != nil {
            map["VanityNSList"] = self.vanityNSList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["VanityNSList"] as? String {
            self.vanityNSList = value
        }
    }
}

public class UpdateSiteVanityNSResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateSiteVanityNSResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateSiteVanityNSResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateSiteVanityNSResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateTieredCacheRequest : Tea.TeaModel {
    public var cacheArchitectureMode: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cacheArchitectureMode != nil {
            map["CacheArchitectureMode"] = self.cacheArchitectureMode!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CacheArchitectureMode"] as? String {
            self.cacheArchitectureMode = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UpdateTieredCacheResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateTieredCacheResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateTieredCacheResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateTieredCacheResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateUserDeliveryTaskRequest : Tea.TeaModel {
    public var businessType: String?

    public var details: String?

    public var discardRate: Double?

    public var fieldName: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.details != nil {
            map["Details"] = self.details!
        }
        if self.discardRate != nil {
            map["DiscardRate"] = self.discardRate!
        }
        if self.fieldName != nil {
            map["FieldName"] = self.fieldName!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["Details"] as? String {
            self.details = value
        }
        if let value = dict["DiscardRate"] as? Double {
            self.discardRate = value
        }
        if let value = dict["FieldName"] as? String {
            self.fieldName = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class UpdateUserDeliveryTaskResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateUserDeliveryTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateUserDeliveryTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateUserDeliveryTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateUserDeliveryTaskStatusRequest : Tea.TeaModel {
    public var method: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.method != nil {
            map["Method"] = self.method!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Method"] as? String {
            self.method = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class UpdateUserDeliveryTaskStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var status: String?

    public var taskName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.taskName != nil {
            map["TaskName"] = self.taskName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TaskName"] as? String {
            self.taskName = value
        }
    }
}

public class UpdateUserDeliveryTaskStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateUserDeliveryTaskStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateUserDeliveryTaskStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateWafRuleRequest : Tea.TeaModel {
    public var config: WafRuleConfig?

    public var id: Int64?

    public var position: Int64?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.config?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.config != nil {
            map["Config"] = self.config?.toMap()
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.position != nil {
            map["Position"] = self.position!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Config"] as? [String: Any?] {
            var model = WafRuleConfig()
            model.fromMap(value)
            self.config = model
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Position"] as? Int64 {
            self.position = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateWafRuleShrinkRequest : Tea.TeaModel {
    public var configShrink: String?

    public var id: Int64?

    public var position: Int64?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configShrink != nil {
            map["Config"] = self.configShrink!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.position != nil {
            map["Position"] = self.position!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Config"] as? String {
            self.configShrink = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["Position"] as? Int64 {
            self.position = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateWafRuleResponseBody : Tea.TeaModel {
    public var id: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateWafRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateWafRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateWafRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateWafRulesetRequest : Tea.TeaModel {
    public var id: Int64?

    public var siteId: Int64?

    public var siteVersion: Int32?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.siteVersion != nil {
            map["SiteVersion"] = self.siteVersion!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["SiteVersion"] as? Int32 {
            self.siteVersion = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateWafRulesetResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateWafRulesetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateWafRulesetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateWafRulesetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateWaitingRoomRequest : Tea.TeaModel {
    public class HostNameAndPath : Tea.TeaModel {
        public var domain: String?

        public var path: String?

        public var subdomain: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.domain != nil {
                map["Domain"] = self.domain!
            }
            if self.path != nil {
                map["Path"] = self.path!
            }
            if self.subdomain != nil {
                map["Subdomain"] = self.subdomain!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Domain"] as? String {
                self.domain = value
            }
            if let value = dict["Path"] as? String {
                self.path = value
            }
            if let value = dict["Subdomain"] as? String {
                self.subdomain = value
            }
        }
    }
    public var cookieName: String?

    public var customPageHtml: String?

    public var description_: String?

    public var disableSessionRenewalEnable: String?

    public var enable: String?

    public var hostNameAndPath: [UpdateWaitingRoomRequest.HostNameAndPath]?

    public var jsonResponseEnable: String?

    public var language: String?

    public var name: String?

    public var newUsersPerMinute: String?

    public var queueAllEnable: String?

    public var queuingMethod: String?

    public var queuingStatusCode: String?

    public var sessionDuration: String?

    public var siteId: Int64?

    public var totalActiveUsers: String?

    public var waitingRoomId: String?

    public var waitingRoomType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cookieName != nil {
            map["CookieName"] = self.cookieName!
        }
        if self.customPageHtml != nil {
            map["CustomPageHtml"] = self.customPageHtml!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableSessionRenewalEnable != nil {
            map["DisableSessionRenewalEnable"] = self.disableSessionRenewalEnable!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.hostNameAndPath != nil {
            var tmp : [Any] = []
            for k in self.hostNameAndPath! {
                tmp.append(k.toMap())
            }
            map["HostNameAndPath"] = tmp
        }
        if self.jsonResponseEnable != nil {
            map["JsonResponseEnable"] = self.jsonResponseEnable!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.newUsersPerMinute != nil {
            map["NewUsersPerMinute"] = self.newUsersPerMinute!
        }
        if self.queueAllEnable != nil {
            map["QueueAllEnable"] = self.queueAllEnable!
        }
        if self.queuingMethod != nil {
            map["QueuingMethod"] = self.queuingMethod!
        }
        if self.queuingStatusCode != nil {
            map["QueuingStatusCode"] = self.queuingStatusCode!
        }
        if self.sessionDuration != nil {
            map["SessionDuration"] = self.sessionDuration!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.totalActiveUsers != nil {
            map["TotalActiveUsers"] = self.totalActiveUsers!
        }
        if self.waitingRoomId != nil {
            map["WaitingRoomId"] = self.waitingRoomId!
        }
        if self.waitingRoomType != nil {
            map["WaitingRoomType"] = self.waitingRoomType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CookieName"] as? String {
            self.cookieName = value
        }
        if let value = dict["CustomPageHtml"] as? String {
            self.customPageHtml = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableSessionRenewalEnable"] as? String {
            self.disableSessionRenewalEnable = value
        }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["HostNameAndPath"] as? [Any?] {
            var tmp : [UpdateWaitingRoomRequest.HostNameAndPath] = []
            for v in value {
                if v != nil {
                    var model = UpdateWaitingRoomRequest.HostNameAndPath()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.hostNameAndPath = tmp
        }
        if let value = dict["JsonResponseEnable"] as? String {
            self.jsonResponseEnable = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NewUsersPerMinute"] as? String {
            self.newUsersPerMinute = value
        }
        if let value = dict["QueueAllEnable"] as? String {
            self.queueAllEnable = value
        }
        if let value = dict["QueuingMethod"] as? String {
            self.queuingMethod = value
        }
        if let value = dict["QueuingStatusCode"] as? String {
            self.queuingStatusCode = value
        }
        if let value = dict["SessionDuration"] as? String {
            self.sessionDuration = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["TotalActiveUsers"] as? String {
            self.totalActiveUsers = value
        }
        if let value = dict["WaitingRoomId"] as? String {
            self.waitingRoomId = value
        }
        if let value = dict["WaitingRoomType"] as? String {
            self.waitingRoomType = value
        }
    }
}

public class UpdateWaitingRoomShrinkRequest : Tea.TeaModel {
    public var cookieName: String?

    public var customPageHtml: String?

    public var description_: String?

    public var disableSessionRenewalEnable: String?

    public var enable: String?

    public var hostNameAndPathShrink: String?

    public var jsonResponseEnable: String?

    public var language: String?

    public var name: String?

    public var newUsersPerMinute: String?

    public var queueAllEnable: String?

    public var queuingMethod: String?

    public var queuingStatusCode: String?

    public var sessionDuration: String?

    public var siteId: Int64?

    public var totalActiveUsers: String?

    public var waitingRoomId: String?

    public var waitingRoomType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cookieName != nil {
            map["CookieName"] = self.cookieName!
        }
        if self.customPageHtml != nil {
            map["CustomPageHtml"] = self.customPageHtml!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableSessionRenewalEnable != nil {
            map["DisableSessionRenewalEnable"] = self.disableSessionRenewalEnable!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.hostNameAndPathShrink != nil {
            map["HostNameAndPath"] = self.hostNameAndPathShrink!
        }
        if self.jsonResponseEnable != nil {
            map["JsonResponseEnable"] = self.jsonResponseEnable!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.newUsersPerMinute != nil {
            map["NewUsersPerMinute"] = self.newUsersPerMinute!
        }
        if self.queueAllEnable != nil {
            map["QueueAllEnable"] = self.queueAllEnable!
        }
        if self.queuingMethod != nil {
            map["QueuingMethod"] = self.queuingMethod!
        }
        if self.queuingStatusCode != nil {
            map["QueuingStatusCode"] = self.queuingStatusCode!
        }
        if self.sessionDuration != nil {
            map["SessionDuration"] = self.sessionDuration!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.totalActiveUsers != nil {
            map["TotalActiveUsers"] = self.totalActiveUsers!
        }
        if self.waitingRoomId != nil {
            map["WaitingRoomId"] = self.waitingRoomId!
        }
        if self.waitingRoomType != nil {
            map["WaitingRoomType"] = self.waitingRoomType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CookieName"] as? String {
            self.cookieName = value
        }
        if let value = dict["CustomPageHtml"] as? String {
            self.customPageHtml = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableSessionRenewalEnable"] as? String {
            self.disableSessionRenewalEnable = value
        }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["HostNameAndPath"] as? String {
            self.hostNameAndPathShrink = value
        }
        if let value = dict["JsonResponseEnable"] as? String {
            self.jsonResponseEnable = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NewUsersPerMinute"] as? String {
            self.newUsersPerMinute = value
        }
        if let value = dict["QueueAllEnable"] as? String {
            self.queueAllEnable = value
        }
        if let value = dict["QueuingMethod"] as? String {
            self.queuingMethod = value
        }
        if let value = dict["QueuingStatusCode"] as? String {
            self.queuingStatusCode = value
        }
        if let value = dict["SessionDuration"] as? String {
            self.sessionDuration = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["TotalActiveUsers"] as? String {
            self.totalActiveUsers = value
        }
        if let value = dict["WaitingRoomId"] as? String {
            self.waitingRoomId = value
        }
        if let value = dict["WaitingRoomType"] as? String {
            self.waitingRoomType = value
        }
    }
}

public class UpdateWaitingRoomResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateWaitingRoomResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateWaitingRoomResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateWaitingRoomResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateWaitingRoomEventRequest : Tea.TeaModel {
    public var customPageHtml: String?

    public var description_: String?

    public var disableSessionRenewalEnable: String?

    public var enable: String?

    public var endTime: String?

    public var jsonResponseEnable: String?

    public var language: String?

    public var name: String?

    public var newUsersPerMinute: String?

    public var preQueueEnable: String?

    public var preQueueStartTime: String?

    public var queuingMethod: String?

    public var queuingStatusCode: String?

    public var randomPreQueueEnable: String?

    public var sessionDuration: String?

    public var siteId: Int64?

    public var startTime: String?

    public var totalActiveUsers: String?

    public var waitingRoomEventId: Int64?

    public var waitingRoomType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.customPageHtml != nil {
            map["CustomPageHtml"] = self.customPageHtml!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableSessionRenewalEnable != nil {
            map["DisableSessionRenewalEnable"] = self.disableSessionRenewalEnable!
        }
        if self.enable != nil {
            map["Enable"] = self.enable!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.jsonResponseEnable != nil {
            map["JsonResponseEnable"] = self.jsonResponseEnable!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.newUsersPerMinute != nil {
            map["NewUsersPerMinute"] = self.newUsersPerMinute!
        }
        if self.preQueueEnable != nil {
            map["PreQueueEnable"] = self.preQueueEnable!
        }
        if self.preQueueStartTime != nil {
            map["PreQueueStartTime"] = self.preQueueStartTime!
        }
        if self.queuingMethod != nil {
            map["QueuingMethod"] = self.queuingMethod!
        }
        if self.queuingStatusCode != nil {
            map["QueuingStatusCode"] = self.queuingStatusCode!
        }
        if self.randomPreQueueEnable != nil {
            map["RandomPreQueueEnable"] = self.randomPreQueueEnable!
        }
        if self.sessionDuration != nil {
            map["SessionDuration"] = self.sessionDuration!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.totalActiveUsers != nil {
            map["TotalActiveUsers"] = self.totalActiveUsers!
        }
        if self.waitingRoomEventId != nil {
            map["WaitingRoomEventId"] = self.waitingRoomEventId!
        }
        if self.waitingRoomType != nil {
            map["WaitingRoomType"] = self.waitingRoomType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CustomPageHtml"] as? String {
            self.customPageHtml = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableSessionRenewalEnable"] as? String {
            self.disableSessionRenewalEnable = value
        }
        if let value = dict["Enable"] as? String {
            self.enable = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["JsonResponseEnable"] as? String {
            self.jsonResponseEnable = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NewUsersPerMinute"] as? String {
            self.newUsersPerMinute = value
        }
        if let value = dict["PreQueueEnable"] as? String {
            self.preQueueEnable = value
        }
        if let value = dict["PreQueueStartTime"] as? String {
            self.preQueueStartTime = value
        }
        if let value = dict["QueuingMethod"] as? String {
            self.queuingMethod = value
        }
        if let value = dict["QueuingStatusCode"] as? String {
            self.queuingStatusCode = value
        }
        if let value = dict["RandomPreQueueEnable"] as? String {
            self.randomPreQueueEnable = value
        }
        if let value = dict["SessionDuration"] as? String {
            self.sessionDuration = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TotalActiveUsers"] as? String {
            self.totalActiveUsers = value
        }
        if let value = dict["WaitingRoomEventId"] as? Int64 {
            self.waitingRoomEventId = value
        }
        if let value = dict["WaitingRoomType"] as? String {
            self.waitingRoomType = value
        }
    }
}

public class UpdateWaitingRoomEventResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateWaitingRoomEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateWaitingRoomEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateWaitingRoomEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateWaitingRoomRuleRequest : Tea.TeaModel {
    public var rule: String?

    public var ruleEnable: String?

    public var ruleName: String?

    public var siteId: Int64?

    public var waitingRoomRuleId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.rule != nil {
            map["Rule"] = self.rule!
        }
        if self.ruleEnable != nil {
            map["RuleEnable"] = self.ruleEnable!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.waitingRoomRuleId != nil {
            map["WaitingRoomRuleId"] = self.waitingRoomRuleId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Rule"] as? String {
            self.rule = value
        }
        if let value = dict["RuleEnable"] as? String {
            self.ruleEnable = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["WaitingRoomRuleId"] as? Int64 {
            self.waitingRoomRuleId = value
        }
    }
}

public class UpdateWaitingRoomRuleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateWaitingRoomRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateWaitingRoomRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateWaitingRoomRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadClientCaCertificateRequest : Tea.TeaModel {
    public var certificate: String?

    public var name: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificate != nil {
            map["Certificate"] = self.certificate!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Certificate"] as? String {
            self.certificate = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UploadClientCaCertificateResponseBody : Tea.TeaModel {
    public var commonName: String?

    public var fingerprintSha256: String?

    public var id: String?

    public var issuer: String?

    public var notAfter: String?

    public var notBefore: String?

    public var requestId: String?

    public var serialNumber: String?

    public var signatureAlgorithm: String?

    public var status: String?

    public var validityDays: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonName != nil {
            map["CommonName"] = self.commonName!
        }
        if self.fingerprintSha256 != nil {
            map["FingerprintSha256"] = self.fingerprintSha256!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.issuer != nil {
            map["Issuer"] = self.issuer!
        }
        if self.notAfter != nil {
            map["NotAfter"] = self.notAfter!
        }
        if self.notBefore != nil {
            map["NotBefore"] = self.notBefore!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.serialNumber != nil {
            map["SerialNumber"] = self.serialNumber!
        }
        if self.signatureAlgorithm != nil {
            map["SignatureAlgorithm"] = self.signatureAlgorithm!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.validityDays != nil {
            map["ValidityDays"] = self.validityDays!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommonName"] as? String {
            self.commonName = value
        }
        if let value = dict["FingerprintSha256"] as? String {
            self.fingerprintSha256 = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Issuer"] as? String {
            self.issuer = value
        }
        if let value = dict["NotAfter"] as? String {
            self.notAfter = value
        }
        if let value = dict["NotBefore"] as? String {
            self.notBefore = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SerialNumber"] as? String {
            self.serialNumber = value
        }
        if let value = dict["SignatureAlgorithm"] as? String {
            self.signatureAlgorithm = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["ValidityDays"] as? String {
            self.validityDays = value
        }
    }
}

public class UploadClientCaCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadClientCaCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadClientCaCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadFileRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var type: String?

    public var uploadTaskName: String?

    public var url: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.uploadTaskName != nil {
            map["UploadTaskName"] = self.uploadTaskName!
        }
        if self.url != nil {
            map["Url"] = self.url!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["UploadTaskName"] as? String {
            self.uploadTaskName = value
        }
        if let value = dict["Url"] as? String {
            self.url = value
        }
    }
}

public class UploadFileAdvanceRequest : Tea.TeaModel {
    public var siteId: Int64?

    public var type: String?

    public var uploadTaskName: String?

    public var urlObject: InputStream?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.uploadTaskName != nil {
            map["UploadTaskName"] = self.uploadTaskName!
        }
        if self.urlObject != nil {
            map["Url"] = self.urlObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["UploadTaskName"] as? String {
            self.uploadTaskName = value
        }
        if let value = dict["Url"] as? InputStream {
            self.urlObject = value
        }
    }
}

public class UploadFileResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var uploadId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.uploadId != nil {
            map["UploadId"] = self.uploadId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UploadId"] as? Int64 {
            self.uploadId = value
        }
    }
}

public class UploadFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadOriginCaCertificateRequest : Tea.TeaModel {
    public var certificate: String?

    public var name: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificate != nil {
            map["Certificate"] = self.certificate!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Certificate"] as? String {
            self.certificate = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UploadOriginCaCertificateResponseBody : Tea.TeaModel {
    public var commonName: String?

    public var fingerprintSha256: String?

    public var id: String?

    public var issuer: String?

    public var notAfter: String?

    public var notBefore: String?

    public var requestId: String?

    public var serialNumber: String?

    public var signatureAlgorithm: String?

    public var status: String?

    public var validityDays: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonName != nil {
            map["CommonName"] = self.commonName!
        }
        if self.fingerprintSha256 != nil {
            map["FingerprintSha256"] = self.fingerprintSha256!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.issuer != nil {
            map["Issuer"] = self.issuer!
        }
        if self.notAfter != nil {
            map["NotAfter"] = self.notAfter!
        }
        if self.notBefore != nil {
            map["NotBefore"] = self.notBefore!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.serialNumber != nil {
            map["SerialNumber"] = self.serialNumber!
        }
        if self.signatureAlgorithm != nil {
            map["SignatureAlgorithm"] = self.signatureAlgorithm!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.validityDays != nil {
            map["ValidityDays"] = self.validityDays!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommonName"] as? String {
            self.commonName = value
        }
        if let value = dict["FingerprintSha256"] as? String {
            self.fingerprintSha256 = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Issuer"] as? String {
            self.issuer = value
        }
        if let value = dict["NotAfter"] as? String {
            self.notAfter = value
        }
        if let value = dict["NotBefore"] as? String {
            self.notBefore = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SerialNumber"] as? String {
            self.serialNumber = value
        }
        if let value = dict["SignatureAlgorithm"] as? String {
            self.signatureAlgorithm = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["ValidityDays"] as? String {
            self.validityDays = value
        }
    }
}

public class UploadOriginCaCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadOriginCaCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadOriginCaCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadOriginClientCertificateRequest : Tea.TeaModel {
    public var certificate: String?

    public var name: String?

    public var privateKey: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificate != nil {
            map["Certificate"] = self.certificate!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.privateKey != nil {
            map["PrivateKey"] = self.privateKey!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Certificate"] as? String {
            self.certificate = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PrivateKey"] as? String {
            self.privateKey = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UploadOriginClientCertificateResponseBody : Tea.TeaModel {
    public var commonName: String?

    public var fingerprintSha256: String?

    public var id: String?

    public var issuer: String?

    public var notAfter: String?

    public var notBefore: String?

    public var requestId: String?

    public var serialNumber: String?

    public var signatureAlgorithm: String?

    public var status: String?

    public var validityDays: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonName != nil {
            map["CommonName"] = self.commonName!
        }
        if self.fingerprintSha256 != nil {
            map["FingerprintSha256"] = self.fingerprintSha256!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.issuer != nil {
            map["Issuer"] = self.issuer!
        }
        if self.notAfter != nil {
            map["NotAfter"] = self.notAfter!
        }
        if self.notBefore != nil {
            map["NotBefore"] = self.notBefore!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.serialNumber != nil {
            map["SerialNumber"] = self.serialNumber!
        }
        if self.signatureAlgorithm != nil {
            map["SignatureAlgorithm"] = self.signatureAlgorithm!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.validityDays != nil {
            map["ValidityDays"] = self.validityDays!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommonName"] as? String {
            self.commonName = value
        }
        if let value = dict["FingerprintSha256"] as? String {
            self.fingerprintSha256 = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Issuer"] as? String {
            self.issuer = value
        }
        if let value = dict["NotAfter"] as? String {
            self.notAfter = value
        }
        if let value = dict["NotBefore"] as? String {
            self.notBefore = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SerialNumber"] as? String {
            self.serialNumber = value
        }
        if let value = dict["SignatureAlgorithm"] as? String {
            self.signatureAlgorithm = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["ValidityDays"] as? String {
            self.validityDays = value
        }
    }
}

public class UploadOriginClientCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadOriginClientCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadOriginClientCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadSiteOriginClientCertificateRequest : Tea.TeaModel {
    public var certificate: String?

    public var name: String?

    public var privateKey: String?

    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificate != nil {
            map["Certificate"] = self.certificate!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.privateKey != nil {
            map["PrivateKey"] = self.privateKey!
        }
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Certificate"] as? String {
            self.certificate = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PrivateKey"] as? String {
            self.privateKey = value
        }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class UploadSiteOriginClientCertificateResponseBody : Tea.TeaModel {
    public var commonName: String?

    public var fingerprintSha256: String?

    public var id: String?

    public var issuer: String?

    public var notAfter: String?

    public var notBefore: String?

    public var requestId: String?

    public var serialNumber: String?

    public var signatureAlgorithm: String?

    public var status: String?

    public var validityDays: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.commonName != nil {
            map["CommonName"] = self.commonName!
        }
        if self.fingerprintSha256 != nil {
            map["FingerprintSha256"] = self.fingerprintSha256!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.issuer != nil {
            map["Issuer"] = self.issuer!
        }
        if self.notAfter != nil {
            map["NotAfter"] = self.notAfter!
        }
        if self.notBefore != nil {
            map["NotBefore"] = self.notBefore!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.serialNumber != nil {
            map["SerialNumber"] = self.serialNumber!
        }
        if self.signatureAlgorithm != nil {
            map["SignatureAlgorithm"] = self.signatureAlgorithm!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.validityDays != nil {
            map["ValidityDays"] = self.validityDays!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CommonName"] as? String {
            self.commonName = value
        }
        if let value = dict["FingerprintSha256"] as? String {
            self.fingerprintSha256 = value
        }
        if let value = dict["Id"] as? String {
            self.id = value
        }
        if let value = dict["Issuer"] as? String {
            self.issuer = value
        }
        if let value = dict["NotAfter"] as? String {
            self.notAfter = value
        }
        if let value = dict["NotBefore"] as? String {
            self.notBefore = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SerialNumber"] as? String {
            self.serialNumber = value
        }
        if let value = dict["SignatureAlgorithm"] as? String {
            self.signatureAlgorithm = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["ValidityDays"] as? String {
            self.validityDays = value
        }
    }
}

public class UploadSiteOriginClientCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadSiteOriginClientCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadSiteOriginClientCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class VerifySiteRequest : Tea.TeaModel {
    public var siteId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.siteId != nil {
            map["SiteId"] = self.siteId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SiteId"] as? Int64 {
            self.siteId = value
        }
    }
}

public class VerifySiteResponseBody : Tea.TeaModel {
    public var passed: Bool?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.passed != nil {
            map["Passed"] = self.passed!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Passed"] as? Bool {
            self.passed = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class VerifySiteResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: VerifySiteResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = VerifySiteResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
